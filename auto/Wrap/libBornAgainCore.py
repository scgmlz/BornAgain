# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_libBornAgainCore')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_libBornAgainCore')
    _libBornAgainCore = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libBornAgainCore', [dirname(__file__)])
        except ImportError:
            import _libBornAgainCore
            return _libBornAgainCore
        try:
            _mod = imp.load_module('_libBornAgainCore', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _libBornAgainCore = swig_import_helper()
    del swig_import_helper
else:
    import _libBornAgainCore
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        """value(SwigPyIterator self) -> PyObject *"""
        return _libBornAgainCore.SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _libBornAgainCore.SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _libBornAgainCore.SwigPyIterator_decr(self, n)


    def distance(self, x):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _libBornAgainCore.SwigPyIterator_distance(self, x)


    def equal(self, x):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _libBornAgainCore.SwigPyIterator_equal(self, x)


    def copy(self):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _libBornAgainCore.SwigPyIterator_copy(self)


    def next(self):
        """next(SwigPyIterator self) -> PyObject *"""
        return _libBornAgainCore.SwigPyIterator_next(self)


    def __next__(self):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _libBornAgainCore.SwigPyIterator___next__(self)


    def previous(self):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _libBornAgainCore.SwigPyIterator_previous(self)


    def advance(self, n):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _libBornAgainCore.SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _libBornAgainCore.SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _libBornAgainCore.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _libBornAgainCore.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _libBornAgainCore.SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _libBornAgainCore.SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _libBornAgainCore.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _libBornAgainCore.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _libBornAgainCore.SHARED_PTR_DISOWN

import warnings
def deprecated(message):
  def deprecated_decorator(func):
      def deprecated_func(*args, **kwargs):
          warnings.simplefilter('always', DeprecationWarning)  # turn off filter
          warnings.warn("{} is a deprecated function. {}".format(func.__name__, message),
                        category=DeprecationWarning,
                        stacklevel=2)
          warnings.simplefilter('default', DeprecationWarning)  # reset filter
          return func(*args, **kwargs)
      return deprecated_func
  return deprecated_decorator


class ParameterPoolIterator(object):

    def __init__(self, pool):
        self.pool = pool
        self.index = -1

    def __iter__(self):
        return self

    def next(self):
        self.index += 1
        if self.index < self.pool.size():
            return self.pool[self.index]
        else:
            raise StopIteration

    def __next__(self):
        return self.next()

class vdouble1d_t(_object):
    """Proxy of C++ std::vector<(double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vdouble1d_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vdouble1d_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vdouble1d_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vdouble1d_t_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vdouble1d_t self) -> bool"""
        return _libBornAgainCore.vdouble1d_t___nonzero__(self)


    def __bool__(self):
        """__bool__(vdouble1d_t self) -> bool"""
        return _libBornAgainCore.vdouble1d_t___bool__(self)


    def __len__(self):
        """__len__(vdouble1d_t self) -> std::vector< double >::size_type"""
        return _libBornAgainCore.vdouble1d_t___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(vdouble1d_t self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> vdouble1d_t"""
        return _libBornAgainCore.vdouble1d_t___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vdouble1d_t self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        __setslice__(vdouble1d_t self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, vdouble1d_t v)
        """
        return _libBornAgainCore.vdouble1d_t___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vdouble1d_t self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _libBornAgainCore.vdouble1d_t___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vdouble1d_t self, std::vector< double >::difference_type i)
        __delitem__(vdouble1d_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vdouble1d_t___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vdouble1d_t self, PySliceObject * slice) -> vdouble1d_t
        __getitem__(vdouble1d_t self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _libBornAgainCore.vdouble1d_t___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vdouble1d_t self, PySliceObject * slice, vdouble1d_t v)
        __setitem__(vdouble1d_t self, PySliceObject * slice)
        __setitem__(vdouble1d_t self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _libBornAgainCore.vdouble1d_t___setitem__(self, *args)


    def pop(self):
        """pop(vdouble1d_t self) -> std::vector< double >::value_type"""
        return _libBornAgainCore.vdouble1d_t_pop(self)


    def append(self, x):
        """append(vdouble1d_t self, std::vector< double >::value_type const & x)"""
        return _libBornAgainCore.vdouble1d_t_append(self, x)


    def empty(self):
        """empty(vdouble1d_t self) -> bool"""
        return _libBornAgainCore.vdouble1d_t_empty(self)


    def size(self):
        """size(vdouble1d_t self) -> std::vector< double >::size_type"""
        return _libBornAgainCore.vdouble1d_t_size(self)


    def swap(self, v):
        """
        swap(vdouble1d_t self, vdouble1d_t v)

        void swap(OutputDataIterator< TValue, TContainer > &left, OutputDataIterator< TValue, TContainer > &right)

        make Swappable 

        """
        return _libBornAgainCore.vdouble1d_t_swap(self, v)


    def begin(self):
        """begin(vdouble1d_t self) -> std::vector< double >::iterator"""
        return _libBornAgainCore.vdouble1d_t_begin(self)


    def end(self):
        """end(vdouble1d_t self) -> std::vector< double >::iterator"""
        return _libBornAgainCore.vdouble1d_t_end(self)


    def rbegin(self):
        """rbegin(vdouble1d_t self) -> std::vector< double >::reverse_iterator"""
        return _libBornAgainCore.vdouble1d_t_rbegin(self)


    def rend(self):
        """rend(vdouble1d_t self) -> std::vector< double >::reverse_iterator"""
        return _libBornAgainCore.vdouble1d_t_rend(self)


    def clear(self):
        """clear(vdouble1d_t self)"""
        return _libBornAgainCore.vdouble1d_t_clear(self)


    def get_allocator(self):
        """get_allocator(vdouble1d_t self) -> std::vector< double >::allocator_type"""
        return _libBornAgainCore.vdouble1d_t_get_allocator(self)


    def pop_back(self):
        """pop_back(vdouble1d_t self)"""
        return _libBornAgainCore.vdouble1d_t_pop_back(self)


    def erase(self, *args):
        """
        erase(vdouble1d_t self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(vdouble1d_t self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _libBornAgainCore.vdouble1d_t_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(double)> self) -> vdouble1d_t
        __init__(std::vector<(double)> self, vdouble1d_t arg2) -> vdouble1d_t
        __init__(std::vector<(double)> self, std::vector< double >::size_type size) -> vdouble1d_t
        __init__(std::vector<(double)> self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> vdouble1d_t
        """
        this = _libBornAgainCore.new_vdouble1d_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(vdouble1d_t self, std::vector< double >::value_type const & x)"""
        return _libBornAgainCore.vdouble1d_t_push_back(self, x)


    def front(self):
        """front(vdouble1d_t self) -> std::vector< double >::value_type const &"""
        return _libBornAgainCore.vdouble1d_t_front(self)


    def back(self):
        """back(vdouble1d_t self) -> std::vector< double >::value_type const &"""
        return _libBornAgainCore.vdouble1d_t_back(self)


    def assign(self, n, x):
        """assign(vdouble1d_t self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _libBornAgainCore.vdouble1d_t_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vdouble1d_t self, std::vector< double >::size_type new_size)
        resize(vdouble1d_t self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _libBornAgainCore.vdouble1d_t_resize(self, *args)


    def insert(self, *args):
        """
        insert(vdouble1d_t self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(vdouble1d_t self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _libBornAgainCore.vdouble1d_t_insert(self, *args)


    def reserve(self, n):
        """reserve(vdouble1d_t self, std::vector< double >::size_type n)"""
        return _libBornAgainCore.vdouble1d_t_reserve(self, n)


    def capacity(self):
        """capacity(vdouble1d_t self) -> std::vector< double >::size_type"""
        return _libBornAgainCore.vdouble1d_t_capacity(self)

    __swig_destroy__ = _libBornAgainCore.delete_vdouble1d_t
    __del__ = lambda self: None
vdouble1d_t_swigregister = _libBornAgainCore.vdouble1d_t_swigregister
vdouble1d_t_swigregister(vdouble1d_t)

class vdouble2d_t(_object):
    """Proxy of C++ std::vector<(std::vector<(double)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vdouble2d_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vdouble2d_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vdouble2d_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vdouble2d_t_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vdouble2d_t self) -> bool"""
        return _libBornAgainCore.vdouble2d_t___nonzero__(self)


    def __bool__(self):
        """__bool__(vdouble2d_t self) -> bool"""
        return _libBornAgainCore.vdouble2d_t___bool__(self)


    def __len__(self):
        """__len__(vdouble2d_t self) -> std::vector< std::vector< double > >::size_type"""
        return _libBornAgainCore.vdouble2d_t___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j) -> vdouble2d_t"""
        return _libBornAgainCore.vdouble2d_t___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)
        __setslice__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j, vdouble2d_t v)
        """
        return _libBornAgainCore.vdouble2d_t___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)"""
        return _libBornAgainCore.vdouble2d_t___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i)
        __delitem__(vdouble2d_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vdouble2d_t___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vdouble2d_t self, PySliceObject * slice) -> vdouble2d_t
        __getitem__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i) -> vdouble1d_t
        """
        return _libBornAgainCore.vdouble2d_t___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vdouble2d_t self, PySliceObject * slice, vdouble2d_t v)
        __setitem__(vdouble2d_t self, PySliceObject * slice)
        __setitem__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i, vdouble1d_t x)
        """
        return _libBornAgainCore.vdouble2d_t___setitem__(self, *args)


    def pop(self):
        """pop(vdouble2d_t self) -> vdouble1d_t"""
        return _libBornAgainCore.vdouble2d_t_pop(self)


    def append(self, x):
        """append(vdouble2d_t self, vdouble1d_t x)"""
        return _libBornAgainCore.vdouble2d_t_append(self, x)


    def empty(self):
        """empty(vdouble2d_t self) -> bool"""
        return _libBornAgainCore.vdouble2d_t_empty(self)


    def size(self):
        """size(vdouble2d_t self) -> std::vector< std::vector< double > >::size_type"""
        return _libBornAgainCore.vdouble2d_t_size(self)


    def swap(self, v):
        """
        swap(vdouble2d_t self, vdouble2d_t v)

        void swap(OutputDataIterator< TValue, TContainer > &left, OutputDataIterator< TValue, TContainer > &right)

        make Swappable 

        """
        return _libBornAgainCore.vdouble2d_t_swap(self, v)


    def begin(self):
        """begin(vdouble2d_t self) -> std::vector< std::vector< double > >::iterator"""
        return _libBornAgainCore.vdouble2d_t_begin(self)


    def end(self):
        """end(vdouble2d_t self) -> std::vector< std::vector< double > >::iterator"""
        return _libBornAgainCore.vdouble2d_t_end(self)


    def rbegin(self):
        """rbegin(vdouble2d_t self) -> std::vector< std::vector< double > >::reverse_iterator"""
        return _libBornAgainCore.vdouble2d_t_rbegin(self)


    def rend(self):
        """rend(vdouble2d_t self) -> std::vector< std::vector< double > >::reverse_iterator"""
        return _libBornAgainCore.vdouble2d_t_rend(self)


    def clear(self):
        """clear(vdouble2d_t self)"""
        return _libBornAgainCore.vdouble2d_t_clear(self)


    def get_allocator(self):
        """get_allocator(vdouble2d_t self) -> std::vector< std::vector< double > >::allocator_type"""
        return _libBornAgainCore.vdouble2d_t_get_allocator(self)


    def pop_back(self):
        """pop_back(vdouble2d_t self)"""
        return _libBornAgainCore.vdouble2d_t_pop_back(self)


    def erase(self, *args):
        """
        erase(vdouble2d_t self, std::vector< std::vector< double > >::iterator pos) -> std::vector< std::vector< double > >::iterator
        erase(vdouble2d_t self, std::vector< std::vector< double > >::iterator first, std::vector< std::vector< double > >::iterator last) -> std::vector< std::vector< double > >::iterator
        """
        return _libBornAgainCore.vdouble2d_t_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::vector<(double)>)> self) -> vdouble2d_t
        __init__(std::vector<(std::vector<(double)>)> self, vdouble2d_t arg2) -> vdouble2d_t
        __init__(std::vector<(std::vector<(double)>)> self, std::vector< std::vector< double > >::size_type size) -> vdouble2d_t
        __init__(std::vector<(std::vector<(double)>)> self, std::vector< std::vector< double > >::size_type size, vdouble1d_t value) -> vdouble2d_t
        """
        this = _libBornAgainCore.new_vdouble2d_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(vdouble2d_t self, vdouble1d_t x)"""
        return _libBornAgainCore.vdouble2d_t_push_back(self, x)


    def front(self):
        """front(vdouble2d_t self) -> vdouble1d_t"""
        return _libBornAgainCore.vdouble2d_t_front(self)


    def back(self):
        """back(vdouble2d_t self) -> vdouble1d_t"""
        return _libBornAgainCore.vdouble2d_t_back(self)


    def assign(self, n, x):
        """assign(vdouble2d_t self, std::vector< std::vector< double > >::size_type n, vdouble1d_t x)"""
        return _libBornAgainCore.vdouble2d_t_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vdouble2d_t self, std::vector< std::vector< double > >::size_type new_size)
        resize(vdouble2d_t self, std::vector< std::vector< double > >::size_type new_size, vdouble1d_t x)
        """
        return _libBornAgainCore.vdouble2d_t_resize(self, *args)


    def insert(self, *args):
        """
        insert(vdouble2d_t self, std::vector< std::vector< double > >::iterator pos, vdouble1d_t x) -> std::vector< std::vector< double > >::iterator
        insert(vdouble2d_t self, std::vector< std::vector< double > >::iterator pos, std::vector< std::vector< double > >::size_type n, vdouble1d_t x)
        """
        return _libBornAgainCore.vdouble2d_t_insert(self, *args)


    def reserve(self, n):
        """reserve(vdouble2d_t self, std::vector< std::vector< double > >::size_type n)"""
        return _libBornAgainCore.vdouble2d_t_reserve(self, n)


    def capacity(self):
        """capacity(vdouble2d_t self) -> std::vector< std::vector< double > >::size_type"""
        return _libBornAgainCore.vdouble2d_t_capacity(self)

    __swig_destroy__ = _libBornAgainCore.delete_vdouble2d_t
    __del__ = lambda self: None
vdouble2d_t_swigregister = _libBornAgainCore.vdouble2d_t_swigregister
vdouble2d_t_swigregister(vdouble2d_t)

class vector_integer_t(_object):
    """Proxy of C++ std::vector<(int)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_integer_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_integer_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vector_integer_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vector_integer_t_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vector_integer_t self) -> bool"""
        return _libBornAgainCore.vector_integer_t___nonzero__(self)


    def __bool__(self):
        """__bool__(vector_integer_t self) -> bool"""
        return _libBornAgainCore.vector_integer_t___bool__(self)


    def __len__(self):
        """__len__(vector_integer_t self) -> std::vector< int >::size_type"""
        return _libBornAgainCore.vector_integer_t___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(vector_integer_t self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> vector_integer_t"""
        return _libBornAgainCore.vector_integer_t___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vector_integer_t self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        __setslice__(vector_integer_t self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, vector_integer_t v)
        """
        return _libBornAgainCore.vector_integer_t___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vector_integer_t self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _libBornAgainCore.vector_integer_t___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vector_integer_t self, std::vector< int >::difference_type i)
        __delitem__(vector_integer_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vector_integer_t___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vector_integer_t self, PySliceObject * slice) -> vector_integer_t
        __getitem__(vector_integer_t self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _libBornAgainCore.vector_integer_t___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vector_integer_t self, PySliceObject * slice, vector_integer_t v)
        __setitem__(vector_integer_t self, PySliceObject * slice)
        __setitem__(vector_integer_t self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _libBornAgainCore.vector_integer_t___setitem__(self, *args)


    def pop(self):
        """pop(vector_integer_t self) -> std::vector< int >::value_type"""
        return _libBornAgainCore.vector_integer_t_pop(self)


    def append(self, x):
        """append(vector_integer_t self, std::vector< int >::value_type const & x)"""
        return _libBornAgainCore.vector_integer_t_append(self, x)


    def empty(self):
        """empty(vector_integer_t self) -> bool"""
        return _libBornAgainCore.vector_integer_t_empty(self)


    def size(self):
        """size(vector_integer_t self) -> std::vector< int >::size_type"""
        return _libBornAgainCore.vector_integer_t_size(self)


    def swap(self, v):
        """
        swap(vector_integer_t self, vector_integer_t v)

        void swap(OutputDataIterator< TValue, TContainer > &left, OutputDataIterator< TValue, TContainer > &right)

        make Swappable 

        """
        return _libBornAgainCore.vector_integer_t_swap(self, v)


    def begin(self):
        """begin(vector_integer_t self) -> std::vector< int >::iterator"""
        return _libBornAgainCore.vector_integer_t_begin(self)


    def end(self):
        """end(vector_integer_t self) -> std::vector< int >::iterator"""
        return _libBornAgainCore.vector_integer_t_end(self)


    def rbegin(self):
        """rbegin(vector_integer_t self) -> std::vector< int >::reverse_iterator"""
        return _libBornAgainCore.vector_integer_t_rbegin(self)


    def rend(self):
        """rend(vector_integer_t self) -> std::vector< int >::reverse_iterator"""
        return _libBornAgainCore.vector_integer_t_rend(self)


    def clear(self):
        """clear(vector_integer_t self)"""
        return _libBornAgainCore.vector_integer_t_clear(self)


    def get_allocator(self):
        """get_allocator(vector_integer_t self) -> std::vector< int >::allocator_type"""
        return _libBornAgainCore.vector_integer_t_get_allocator(self)


    def pop_back(self):
        """pop_back(vector_integer_t self)"""
        return _libBornAgainCore.vector_integer_t_pop_back(self)


    def erase(self, *args):
        """
        erase(vector_integer_t self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(vector_integer_t self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _libBornAgainCore.vector_integer_t_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(int)> self) -> vector_integer_t
        __init__(std::vector<(int)> self, vector_integer_t arg2) -> vector_integer_t
        __init__(std::vector<(int)> self, std::vector< int >::size_type size) -> vector_integer_t
        __init__(std::vector<(int)> self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> vector_integer_t
        """
        this = _libBornAgainCore.new_vector_integer_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(vector_integer_t self, std::vector< int >::value_type const & x)"""
        return _libBornAgainCore.vector_integer_t_push_back(self, x)


    def front(self):
        """front(vector_integer_t self) -> std::vector< int >::value_type const &"""
        return _libBornAgainCore.vector_integer_t_front(self)


    def back(self):
        """back(vector_integer_t self) -> std::vector< int >::value_type const &"""
        return _libBornAgainCore.vector_integer_t_back(self)


    def assign(self, n, x):
        """assign(vector_integer_t self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _libBornAgainCore.vector_integer_t_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vector_integer_t self, std::vector< int >::size_type new_size)
        resize(vector_integer_t self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _libBornAgainCore.vector_integer_t_resize(self, *args)


    def insert(self, *args):
        """
        insert(vector_integer_t self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(vector_integer_t self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _libBornAgainCore.vector_integer_t_insert(self, *args)


    def reserve(self, n):
        """reserve(vector_integer_t self, std::vector< int >::size_type n)"""
        return _libBornAgainCore.vector_integer_t_reserve(self, n)


    def capacity(self):
        """capacity(vector_integer_t self) -> std::vector< int >::size_type"""
        return _libBornAgainCore.vector_integer_t_capacity(self)

    __swig_destroy__ = _libBornAgainCore.delete_vector_integer_t
    __del__ = lambda self: None
vector_integer_t_swigregister = _libBornAgainCore.vector_integer_t_swigregister
vector_integer_t_swigregister(vector_integer_t)

class vinteger2d_t(_object):
    """Proxy of C++ std::vector<(std::vector<(int)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vinteger2d_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vinteger2d_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vinteger2d_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vinteger2d_t_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vinteger2d_t self) -> bool"""
        return _libBornAgainCore.vinteger2d_t___nonzero__(self)


    def __bool__(self):
        """__bool__(vinteger2d_t self) -> bool"""
        return _libBornAgainCore.vinteger2d_t___bool__(self)


    def __len__(self):
        """__len__(vinteger2d_t self) -> std::vector< std::vector< int > >::size_type"""
        return _libBornAgainCore.vinteger2d_t___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(vinteger2d_t self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j) -> vinteger2d_t"""
        return _libBornAgainCore.vinteger2d_t___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vinteger2d_t self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j)
        __setslice__(vinteger2d_t self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j, vinteger2d_t v)
        """
        return _libBornAgainCore.vinteger2d_t___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vinteger2d_t self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j)"""
        return _libBornAgainCore.vinteger2d_t___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vinteger2d_t self, std::vector< std::vector< int > >::difference_type i)
        __delitem__(vinteger2d_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vinteger2d_t___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vinteger2d_t self, PySliceObject * slice) -> vinteger2d_t
        __getitem__(vinteger2d_t self, std::vector< std::vector< int > >::difference_type i) -> vector_integer_t
        """
        return _libBornAgainCore.vinteger2d_t___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vinteger2d_t self, PySliceObject * slice, vinteger2d_t v)
        __setitem__(vinteger2d_t self, PySliceObject * slice)
        __setitem__(vinteger2d_t self, std::vector< std::vector< int > >::difference_type i, vector_integer_t x)
        """
        return _libBornAgainCore.vinteger2d_t___setitem__(self, *args)


    def pop(self):
        """pop(vinteger2d_t self) -> vector_integer_t"""
        return _libBornAgainCore.vinteger2d_t_pop(self)


    def append(self, x):
        """append(vinteger2d_t self, vector_integer_t x)"""
        return _libBornAgainCore.vinteger2d_t_append(self, x)


    def empty(self):
        """empty(vinteger2d_t self) -> bool"""
        return _libBornAgainCore.vinteger2d_t_empty(self)


    def size(self):
        """size(vinteger2d_t self) -> std::vector< std::vector< int > >::size_type"""
        return _libBornAgainCore.vinteger2d_t_size(self)


    def swap(self, v):
        """
        swap(vinteger2d_t self, vinteger2d_t v)

        void swap(OutputDataIterator< TValue, TContainer > &left, OutputDataIterator< TValue, TContainer > &right)

        make Swappable 

        """
        return _libBornAgainCore.vinteger2d_t_swap(self, v)


    def begin(self):
        """begin(vinteger2d_t self) -> std::vector< std::vector< int > >::iterator"""
        return _libBornAgainCore.vinteger2d_t_begin(self)


    def end(self):
        """end(vinteger2d_t self) -> std::vector< std::vector< int > >::iterator"""
        return _libBornAgainCore.vinteger2d_t_end(self)


    def rbegin(self):
        """rbegin(vinteger2d_t self) -> std::vector< std::vector< int > >::reverse_iterator"""
        return _libBornAgainCore.vinteger2d_t_rbegin(self)


    def rend(self):
        """rend(vinteger2d_t self) -> std::vector< std::vector< int > >::reverse_iterator"""
        return _libBornAgainCore.vinteger2d_t_rend(self)


    def clear(self):
        """clear(vinteger2d_t self)"""
        return _libBornAgainCore.vinteger2d_t_clear(self)


    def get_allocator(self):
        """get_allocator(vinteger2d_t self) -> std::vector< std::vector< int > >::allocator_type"""
        return _libBornAgainCore.vinteger2d_t_get_allocator(self)


    def pop_back(self):
        """pop_back(vinteger2d_t self)"""
        return _libBornAgainCore.vinteger2d_t_pop_back(self)


    def erase(self, *args):
        """
        erase(vinteger2d_t self, std::vector< std::vector< int > >::iterator pos) -> std::vector< std::vector< int > >::iterator
        erase(vinteger2d_t self, std::vector< std::vector< int > >::iterator first, std::vector< std::vector< int > >::iterator last) -> std::vector< std::vector< int > >::iterator
        """
        return _libBornAgainCore.vinteger2d_t_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::vector<(int)>)> self) -> vinteger2d_t
        __init__(std::vector<(std::vector<(int)>)> self, vinteger2d_t arg2) -> vinteger2d_t
        __init__(std::vector<(std::vector<(int)>)> self, std::vector< std::vector< int > >::size_type size) -> vinteger2d_t
        __init__(std::vector<(std::vector<(int)>)> self, std::vector< std::vector< int > >::size_type size, vector_integer_t value) -> vinteger2d_t
        """
        this = _libBornAgainCore.new_vinteger2d_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(vinteger2d_t self, vector_integer_t x)"""
        return _libBornAgainCore.vinteger2d_t_push_back(self, x)


    def front(self):
        """front(vinteger2d_t self) -> vector_integer_t"""
        return _libBornAgainCore.vinteger2d_t_front(self)


    def back(self):
        """back(vinteger2d_t self) -> vector_integer_t"""
        return _libBornAgainCore.vinteger2d_t_back(self)


    def assign(self, n, x):
        """assign(vinteger2d_t self, std::vector< std::vector< int > >::size_type n, vector_integer_t x)"""
        return _libBornAgainCore.vinteger2d_t_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vinteger2d_t self, std::vector< std::vector< int > >::size_type new_size)
        resize(vinteger2d_t self, std::vector< std::vector< int > >::size_type new_size, vector_integer_t x)
        """
        return _libBornAgainCore.vinteger2d_t_resize(self, *args)


    def insert(self, *args):
        """
        insert(vinteger2d_t self, std::vector< std::vector< int > >::iterator pos, vector_integer_t x) -> std::vector< std::vector< int > >::iterator
        insert(vinteger2d_t self, std::vector< std::vector< int > >::iterator pos, std::vector< std::vector< int > >::size_type n, vector_integer_t x)
        """
        return _libBornAgainCore.vinteger2d_t_insert(self, *args)


    def reserve(self, n):
        """reserve(vinteger2d_t self, std::vector< std::vector< int > >::size_type n)"""
        return _libBornAgainCore.vinteger2d_t_reserve(self, n)


    def capacity(self):
        """capacity(vinteger2d_t self) -> std::vector< std::vector< int > >::size_type"""
        return _libBornAgainCore.vinteger2d_t_capacity(self)

    __swig_destroy__ = _libBornAgainCore.delete_vinteger2d_t
    __del__ = lambda self: None
vinteger2d_t_swigregister = _libBornAgainCore.vinteger2d_t_swigregister
vinteger2d_t_swigregister(vinteger2d_t)

class vector_longinteger_t(_object):
    """Proxy of C++ std::vector<(unsigned long)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_longinteger_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_longinteger_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vector_longinteger_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vector_longinteger_t_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vector_longinteger_t self) -> bool"""
        return _libBornAgainCore.vector_longinteger_t___nonzero__(self)


    def __bool__(self):
        """__bool__(vector_longinteger_t self) -> bool"""
        return _libBornAgainCore.vector_longinteger_t___bool__(self)


    def __len__(self):
        """__len__(vector_longinteger_t self) -> std::vector< unsigned long >::size_type"""
        return _libBornAgainCore.vector_longinteger_t___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::difference_type j) -> vector_longinteger_t"""
        return _libBornAgainCore.vector_longinteger_t___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::difference_type j)
        __setslice__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::difference_type j, vector_longinteger_t v)
        """
        return _libBornAgainCore.vector_longinteger_t___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::difference_type j)"""
        return _libBornAgainCore.vector_longinteger_t___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i)
        __delitem__(vector_longinteger_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vector_longinteger_t___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vector_longinteger_t self, PySliceObject * slice) -> vector_longinteger_t
        __getitem__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i) -> std::vector< unsigned long >::value_type const &
        """
        return _libBornAgainCore.vector_longinteger_t___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vector_longinteger_t self, PySliceObject * slice, vector_longinteger_t v)
        __setitem__(vector_longinteger_t self, PySliceObject * slice)
        __setitem__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::value_type const & x)
        """
        return _libBornAgainCore.vector_longinteger_t___setitem__(self, *args)


    def pop(self):
        """pop(vector_longinteger_t self) -> std::vector< unsigned long >::value_type"""
        return _libBornAgainCore.vector_longinteger_t_pop(self)


    def append(self, x):
        """append(vector_longinteger_t self, std::vector< unsigned long >::value_type const & x)"""
        return _libBornAgainCore.vector_longinteger_t_append(self, x)


    def empty(self):
        """empty(vector_longinteger_t self) -> bool"""
        return _libBornAgainCore.vector_longinteger_t_empty(self)


    def size(self):
        """size(vector_longinteger_t self) -> std::vector< unsigned long >::size_type"""
        return _libBornAgainCore.vector_longinteger_t_size(self)


    def swap(self, v):
        """
        swap(vector_longinteger_t self, vector_longinteger_t v)

        void swap(OutputDataIterator< TValue, TContainer > &left, OutputDataIterator< TValue, TContainer > &right)

        make Swappable 

        """
        return _libBornAgainCore.vector_longinteger_t_swap(self, v)


    def begin(self):
        """begin(vector_longinteger_t self) -> std::vector< unsigned long >::iterator"""
        return _libBornAgainCore.vector_longinteger_t_begin(self)


    def end(self):
        """end(vector_longinteger_t self) -> std::vector< unsigned long >::iterator"""
        return _libBornAgainCore.vector_longinteger_t_end(self)


    def rbegin(self):
        """rbegin(vector_longinteger_t self) -> std::vector< unsigned long >::reverse_iterator"""
        return _libBornAgainCore.vector_longinteger_t_rbegin(self)


    def rend(self):
        """rend(vector_longinteger_t self) -> std::vector< unsigned long >::reverse_iterator"""
        return _libBornAgainCore.vector_longinteger_t_rend(self)


    def clear(self):
        """clear(vector_longinteger_t self)"""
        return _libBornAgainCore.vector_longinteger_t_clear(self)


    def get_allocator(self):
        """get_allocator(vector_longinteger_t self) -> std::vector< unsigned long >::allocator_type"""
        return _libBornAgainCore.vector_longinteger_t_get_allocator(self)


    def pop_back(self):
        """pop_back(vector_longinteger_t self)"""
        return _libBornAgainCore.vector_longinteger_t_pop_back(self)


    def erase(self, *args):
        """
        erase(vector_longinteger_t self, std::vector< unsigned long >::iterator pos) -> std::vector< unsigned long >::iterator
        erase(vector_longinteger_t self, std::vector< unsigned long >::iterator first, std::vector< unsigned long >::iterator last) -> std::vector< unsigned long >::iterator
        """
        return _libBornAgainCore.vector_longinteger_t_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(unsigned long)> self) -> vector_longinteger_t
        __init__(std::vector<(unsigned long)> self, vector_longinteger_t arg2) -> vector_longinteger_t
        __init__(std::vector<(unsigned long)> self, std::vector< unsigned long >::size_type size) -> vector_longinteger_t
        __init__(std::vector<(unsigned long)> self, std::vector< unsigned long >::size_type size, std::vector< unsigned long >::value_type const & value) -> vector_longinteger_t
        """
        this = _libBornAgainCore.new_vector_longinteger_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(vector_longinteger_t self, std::vector< unsigned long >::value_type const & x)"""
        return _libBornAgainCore.vector_longinteger_t_push_back(self, x)


    def front(self):
        """front(vector_longinteger_t self) -> std::vector< unsigned long >::value_type const &"""
        return _libBornAgainCore.vector_longinteger_t_front(self)


    def back(self):
        """back(vector_longinteger_t self) -> std::vector< unsigned long >::value_type const &"""
        return _libBornAgainCore.vector_longinteger_t_back(self)


    def assign(self, n, x):
        """assign(vector_longinteger_t self, std::vector< unsigned long >::size_type n, std::vector< unsigned long >::value_type const & x)"""
        return _libBornAgainCore.vector_longinteger_t_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vector_longinteger_t self, std::vector< unsigned long >::size_type new_size)
        resize(vector_longinteger_t self, std::vector< unsigned long >::size_type new_size, std::vector< unsigned long >::value_type const & x)
        """
        return _libBornAgainCore.vector_longinteger_t_resize(self, *args)


    def insert(self, *args):
        """
        insert(vector_longinteger_t self, std::vector< unsigned long >::iterator pos, std::vector< unsigned long >::value_type const & x) -> std::vector< unsigned long >::iterator
        insert(vector_longinteger_t self, std::vector< unsigned long >::iterator pos, std::vector< unsigned long >::size_type n, std::vector< unsigned long >::value_type const & x)
        """
        return _libBornAgainCore.vector_longinteger_t_insert(self, *args)


    def reserve(self, n):
        """reserve(vector_longinteger_t self, std::vector< unsigned long >::size_type n)"""
        return _libBornAgainCore.vector_longinteger_t_reserve(self, n)


    def capacity(self):
        """capacity(vector_longinteger_t self) -> std::vector< unsigned long >::size_type"""
        return _libBornAgainCore.vector_longinteger_t_capacity(self)

    __swig_destroy__ = _libBornAgainCore.delete_vector_longinteger_t
    __del__ = lambda self: None
vector_longinteger_t_swigregister = _libBornAgainCore.vector_longinteger_t_swigregister
vector_longinteger_t_swigregister(vector_longinteger_t)

class vector_complex_t(_object):
    """Proxy of C++ std::vector<(std::complex<(double)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_complex_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_complex_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vector_complex_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vector_complex_t_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vector_complex_t self) -> bool"""
        return _libBornAgainCore.vector_complex_t___nonzero__(self)


    def __bool__(self):
        """__bool__(vector_complex_t self) -> bool"""
        return _libBornAgainCore.vector_complex_t___bool__(self)


    def __len__(self):
        """__len__(vector_complex_t self) -> std::vector< std::complex< double > >::size_type"""
        return _libBornAgainCore.vector_complex_t___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i, std::vector< std::complex< double > >::difference_type j) -> vector_complex_t"""
        return _libBornAgainCore.vector_complex_t___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i, std::vector< std::complex< double > >::difference_type j)
        __setslice__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i, std::vector< std::complex< double > >::difference_type j, vector_complex_t v)
        """
        return _libBornAgainCore.vector_complex_t___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i, std::vector< std::complex< double > >::difference_type j)"""
        return _libBornAgainCore.vector_complex_t___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i)
        __delitem__(vector_complex_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vector_complex_t___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vector_complex_t self, PySliceObject * slice) -> vector_complex_t
        __getitem__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i) -> std::vector< std::complex< double > >::value_type const &
        """
        return _libBornAgainCore.vector_complex_t___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vector_complex_t self, PySliceObject * slice, vector_complex_t v)
        __setitem__(vector_complex_t self, PySliceObject * slice)
        __setitem__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i, std::vector< std::complex< double > >::value_type const & x)
        """
        return _libBornAgainCore.vector_complex_t___setitem__(self, *args)


    def pop(self):
        """pop(vector_complex_t self) -> std::vector< std::complex< double > >::value_type"""
        return _libBornAgainCore.vector_complex_t_pop(self)


    def append(self, x):
        """append(vector_complex_t self, std::vector< std::complex< double > >::value_type const & x)"""
        return _libBornAgainCore.vector_complex_t_append(self, x)


    def empty(self):
        """empty(vector_complex_t self) -> bool"""
        return _libBornAgainCore.vector_complex_t_empty(self)


    def size(self):
        """size(vector_complex_t self) -> std::vector< std::complex< double > >::size_type"""
        return _libBornAgainCore.vector_complex_t_size(self)


    def swap(self, v):
        """
        swap(vector_complex_t self, vector_complex_t v)

        void swap(OutputDataIterator< TValue, TContainer > &left, OutputDataIterator< TValue, TContainer > &right)

        make Swappable 

        """
        return _libBornAgainCore.vector_complex_t_swap(self, v)


    def begin(self):
        """begin(vector_complex_t self) -> std::vector< std::complex< double > >::iterator"""
        return _libBornAgainCore.vector_complex_t_begin(self)


    def end(self):
        """end(vector_complex_t self) -> std::vector< std::complex< double > >::iterator"""
        return _libBornAgainCore.vector_complex_t_end(self)


    def rbegin(self):
        """rbegin(vector_complex_t self) -> std::vector< std::complex< double > >::reverse_iterator"""
        return _libBornAgainCore.vector_complex_t_rbegin(self)


    def rend(self):
        """rend(vector_complex_t self) -> std::vector< std::complex< double > >::reverse_iterator"""
        return _libBornAgainCore.vector_complex_t_rend(self)


    def clear(self):
        """clear(vector_complex_t self)"""
        return _libBornAgainCore.vector_complex_t_clear(self)


    def get_allocator(self):
        """get_allocator(vector_complex_t self) -> std::vector< std::complex< double > >::allocator_type"""
        return _libBornAgainCore.vector_complex_t_get_allocator(self)


    def pop_back(self):
        """pop_back(vector_complex_t self)"""
        return _libBornAgainCore.vector_complex_t_pop_back(self)


    def erase(self, *args):
        """
        erase(vector_complex_t self, std::vector< std::complex< double > >::iterator pos) -> std::vector< std::complex< double > >::iterator
        erase(vector_complex_t self, std::vector< std::complex< double > >::iterator first, std::vector< std::complex< double > >::iterator last) -> std::vector< std::complex< double > >::iterator
        """
        return _libBornAgainCore.vector_complex_t_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::complex<(double)>)> self) -> vector_complex_t
        __init__(std::vector<(std::complex<(double)>)> self, vector_complex_t arg2) -> vector_complex_t
        __init__(std::vector<(std::complex<(double)>)> self, std::vector< std::complex< double > >::size_type size) -> vector_complex_t
        __init__(std::vector<(std::complex<(double)>)> self, std::vector< std::complex< double > >::size_type size, std::vector< std::complex< double > >::value_type const & value) -> vector_complex_t
        """
        this = _libBornAgainCore.new_vector_complex_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(vector_complex_t self, std::vector< std::complex< double > >::value_type const & x)"""
        return _libBornAgainCore.vector_complex_t_push_back(self, x)


    def front(self):
        """front(vector_complex_t self) -> std::vector< std::complex< double > >::value_type const &"""
        return _libBornAgainCore.vector_complex_t_front(self)


    def back(self):
        """back(vector_complex_t self) -> std::vector< std::complex< double > >::value_type const &"""
        return _libBornAgainCore.vector_complex_t_back(self)


    def assign(self, n, x):
        """assign(vector_complex_t self, std::vector< std::complex< double > >::size_type n, std::vector< std::complex< double > >::value_type const & x)"""
        return _libBornAgainCore.vector_complex_t_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vector_complex_t self, std::vector< std::complex< double > >::size_type new_size)
        resize(vector_complex_t self, std::vector< std::complex< double > >::size_type new_size, std::vector< std::complex< double > >::value_type const & x)
        """
        return _libBornAgainCore.vector_complex_t_resize(self, *args)


    def insert(self, *args):
        """
        insert(vector_complex_t self, std::vector< std::complex< double > >::iterator pos, std::vector< std::complex< double > >::value_type const & x) -> std::vector< std::complex< double > >::iterator
        insert(vector_complex_t self, std::vector< std::complex< double > >::iterator pos, std::vector< std::complex< double > >::size_type n, std::vector< std::complex< double > >::value_type const & x)
        """
        return _libBornAgainCore.vector_complex_t_insert(self, *args)


    def reserve(self, n):
        """reserve(vector_complex_t self, std::vector< std::complex< double > >::size_type n)"""
        return _libBornAgainCore.vector_complex_t_reserve(self, n)


    def capacity(self):
        """capacity(vector_complex_t self) -> std::vector< std::complex< double > >::size_type"""
        return _libBornAgainCore.vector_complex_t_capacity(self)

    __swig_destroy__ = _libBornAgainCore.delete_vector_complex_t
    __del__ = lambda self: None
vector_complex_t_swigregister = _libBornAgainCore.vector_complex_t_swigregister
vector_complex_t_swigregister(vector_complex_t)

class vector_string_t(_object):
    """Proxy of C++ std::vector<(std::string)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_string_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_string_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vector_string_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vector_string_t_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vector_string_t self) -> bool"""
        return _libBornAgainCore.vector_string_t___nonzero__(self)


    def __bool__(self):
        """__bool__(vector_string_t self) -> bool"""
        return _libBornAgainCore.vector_string_t___bool__(self)


    def __len__(self):
        """__len__(vector_string_t self) -> std::vector< std::string >::size_type"""
        return _libBornAgainCore.vector_string_t___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(vector_string_t self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> vector_string_t"""
        return _libBornAgainCore.vector_string_t___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vector_string_t self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        __setslice__(vector_string_t self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, vector_string_t v)
        """
        return _libBornAgainCore.vector_string_t___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vector_string_t self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _libBornAgainCore.vector_string_t___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vector_string_t self, std::vector< std::string >::difference_type i)
        __delitem__(vector_string_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vector_string_t___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vector_string_t self, PySliceObject * slice) -> vector_string_t
        __getitem__(vector_string_t self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _libBornAgainCore.vector_string_t___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vector_string_t self, PySliceObject * slice, vector_string_t v)
        __setitem__(vector_string_t self, PySliceObject * slice)
        __setitem__(vector_string_t self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _libBornAgainCore.vector_string_t___setitem__(self, *args)


    def pop(self):
        """pop(vector_string_t self) -> std::vector< std::string >::value_type"""
        return _libBornAgainCore.vector_string_t_pop(self)


    def append(self, x):
        """append(vector_string_t self, std::vector< std::string >::value_type const & x)"""
        return _libBornAgainCore.vector_string_t_append(self, x)


    def empty(self):
        """empty(vector_string_t self) -> bool"""
        return _libBornAgainCore.vector_string_t_empty(self)


    def size(self):
        """size(vector_string_t self) -> std::vector< std::string >::size_type"""
        return _libBornAgainCore.vector_string_t_size(self)


    def swap(self, v):
        """
        swap(vector_string_t self, vector_string_t v)

        void swap(OutputDataIterator< TValue, TContainer > &left, OutputDataIterator< TValue, TContainer > &right)

        make Swappable 

        """
        return _libBornAgainCore.vector_string_t_swap(self, v)


    def begin(self):
        """begin(vector_string_t self) -> std::vector< std::string >::iterator"""
        return _libBornAgainCore.vector_string_t_begin(self)


    def end(self):
        """end(vector_string_t self) -> std::vector< std::string >::iterator"""
        return _libBornAgainCore.vector_string_t_end(self)


    def rbegin(self):
        """rbegin(vector_string_t self) -> std::vector< std::string >::reverse_iterator"""
        return _libBornAgainCore.vector_string_t_rbegin(self)


    def rend(self):
        """rend(vector_string_t self) -> std::vector< std::string >::reverse_iterator"""
        return _libBornAgainCore.vector_string_t_rend(self)


    def clear(self):
        """clear(vector_string_t self)"""
        return _libBornAgainCore.vector_string_t_clear(self)


    def get_allocator(self):
        """get_allocator(vector_string_t self) -> std::vector< std::string >::allocator_type"""
        return _libBornAgainCore.vector_string_t_get_allocator(self)


    def pop_back(self):
        """pop_back(vector_string_t self)"""
        return _libBornAgainCore.vector_string_t_pop_back(self)


    def erase(self, *args):
        """
        erase(vector_string_t self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(vector_string_t self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _libBornAgainCore.vector_string_t_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::string)> self) -> vector_string_t
        __init__(std::vector<(std::string)> self, vector_string_t arg2) -> vector_string_t
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size) -> vector_string_t
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> vector_string_t
        """
        this = _libBornAgainCore.new_vector_string_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(vector_string_t self, std::vector< std::string >::value_type const & x)"""
        return _libBornAgainCore.vector_string_t_push_back(self, x)


    def front(self):
        """front(vector_string_t self) -> std::vector< std::string >::value_type const &"""
        return _libBornAgainCore.vector_string_t_front(self)


    def back(self):
        """back(vector_string_t self) -> std::vector< std::string >::value_type const &"""
        return _libBornAgainCore.vector_string_t_back(self)


    def assign(self, n, x):
        """assign(vector_string_t self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _libBornAgainCore.vector_string_t_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vector_string_t self, std::vector< std::string >::size_type new_size)
        resize(vector_string_t self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _libBornAgainCore.vector_string_t_resize(self, *args)


    def insert(self, *args):
        """
        insert(vector_string_t self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(vector_string_t self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)
        """
        return _libBornAgainCore.vector_string_t_insert(self, *args)


    def reserve(self, n):
        """reserve(vector_string_t self, std::vector< std::string >::size_type n)"""
        return _libBornAgainCore.vector_string_t_reserve(self, n)


    def capacity(self):
        """capacity(vector_string_t self) -> std::vector< std::string >::size_type"""
        return _libBornAgainCore.vector_string_t_capacity(self)

    __swig_destroy__ = _libBornAgainCore.delete_vector_string_t
    __del__ = lambda self: None
vector_string_t_swigregister = _libBornAgainCore.vector_string_t_swigregister
vector_string_t_swigregister(vector_string_t)

import libBornAgainFit

def GetMajorVersionNumber():
    """GetMajorVersionNumber() -> int"""
    return _libBornAgainCore.GetMajorVersionNumber()

def GetMinorVersionNumber():
    """GetMinorVersionNumber() -> int"""
    return _libBornAgainCore.GetMinorVersionNumber()

def GetPatchVersionNumber():
    """GetPatchVersionNumber() -> int"""
    return _libBornAgainCore.GetPatchVersionNumber()

def GetName():
    """GetName() -> std::string"""
    return _libBornAgainCore.GetName()

def GetVersionNumber():
    """GetVersionNumber() -> std::string"""
    return _libBornAgainCore.GetVersionNumber()

def vecOfLambdaAlphaPhi(_lambda, _alpha, _phi):
    """
    vecOfLambdaAlphaPhi(double _lambda, double _alpha, double _phi) -> kvector_t

    BA_CORE_API_ BasicVector3D<double> vecOfLambdaAlphaPhi(double _lambda, double _alpha, double _phi)

    Creates a vector<double> as a wavevector with given wavelength and angles. Specifically needed for grazing-incidence scattering. 

    """
    return _libBornAgainCore.vecOfLambdaAlphaPhi(_lambda, _alpha, _phi)
class ICloneable(_object):
    """


    Interface for polymorphic classes that should not be copied, except by explicit cloning.

    Child classes of  ICloneable must provide clone().

    C++ includes: ICloneable.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICloneable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICloneable, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_ICloneable
    __del__ = lambda self: None

    def clone(self):
        """
        clone(ICloneable self) -> ICloneable

        virtual ICloneable* ICloneable::clone() const =0

        """
        return _libBornAgainCore.ICloneable_clone(self)


    def transferToCPP(self):
        """
        transferToCPP(ICloneable self)

        virtual void ICloneable::transferToCPP()

        Used for Python overriding of clone (see swig/tweaks.py) 

        """
        return self.__disown__()

ICloneable_swigregister = _libBornAgainCore.ICloneable_swigregister
ICloneable_swigregister(ICloneable)
cvar = _libBornAgainCore.cvar
major_version_number = cvar.major_version_number
minor_version_number = cvar.minor_version_number
patch_version_number = cvar.patch_version_number

class INamed(_object):
    """


    Interface for named objects.

    C++ includes: INamed.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, INamed, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, INamed, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(INamed self) -> INamed
        __init__(INamed self, std::string const & name) -> INamed

        INamed::INamed(const std::string &name)

        """
        if self.__class__ == INamed:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_INamed(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_INamed
    __del__ = lambda self: None

    def getName(self):
        """
        getName(INamed self) -> std::string

        std::string INamed::getName() const 

        """
        return _libBornAgainCore.INamed_getName(self)

    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_INamed(self)
        return weakref_proxy(self)
INamed_swigregister = _libBornAgainCore.INamed_swigregister
INamed_swigregister(INamed)

class IParameterized(INamed):
    """


    Manages a local parameter pool, and a tree of child pools.

    C++ includes: IParameterized.h

    """

    __swig_setmethods__ = {}
    for _s in [INamed]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IParameterized, name, value)
    __swig_getmethods__ = {}
    for _s in [INamed]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IParameterized, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IParameterized self, std::string const & name) -> IParameterized
        __init__(IParameterized self) -> IParameterized
        __init__(IParameterized self, IParameterized other) -> IParameterized

        IParameterized::IParameterized(const IParameterized &other)

        """
        if self.__class__ == IParameterized:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IParameterized(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_IParameterized
    __del__ = lambda self: None

    def parameterPool(self):
        """
        parameterPool(IParameterized self) -> ParameterPool

        ParameterPool* IParameterized::parameterPool() const

        Returns pointer to the parameter pool. 

        """
        return _libBornAgainCore.IParameterized_parameterPool(self)


    def createParameterTree(self):
        """
        createParameterTree(IParameterized self) -> ParameterPool

        ParameterPool * IParameterized::createParameterTree() const

        Creates new parameter pool, with all local parameters and those of its children. 

        """
        return _libBornAgainCore.IParameterized_createParameterTree(self)


    def parametersToString(self):
        """
        parametersToString(IParameterized self) -> std::string

        std::string IParameterized::parametersToString() const

        Returns multiline string representing available parameters. 

        """
        return _libBornAgainCore.IParameterized_parametersToString(self)


    def registerParameter(self, name, parpointer):
        """
        registerParameter(IParameterized self, std::string const & name, double * parpointer) -> RealParameter

        RealParameter & IParameterized::registerParameter(const std::string &name, double *parpointer)

        """
        return _libBornAgainCore.IParameterized_registerParameter(self, name, parpointer)


    def registerVector(self, *args):
        """
        registerVector(IParameterized self, std::string const & base_name, kvector_t p_vec, std::string const & units)
        registerVector(IParameterized self, std::string const & base_name, kvector_t p_vec)

        void IParameterized::registerVector(const std::string &base_name, kvector_t *p_vec, const std::string &units=BornAgain::UnitsNm)

        """
        return _libBornAgainCore.IParameterized_registerVector(self, *args)


    def setParameterValue(self, name, value):
        """
        setParameterValue(IParameterized self, std::string const & name, double value)

        void IParameterized::setParameterValue(const std::string &name, double value)

        """
        return _libBornAgainCore.IParameterized_setParameterValue(self, name, value)


    def setVectorValue(self, base_name, value):
        """
        setVectorValue(IParameterized self, std::string const & base_name, kvector_t value)

        void IParameterized::setVectorValue(const std::string &base_name, kvector_t value)

        """
        return _libBornAgainCore.IParameterized_setVectorValue(self, base_name, value)


    def parameter(self, name):
        """
        parameter(IParameterized self, std::string const & name) -> RealParameter

        RealParameter * IParameterized::parameter(const std::string &name) const

        Returns parameter with given 'name'. 

        """
        return _libBornAgainCore.IParameterized_parameter(self, name)


    def onChange(self):
        """
        onChange(IParameterized self)

        virtual void IParameterized::onChange()

        Action to be taken in inherited class when a parameter has changed. 

        """
        return _libBornAgainCore.IParameterized_onChange(self)


    def removeParameter(self, name):
        """
        removeParameter(IParameterized self, std::string const & name)

        void IParameterized::removeParameter(const std::string &name)

        """
        return _libBornAgainCore.IParameterized_removeParameter(self, name)


    def removeVector(self, base_name):
        """
        removeVector(IParameterized self, std::string const & base_name)

        void IParameterized::removeVector(const std::string &base_name)

        """
        return _libBornAgainCore.IParameterized_removeVector(self, base_name)


    def XComponentName(base_name):
        """XComponentName(std::string const & base_name) -> std::string"""
        return _libBornAgainCore.IParameterized_XComponentName(base_name)

    XComponentName = staticmethod(XComponentName)

    def YComponentName(base_name):
        """YComponentName(std::string const & base_name) -> std::string"""
        return _libBornAgainCore.IParameterized_YComponentName(base_name)

    YComponentName = staticmethod(YComponentName)

    def ZComponentName(base_name):
        """ZComponentName(std::string const & base_name) -> std::string"""
        return _libBornAgainCore.IParameterized_ZComponentName(base_name)

    ZComponentName = staticmethod(ZComponentName)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IParameterized(self)
        return weakref_proxy(self)
IParameterized_swigregister = _libBornAgainCore.IParameterized_swigregister
IParameterized_swigregister(IParameterized)

def IParameterized_XComponentName(base_name):
    """IParameterized_XComponentName(std::string const & base_name) -> std::string"""
    return _libBornAgainCore.IParameterized_XComponentName(base_name)

def IParameterized_YComponentName(base_name):
    """IParameterized_YComponentName(std::string const & base_name) -> std::string"""
    return _libBornAgainCore.IParameterized_YComponentName(base_name)

def IParameterized_ZComponentName(base_name):
    """IParameterized_ZComponentName(std::string const & base_name) -> std::string"""
    return _libBornAgainCore.IParameterized_ZComponentName(base_name)

class INode(IParameterized):
    """


    Base class for tree-like structures containing parameterized objects.

    C++ includes: INode.h

    """

    __swig_setmethods__ = {}
    for _s in [IParameterized]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, INode, name, value)
    __swig_getmethods__ = {}
    for _s in [IParameterized]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, INode, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(INode self) -> INode

        INode::INode()

        """
        if self.__class__ == INode:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_INode(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_INode
    __del__ = lambda self: None

    def accept(self, visitor):
        """
        accept(INode self, INodeVisitor visitor)

        virtual void INode::accept(INodeVisitor *visitor) const =0

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.INode_accept(self, visitor)


    def treeToString(self):
        """
        treeToString(INode self) -> std::string

        std::string INode::treeToString() const

        Returns multiline string representing tree structure below the node. 

        """
        return _libBornAgainCore.INode_treeToString(self)


    def registerChild(self, node):
        """
        registerChild(INode self, INode node)

        void INode::registerChild(INode *node)

        """
        return _libBornAgainCore.INode_registerChild(self, node)


    def getChildren(self):
        """
        getChildren(INode self) -> swig_dummy_type_const_inode_vector

        std::vector< const INode * > INode::getChildren() const

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.INode_getChildren(self)


    def setParent(self, newParent):
        """
        setParent(INode self, INode newParent)

        void INode::setParent(const INode *newParent)

        """
        return _libBornAgainCore.INode_setParent(self, newParent)


    def parent(self, *args):
        """
        parent(INode self) -> INode
        parent(INode self) -> INode

        INode * INode::parent()

        """
        return _libBornAgainCore.INode_parent(self, *args)


    def copyNumber(self, node):
        """
        copyNumber(INode self, INode node) -> int

        int INode::copyNumber(const INode *node) const

        Returns copyNumber of child, which takes into account existence of children with same name. 

        """
        return _libBornAgainCore.INode_copyNumber(self, node)


    def displayName(self):
        """
        displayName(INode self) -> std::string

        std::string INode::displayName() const

        Returns display name, composed from the name of node and it's copy number. 

        """
        return _libBornAgainCore.INode_displayName(self)


    def createParameterTree(self):
        """
        createParameterTree(INode self) -> ParameterPool

        ParameterPool * INode::createParameterTree() const

        Creates new parameter pool, with all local parameters and those of its children. 

        """
        return _libBornAgainCore.INode_createParameterTree(self)

    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_INode(self)
        return weakref_proxy(self)
INode_swigregister = _libBornAgainCore.INode_swigregister
INode_swigregister(INode)

class swig_dummy_type_inode_vector(_object):
    """Proxy of C++ std::vector<(p.INode)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_dummy_type_inode_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_dummy_type_inode_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(swig_dummy_type_inode_vector self) -> SwigPyIterator"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(swig_dummy_type_inode_vector self) -> bool"""
        return _libBornAgainCore.swig_dummy_type_inode_vector___nonzero__(self)


    def __bool__(self):
        """__bool__(swig_dummy_type_inode_vector self) -> bool"""
        return _libBornAgainCore.swig_dummy_type_inode_vector___bool__(self)


    def __len__(self):
        """__len__(swig_dummy_type_inode_vector self) -> std::vector< INode * >::size_type"""
        return _libBornAgainCore.swig_dummy_type_inode_vector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(swig_dummy_type_inode_vector self, std::vector< INode * >::difference_type i, std::vector< INode * >::difference_type j) -> swig_dummy_type_inode_vector"""
        return _libBornAgainCore.swig_dummy_type_inode_vector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(swig_dummy_type_inode_vector self, std::vector< INode * >::difference_type i, std::vector< INode * >::difference_type j)
        __setslice__(swig_dummy_type_inode_vector self, std::vector< INode * >::difference_type i, std::vector< INode * >::difference_type j, swig_dummy_type_inode_vector v)
        """
        return _libBornAgainCore.swig_dummy_type_inode_vector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(swig_dummy_type_inode_vector self, std::vector< INode * >::difference_type i, std::vector< INode * >::difference_type j)"""
        return _libBornAgainCore.swig_dummy_type_inode_vector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(swig_dummy_type_inode_vector self, std::vector< INode * >::difference_type i)
        __delitem__(swig_dummy_type_inode_vector self, PySliceObject * slice)
        """
        return _libBornAgainCore.swig_dummy_type_inode_vector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(swig_dummy_type_inode_vector self, PySliceObject * slice) -> swig_dummy_type_inode_vector
        __getitem__(swig_dummy_type_inode_vector self, std::vector< INode * >::difference_type i) -> INode
        """
        return _libBornAgainCore.swig_dummy_type_inode_vector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(swig_dummy_type_inode_vector self, PySliceObject * slice, swig_dummy_type_inode_vector v)
        __setitem__(swig_dummy_type_inode_vector self, PySliceObject * slice)
        __setitem__(swig_dummy_type_inode_vector self, std::vector< INode * >::difference_type i, INode x)
        """
        return _libBornAgainCore.swig_dummy_type_inode_vector___setitem__(self, *args)


    def pop(self):
        """pop(swig_dummy_type_inode_vector self) -> INode"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_pop(self)


    def append(self, x):
        """append(swig_dummy_type_inode_vector self, INode x)"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_append(self, x)


    def empty(self):
        """empty(swig_dummy_type_inode_vector self) -> bool"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_empty(self)


    def size(self):
        """size(swig_dummy_type_inode_vector self) -> std::vector< INode * >::size_type"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_size(self)


    def swap(self, v):
        """
        swap(swig_dummy_type_inode_vector self, swig_dummy_type_inode_vector v)

        void swap(OutputDataIterator< TValue, TContainer > &left, OutputDataIterator< TValue, TContainer > &right)

        make Swappable 

        """
        return _libBornAgainCore.swig_dummy_type_inode_vector_swap(self, v)


    def begin(self):
        """begin(swig_dummy_type_inode_vector self) -> std::vector< INode * >::iterator"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_begin(self)


    def end(self):
        """end(swig_dummy_type_inode_vector self) -> std::vector< INode * >::iterator"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_end(self)


    def rbegin(self):
        """rbegin(swig_dummy_type_inode_vector self) -> std::vector< INode * >::reverse_iterator"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_rbegin(self)


    def rend(self):
        """rend(swig_dummy_type_inode_vector self) -> std::vector< INode * >::reverse_iterator"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_rend(self)


    def clear(self):
        """clear(swig_dummy_type_inode_vector self)"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_clear(self)


    def get_allocator(self):
        """get_allocator(swig_dummy_type_inode_vector self) -> std::vector< INode * >::allocator_type"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_get_allocator(self)


    def pop_back(self):
        """pop_back(swig_dummy_type_inode_vector self)"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_pop_back(self)


    def erase(self, *args):
        """
        erase(swig_dummy_type_inode_vector self, std::vector< INode * >::iterator pos) -> std::vector< INode * >::iterator
        erase(swig_dummy_type_inode_vector self, std::vector< INode * >::iterator first, std::vector< INode * >::iterator last) -> std::vector< INode * >::iterator
        """
        return _libBornAgainCore.swig_dummy_type_inode_vector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.INode)> self) -> swig_dummy_type_inode_vector
        __init__(std::vector<(p.INode)> self, swig_dummy_type_inode_vector arg2) -> swig_dummy_type_inode_vector
        __init__(std::vector<(p.INode)> self, std::vector< INode * >::size_type size) -> swig_dummy_type_inode_vector
        __init__(std::vector<(p.INode)> self, std::vector< INode * >::size_type size, INode value) -> swig_dummy_type_inode_vector
        """
        this = _libBornAgainCore.new_swig_dummy_type_inode_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(swig_dummy_type_inode_vector self, INode x)"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_push_back(self, x)


    def front(self):
        """front(swig_dummy_type_inode_vector self) -> INode"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_front(self)


    def back(self):
        """back(swig_dummy_type_inode_vector self) -> INode"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_back(self)


    def assign(self, n, x):
        """assign(swig_dummy_type_inode_vector self, std::vector< INode * >::size_type n, INode x)"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(swig_dummy_type_inode_vector self, std::vector< INode * >::size_type new_size)
        resize(swig_dummy_type_inode_vector self, std::vector< INode * >::size_type new_size, INode x)
        """
        return _libBornAgainCore.swig_dummy_type_inode_vector_resize(self, *args)


    def insert(self, *args):
        """
        insert(swig_dummy_type_inode_vector self, std::vector< INode * >::iterator pos, INode x) -> std::vector< INode * >::iterator
        insert(swig_dummy_type_inode_vector self, std::vector< INode * >::iterator pos, std::vector< INode * >::size_type n, INode x)
        """
        return _libBornAgainCore.swig_dummy_type_inode_vector_insert(self, *args)


    def reserve(self, n):
        """reserve(swig_dummy_type_inode_vector self, std::vector< INode * >::size_type n)"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_reserve(self, n)


    def capacity(self):
        """capacity(swig_dummy_type_inode_vector self) -> std::vector< INode * >::size_type"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_capacity(self)

    __swig_destroy__ = _libBornAgainCore.delete_swig_dummy_type_inode_vector
    __del__ = lambda self: None
swig_dummy_type_inode_vector_swigregister = _libBornAgainCore.swig_dummy_type_inode_vector_swigregister
swig_dummy_type_inode_vector_swigregister(swig_dummy_type_inode_vector)

class swig_dummy_type_const_inode_vector(_object):
    """Proxy of C++ std::vector<(p.q(const).INode)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_dummy_type_const_inode_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_dummy_type_const_inode_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(swig_dummy_type_const_inode_vector self) -> SwigPyIterator"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(swig_dummy_type_const_inode_vector self) -> bool"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector___nonzero__(self)


    def __bool__(self):
        """__bool__(swig_dummy_type_const_inode_vector self) -> bool"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector___bool__(self)


    def __len__(self):
        """__len__(swig_dummy_type_const_inode_vector self) -> std::vector< INode const * >::size_type"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::difference_type i, std::vector< INode const * >::difference_type j) -> swig_dummy_type_const_inode_vector"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::difference_type i, std::vector< INode const * >::difference_type j)
        __setslice__(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::difference_type i, std::vector< INode const * >::difference_type j, swig_dummy_type_const_inode_vector v)
        """
        return _libBornAgainCore.swig_dummy_type_const_inode_vector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::difference_type i, std::vector< INode const * >::difference_type j)"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::difference_type i)
        __delitem__(swig_dummy_type_const_inode_vector self, PySliceObject * slice)
        """
        return _libBornAgainCore.swig_dummy_type_const_inode_vector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(swig_dummy_type_const_inode_vector self, PySliceObject * slice) -> swig_dummy_type_const_inode_vector
        __getitem__(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::difference_type i) -> INode
        """
        return _libBornAgainCore.swig_dummy_type_const_inode_vector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(swig_dummy_type_const_inode_vector self, PySliceObject * slice, swig_dummy_type_const_inode_vector v)
        __setitem__(swig_dummy_type_const_inode_vector self, PySliceObject * slice)
        __setitem__(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::difference_type i, INode x)
        """
        return _libBornAgainCore.swig_dummy_type_const_inode_vector___setitem__(self, *args)


    def pop(self):
        """pop(swig_dummy_type_const_inode_vector self) -> INode"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_pop(self)


    def append(self, x):
        """append(swig_dummy_type_const_inode_vector self, INode x)"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_append(self, x)


    def empty(self):
        """empty(swig_dummy_type_const_inode_vector self) -> bool"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_empty(self)


    def size(self):
        """size(swig_dummy_type_const_inode_vector self) -> std::vector< INode const * >::size_type"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_size(self)


    def swap(self, v):
        """
        swap(swig_dummy_type_const_inode_vector self, swig_dummy_type_const_inode_vector v)

        void swap(OutputDataIterator< TValue, TContainer > &left, OutputDataIterator< TValue, TContainer > &right)

        make Swappable 

        """
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_swap(self, v)


    def begin(self):
        """begin(swig_dummy_type_const_inode_vector self) -> std::vector< INode const * >::iterator"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_begin(self)


    def end(self):
        """end(swig_dummy_type_const_inode_vector self) -> std::vector< INode const * >::iterator"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_end(self)


    def rbegin(self):
        """rbegin(swig_dummy_type_const_inode_vector self) -> std::vector< INode const * >::reverse_iterator"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_rbegin(self)


    def rend(self):
        """rend(swig_dummy_type_const_inode_vector self) -> std::vector< INode const * >::reverse_iterator"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_rend(self)


    def clear(self):
        """clear(swig_dummy_type_const_inode_vector self)"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_clear(self)


    def get_allocator(self):
        """get_allocator(swig_dummy_type_const_inode_vector self) -> std::vector< INode const * >::allocator_type"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_get_allocator(self)


    def pop_back(self):
        """pop_back(swig_dummy_type_const_inode_vector self)"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_pop_back(self)


    def erase(self, *args):
        """
        erase(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::iterator pos) -> std::vector< INode const * >::iterator
        erase(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::iterator first, std::vector< INode const * >::iterator last) -> std::vector< INode const * >::iterator
        """
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.q(const).INode)> self) -> swig_dummy_type_const_inode_vector
        __init__(std::vector<(p.q(const).INode)> self, swig_dummy_type_const_inode_vector arg2) -> swig_dummy_type_const_inode_vector
        __init__(std::vector<(p.q(const).INode)> self, std::vector< INode const * >::size_type size) -> swig_dummy_type_const_inode_vector
        __init__(std::vector<(p.q(const).INode)> self, std::vector< INode const * >::size_type size, INode value) -> swig_dummy_type_const_inode_vector
        """
        this = _libBornAgainCore.new_swig_dummy_type_const_inode_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(swig_dummy_type_const_inode_vector self, INode x)"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_push_back(self, x)


    def front(self):
        """front(swig_dummy_type_const_inode_vector self) -> INode"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_front(self)


    def back(self):
        """back(swig_dummy_type_const_inode_vector self) -> INode"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_back(self)


    def assign(self, n, x):
        """assign(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::size_type n, INode x)"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::size_type new_size)
        resize(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::size_type new_size, INode x)
        """
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_resize(self, *args)


    def insert(self, *args):
        """
        insert(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::iterator pos, INode x) -> std::vector< INode const * >::iterator
        insert(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::iterator pos, std::vector< INode const * >::size_type n, INode x)
        """
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_insert(self, *args)


    def reserve(self, n):
        """reserve(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::size_type n)"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_reserve(self, n)


    def capacity(self):
        """capacity(swig_dummy_type_const_inode_vector self) -> std::vector< INode const * >::size_type"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_capacity(self)

    __swig_destroy__ = _libBornAgainCore.delete_swig_dummy_type_const_inode_vector
    __del__ = lambda self: None
swig_dummy_type_const_inode_vector_swigregister = _libBornAgainCore.swig_dummy_type_const_inode_vector_swigregister
swig_dummy_type_const_inode_vector_swigregister(swig_dummy_type_const_inode_vector)

class swig_dummy_type_axisinfo_vector(_object):
    """Proxy of C++ std::vector<(AxisInfo)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_dummy_type_axisinfo_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_dummy_type_axisinfo_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(swig_dummy_type_axisinfo_vector self) -> SwigPyIterator"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(swig_dummy_type_axisinfo_vector self) -> bool"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector___nonzero__(self)


    def __bool__(self):
        """__bool__(swig_dummy_type_axisinfo_vector self) -> bool"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector___bool__(self)


    def __len__(self):
        """__len__(swig_dummy_type_axisinfo_vector self) -> std::vector< AxisInfo >::size_type"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::difference_type i, std::vector< AxisInfo >::difference_type j) -> swig_dummy_type_axisinfo_vector"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::difference_type i, std::vector< AxisInfo >::difference_type j)
        __setslice__(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::difference_type i, std::vector< AxisInfo >::difference_type j, swig_dummy_type_axisinfo_vector v)
        """
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::difference_type i, std::vector< AxisInfo >::difference_type j)"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::difference_type i)
        __delitem__(swig_dummy_type_axisinfo_vector self, PySliceObject * slice)
        """
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(swig_dummy_type_axisinfo_vector self, PySliceObject * slice) -> swig_dummy_type_axisinfo_vector
        __getitem__(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::difference_type i) -> AxisInfo
        """
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(swig_dummy_type_axisinfo_vector self, PySliceObject * slice, swig_dummy_type_axisinfo_vector v)
        __setitem__(swig_dummy_type_axisinfo_vector self, PySliceObject * slice)
        __setitem__(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::difference_type i, AxisInfo x)
        """
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector___setitem__(self, *args)


    def pop(self):
        """pop(swig_dummy_type_axisinfo_vector self) -> AxisInfo"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_pop(self)


    def append(self, x):
        """append(swig_dummy_type_axisinfo_vector self, AxisInfo x)"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_append(self, x)


    def empty(self):
        """empty(swig_dummy_type_axisinfo_vector self) -> bool"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_empty(self)


    def size(self):
        """size(swig_dummy_type_axisinfo_vector self) -> std::vector< AxisInfo >::size_type"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_size(self)


    def swap(self, v):
        """
        swap(swig_dummy_type_axisinfo_vector self, swig_dummy_type_axisinfo_vector v)

        void swap(OutputDataIterator< TValue, TContainer > &left, OutputDataIterator< TValue, TContainer > &right)

        make Swappable 

        """
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_swap(self, v)


    def begin(self):
        """begin(swig_dummy_type_axisinfo_vector self) -> std::vector< AxisInfo >::iterator"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_begin(self)


    def end(self):
        """end(swig_dummy_type_axisinfo_vector self) -> std::vector< AxisInfo >::iterator"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_end(self)


    def rbegin(self):
        """rbegin(swig_dummy_type_axisinfo_vector self) -> std::vector< AxisInfo >::reverse_iterator"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_rbegin(self)


    def rend(self):
        """rend(swig_dummy_type_axisinfo_vector self) -> std::vector< AxisInfo >::reverse_iterator"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_rend(self)


    def clear(self):
        """clear(swig_dummy_type_axisinfo_vector self)"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_clear(self)


    def get_allocator(self):
        """get_allocator(swig_dummy_type_axisinfo_vector self) -> std::vector< AxisInfo >::allocator_type"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_get_allocator(self)


    def pop_back(self):
        """pop_back(swig_dummy_type_axisinfo_vector self)"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_pop_back(self)


    def erase(self, *args):
        """
        erase(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::iterator pos) -> std::vector< AxisInfo >::iterator
        erase(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::iterator first, std::vector< AxisInfo >::iterator last) -> std::vector< AxisInfo >::iterator
        """
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(AxisInfo)> self) -> swig_dummy_type_axisinfo_vector
        __init__(std::vector<(AxisInfo)> self, swig_dummy_type_axisinfo_vector arg2) -> swig_dummy_type_axisinfo_vector
        __init__(std::vector<(AxisInfo)> self, std::vector< AxisInfo >::size_type size) -> swig_dummy_type_axisinfo_vector
        __init__(std::vector<(AxisInfo)> self, std::vector< AxisInfo >::size_type size, AxisInfo value) -> swig_dummy_type_axisinfo_vector
        """
        this = _libBornAgainCore.new_swig_dummy_type_axisinfo_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(swig_dummy_type_axisinfo_vector self, AxisInfo x)"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_push_back(self, x)


    def front(self):
        """front(swig_dummy_type_axisinfo_vector self) -> AxisInfo"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_front(self)


    def back(self):
        """back(swig_dummy_type_axisinfo_vector self) -> AxisInfo"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_back(self)


    def assign(self, n, x):
        """assign(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::size_type n, AxisInfo x)"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::size_type new_size)
        resize(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::size_type new_size, AxisInfo x)
        """
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_resize(self, *args)


    def insert(self, *args):
        """
        insert(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::iterator pos, AxisInfo x) -> std::vector< AxisInfo >::iterator
        insert(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::iterator pos, std::vector< AxisInfo >::size_type n, AxisInfo x)
        """
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_insert(self, *args)


    def reserve(self, n):
        """reserve(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::size_type n)"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_reserve(self, n)


    def capacity(self):
        """capacity(swig_dummy_type_axisinfo_vector self) -> std::vector< AxisInfo >::size_type"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_capacity(self)

    __swig_destroy__ = _libBornAgainCore.delete_swig_dummy_type_axisinfo_vector
    __del__ = lambda self: None
swig_dummy_type_axisinfo_vector_swigregister = _libBornAgainCore.swig_dummy_type_axisinfo_vector_swigregister
swig_dummy_type_axisinfo_vector_swigregister(swig_dummy_type_axisinfo_vector)

class kvector_t(_object):
    """


    Forked from CLHEP/Geometry by E. Chernyaev Evgueni.Tcherniaev@cern.ch, then reworked beyond recongnition. Removed split of point and vector semantics. Transforms are relegated to a separate class  Transform3D. Three-dimensional vector template, for use with integer, double, or complex components.

    C++ includes: BasicVector3D.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, kvector_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, kvector_t, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BasicVector3D<(double)> self) -> kvector_t
        __init__(BasicVector3D<(double)> self, double const x1, double const y1, double const z1) -> kvector_t

        BasicVector3D< T >::BasicVector3D(const T x1, const T y1, const T z1)

        Constructor from cartesian components. 

        """
        this = _libBornAgainCore.new_kvector_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def x(self):
        """
        x(kvector_t self) -> double

        T BasicVector3D< T >::x() const

        Returns x-component in cartesian coordinate system. 

        """
        return _libBornAgainCore.kvector_t_x(self)


    def y(self):
        """
        y(kvector_t self) -> double

        T BasicVector3D< T >::y() const

        Returns y-component in cartesian coordinate system. 

        """
        return _libBornAgainCore.kvector_t_y(self)


    def z(self):
        """
        z(kvector_t self) -> double

        T BasicVector3D< T >::z() const

        Returns z-component in cartesian coordinate system. 

        """
        return _libBornAgainCore.kvector_t_z(self)


    def setX(self, a):
        """
        setX(kvector_t self, double const & a)

        void BasicVector3D< T >::setX(const T &a)

        Sets x-component in cartesian coordinate system. 

        """
        return _libBornAgainCore.kvector_t_setX(self, a)


    def setY(self, a):
        """
        setY(kvector_t self, double const & a)

        void BasicVector3D< T >::setY(const T &a)

        Sets y-component in cartesian coordinate system. 

        """
        return _libBornAgainCore.kvector_t_setY(self, a)


    def setZ(self, a):
        """
        setZ(kvector_t self, double const & a)

        void BasicVector3D< T >::setZ(const T &a)

        Sets z-component in cartesian coordinate system. 

        """
        return _libBornAgainCore.kvector_t_setZ(self, a)


    def __iadd__(self, v):
        """__iadd__(kvector_t self, kvector_t v) -> kvector_t"""
        return _libBornAgainCore.kvector_t___iadd__(self, v)


    def __isub__(self, v):
        """__isub__(kvector_t self, kvector_t v) -> kvector_t"""
        return _libBornAgainCore.kvector_t___isub__(self, v)


    def conj(self):
        """
        conj(kvector_t self) -> kvector_t

        BasicVector3D< complex_t > BasicVector3D< complex_t >::conj() const

        """
        return _libBornAgainCore.kvector_t_conj(self)


    def mag2(self):
        """
        mag2(kvector_t self) -> double

        double BasicVector3D< T >::mag2() const

        Returns squared magnitude squared of the vector. 

        """
        return _libBornAgainCore.kvector_t_mag2(self)


    def mag(self):
        """
        mag(kvector_t self) -> double

        double BasicVector3D< T >::mag() const

        Returns magnitude of the vector. 

        """
        return _libBornAgainCore.kvector_t_mag(self)


    def magxy2(self):
        """
        magxy2(kvector_t self) -> double

        double BasicVector3D< T >::magxy2() const

        Returns squared distance from z axis. 

        """
        return _libBornAgainCore.kvector_t_magxy2(self)


    def magxy(self):
        """
        magxy(kvector_t self) -> double

        double BasicVector3D< T >::magxy() const

        Returns distance from z axis. 

        """
        return _libBornAgainCore.kvector_t_magxy(self)


    def phi(self):
        """
        phi(kvector_t self) -> double

        double BasicVector3D< T >::phi() const

        Returns azimuth angle. 

        """
        return _libBornAgainCore.kvector_t_phi(self)


    def theta(self):
        """
        theta(kvector_t self) -> double

        double BasicVector3D< T >::theta() const

        Returns polar angle. 

        """
        return _libBornAgainCore.kvector_t_theta(self)


    def cosTheta(self):
        """
        cosTheta(kvector_t self) -> double

        double BasicVector3D< T >::cosTheta() const

        Returns cosine of polar angle. 

        """
        return _libBornAgainCore.kvector_t_cosTheta(self)


    def sin2Theta(self):
        """
        sin2Theta(kvector_t self) -> double

        double BasicVector3D< T >::sin2Theta() const

        Returns squared sine of polar angle. 

        """
        return _libBornAgainCore.kvector_t_sin2Theta(self)


    def unit(self):
        """
        unit(kvector_t self) -> kvector_t

        BasicVector3D< complex_t > BasicVector3D< complex_t >::unit() const

        """
        return _libBornAgainCore.kvector_t_unit(self)


    def complex(self):
        """
        complex(kvector_t self) -> cvector_t

        BasicVector3D<std::complex<double> > BasicVector3D< T >::complex() const

        Returns this, trivially converted to complex type. 

        """
        return _libBornAgainCore.kvector_t_complex(self)


    def real(self):
        """
        real(kvector_t self) -> kvector_t

        BasicVector3D< double > BasicVector3D< complex_t >::real() const

        """
        return _libBornAgainCore.kvector_t_real(self)


    def angle(self, v):
        """
        angle(kvector_t self, kvector_t v) -> double

        double BasicVector3D< T >::angle(const BasicVector3D< T > &v) const

        Returns angle with respect to another vector. 

        """
        return _libBornAgainCore.kvector_t_angle(self, v)


    def project(self, v):
        """
        project(kvector_t self, kvector_t v) -> kvector_t

        BasicVector3D<T> BasicVector3D< T >::project(const BasicVector3D< T > &v) const

        Returns projection of this onto other vector: (this*v)*v/|v|^2. 

        """
        return _libBornAgainCore.kvector_t_project(self, v)


    def __add__(self, rhs):
        """__add__(kvector_t self, kvector_t rhs) -> kvector_t"""
        return _libBornAgainCore.kvector_t___add__(self, rhs)


    def __mul__(self, c):
        """__mul__(kvector_t self, double c) -> kvector_t"""
        return _libBornAgainCore.kvector_t___mul__(self, c)


    def __rmul__(self, c):
        """__rmul__(kvector_t self, double c) -> kvector_t"""
        return _libBornAgainCore.kvector_t___rmul__(self, c)


    def __neg__(self):
        """__neg__(kvector_t self) -> kvector_t"""
        return _libBornAgainCore.kvector_t___neg__(self)

    __swig_destroy__ = _libBornAgainCore.delete_kvector_t
    __del__ = lambda self: None
kvector_t_swigregister = _libBornAgainCore.kvector_t_swigregister
kvector_t_swigregister(kvector_t)

class vector_kvector_t(_object):
    """Proxy of C++ std::vector<(BasicVector3D<(double)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_kvector_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_kvector_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vector_kvector_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vector_kvector_t_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vector_kvector_t self) -> bool"""
        return _libBornAgainCore.vector_kvector_t___nonzero__(self)


    def __bool__(self):
        """__bool__(vector_kvector_t self) -> bool"""
        return _libBornAgainCore.vector_kvector_t___bool__(self)


    def __len__(self):
        """__len__(vector_kvector_t self) -> std::vector< BasicVector3D< double > >::size_type"""
        return _libBornAgainCore.vector_kvector_t___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(vector_kvector_t self, std::vector< BasicVector3D< double > >::difference_type i, std::vector< BasicVector3D< double > >::difference_type j) -> vector_kvector_t"""
        return _libBornAgainCore.vector_kvector_t___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vector_kvector_t self, std::vector< BasicVector3D< double > >::difference_type i, std::vector< BasicVector3D< double > >::difference_type j)
        __setslice__(vector_kvector_t self, std::vector< BasicVector3D< double > >::difference_type i, std::vector< BasicVector3D< double > >::difference_type j, vector_kvector_t v)
        """
        return _libBornAgainCore.vector_kvector_t___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vector_kvector_t self, std::vector< BasicVector3D< double > >::difference_type i, std::vector< BasicVector3D< double > >::difference_type j)"""
        return _libBornAgainCore.vector_kvector_t___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vector_kvector_t self, std::vector< BasicVector3D< double > >::difference_type i)
        __delitem__(vector_kvector_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vector_kvector_t___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vector_kvector_t self, PySliceObject * slice) -> vector_kvector_t
        __getitem__(vector_kvector_t self, std::vector< BasicVector3D< double > >::difference_type i) -> kvector_t
        """
        return _libBornAgainCore.vector_kvector_t___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vector_kvector_t self, PySliceObject * slice, vector_kvector_t v)
        __setitem__(vector_kvector_t self, PySliceObject * slice)
        __setitem__(vector_kvector_t self, std::vector< BasicVector3D< double > >::difference_type i, kvector_t x)
        """
        return _libBornAgainCore.vector_kvector_t___setitem__(self, *args)


    def pop(self):
        """pop(vector_kvector_t self) -> kvector_t"""
        return _libBornAgainCore.vector_kvector_t_pop(self)


    def append(self, x):
        """append(vector_kvector_t self, kvector_t x)"""
        return _libBornAgainCore.vector_kvector_t_append(self, x)


    def empty(self):
        """empty(vector_kvector_t self) -> bool"""
        return _libBornAgainCore.vector_kvector_t_empty(self)


    def size(self):
        """size(vector_kvector_t self) -> std::vector< BasicVector3D< double > >::size_type"""
        return _libBornAgainCore.vector_kvector_t_size(self)


    def swap(self, v):
        """
        swap(vector_kvector_t self, vector_kvector_t v)

        void swap(OutputDataIterator< TValue, TContainer > &left, OutputDataIterator< TValue, TContainer > &right)

        make Swappable 

        """
        return _libBornAgainCore.vector_kvector_t_swap(self, v)


    def begin(self):
        """begin(vector_kvector_t self) -> std::vector< BasicVector3D< double > >::iterator"""
        return _libBornAgainCore.vector_kvector_t_begin(self)


    def end(self):
        """end(vector_kvector_t self) -> std::vector< BasicVector3D< double > >::iterator"""
        return _libBornAgainCore.vector_kvector_t_end(self)


    def rbegin(self):
        """rbegin(vector_kvector_t self) -> std::vector< BasicVector3D< double > >::reverse_iterator"""
        return _libBornAgainCore.vector_kvector_t_rbegin(self)


    def rend(self):
        """rend(vector_kvector_t self) -> std::vector< BasicVector3D< double > >::reverse_iterator"""
        return _libBornAgainCore.vector_kvector_t_rend(self)


    def clear(self):
        """clear(vector_kvector_t self)"""
        return _libBornAgainCore.vector_kvector_t_clear(self)


    def get_allocator(self):
        """get_allocator(vector_kvector_t self) -> std::vector< BasicVector3D< double > >::allocator_type"""
        return _libBornAgainCore.vector_kvector_t_get_allocator(self)


    def pop_back(self):
        """pop_back(vector_kvector_t self)"""
        return _libBornAgainCore.vector_kvector_t_pop_back(self)


    def erase(self, *args):
        """
        erase(vector_kvector_t self, std::vector< BasicVector3D< double > >::iterator pos) -> std::vector< BasicVector3D< double > >::iterator
        erase(vector_kvector_t self, std::vector< BasicVector3D< double > >::iterator first, std::vector< BasicVector3D< double > >::iterator last) -> std::vector< BasicVector3D< double > >::iterator
        """
        return _libBornAgainCore.vector_kvector_t_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(BasicVector3D<(double)>)> self) -> vector_kvector_t
        __init__(std::vector<(BasicVector3D<(double)>)> self, vector_kvector_t arg2) -> vector_kvector_t
        __init__(std::vector<(BasicVector3D<(double)>)> self, std::vector< BasicVector3D< double > >::size_type size) -> vector_kvector_t
        __init__(std::vector<(BasicVector3D<(double)>)> self, std::vector< BasicVector3D< double > >::size_type size, kvector_t value) -> vector_kvector_t
        """
        this = _libBornAgainCore.new_vector_kvector_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(vector_kvector_t self, kvector_t x)"""
        return _libBornAgainCore.vector_kvector_t_push_back(self, x)


    def front(self):
        """front(vector_kvector_t self) -> kvector_t"""
        return _libBornAgainCore.vector_kvector_t_front(self)


    def back(self):
        """back(vector_kvector_t self) -> kvector_t"""
        return _libBornAgainCore.vector_kvector_t_back(self)


    def assign(self, n, x):
        """assign(vector_kvector_t self, std::vector< BasicVector3D< double > >::size_type n, kvector_t x)"""
        return _libBornAgainCore.vector_kvector_t_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vector_kvector_t self, std::vector< BasicVector3D< double > >::size_type new_size)
        resize(vector_kvector_t self, std::vector< BasicVector3D< double > >::size_type new_size, kvector_t x)
        """
        return _libBornAgainCore.vector_kvector_t_resize(self, *args)


    def insert(self, *args):
        """
        insert(vector_kvector_t self, std::vector< BasicVector3D< double > >::iterator pos, kvector_t x) -> std::vector< BasicVector3D< double > >::iterator
        insert(vector_kvector_t self, std::vector< BasicVector3D< double > >::iterator pos, std::vector< BasicVector3D< double > >::size_type n, kvector_t x)
        """
        return _libBornAgainCore.vector_kvector_t_insert(self, *args)


    def reserve(self, n):
        """reserve(vector_kvector_t self, std::vector< BasicVector3D< double > >::size_type n)"""
        return _libBornAgainCore.vector_kvector_t_reserve(self, n)


    def capacity(self):
        """capacity(vector_kvector_t self) -> std::vector< BasicVector3D< double > >::size_type"""
        return _libBornAgainCore.vector_kvector_t_capacity(self)

    __swig_destroy__ = _libBornAgainCore.delete_vector_kvector_t
    __del__ = lambda self: None
vector_kvector_t_swigregister = _libBornAgainCore.vector_kvector_t_swigregister
vector_kvector_t_swigregister(vector_kvector_t)

class cvector_t(_object):
    """


    Forked from CLHEP/Geometry by E. Chernyaev Evgueni.Tcherniaev@cern.ch, then reworked beyond recongnition. Removed split of point and vector semantics. Transforms are relegated to a separate class  Transform3D. Three-dimensional vector template, for use with integer, double, or complex components.

    C++ includes: BasicVector3D.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cvector_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cvector_t, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BasicVector3D<(std::complex<(double)>)> self) -> cvector_t
        __init__(BasicVector3D<(std::complex<(double)>)> self, std::complex< double > const x1, std::complex< double > const y1, std::complex< double > const z1) -> cvector_t

        BasicVector3D< T >::BasicVector3D(const T x1, const T y1, const T z1)

        Constructor from cartesian components. 

        """
        this = _libBornAgainCore.new_cvector_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def x(self):
        """
        x(cvector_t self) -> std::complex< double >

        T BasicVector3D< T >::x() const

        Returns x-component in cartesian coordinate system. 

        """
        return _libBornAgainCore.cvector_t_x(self)


    def y(self):
        """
        y(cvector_t self) -> std::complex< double >

        T BasicVector3D< T >::y() const

        Returns y-component in cartesian coordinate system. 

        """
        return _libBornAgainCore.cvector_t_y(self)


    def z(self):
        """
        z(cvector_t self) -> std::complex< double >

        T BasicVector3D< T >::z() const

        Returns z-component in cartesian coordinate system. 

        """
        return _libBornAgainCore.cvector_t_z(self)


    def setX(self, a):
        """
        setX(cvector_t self, std::complex< double > const & a)

        void BasicVector3D< T >::setX(const T &a)

        Sets x-component in cartesian coordinate system. 

        """
        return _libBornAgainCore.cvector_t_setX(self, a)


    def setY(self, a):
        """
        setY(cvector_t self, std::complex< double > const & a)

        void BasicVector3D< T >::setY(const T &a)

        Sets y-component in cartesian coordinate system. 

        """
        return _libBornAgainCore.cvector_t_setY(self, a)


    def setZ(self, a):
        """
        setZ(cvector_t self, std::complex< double > const & a)

        void BasicVector3D< T >::setZ(const T &a)

        Sets z-component in cartesian coordinate system. 

        """
        return _libBornAgainCore.cvector_t_setZ(self, a)


    def __iadd__(self, v):
        """__iadd__(cvector_t self, cvector_t v) -> cvector_t"""
        return _libBornAgainCore.cvector_t___iadd__(self, v)


    def __isub__(self, v):
        """__isub__(cvector_t self, cvector_t v) -> cvector_t"""
        return _libBornAgainCore.cvector_t___isub__(self, v)


    def conj(self):
        """
        conj(cvector_t self) -> cvector_t

        BasicVector3D< complex_t > BasicVector3D< complex_t >::conj() const

        """
        return _libBornAgainCore.cvector_t_conj(self)


    def mag2(self):
        """
        mag2(cvector_t self) -> double

        double BasicVector3D< T >::mag2() const

        Returns squared magnitude squared of the vector. 

        """
        return _libBornAgainCore.cvector_t_mag2(self)


    def mag(self):
        """
        mag(cvector_t self) -> double

        double BasicVector3D< T >::mag() const

        Returns magnitude of the vector. 

        """
        return _libBornAgainCore.cvector_t_mag(self)


    def magxy2(self):
        """
        magxy2(cvector_t self) -> double

        double BasicVector3D< T >::magxy2() const

        Returns squared distance from z axis. 

        """
        return _libBornAgainCore.cvector_t_magxy2(self)


    def magxy(self):
        """
        magxy(cvector_t self) -> double

        double BasicVector3D< T >::magxy() const

        Returns distance from z axis. 

        """
        return _libBornAgainCore.cvector_t_magxy(self)


    def unit(self):
        """
        unit(cvector_t self) -> cvector_t

        BasicVector3D< complex_t > BasicVector3D< complex_t >::unit() const

        """
        return _libBornAgainCore.cvector_t_unit(self)


    def real(self):
        """
        real(cvector_t self) -> kvector_t

        BasicVector3D< double > BasicVector3D< complex_t >::real() const

        """
        return _libBornAgainCore.cvector_t_real(self)


    def project(self, v):
        """
        project(cvector_t self, cvector_t v) -> cvector_t

        BasicVector3D<T> BasicVector3D< T >::project(const BasicVector3D< T > &v) const

        Returns projection of this onto other vector: (this*v)*v/|v|^2. 

        """
        return _libBornAgainCore.cvector_t_project(self, v)

    __swig_destroy__ = _libBornAgainCore.delete_cvector_t
    __del__ = lambda self: None
cvector_t_swigregister = _libBornAgainCore.cvector_t_swigregister
cvector_t_swigregister(cvector_t)

class vector_cvector_t(_object):
    """Proxy of C++ std::vector<(BasicVector3D<(std::complex<(double)>)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_cvector_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_cvector_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vector_cvector_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vector_cvector_t_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vector_cvector_t self) -> bool"""
        return _libBornAgainCore.vector_cvector_t___nonzero__(self)


    def __bool__(self):
        """__bool__(vector_cvector_t self) -> bool"""
        return _libBornAgainCore.vector_cvector_t___bool__(self)


    def __len__(self):
        """__len__(vector_cvector_t self) -> std::vector< BasicVector3D< std::complex< double > > >::size_type"""
        return _libBornAgainCore.vector_cvector_t___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::difference_type i, std::vector< BasicVector3D< std::complex< double > > >::difference_type j) -> vector_cvector_t"""
        return _libBornAgainCore.vector_cvector_t___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::difference_type i, std::vector< BasicVector3D< std::complex< double > > >::difference_type j)
        __setslice__(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::difference_type i, std::vector< BasicVector3D< std::complex< double > > >::difference_type j, vector_cvector_t v)
        """
        return _libBornAgainCore.vector_cvector_t___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::difference_type i, std::vector< BasicVector3D< std::complex< double > > >::difference_type j)"""
        return _libBornAgainCore.vector_cvector_t___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::difference_type i)
        __delitem__(vector_cvector_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vector_cvector_t___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vector_cvector_t self, PySliceObject * slice) -> vector_cvector_t
        __getitem__(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::difference_type i) -> cvector_t
        """
        return _libBornAgainCore.vector_cvector_t___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vector_cvector_t self, PySliceObject * slice, vector_cvector_t v)
        __setitem__(vector_cvector_t self, PySliceObject * slice)
        __setitem__(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::difference_type i, cvector_t x)
        """
        return _libBornAgainCore.vector_cvector_t___setitem__(self, *args)


    def pop(self):
        """pop(vector_cvector_t self) -> cvector_t"""
        return _libBornAgainCore.vector_cvector_t_pop(self)


    def append(self, x):
        """append(vector_cvector_t self, cvector_t x)"""
        return _libBornAgainCore.vector_cvector_t_append(self, x)


    def empty(self):
        """empty(vector_cvector_t self) -> bool"""
        return _libBornAgainCore.vector_cvector_t_empty(self)


    def size(self):
        """size(vector_cvector_t self) -> std::vector< BasicVector3D< std::complex< double > > >::size_type"""
        return _libBornAgainCore.vector_cvector_t_size(self)


    def swap(self, v):
        """
        swap(vector_cvector_t self, vector_cvector_t v)

        void swap(OutputDataIterator< TValue, TContainer > &left, OutputDataIterator< TValue, TContainer > &right)

        make Swappable 

        """
        return _libBornAgainCore.vector_cvector_t_swap(self, v)


    def begin(self):
        """begin(vector_cvector_t self) -> std::vector< BasicVector3D< std::complex< double > > >::iterator"""
        return _libBornAgainCore.vector_cvector_t_begin(self)


    def end(self):
        """end(vector_cvector_t self) -> std::vector< BasicVector3D< std::complex< double > > >::iterator"""
        return _libBornAgainCore.vector_cvector_t_end(self)


    def rbegin(self):
        """rbegin(vector_cvector_t self) -> std::vector< BasicVector3D< std::complex< double > > >::reverse_iterator"""
        return _libBornAgainCore.vector_cvector_t_rbegin(self)


    def rend(self):
        """rend(vector_cvector_t self) -> std::vector< BasicVector3D< std::complex< double > > >::reverse_iterator"""
        return _libBornAgainCore.vector_cvector_t_rend(self)


    def clear(self):
        """clear(vector_cvector_t self)"""
        return _libBornAgainCore.vector_cvector_t_clear(self)


    def get_allocator(self):
        """get_allocator(vector_cvector_t self) -> std::vector< BasicVector3D< std::complex< double > > >::allocator_type"""
        return _libBornAgainCore.vector_cvector_t_get_allocator(self)


    def pop_back(self):
        """pop_back(vector_cvector_t self)"""
        return _libBornAgainCore.vector_cvector_t_pop_back(self)


    def erase(self, *args):
        """
        erase(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::iterator pos) -> std::vector< BasicVector3D< std::complex< double > > >::iterator
        erase(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::iterator first, std::vector< BasicVector3D< std::complex< double > > >::iterator last) -> std::vector< BasicVector3D< std::complex< double > > >::iterator
        """
        return _libBornAgainCore.vector_cvector_t_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(BasicVector3D<(std::complex<(double)>)>)> self) -> vector_cvector_t
        __init__(std::vector<(BasicVector3D<(std::complex<(double)>)>)> self, vector_cvector_t arg2) -> vector_cvector_t
        __init__(std::vector<(BasicVector3D<(std::complex<(double)>)>)> self, std::vector< BasicVector3D< std::complex< double > > >::size_type size) -> vector_cvector_t
        __init__(std::vector<(BasicVector3D<(std::complex<(double)>)>)> self, std::vector< BasicVector3D< std::complex< double > > >::size_type size, cvector_t value) -> vector_cvector_t
        """
        this = _libBornAgainCore.new_vector_cvector_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(vector_cvector_t self, cvector_t x)"""
        return _libBornAgainCore.vector_cvector_t_push_back(self, x)


    def front(self):
        """front(vector_cvector_t self) -> cvector_t"""
        return _libBornAgainCore.vector_cvector_t_front(self)


    def back(self):
        """back(vector_cvector_t self) -> cvector_t"""
        return _libBornAgainCore.vector_cvector_t_back(self)


    def assign(self, n, x):
        """assign(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::size_type n, cvector_t x)"""
        return _libBornAgainCore.vector_cvector_t_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::size_type new_size)
        resize(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::size_type new_size, cvector_t x)
        """
        return _libBornAgainCore.vector_cvector_t_resize(self, *args)


    def insert(self, *args):
        """
        insert(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::iterator pos, cvector_t x) -> std::vector< BasicVector3D< std::complex< double > > >::iterator
        insert(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::iterator pos, std::vector< BasicVector3D< std::complex< double > > >::size_type n, cvector_t x)
        """
        return _libBornAgainCore.vector_cvector_t_insert(self, *args)


    def reserve(self, n):
        """reserve(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::size_type n)"""
        return _libBornAgainCore.vector_cvector_t_reserve(self, n)


    def capacity(self):
        """capacity(vector_cvector_t self) -> std::vector< BasicVector3D< std::complex< double > > >::size_type"""
        return _libBornAgainCore.vector_cvector_t_capacity(self)

    __swig_destroy__ = _libBornAgainCore.delete_vector_cvector_t
    __del__ = lambda self: None
vector_cvector_t_swigregister = _libBornAgainCore.vector_cvector_t_swigregister
vector_cvector_t_swigregister(vector_cvector_t)


def mul_I(z):
    """
    mul_I(complex_t z) -> complex_t

    complex_t mul_I(complex_t z)

    Returns product I*z, where I is the imaginary unit. 

    """
    return _libBornAgainCore.mul_I(z)

def exp_I(z):
    """
    exp_I(complex_t z) -> complex_t

    complex_t exp_I(complex_t z)

    Returns exp(I*z), where I is the imaginary unit. 

    """
    return _libBornAgainCore.exp_I(z)

def rad2deg(angle):
    """
    rad2deg(double angle) -> double

    double Units::rad2deg(double angle)

    """
    return _libBornAgainCore.rad2deg(angle)

def deg2rad(angle):
    """
    deg2rad(double angle) -> double

    double Units::deg2rad(double angle)

    """
    return _libBornAgainCore.deg2rad(angle)
class WavevectorInfo(_object):
    """


    Holds all wavevector information relevant for calculating form factors.

    C++ includes: WavevectorInfo.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WavevectorInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WavevectorInfo, name)
    __repr__ = _swig_repr

    def GetZeroQ():
        """GetZeroQ() -> WavevectorInfo"""
        return _libBornAgainCore.WavevectorInfo_GetZeroQ()

    GetZeroQ = staticmethod(GetZeroQ)

    def __init__(self, *args):
        """
        __init__(WavevectorInfo self, cvector_t ki, cvector_t kf, double wavelength) -> WavevectorInfo
        __init__(WavevectorInfo self, kvector_t ki, kvector_t kf, double wavelength) -> WavevectorInfo

        WavevectorInfo::WavevectorInfo(kvector_t ki, kvector_t kf, double wavelength)

        """
        this = _libBornAgainCore.new_WavevectorInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def transformed(self, transform):
        """
        transformed(WavevectorInfo self, Transform3D const & transform) -> WavevectorInfo

        WavevectorInfo WavevectorInfo::transformed(const Transform3D &transform) const 

        """
        return _libBornAgainCore.WavevectorInfo_transformed(self, transform)


    def getKi(self):
        """
        getKi(WavevectorInfo self) -> cvector_t

        cvector_t WavevectorInfo::getKi() const 

        """
        return _libBornAgainCore.WavevectorInfo_getKi(self)


    def getKf(self):
        """
        getKf(WavevectorInfo self) -> cvector_t

        cvector_t WavevectorInfo::getKf() const 

        """
        return _libBornAgainCore.WavevectorInfo_getKf(self)


    def getQ(self):
        """
        getQ(WavevectorInfo self) -> cvector_t

        cvector_t WavevectorInfo::getQ() const 

        """
        return _libBornAgainCore.WavevectorInfo_getQ(self)


    def getWavelength(self):
        """
        getWavelength(WavevectorInfo self) -> double

        double WavevectorInfo::getWavelength() const 

        """
        return _libBornAgainCore.WavevectorInfo_getWavelength(self)

    __swig_destroy__ = _libBornAgainCore.delete_WavevectorInfo
    __del__ = lambda self: None
WavevectorInfo_swigregister = _libBornAgainCore.WavevectorInfo_swigregister
WavevectorInfo_swigregister(WavevectorInfo)
nanometer = cvar.nanometer
angstrom = cvar.angstrom
micrometer = cvar.micrometer
millimeter = cvar.millimeter
meter = cvar.meter
nm = cvar.nm
barn = cvar.barn
radian = cvar.radian
milliradian = cvar.milliradian
degree = cvar.degree
steradian = cvar.steradian
rad = cvar.rad
mrad = cvar.mrad
sr = cvar.sr
deg = cvar.deg
tesla = cvar.tesla
gauss = cvar.gauss

def WavevectorInfo_GetZeroQ():
    """WavevectorInfo_GetZeroQ() -> WavevectorInfo"""
    return _libBornAgainCore.WavevectorInfo_GetZeroQ()

class Beam(INode):
    """


    Beam defined by wavelength, direction and intensity.

    C++ includes: Beam.h

    """

    __swig_setmethods__ = {}
    for _s in [INode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Beam, name, value)
    __swig_getmethods__ = {}
    for _s in [INode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Beam, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Beam self) -> Beam
        __init__(Beam self, Beam other) -> Beam

        Beam::Beam(const Beam &other)

        """
        this = _libBornAgainCore.new_Beam(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_Beam
    __del__ = lambda self: None

    def getCentralK(self):
        """
        getCentralK(Beam self) -> kvector_t

        kvector_t Beam::getCentralK() const

        Returns the wavevector. 

        """
        return _libBornAgainCore.Beam_getCentralK(self)


    def setCentralK(self, wavelength, alpha_i, phi_i):
        """
        setCentralK(Beam self, double wavelength, double alpha_i, double phi_i)

        void Beam::setCentralK(double wavelength, double alpha_i, double phi_i)

        Sets the wavevector in terms of wavelength and incoming angles. 

        """
        return _libBornAgainCore.Beam_setCentralK(self, wavelength, alpha_i, phi_i)


    def getIntensity(self):
        """
        getIntensity(Beam self) -> double

        double Beam::getIntensity() const

        Returns the beam intensity in neutrons/sec. 

        """
        return _libBornAgainCore.Beam_getIntensity(self)


    def setIntensity(self, intensity):
        """
        setIntensity(Beam self, double intensity)

        void Beam::setIntensity(double intensity)

        Sets the beam intensity in neutrons/sec. 

        """
        return _libBornAgainCore.Beam_setIntensity(self, intensity)


    def footprintFactor(self):
        """
        footprintFactor(Beam self) -> IFootprintFactor

        const IFootprintFactor * Beam::footprintFactor() const

        Returns footprint factor. 

        """
        return _libBornAgainCore.Beam_footprintFactor(self)


    def setFootprintFactor(self, shape_factor):
        """
        setFootprintFactor(Beam self, IFootprintFactor shape_factor)

        void Beam::setFootprintFactor(const IFootprintFactor &shape_factor)

        Sets footprint factor to the beam. 

        """
        return _libBornAgainCore.Beam_setFootprintFactor(self, shape_factor)


    def setWidthRatio(self, width_ratio):
        """
        setWidthRatio(Beam self, double width_ratio)

        void Beam::setWidthRatio(double width_ratio)

        Sets beam to sample width ratio in footprint factor. 

        """
        return _libBornAgainCore.Beam_setWidthRatio(self, width_ratio)


    def setPolarization(self, bloch_vector):
        """
        setPolarization(Beam self, kvector_t bloch_vector)

        void Beam::setPolarization(const kvector_t bloch_vector)

        Sets the polarization density matrix according to the given Bloch vector. 

        """
        return _libBornAgainCore.Beam_setPolarization(self, bloch_vector)


    def getBlochVector(self):
        """
        getBlochVector(Beam self) -> kvector_t

        kvector_t Beam::getBlochVector() const 

        """
        return _libBornAgainCore.Beam_getBlochVector(self)


    def getWavelength(self):
        """
        getWavelength(Beam self) -> double

        double Beam::getWavelength() const 

        """
        return _libBornAgainCore.Beam_getWavelength(self)


    def getAlpha(self):
        """
        getAlpha(Beam self) -> double

        double Beam::getAlpha() const 

        """
        return _libBornAgainCore.Beam_getAlpha(self)


    def getPhi(self):
        """
        getPhi(Beam self) -> double

        double Beam::getPhi() const 

        """
        return _libBornAgainCore.Beam_getPhi(self)


    def accept(self, visitor):
        """
        accept(Beam self, INodeVisitor visitor)

        void Beam::accept(INodeVisitor *visitor) const override

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.Beam_accept(self, visitor)


    def getChildren(self):
        """
        getChildren(Beam self) -> swig_dummy_type_const_inode_vector

        std::vector< const INode * > Beam::getChildren() const override

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.Beam_getChildren(self)

Beam_swigregister = _libBornAgainCore.Beam_swigregister
Beam_swigregister(Beam)

class Bin1D(_object):
    """Proxy of C++ Bin1D class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bin1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bin1D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Bin1D self) -> Bin1D
        __init__(Bin1D self, double lower, double upper) -> Bin1D

        Bin1D::Bin1D(double lower, double upper)

        """
        this = _libBornAgainCore.new_Bin1D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_lower"] = _libBornAgainCore.Bin1D_m_lower_set
    __swig_getmethods__["m_lower"] = _libBornAgainCore.Bin1D_m_lower_get
    if _newclass:
        m_lower = _swig_property(_libBornAgainCore.Bin1D_m_lower_get, _libBornAgainCore.Bin1D_m_lower_set)
    __swig_setmethods__["m_upper"] = _libBornAgainCore.Bin1D_m_upper_set
    __swig_getmethods__["m_upper"] = _libBornAgainCore.Bin1D_m_upper_get
    if _newclass:
        m_upper = _swig_property(_libBornAgainCore.Bin1D_m_upper_get, _libBornAgainCore.Bin1D_m_upper_set)

    def getMidPoint(self):
        """
        getMidPoint(Bin1D self) -> double

        double Bin1D::getMidPoint() const 

        """
        return _libBornAgainCore.Bin1D_getMidPoint(self)


    def getBinSize(self):
        """
        getBinSize(Bin1D self) -> double

        double Bin1D::getBinSize() const 

        """
        return _libBornAgainCore.Bin1D_getBinSize(self)

    __swig_destroy__ = _libBornAgainCore.delete_Bin1D
    __del__ = lambda self: None
Bin1D_swigregister = _libBornAgainCore.Bin1D_swigregister
Bin1D_swigregister(Bin1D)


def BinContains(bin, value):
    """
    BinContains(Bin1D bin, double value) -> bool

    bool BinContains(const Bin1D &bin, double value)

    Checks if value is contained in bin: value in [m_lower, m_upper) 

    """
    return _libBornAgainCore.BinContains(bin, value)
class Bin1DKVector(_object):
    """


    An one-dimensional range of kvector_t's.

    C++ includes: Bin.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bin1DKVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bin1DKVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Bin1DKVector self) -> Bin1DKVector
        __init__(Bin1DKVector self, kvector_t lower, kvector_t upper) -> Bin1DKVector
        __init__(Bin1DKVector self, double wavelength, Bin1D alpha_bin, Bin1D phi_bin) -> Bin1DKVector

        Bin1DKVector::Bin1DKVector(double wavelength, const Bin1D &alpha_bin, const Bin1D &phi_bin)

        creation on  Bin1DKVector from alpha and phi bins 

        """
        this = _libBornAgainCore.new_Bin1DKVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getMidPoint(self):
        """
        getMidPoint(Bin1DKVector self) -> kvector_t

        kvector_t Bin1DKVector::getMidPoint() const 

        """
        return _libBornAgainCore.Bin1DKVector_getMidPoint(self)


    def getDelta(self):
        """
        getDelta(Bin1DKVector self) -> kvector_t

        kvector_t Bin1DKVector::getDelta() const 

        """
        return _libBornAgainCore.Bin1DKVector_getDelta(self)

    __swig_setmethods__["m_q_lower"] = _libBornAgainCore.Bin1DKVector_m_q_lower_set
    __swig_getmethods__["m_q_lower"] = _libBornAgainCore.Bin1DKVector_m_q_lower_get
    if _newclass:
        m_q_lower = _swig_property(_libBornAgainCore.Bin1DKVector_m_q_lower_get, _libBornAgainCore.Bin1DKVector_m_q_lower_set)
    __swig_setmethods__["m_q_upper"] = _libBornAgainCore.Bin1DKVector_m_q_upper_set
    __swig_getmethods__["m_q_upper"] = _libBornAgainCore.Bin1DKVector_m_q_upper_get
    if _newclass:
        m_q_upper = _swig_property(_libBornAgainCore.Bin1DKVector_m_q_upper_get, _libBornAgainCore.Bin1DKVector_m_q_upper_set)
    __swig_destroy__ = _libBornAgainCore.delete_Bin1DKVector
    __del__ = lambda self: None
Bin1DKVector_swigregister = _libBornAgainCore.Bin1DKVector_swigregister
Bin1DKVector_swigregister(Bin1DKVector)

class Bin1DCVector(_object):
    """


    An one-dimensional range of cvector_t's.

    C++ includes: Bin.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bin1DCVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bin1DCVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Bin1DCVector self) -> Bin1DCVector
        __init__(Bin1DCVector self, cvector_t lower, cvector_t upper) -> Bin1DCVector
        __init__(Bin1DCVector self, double wavelength, Bin1D alpha_bin, Bin1D phi_bin) -> Bin1DCVector

        Bin1DCVector::Bin1DCVector(double wavelength, const Bin1D &alpha_bin, const Bin1D &phi_bin)

        creation on  Bin1DCVector from alpha and phi bins 

        """
        this = _libBornAgainCore.new_Bin1DCVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getMidPoint(self):
        """
        getMidPoint(Bin1DCVector self) -> cvector_t

        cvector_t Bin1DCVector::getMidPoint() const 

        """
        return _libBornAgainCore.Bin1DCVector_getMidPoint(self)


    def getDelta(self):
        """
        getDelta(Bin1DCVector self) -> cvector_t

        cvector_t Bin1DCVector::getDelta() const 

        """
        return _libBornAgainCore.Bin1DCVector_getDelta(self)

    __swig_setmethods__["m_q_lower"] = _libBornAgainCore.Bin1DCVector_m_q_lower_set
    __swig_getmethods__["m_q_lower"] = _libBornAgainCore.Bin1DCVector_m_q_lower_get
    if _newclass:
        m_q_lower = _swig_property(_libBornAgainCore.Bin1DCVector_m_q_lower_get, _libBornAgainCore.Bin1DCVector_m_q_lower_set)
    __swig_setmethods__["m_q_upper"] = _libBornAgainCore.Bin1DCVector_m_q_upper_set
    __swig_getmethods__["m_q_upper"] = _libBornAgainCore.Bin1DCVector_m_q_upper_get
    if _newclass:
        m_q_upper = _swig_property(_libBornAgainCore.Bin1DCVector_m_q_upper_get, _libBornAgainCore.Bin1DCVector_m_q_upper_set)
    __swig_destroy__ = _libBornAgainCore.delete_Bin1DCVector
    __del__ = lambda self: None
Bin1DCVector_swigregister = _libBornAgainCore.Bin1DCVector_swigregister
Bin1DCVector_swigregister(Bin1DCVector)

class IAxis(_object):
    """


    Interface for one-dimensional axes.

    C++ includes: IAxis.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAxis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IAxis, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        """
        clone(IAxis self) -> IAxis

        virtual IAxis* IAxis::clone() const =0

        clone function 

        """
        return _libBornAgainCore.IAxis_clone(self)


    def createDoubleBinSize(self):
        """
        createDoubleBinSize(IAxis self) -> IAxis

        IAxis * IAxis::createDoubleBinSize() const

        Creates a new axis with half the number of bins. 

        """
        return _libBornAgainCore.IAxis_createDoubleBinSize(self)

    __swig_destroy__ = _libBornAgainCore.delete_IAxis
    __del__ = lambda self: None

    def size(self):
        """
        size(IAxis self) -> size_t

        virtual size_t IAxis::size() const =0

        retrieve the number of bins 

        """
        return _libBornAgainCore.IAxis_size(self)


    def getName(self):
        """
        getName(IAxis self) -> std::string

        std::string IAxis::getName() const

        retrieve the label of the axis 

        """
        return _libBornAgainCore.IAxis_getName(self)


    def setName(self, name):
        """
        setName(IAxis self, std::string name)

        void IAxis::setName(std::string name)

        Sets the axis label. 

        """
        return _libBornAgainCore.IAxis_setName(self, name)


    def getBin(self, index):
        """
        getBin(IAxis self, size_t index) -> Bin1D

        virtual Bin1D IAxis::getBin(size_t index) const =0

        retrieve a 1d bin for the given index 

        """
        return _libBornAgainCore.IAxis_getBin(self, index)


    def getMin(self):
        """
        getMin(IAxis self) -> double

        virtual double IAxis::getMin() const =0

        Returns value of first point of axis. 

        """
        return _libBornAgainCore.IAxis_getMin(self)


    def getMax(self):
        """
        getMax(IAxis self) -> double

        virtual double IAxis::getMax() const =0

        Returns value of last point of axis. 

        """
        return _libBornAgainCore.IAxis_getMax(self)


    def getBinCenter(self, index):
        """
        getBinCenter(IAxis self, size_t index) -> double

        virtual double IAxis::getBinCenter(size_t index) const =0

        """
        return _libBornAgainCore.IAxis_getBinCenter(self, index)


    def findClosestIndex(self, value):
        """
        findClosestIndex(IAxis self, double value) -> size_t

        virtual size_t IAxis::findClosestIndex(double value) const =0

        find bin index which is best match for given value 

        """
        return _libBornAgainCore.IAxis_findClosestIndex(self, value)


    def findIndex(self, value):
        """
        findIndex(IAxis self, double value) -> size_t

        size_t IAxis::findIndex(double value) const

        find index of bin that contains the given value returns  size() when value is not found 

        """
        return _libBornAgainCore.IAxis_findIndex(self, value)


    def __eq__(self, right):
        """__eq__(IAxis self, IAxis right) -> bool"""
        return _libBornAgainCore.IAxis___eq__(self, right)


    def __ne__(self, right):
        """__ne__(IAxis self, IAxis right) -> bool"""
        return _libBornAgainCore.IAxis___ne__(self, right)


    def getBinCenters(self):
        """
        getBinCenters(IAxis self) -> vdouble1d_t

        std::vector< double > IAxis::getBinCenters() const 

        """
        return _libBornAgainCore.IAxis_getBinCenters(self)


    def getBinBoundaries(self):
        """
        getBinBoundaries(IAxis self) -> vdouble1d_t

        std::vector< double > IAxis::getBinBoundaries() const 

        """
        return _libBornAgainCore.IAxis_getBinBoundaries(self)


    def createClippedAxis(self, left, right):
        """
        createClippedAxis(IAxis self, double left, double right) -> IAxis

        IAxis * IAxis::createClippedAxis(double left, double right) const

        Creates a new clipped axis. 

        """
        return _libBornAgainCore.IAxis_createClippedAxis(self, left, right)


    def contains(self, value):
        """
        contains(IAxis self, double value) -> bool

        bool IAxis::contains(double value) const

        Returns true if axis contains given point. 

        """
        return _libBornAgainCore.IAxis_contains(self, value)

IAxis_swigregister = _libBornAgainCore.IAxis_swigregister
IAxis_swigregister(IAxis)


def HaveSameNameAndShape(left, right):
    """
    HaveSameNameAndShape(IAxis left, IAxis right) -> bool

    bool HaveSameNameAndShape(const IAxis &left, const IAxis &right)

    global helper function for comparison of axes 

    """
    return _libBornAgainCore.HaveSameNameAndShape(left, right)
class VariableBinAxis(IAxis):
    """


    Axis with variable bin size.

    C++ includes: VariableBinAxis.h

    """

    __swig_setmethods__ = {}
    for _s in [IAxis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VariableBinAxis, name, value)
    __swig_getmethods__ = {}
    for _s in [IAxis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VariableBinAxis, name)
    __repr__ = _swig_repr

    def __init__(self, name, nbins, bin_boundaries):
        """
        __init__(VariableBinAxis self, std::string const & name, size_t nbins, vdouble1d_t bin_boundaries) -> VariableBinAxis

        VariableBinAxis::VariableBinAxis(const std::string &name, size_t nbins, const std::vector< double > &bin_boundaries)

        VariableBinAxis constructor.

        Parameters:
        -----------

        name: 
        Axis name

        nbins: 
        number of bins

        bin_boundaries: 
        Array of size nbins+1 containing low-edges for each bin and upper edge of last bin. 

        """
        this = _libBornAgainCore.new_VariableBinAxis(name, nbins, bin_boundaries)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_VariableBinAxis
    __del__ = lambda self: None

    def clone(self):
        """
        clone(VariableBinAxis self) -> VariableBinAxis

        VariableBinAxis * VariableBinAxis::clone() const

        clone function 

        """
        return _libBornAgainCore.VariableBinAxis_clone(self)


    def size(self):
        """
        size(VariableBinAxis self) -> size_t

        size_t VariableBinAxis::size() const

        retrieve the number of bins 

        """
        return _libBornAgainCore.VariableBinAxis_size(self)


    def getBin(self, index):
        """
        getBin(VariableBinAxis self, size_t index) -> Bin1D

        Bin1D VariableBinAxis::getBin(size_t index) const

        retrieve a 1d bin for the given index 

        """
        return _libBornAgainCore.VariableBinAxis_getBin(self, index)


    def getMin(self):
        """
        getMin(VariableBinAxis self) -> double

        double VariableBinAxis::getMin() const

        Returns value of first point of axis. 

        """
        return _libBornAgainCore.VariableBinAxis_getMin(self)


    def getMax(self):
        """
        getMax(VariableBinAxis self) -> double

        double VariableBinAxis::getMax() const

        Returns value of last point of axis. 

        """
        return _libBornAgainCore.VariableBinAxis_getMax(self)


    def getBinCenter(self, index):
        """
        getBinCenter(VariableBinAxis self, size_t index) -> double

        double VariableBinAxis::getBinCenter(size_t index) const 

        """
        return _libBornAgainCore.VariableBinAxis_getBinCenter(self, index)


    def findClosestIndex(self, value):
        """
        findClosestIndex(VariableBinAxis self, double value) -> size_t

        size_t VariableBinAxis::findClosestIndex(double value) const

        find bin index which is best match for given value 

        """
        return _libBornAgainCore.VariableBinAxis_findClosestIndex(self, value)


    def getBinCenters(self):
        """
        getBinCenters(VariableBinAxis self) -> vdouble1d_t

        std::vector< double > VariableBinAxis::getBinCenters() const 

        """
        return _libBornAgainCore.VariableBinAxis_getBinCenters(self)


    def getBinBoundaries(self):
        """
        getBinBoundaries(VariableBinAxis self) -> vdouble1d_t

        std::vector<double> VariableBinAxis::getBinBoundaries() const 

        """
        return _libBornAgainCore.VariableBinAxis_getBinBoundaries(self)


    def createClippedAxis(self, left, right):
        """
        createClippedAxis(VariableBinAxis self, double left, double right) -> VariableBinAxis

        VariableBinAxis * VariableBinAxis::createClippedAxis(double left, double right) const

        Creates a new clipped axis. 

        """
        return _libBornAgainCore.VariableBinAxis_createClippedAxis(self, left, right)


    def __getitem__(self, i):
        """__getitem__(VariableBinAxis self, unsigned int i) -> double"""
        return _libBornAgainCore.VariableBinAxis___getitem__(self, i)

VariableBinAxis_swigregister = _libBornAgainCore.VariableBinAxis_swigregister
VariableBinAxis_swigregister(VariableBinAxis)

class ConstKBinAxis(VariableBinAxis):
    """


    Axis with fixed bin size in sin(angle) space.

    C++ includes: ConstKBinAxis.h

    """

    __swig_setmethods__ = {}
    for _s in [VariableBinAxis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstKBinAxis, name, value)
    __swig_getmethods__ = {}
    for _s in [VariableBinAxis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstKBinAxis, name)
    __repr__ = _swig_repr

    def __init__(self, name, nbins, start, end):
        """
        __init__(ConstKBinAxis self, std::string const & name, size_t nbins, double start, double end) -> ConstKBinAxis

        ConstKBinAxis::ConstKBinAxis(const std::string &name, size_t nbins, double start, double end)

        ConstKBinAxis constructor.

        Parameters:
        -----------

        name: 
        Axis name

        nbins: 
        number of bins

        start: 
        low edge of first bin

        end: 
        upper edge of last bin 

        """
        this = _libBornAgainCore.new_ConstKBinAxis(name, nbins, start, end)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_ConstKBinAxis
    __del__ = lambda self: None

    def clone(self):
        """
        clone(ConstKBinAxis self) -> ConstKBinAxis

        ConstKBinAxis * ConstKBinAxis::clone() const final

        clone function 

        """
        return _libBornAgainCore.ConstKBinAxis_clone(self)


    def createClippedAxis(self, left, right):
        """
        createClippedAxis(ConstKBinAxis self, double left, double right) -> ConstKBinAxis

        ConstKBinAxis * ConstKBinAxis::createClippedAxis(double left, double right) const final

        Creates a new clipped axis. 

        """
        return _libBornAgainCore.ConstKBinAxis_createClippedAxis(self, left, right)

ConstKBinAxis_swigregister = _libBornAgainCore.ConstKBinAxis_swigregister
ConstKBinAxis_swigregister(ConstKBinAxis)

class CustomBinAxis(VariableBinAxis):
    """


    Axis with fixed bin size in sin(angle) space used for numerical comparison with IsGisaxs. The main feature of the axis is that it produces zero bin sizes.

    C++ includes: CustomBinAxis.h

    """

    __swig_setmethods__ = {}
    for _s in [VariableBinAxis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CustomBinAxis, name, value)
    __swig_getmethods__ = {}
    for _s in [VariableBinAxis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CustomBinAxis, name)
    __repr__ = _swig_repr

    def __init__(self, name, nbins, start, end):
        """
        __init__(CustomBinAxis self, std::string const & name, size_t nbins, double start, double end) -> CustomBinAxis

        CustomBinAxis::CustomBinAxis(const std::string &name, size_t nbins, double start, double end)

        CustomBinAxis constructor.

        Parameters:
        -----------

        name: 
        Axis name

        nbins: 
        number of bins

        start: 
        center of first bin (IsGisaxs convention)

        end: 
        center of last bin (IsGisaxs convention) 

        """
        this = _libBornAgainCore.new_CustomBinAxis(name, nbins, start, end)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_CustomBinAxis
    __del__ = lambda self: None

    def clone(self):
        """
        clone(CustomBinAxis self) -> CustomBinAxis

        CustomBinAxis * CustomBinAxis::clone() const

        clone function 

        """
        return _libBornAgainCore.CustomBinAxis_clone(self)


    def getBin(self, index):
        """
        getBin(CustomBinAxis self, size_t index) -> Bin1D

        Bin1D CustomBinAxis::getBin(size_t index) const

        retrieve a 1d bin for the given index 

        """
        return _libBornAgainCore.CustomBinAxis_getBin(self, index)


    def getBinCenters(self):
        """
        getBinCenters(CustomBinAxis self) -> vdouble1d_t

        std::vector< double > CustomBinAxis::getBinCenters() const 

        """
        return _libBornAgainCore.CustomBinAxis_getBinCenters(self)


    def createClippedAxis(self, left, right):
        """
        createClippedAxis(CustomBinAxis self, double left, double right) -> CustomBinAxis

        CustomBinAxis * CustomBinAxis::createClippedAxis(double left, double right) const

        Creates a new clipped axis. 

        """
        return _libBornAgainCore.CustomBinAxis_createClippedAxis(self, left, right)

CustomBinAxis_swigregister = _libBornAgainCore.CustomBinAxis_swigregister
CustomBinAxis_swigregister(CustomBinAxis)

class IShape2D(ICloneable, INamed):
    """


    Basic class for all shapes in 2D.

    C++ includes: IShape2D.h

    """

    __swig_setmethods__ = {}
    for _s in [ICloneable, INamed]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IShape2D, name, value)
    __swig_getmethods__ = {}
    for _s in [ICloneable, INamed]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IShape2D, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        """
        clone(IShape2D self) -> IShape2D

        virtual IShape2D* IShape2D::clone() const =0

        """
        return _libBornAgainCore.IShape2D_clone(self)


    def contains(self, *args):
        """
        contains(IShape2D self, double x, double y) -> bool
        contains(IShape2D self, Bin1D binx, Bin1D biny) -> bool

        virtual bool IShape2D::contains(const Bin1D &binx, const Bin1D &biny) const =0

        Returns true if area defined by two bins is inside or on border of polygon (more precisely, if mid point of two bins satisfy this condition). 

        """
        return _libBornAgainCore.IShape2D_contains(self, *args)

    __swig_destroy__ = _libBornAgainCore.delete_IShape2D
    __del__ = lambda self: None
IShape2D_swigregister = _libBornAgainCore.IShape2D_swigregister
IShape2D_swigregister(IShape2D)

class ISample(ICloneable, INode):
    """


    Pure virtual base class for sample components and properties related to scattering.

    C++ includes: ISample.h

    """

    __swig_setmethods__ = {}
    for _s in [ICloneable, INode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISample, name, value)
    __swig_getmethods__ = {}
    for _s in [ICloneable, INode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ISample, name)
    __repr__ = _swig_repr

    def clone(self):
        """
        clone(ISample self) -> ISample

        ISample* ISample::clone() const override=0

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.ISample_clone(self)


    def material(self):
        """
        material(ISample self) -> Material

        virtual const Material* ISample::material() const

        Returns nullptr, unless overwritten to return a specific material. 

        """
        return _libBornAgainCore.ISample_material(self)


    def containedMaterials(self):
        """
        containedMaterials(ISample self) -> std::vector< Material const *,std::allocator< Material const * > >

        std::vector< const Material * > ISample::containedMaterials() const

        Returns set of unique materials contained in this  ISample. 

        """
        return _libBornAgainCore.ISample_containedMaterials(self)


    def __init__(self):
        """
        __init__(ISample self) -> ISample



        Pure virtual base class for sample components and properties related to scattering.

        C++ includes: ISample.h

        """
        if self.__class__ == ISample:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_ISample(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_ISample
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_ISample(self)
        return weakref_proxy(self)
ISample_swigregister = _libBornAgainCore.ISample_swigregister
ISample_swigregister(ISample)

class IChiSquaredModule(ICloneable):
    """


    Interface for  ChiSquaredModule for chi2 calculations.

    Until BornAgain-1.1, there was another child, ChiSquaredFrequency.

    C++ includes: IChiSquaredModule.h

    """

    __swig_setmethods__ = {}
    for _s in [ICloneable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IChiSquaredModule, name, value)
    __swig_getmethods__ = {}
    for _s in [ICloneable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IChiSquaredModule, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IChiSquaredModule
    __del__ = lambda self: None

    def clone(self):
        """
        clone(IChiSquaredModule self) -> IChiSquaredModule

        virtual IChiSquaredModule* IChiSquaredModule::clone() const =0

        clone method 

        """
        return _libBornAgainCore.IChiSquaredModule_clone(self)


    def getSquaredFunction(self):
        """
        getSquaredFunction(IChiSquaredModule self) -> ISquaredFunction

        const ISquaredFunction* IChiSquaredModule::getSquaredFunction() const

        Returns squared function. 

        """
        return _libBornAgainCore.IChiSquaredModule_getSquaredFunction(self)


    def setChiSquaredFunction(self, *args):
        """
        setChiSquaredFunction(IChiSquaredModule self, ISquaredFunction squared_function)
        setChiSquaredFunction(IChiSquaredModule self, ISquaredFunction squared_function)

        void IChiSquaredModule::setChiSquaredFunction(const ISquaredFunction &squared_function)

        """
        return _libBornAgainCore.IChiSquaredModule_setChiSquaredFunction(self, *args)


    def getIntensityNormalizer(self, *args):
        """
        getIntensityNormalizer(IChiSquaredModule self) -> IIntensityNormalizer
        getIntensityNormalizer(IChiSquaredModule self) -> IIntensityNormalizer

        virtual IIntensityNormalizer* IChiSquaredModule::getIntensityNormalizer()

        Returns data normalizer, non-const version needed to set internals. 

        """
        return _libBornAgainCore.IChiSquaredModule_getIntensityNormalizer(self, *args)


    def setIntensityNormalizer(self, data_normalizer):
        """
        setIntensityNormalizer(IChiSquaredModule self, IIntensityNormalizer data_normalizer)

        void IChiSquaredModule::setIntensityNormalizer(const IIntensityNormalizer &data_normalizer)

        Sets data normalizer. 

        """
        return _libBornAgainCore.IChiSquaredModule_setIntensityNormalizer(self, data_normalizer)


    def getIntensityFunction(self):
        """
        getIntensityFunction(IChiSquaredModule self) -> IIntensityFunction

        virtual const IIntensityFunction* IChiSquaredModule::getIntensityFunction() const

        Returns data rescaler. 

        """
        return _libBornAgainCore.IChiSquaredModule_getIntensityFunction(self)


    def setIntensityFunction(self, intensity_function):
        """
        setIntensityFunction(IChiSquaredModule self, IIntensityFunction intensity_function)

        void IChiSquaredModule::setIntensityFunction(const IIntensityFunction &intensity_function)

        Sets data rescaler. 

        """
        return _libBornAgainCore.IChiSquaredModule_setIntensityFunction(self, intensity_function)


    def processFitElements(self, arg2, arg3):
        """
        processFitElements(IChiSquaredModule self, std::vector< FitElement,std::allocator< FitElement > >::iterator arg2, std::vector< FitElement,std::allocator< FitElement > >::iterator arg3)

        virtual void IChiSquaredModule::processFitElements(std::vector< FitElement >::iterator, std::vector< FitElement >::iterator)

        """
        return _libBornAgainCore.IChiSquaredModule_processFitElements(self, arg2, arg3)

IChiSquaredModule_swigregister = _libBornAgainCore.IChiSquaredModule_swigregister
IChiSquaredModule_swigregister(IChiSquaredModule)

class IObserver(_object):
    """


    Observer interface from Observer pattern, for 1:n object dependencies.

    C++ includes: IObserver.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IObserver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IObserver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IObserver
    __del__ = lambda self: None

    def notify(self, subject):
        """
        notify(IObserver self, IObservable subject)

        virtual void IObserver::notify(IObservable *subject)=0

        method which is used by observable subject to notify change in status 

        """
        return _libBornAgainCore.IObserver_notify(self, subject)

IObserver_swigregister = _libBornAgainCore.IObserver_swigregister
IObserver_swigregister(IObserver)

class IObservable(_object):
    """


    Observable interface from Observer pattern, for 1:n object dependencies.

    C++ includes: IObserver.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IObservable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IObservable, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IObservable
    __del__ = lambda self: None

    def attachObserver(self, obj):
        """
        attachObserver(IObservable self, IObservable::observer_t obj)

        void IObservable::attachObserver(observer_t obj)

        attach observer to the list of observers 

        """
        return _libBornAgainCore.IObservable_attachObserver(self, obj)


    def notifyObservers(self):
        """
        notifyObservers(IObservable self)

        void IObservable::notifyObservers()

        notify observers about change in status 

        """
        return _libBornAgainCore.IObservable_notifyObservers(self)


    def __init__(self):
        """
        __init__(IObservable self) -> IObservable



        Observable interface from Observer pattern, for 1:n object dependencies.

        C++ includes: IObserver.h

        """
        if self.__class__ == IObservable:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IObservable(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IObservable(self)
        return weakref_proxy(self)
IObservable_swigregister = _libBornAgainCore.IObservable_swigregister
IObservable_swigregister(IObservable)

class IFitObserver(IObserver):
    """


    Base class for all fit observers. Calls update method in following cases: first iteration, every n-th iteration, last iteration and when fit strategy has changed.

    C++ includes: IFitObserver.h

    """

    __swig_setmethods__ = {}
    for _s in [IObserver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFitObserver, name, value)
    __swig_getmethods__ = {}
    for _s in [IObserver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IFitObserver, name)
    __repr__ = _swig_repr

    def __init__(self, update_every_nth):
        """
        __init__(IFitObserver self, int update_every_nth) -> IFitObserver

        IFitObserver::IFitObserver(int update_every_nth)

        """
        if self.__class__ == IFitObserver:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IFitObserver(_self, update_every_nth)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def notify(self, subject):
        """
        notify(IFitObserver self, IObservable subject)

        void IFitObserver::notify(IObservable *subject)

        The method used by Ovservable when he wants to be observed by this. 

        """
        return _libBornAgainCore.IFitObserver_notify(self, subject)


    def update(self, fit_suite):
        """
        update(IFitObserver self, FitSuite fit_suite)

        void IFitObserver::update(FitSuite *fit_suite)

        Here Onserver will do actuall job when he thinks that it is a right moment. 

        """
        return _libBornAgainCore.IFitObserver_update(self, fit_suite)

    __swig_destroy__ = _libBornAgainCore.delete_IFitObserver
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IFitObserver(self)
        return weakref_proxy(self)
IFitObserver_swigregister = _libBornAgainCore.IFitObserver_swigregister
IFitObserver_swigregister(IFitObserver)

class IFitStrategy(INamed):
    """


    Interface to concrete fit strategy. Concrete implementation should manipulate with fit parameters/data and then call minimizer.

    C++ includes: IFitStrategy.h

    """

    __swig_setmethods__ = {}
    for _s in [INamed]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFitStrategy, name, value)
    __swig_getmethods__ = {}
    for _s in [INamed]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IFitStrategy, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IFitStrategy
    __del__ = lambda self: None

    def clone(self):
        """
        clone(IFitStrategy self) -> IFitStrategy

        virtual IFitStrategy* IFitStrategy::clone() const =0

        """
        return _libBornAgainCore.IFitStrategy_clone(self)


    def init(self, fit_suite):
        """
        init(IFitStrategy self, FitSuiteImpl * fit_suite)

        void IFitStrategy::init(FitSuiteImpl *fit_suite)

        """
        return _libBornAgainCore.IFitStrategy_init(self, fit_suite)


    def execute(self):
        """
        execute(IFitStrategy self)

        virtual void IFitStrategy::execute()=0

        """
        return _libBornAgainCore.IFitStrategy_execute(self)

IFitStrategy_swigregister = _libBornAgainCore.IFitStrategy_swigregister
IFitStrategy_swigregister(IFitStrategy)

class FitStrategyDefault(IFitStrategy):
    """


    Default fit strategy just let  FitSuite to run it's minimization round.

    C++ includes: IFitStrategy.h

    """

    __swig_setmethods__ = {}
    for _s in [IFitStrategy]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitStrategyDefault, name, value)
    __swig_getmethods__ = {}
    for _s in [IFitStrategy]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FitStrategyDefault, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(FitStrategyDefault self) -> FitStrategyDefault

        FitStrategyDefault::FitStrategyDefault()

        """
        this = _libBornAgainCore.new_FitStrategyDefault()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FitStrategyDefault self) -> FitStrategyDefault

        FitStrategyDefault * FitStrategyDefault::clone() const 

        """
        return _libBornAgainCore.FitStrategyDefault_clone(self)


    def execute(self):
        """
        execute(FitStrategyDefault self)

        void FitStrategyDefault::execute()

        """
        return _libBornAgainCore.FitStrategyDefault_execute(self)

    __swig_destroy__ = _libBornAgainCore.delete_FitStrategyDefault
    __del__ = lambda self: None
FitStrategyDefault_swigregister = _libBornAgainCore.FitStrategyDefault_swigregister
FitStrategyDefault_swigregister(FitStrategyDefault)

class IIntensityFunction(_object):
    """


    Interface for applying arbitrary function to the measured intensity.

    C++ includes: IIntensityFunction.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IIntensityFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IIntensityFunction, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IIntensityFunction
    __del__ = lambda self: None

    def clone(self):
        """
        clone(IIntensityFunction self) -> IIntensityFunction

        virtual IIntensityFunction* IIntensityFunction::clone() const =0

        """
        return _libBornAgainCore.IIntensityFunction_clone(self)


    def evaluate(self, value):
        """
        evaluate(IIntensityFunction self, double value) -> double

        virtual double IIntensityFunction::evaluate(double value) const =0

        """
        return _libBornAgainCore.IIntensityFunction_evaluate(self, value)

IIntensityFunction_swigregister = _libBornAgainCore.IIntensityFunction_swigregister
IIntensityFunction_swigregister(IIntensityFunction)

class IntensityFunctionLog(IIntensityFunction):
    """


    Algorithm for applying log function to the measured intensity.

    C++ includes: IIntensityFunction.h

    """

    __swig_setmethods__ = {}
    for _s in [IIntensityFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntensityFunctionLog, name, value)
    __swig_getmethods__ = {}
    for _s in [IIntensityFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntensityFunctionLog, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IntensityFunctionLog
    __del__ = lambda self: None

    def clone(self):
        """
        clone(IntensityFunctionLog self) -> IntensityFunctionLog

        virtual IntensityFunctionLog* IntensityFunctionLog::clone() const 

        """
        return _libBornAgainCore.IntensityFunctionLog_clone(self)


    def evaluate(self, value):
        """
        evaluate(IntensityFunctionLog self, double value) -> double

        double IntensityFunctionLog::evaluate(double value) const 

        """
        return _libBornAgainCore.IntensityFunctionLog_evaluate(self, value)


    def __init__(self):
        """
        __init__(IntensityFunctionLog self) -> IntensityFunctionLog



        Algorithm for applying log function to the measured intensity.

        C++ includes: IIntensityFunction.h

        """
        this = _libBornAgainCore.new_IntensityFunctionLog()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
IntensityFunctionLog_swigregister = _libBornAgainCore.IntensityFunctionLog_swigregister
IntensityFunctionLog_swigregister(IntensityFunctionLog)

class IntensityFunctionSqrt(IIntensityFunction):
    """


    Algorithm for applying sqrt function to the measured intensity.

    C++ includes: IIntensityFunction.h

    """

    __swig_setmethods__ = {}
    for _s in [IIntensityFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntensityFunctionSqrt, name, value)
    __swig_getmethods__ = {}
    for _s in [IIntensityFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntensityFunctionSqrt, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IntensityFunctionSqrt
    __del__ = lambda self: None

    def clone(self):
        """
        clone(IntensityFunctionSqrt self) -> IntensityFunctionSqrt

        virtual IntensityFunctionSqrt* IntensityFunctionSqrt::clone() const 

        """
        return _libBornAgainCore.IntensityFunctionSqrt_clone(self)


    def evaluate(self, value):
        """
        evaluate(IntensityFunctionSqrt self, double value) -> double

        double IntensityFunctionSqrt::evaluate(double value) const 

        """
        return _libBornAgainCore.IntensityFunctionSqrt_evaluate(self, value)


    def __init__(self):
        """
        __init__(IntensityFunctionSqrt self) -> IntensityFunctionSqrt



        Algorithm for applying sqrt function to the measured intensity.

        C++ includes: IIntensityFunction.h

        """
        this = _libBornAgainCore.new_IntensityFunctionSqrt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
IntensityFunctionSqrt_swigregister = _libBornAgainCore.IntensityFunctionSqrt_swigregister
IntensityFunctionSqrt_swigregister(IntensityFunctionSqrt)

class IIntensityNormalizer(ICloneable, INode):
    """


    Interface to  OutputData normalizers.

    C++ includes: IIntensityNormalizer.h

    """

    __swig_setmethods__ = {}
    for _s in [ICloneable, INode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IIntensityNormalizer, name, value)
    __swig_getmethods__ = {}
    for _s in [ICloneable, INode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IIntensityNormalizer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IIntensityNormalizer
    __del__ = lambda self: None

    def clone(self):
        """
        clone(IIntensityNormalizer self) -> IIntensityNormalizer

        virtual IIntensityNormalizer* IIntensityNormalizer::clone() const =0

        """
        return _libBornAgainCore.IIntensityNormalizer_clone(self)


    def createNormalizedData(self, data):
        """
        createNormalizedData(IIntensityNormalizer self, IntensityData data) -> IntensityData

        virtual OutputData<double>* IIntensityNormalizer::createNormalizedData(const OutputData< double > &data) const =0

        """
        return _libBornAgainCore.IIntensityNormalizer_createNormalizedData(self, data)


    def apply(self, data):
        """
        apply(IIntensityNormalizer self, IntensityData data)

        virtual void IIntensityNormalizer::apply(OutputData< double > &data) const =0

        """
        return _libBornAgainCore.IIntensityNormalizer_apply(self, data)


    def setMaximumIntensity(self, arg2):
        """
        setMaximumIntensity(IIntensityNormalizer self, double arg2)

        virtual void IIntensityNormalizer::setMaximumIntensity(double)=0

        """
        return _libBornAgainCore.IIntensityNormalizer_setMaximumIntensity(self, arg2)

IIntensityNormalizer_swigregister = _libBornAgainCore.IIntensityNormalizer_swigregister
IIntensityNormalizer_swigregister(IIntensityNormalizer)

class IntensityNormalizer(IIntensityNormalizer):
    """


    Standard  OutputData normalizer, with configurable max_intensity.

    C++ includes: IIntensityNormalizer.h

    """

    __swig_setmethods__ = {}
    for _s in [IIntensityNormalizer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntensityNormalizer, name, value)
    __swig_getmethods__ = {}
    for _s in [IIntensityNormalizer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntensityNormalizer, name)
    __repr__ = _swig_repr

    def __init__(self, scale=1.0, shift=0.0):
        """
        __init__(IntensityNormalizer self, double scale=1.0, double shift=0.0) -> IntensityNormalizer
        __init__(IntensityNormalizer self, double scale=1.0) -> IntensityNormalizer
        __init__(IntensityNormalizer self) -> IntensityNormalizer

        IntensityNormalizer::IntensityNormalizer(double scale=1.0, double shift=0.0)

        """
        this = _libBornAgainCore.new_IntensityNormalizer(scale, shift)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_IntensityNormalizer
    __del__ = lambda self: None

    def clone(self):
        """
        clone(IntensityNormalizer self) -> IntensityNormalizer

        IntensityNormalizer * IntensityNormalizer::clone() const 

        """
        return _libBornAgainCore.IntensityNormalizer_clone(self)


    def accept(self, visitor):
        """
        accept(IntensityNormalizer self, INodeVisitor visitor)

        void IntensityNormalizer::accept(INodeVisitor *visitor) const

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.IntensityNormalizer_accept(self, visitor)


    def createNormalizedData(self, data):
        """
        createNormalizedData(IntensityNormalizer self, IntensityData data) -> IntensityData

        OutputData< double > * IntensityNormalizer::createNormalizedData(const OutputData< double > &data) const 

        """
        return _libBornAgainCore.IntensityNormalizer_createNormalizedData(self, data)


    def apply(self, data):
        """
        apply(IntensityNormalizer self, IntensityData data)

        void IntensityNormalizer::apply(OutputData< double > &data) const final

        """
        return _libBornAgainCore.IntensityNormalizer_apply(self, data)


    def setMaximumIntensity(self, max_intensity):
        """
        setMaximumIntensity(IntensityNormalizer self, double max_intensity)

        virtual void IntensityNormalizer::setMaximumIntensity(double max_intensity)

        """
        return _libBornAgainCore.IntensityNormalizer_setMaximumIntensity(self, max_intensity)

IntensityNormalizer_swigregister = _libBornAgainCore.IntensityNormalizer_swigregister
IntensityNormalizer_swigregister(IntensityNormalizer)

class IntensityScaleAndShiftNormalizer(IntensityNormalizer):
    """


    Simplified  OutputData normalizer, with max_intensity=1.

    C++ includes: IIntensityNormalizer.h

    """

    __swig_setmethods__ = {}
    for _s in [IntensityNormalizer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntensityScaleAndShiftNormalizer, name, value)
    __swig_getmethods__ = {}
    for _s in [IntensityNormalizer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntensityScaleAndShiftNormalizer, name)
    __repr__ = _swig_repr

    def __init__(self, scale=1.0, shift=0.0):
        """
        __init__(IntensityScaleAndShiftNormalizer self, double scale=1.0, double shift=0.0) -> IntensityScaleAndShiftNormalizer
        __init__(IntensityScaleAndShiftNormalizer self, double scale=1.0) -> IntensityScaleAndShiftNormalizer
        __init__(IntensityScaleAndShiftNormalizer self) -> IntensityScaleAndShiftNormalizer

        IntensityScaleAndShiftNormalizer::IntensityScaleAndShiftNormalizer(double scale=1.0, double shift=0.0)

        """
        this = _libBornAgainCore.new_IntensityScaleAndShiftNormalizer(scale, shift)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_IntensityScaleAndShiftNormalizer
    __del__ = lambda self: None

    def accept(self, visitor):
        """
        accept(IntensityScaleAndShiftNormalizer self, INodeVisitor visitor)

        void IntensityScaleAndShiftNormalizer::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.IntensityScaleAndShiftNormalizer_accept(self, visitor)


    def setMaximumIntensity(self, arg2):
        """
        setMaximumIntensity(IntensityScaleAndShiftNormalizer self, double arg2)

        void IntensityScaleAndShiftNormalizer::setMaximumIntensity(double) final

        """
        return _libBornAgainCore.IntensityScaleAndShiftNormalizer_setMaximumIntensity(self, arg2)


    def clone(self):
        """
        clone(IntensityScaleAndShiftNormalizer self) -> IntensityScaleAndShiftNormalizer

        IntensityScaleAndShiftNormalizer* IntensityScaleAndShiftNormalizer::clone() const final

        """
        return _libBornAgainCore.IntensityScaleAndShiftNormalizer_clone(self)

IntensityScaleAndShiftNormalizer_swigregister = _libBornAgainCore.IntensityScaleAndShiftNormalizer_swigregister
IntensityScaleAndShiftNormalizer_swigregister(IntensityScaleAndShiftNormalizer)

class ISquaredFunction(_object):
    """


    Interface providing measures for deviation between two values. Used By  ChiSquaredModule for chi2 calculations.

    C++ includes: ISquaredFunction.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISquaredFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ISquaredFunction, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_ISquaredFunction
    __del__ = lambda self: None

    def clone(self):
        """
        clone(ISquaredFunction self) -> ISquaredFunction

        virtual ISquaredFunction* ISquaredFunction::clone() const =0

        """
        return _libBornAgainCore.ISquaredFunction_clone(self)


    def calculateSquaredDifference(self, real_value, simulated_value):
        """
        calculateSquaredDifference(ISquaredFunction self, double real_value, double simulated_value) -> double

        virtual double ISquaredFunction::calculateSquaredDifference(double real_value, double simulated_value) const =0

        """
        return _libBornAgainCore.ISquaredFunction_calculateSquaredDifference(self, real_value, simulated_value)


    def calculateSquaredError(self, real_value, simulated_value=0.0):
        """
        calculateSquaredError(ISquaredFunction self, double real_value, double simulated_value=0.0) -> double
        calculateSquaredError(ISquaredFunction self, double real_value) -> double

        virtual double ISquaredFunction::calculateSquaredError(double real_value, double simulated_value=0.0) const =0

        """
        return _libBornAgainCore.ISquaredFunction_calculateSquaredError(self, real_value, simulated_value)

ISquaredFunction_swigregister = _libBornAgainCore.ISquaredFunction_swigregister
ISquaredFunction_swigregister(ISquaredFunction)

class SquaredFunctionDefault(ISquaredFunction):
    """


    Squared difference between two values. value = (a-b)*(a-b)/norm, where norm = max(b, 1.0), a = simulated values, b = real_values.

    C++ includes: ISquaredFunction.h

    """

    __swig_setmethods__ = {}
    for _s in [ISquaredFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SquaredFunctionDefault, name, value)
    __swig_getmethods__ = {}
    for _s in [ISquaredFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SquaredFunctionDefault, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(SquaredFunctionDefault self) -> SquaredFunctionDefault

        SquaredFunctionDefault::SquaredFunctionDefault()

        """
        this = _libBornAgainCore.new_SquaredFunctionDefault()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_SquaredFunctionDefault
    __del__ = lambda self: None

    def clone(self):
        """
        clone(SquaredFunctionDefault self) -> SquaredFunctionDefault

        SquaredFunctionDefault * SquaredFunctionDefault::clone() const override

        """
        return _libBornAgainCore.SquaredFunctionDefault_clone(self)


    def calculateSquaredDifference(self, real_value, simulated_value):
        """
        calculateSquaredDifference(SquaredFunctionDefault self, double real_value, double simulated_value) -> double

        double SquaredFunctionDefault::calculateSquaredDifference(double real_value, double simulated_value) const override

        """
        return _libBornAgainCore.SquaredFunctionDefault_calculateSquaredDifference(self, real_value, simulated_value)


    def calculateSquaredError(self, real_value, simulated_value=0):
        """
        calculateSquaredError(SquaredFunctionDefault self, double real_value, double simulated_value=0) -> double
        calculateSquaredError(SquaredFunctionDefault self, double real_value) -> double

        double SquaredFunctionDefault::calculateSquaredError(double real_value, double simulated_value=0) const override

        """
        return _libBornAgainCore.SquaredFunctionDefault_calculateSquaredError(self, real_value, simulated_value)

SquaredFunctionDefault_swigregister = _libBornAgainCore.SquaredFunctionDefault_swigregister
SquaredFunctionDefault_swigregister(SquaredFunctionDefault)

class SquaredFunctionSimError(ISquaredFunction):
    """


    Squared difference between two values. value = (a-b)*(a-b)/norm, where norm = max(a, 1.0), a = simulated values, b = real_values.

    C++ includes: ISquaredFunction.h

    """

    __swig_setmethods__ = {}
    for _s in [ISquaredFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SquaredFunctionSimError, name, value)
    __swig_getmethods__ = {}
    for _s in [ISquaredFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SquaredFunctionSimError, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_SquaredFunctionSimError
    __del__ = lambda self: None

    def clone(self):
        """
        clone(SquaredFunctionSimError self) -> SquaredFunctionSimError

        SquaredFunctionSimError * SquaredFunctionSimError::clone() const override

        """
        return _libBornAgainCore.SquaredFunctionSimError_clone(self)


    def calculateSquaredDifference(self, real_value, simulated_value):
        """
        calculateSquaredDifference(SquaredFunctionSimError self, double real_value, double simulated_value) -> double

        double SquaredFunctionSimError::calculateSquaredDifference(double real_value, double simulated_value) const override

        """
        return _libBornAgainCore.SquaredFunctionSimError_calculateSquaredDifference(self, real_value, simulated_value)


    def calculateSquaredError(self, real_value, simulated_value):
        """
        calculateSquaredError(SquaredFunctionSimError self, double real_value, double simulated_value) -> double

        double SquaredFunctionSimError::calculateSquaredError(double real_value, double simulated_value) const override

        """
        return _libBornAgainCore.SquaredFunctionSimError_calculateSquaredError(self, real_value, simulated_value)

SquaredFunctionSimError_swigregister = _libBornAgainCore.SquaredFunctionSimError_swigregister
SquaredFunctionSimError_swigregister(SquaredFunctionSimError)

class SquaredFunctionMeanSquaredError(ISquaredFunction):
    """


    Squared difference between two values normalized by mean squared error. value = (a-b)*(a-b)/norm, where norm = sqrt(sigma1*sigma1 + sigma2*sigma2), sigma1=max(a, 1.0), sigma2=max(b,1.0)

    C++ includes: ISquaredFunction.h

    """

    __swig_setmethods__ = {}
    for _s in [ISquaredFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SquaredFunctionMeanSquaredError, name, value)
    __swig_getmethods__ = {}
    for _s in [ISquaredFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SquaredFunctionMeanSquaredError, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_SquaredFunctionMeanSquaredError
    __del__ = lambda self: None

    def clone(self):
        """
        clone(SquaredFunctionMeanSquaredError self) -> SquaredFunctionMeanSquaredError

        SquaredFunctionMeanSquaredError * SquaredFunctionMeanSquaredError::clone() const override

        """
        return _libBornAgainCore.SquaredFunctionMeanSquaredError_clone(self)


    def calculateSquaredDifference(self, real_value, simulated_value):
        """
        calculateSquaredDifference(SquaredFunctionMeanSquaredError self, double real_value, double simulated_value) -> double

        double SquaredFunctionMeanSquaredError::calculateSquaredDifference(double real_value, double simulated_value) const override

        """
        return _libBornAgainCore.SquaredFunctionMeanSquaredError_calculateSquaredDifference(self, real_value, simulated_value)


    def calculateSquaredError(self, real_value, simulated_value):
        """
        calculateSquaredError(SquaredFunctionMeanSquaredError self, double real_value, double simulated_value) -> double

        double SquaredFunctionMeanSquaredError::calculateSquaredError(double real_value, double simulated_value) const override

        """
        return _libBornAgainCore.SquaredFunctionMeanSquaredError_calculateSquaredError(self, real_value, simulated_value)

SquaredFunctionMeanSquaredError_swigregister = _libBornAgainCore.SquaredFunctionMeanSquaredError_swigregister
SquaredFunctionMeanSquaredError_swigregister(SquaredFunctionMeanSquaredError)

class SquaredFunctionSystematicError(ISquaredFunction):
    """


    Squared difference between two values normalized by systematic error. value = (a-b)*(a-b)/norm, where norm = max(error, 1.0), error = b + (epsilon*b)**2.

    C++ includes: ISquaredFunction.h

    """

    __swig_setmethods__ = {}
    for _s in [ISquaredFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SquaredFunctionSystematicError, name, value)
    __swig_getmethods__ = {}
    for _s in [ISquaredFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SquaredFunctionSystematicError, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_SquaredFunctionSystematicError
    __del__ = lambda self: None

    def clone(self):
        """
        clone(SquaredFunctionSystematicError self) -> SquaredFunctionSystematicError

        SquaredFunctionSystematicError * SquaredFunctionSystematicError::clone() const override

        """
        return _libBornAgainCore.SquaredFunctionSystematicError_clone(self)


    def calculateSquaredDifference(self, real_value, simulated_value):
        """
        calculateSquaredDifference(SquaredFunctionSystematicError self, double real_value, double simulated_value) -> double

        double SquaredFunctionSystematicError::calculateSquaredDifference(double real_value, double simulated_value) const override

        """
        return _libBornAgainCore.SquaredFunctionSystematicError_calculateSquaredDifference(self, real_value, simulated_value)


    def calculateSquaredError(self, real_value, simulated_value):
        """
        calculateSquaredError(SquaredFunctionSystematicError self, double real_value, double simulated_value) -> double

        double SquaredFunctionSystematicError::calculateSquaredError(double real_value, double simulated_value) const override

        """
        return _libBornAgainCore.SquaredFunctionSystematicError_calculateSquaredError(self, real_value, simulated_value)

SquaredFunctionSystematicError_swigregister = _libBornAgainCore.SquaredFunctionSystematicError_swigregister
SquaredFunctionSystematicError_swigregister(SquaredFunctionSystematicError)

class SquaredFunctionGaussianError(ISquaredFunction):
    """


    Squared difference between two values with gaussian error. value = (a-b)*(a-b)/norm, where norm = sigma*sigma; sigma is set by user.

    C++ includes: ISquaredFunction.h

    """

    __swig_setmethods__ = {}
    for _s in [ISquaredFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SquaredFunctionGaussianError, name, value)
    __swig_getmethods__ = {}
    for _s in [ISquaredFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SquaredFunctionGaussianError, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_SquaredFunctionGaussianError
    __del__ = lambda self: None

    def clone(self):
        """
        clone(SquaredFunctionGaussianError self) -> SquaredFunctionGaussianError

        SquaredFunctionGaussianError * SquaredFunctionGaussianError::clone() const override

        """
        return _libBornAgainCore.SquaredFunctionGaussianError_clone(self)


    def calculateSquaredDifference(self, real_value, simulated_value):
        """
        calculateSquaredDifference(SquaredFunctionGaussianError self, double real_value, double simulated_value) -> double

        double SquaredFunctionGaussianError::calculateSquaredDifference(double real_value, double simulated_value) const override

        """
        return _libBornAgainCore.SquaredFunctionGaussianError_calculateSquaredDifference(self, real_value, simulated_value)


    def calculateSquaredError(self, real_value, simulated_value):
        """
        calculateSquaredError(SquaredFunctionGaussianError self, double real_value, double simulated_value) -> double

        double SquaredFunctionGaussianError::calculateSquaredError(double real_value, double simulated_value) const override

        """
        return _libBornAgainCore.SquaredFunctionGaussianError_calculateSquaredError(self, real_value, simulated_value)

SquaredFunctionGaussianError_swigregister = _libBornAgainCore.SquaredFunctionGaussianError_swigregister
SquaredFunctionGaussianError_swigregister(SquaredFunctionGaussianError)

class ChiSquaredModule(IChiSquaredModule):
    """


    Calculation of chi2 between two data sets.

    C++ includes: ChiSquaredModule.h

    """

    __swig_setmethods__ = {}
    for _s in [IChiSquaredModule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChiSquaredModule, name, value)
    __swig_getmethods__ = {}
    for _s in [IChiSquaredModule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChiSquaredModule, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ChiSquaredModule self) -> ChiSquaredModule
        __init__(ChiSquaredModule self, ChiSquaredModule other) -> ChiSquaredModule

        ChiSquaredModule::ChiSquaredModule(const ChiSquaredModule &other)

        """
        this = _libBornAgainCore.new_ChiSquaredModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_ChiSquaredModule
    __del__ = lambda self: None

    def clone(self):
        """
        clone(ChiSquaredModule self) -> ChiSquaredModule

        virtual ChiSquaredModule* ChiSquaredModule::clone() const

        clone method 

        """
        return _libBornAgainCore.ChiSquaredModule_clone(self)


    def processFitElements(self, first, last):
        """
        processFitElements(ChiSquaredModule self, std::vector< FitElement,std::allocator< FitElement > >::iterator first, std::vector< FitElement,std::allocator< FitElement > >::iterator last)

        void ChiSquaredModule::processFitElements(std::vector< FitElement >::iterator first, std::vector< FitElement >::iterator last)

        """
        return _libBornAgainCore.ChiSquaredModule_processFitElements(self, first, last)

ChiSquaredModule_swigregister = _libBornAgainCore.ChiSquaredModule_swigregister
ChiSquaredModule_swigregister(ChiSquaredModule)

class FitObject(INode):
    """


    Holds simulation description and real data to run the fit.

    C++ includes: FitObject.h

    """

    __swig_setmethods__ = {}
    for _s in [INode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitObject, name, value)
    __swig_getmethods__ = {}
    for _s in [INode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FitObject, name)
    __repr__ = _swig_repr

    def __init__(self, simulation, real_data, weight=1):
        """
        __init__(FitObject self, Simulation simulation, IntensityData real_data, double weight=1) -> FitObject
        __init__(FitObject self, Simulation simulation, IntensityData real_data) -> FitObject

        FitObject::FitObject(const Simulation &simulation, const OutputData< double > &real_data, double weight=1)

        FitObject constructor

        Parameters:
        -----------

        simulation: 
        The simulation to run

        real_data: 
        The real data

        weight: 
        Weight of dataset in chi2 calculations

        adjust_detector_to_data: 
        Detector axes will be adjusted to real data axes, if true 

        """
        this = _libBornAgainCore.new_FitObject(simulation, real_data, weight)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FitObject
    __del__ = lambda self: None

    def accept(self, visitor):
        """
        accept(FitObject self, INodeVisitor visitor)

        void FitObject::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FitObject_accept(self, visitor)


    def weight(self):
        """
        weight(FitObject self) -> double

        double FitObject::weight() const

        Returns weight of data set in chi2 calculations. 

        """
        return _libBornAgainCore.FitObject_weight(self)


    def numberOfFitElements(self):
        """
        numberOfFitElements(FitObject self) -> size_t

        size_t FitObject::numberOfFitElements() const

        Returns the size of the data. It is equal to the number of non-masked detector channels which will participate in chi2 calculations. 

        """
        return _libBornAgainCore.FitObject_numberOfFitElements(self)


    def prepareFitElements(self, fit_elements, weight, arg4=None):
        """
        prepareFitElements(FitObject self, std::vector< FitElement,std::allocator< FitElement > > & fit_elements, double weight, IIntensityNormalizer arg4=None)
        prepareFitElements(FitObject self, std::vector< FitElement,std::allocator< FitElement > > & fit_elements, double weight)

        void FitObject::prepareFitElements(std::vector< FitElement > &fit_elements, double weight, IIntensityNormalizer *=0)

        Runs simulation and put results (the real and simulated intensities) into external vector. Masked channels will be excluded from the vector. 

        """
        return _libBornAgainCore.FitObject_prepareFitElements(self, fit_elements, weight, arg4)


    def getChildren(self):
        """
        getChildren(FitObject self) -> swig_dummy_type_const_inode_vector

        std::vector< const INode * > FitObject::getChildren() const

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.FitObject_getChildren(self)


    def simulationResult(self):
        """
        simulationResult(FitObject self) -> SimulationResult

        SimulationResult FitObject::simulationResult() const 

        """
        return _libBornAgainCore.FitObject_simulationResult(self)


    def experimentalData(self):
        """
        experimentalData(FitObject self) -> SimulationResult

        SimulationResult FitObject::experimentalData() const 

        """
        return _libBornAgainCore.FitObject_experimentalData(self)

FitObject_swigregister = _libBornAgainCore.FitObject_swigregister
FitObject_swigregister(FitObject)

class FitOptions(_object):
    """Proxy of C++ FitOptions class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FitOptions, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(FitOptions self) -> FitOptions"""
        this = _libBornAgainCore.new_FitOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FitOptions
    __del__ = lambda self: None

    def derivEpsilon(self):
        """derivEpsilon(FitOptions self) -> double"""
        return _libBornAgainCore.FitOptions_derivEpsilon(self)


    def setDerivEpsilon(self, deriv_epsilon):
        """setDerivEpsilon(FitOptions self, double deriv_epsilon)"""
        return _libBornAgainCore.FitOptions_setDerivEpsilon(self, deriv_epsilon)


    def stepFactor(self):
        """stepFactor(FitOptions self) -> double"""
        return _libBornAgainCore.FitOptions_stepFactor(self)


    def setStepFactor(self, step_factor):
        """setStepFactor(FitOptions self, double step_factor)"""
        return _libBornAgainCore.FitOptions_setStepFactor(self, step_factor)

FitOptions_swigregister = _libBornAgainCore.FitOptions_swigregister
FitOptions_swigregister(FitOptions)

class FitParameter(libBornAgainFit.IFitParameter):
    """


    Fittable parameter, linked to other parameters from pools.

    C++ includes: FitParameter.h

    """

    __swig_setmethods__ = {}
    for _s in [libBornAgainFit.IFitParameter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [libBornAgainFit.IFitParameter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FitParameter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FitParameter self) -> FitParameter
        __init__(FitParameter self, std::string const & pattern, double value, AttLimits lim, double step=0.0) -> FitParameter
        __init__(FitParameter self, std::string const & pattern, double value, AttLimits lim) -> FitParameter
        __init__(FitParameter self, std::string const & pattern, double value) -> FitParameter
        __init__(FitParameter self, double value, AttLimits lim, double step=0.0) -> FitParameter
        __init__(FitParameter self, double value, AttLimits lim) -> FitParameter
        __init__(FitParameter self, double value) -> FitParameter

        FitParameter::FitParameter(double value, const AttLimits &lim=AttLimits::limitless(), double step=0.0)

        """
        this = _libBornAgainCore.new_FitParameter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FitParameter
    __del__ = lambda self: None

    def clone(self):
        """
        clone(FitParameter self) -> FitParameter

        FitParameter * FitParameter::clone() const 

        """
        return _libBornAgainCore.FitParameter_clone(self)


    def setValue(self, value):
        """
        setValue(FitParameter self, double value)

        void FitParameter::setValue(double value) final

        Sets given value for all bound parameters. 

        """
        return _libBornAgainCore.FitParameter_setValue(self, value)


    def addPattern(self, pattern):
        """
        addPattern(FitParameter self, std::string const & pattern) -> FitParameter

        FitParameter & FitParameter::addPattern(const std::string &pattern)

        Adds pattern to the list for later usage in parameter pool matching. 

        """
        return _libBornAgainCore.FitParameter_addPattern(self, pattern)


    def addParameter(self, par):
        """
        addParameter(FitParameter self, RealParameter par)

        void FitParameter::addParameter(const RealParameter &par)

        Adds real parameter to the collection. 

        """
        return _libBornAgainCore.FitParameter_addParameter(self, par)


    def addMatchedParameters(self, pool):
        """
        addMatchedParameters(FitParameter self, ParameterPool pool)

        void FitParameter::addMatchedParameters(const ParameterPool &pool)

        Adds parameters from pool which match given wildcard. 

        """
        return _libBornAgainCore.FitParameter_addMatchedParameters(self, pool)


    def patterns(self):
        """
        patterns(FitParameter self) -> vector_string_t

        std::vector< std::string > FitParameter::patterns() const 

        """
        return _libBornAgainCore.FitParameter_patterns(self)


    def matchedParameterNames(self):
        """
        matchedParameterNames(FitParameter self) -> vector_string_t

        std::vector< std::string > FitParameter::matchedParameterNames() const

        Returns vector of strings with names of all matched parameters. 

        """
        return _libBornAgainCore.FitParameter_matchedParameterNames(self)


    def patternIntersection(self, other):
        """
        patternIntersection(FitParameter self, FitParameter other) -> vector_string_t

        std::vector< std::string > FitParameter::patternIntersection(const FitParameter &other) const

        Returns vector containing patterns existing in both FitParametersLinked. 

        """
        return _libBornAgainCore.FitParameter_patternIntersection(self, other)


    def isConflicting(self, other):
        """
        isConflicting(FitParameter self, FitParameter other) -> bool

        bool FitParameter::isConflicting(const FitParameter &other) const

        Returns true if two FitParameterLinked are intended to steer same  RealParameter. 

        """
        return _libBornAgainCore.FitParameter_isConflicting(self, other)

FitParameter_swigregister = _libBornAgainCore.FitParameter_swigregister
FitParameter_swigregister(FitParameter)

class FitSuite(IObservable):
    """


    User interface class that wraps all fit methods.

    C++ includes: FitSuite.h

    """

    __swig_setmethods__ = {}
    for _s in [IObservable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitSuite, name, value)
    __swig_getmethods__ = {}
    for _s in [IObservable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FitSuite, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(FitSuite self) -> FitSuite

        FitSuite::FitSuite(const FitSuite &)=delete

        """
        this = _libBornAgainCore.new_FitSuite()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FitSuite
    __del__ = lambda self: None

    def addSimulationAndRealData(self, *args):
        """
        addSimulationAndRealData(FitSuite self, Simulation simulation, IntensityData real_data, double weight=1)
        addSimulationAndRealData(FitSuite self, Simulation simulation, IntensityData real_data)
        addSimulationAndRealData(FitSuite self, Simulation simulation, IHistogram real_data, double weight=1)
        addSimulationAndRealData(FitSuite self, Simulation simulation, IHistogram real_data)
        addSimulationAndRealData(FitSuite self, Simulation simulation, vdouble2d_t real_data, double weight=1)
        addSimulationAndRealData(FitSuite self, Simulation simulation, vdouble2d_t real_data)
        addSimulationAndRealData(FitSuite self, Simulation simulation, vdouble1d_t real_data, double weight=1)
        addSimulationAndRealData(FitSuite self, Simulation simulation, vdouble1d_t real_data)

        void FitSuite::addSimulationAndRealData(const Simulation &simulation, const std::vector< double > &real_data, double weight=1)

        Assigns pair of (simulation, real_data) for fitting. A version for the  real_data represented as a one-dimensional numpy array.  Simulation output must agree in dimensions with  real_data. 

        """
        return _libBornAgainCore.FitSuite_addSimulationAndRealData(self, *args)


    def addFitParameter(self, *args):
        """
        addFitParameter(FitSuite self, std::string const & pattern, double value, AttLimits limits, double step=0.0) -> FitParameter
        addFitParameter(FitSuite self, std::string const & pattern, double value, AttLimits limits) -> FitParameter
        addFitParameter(FitSuite self, std::string const & pattern, double value) -> FitParameter
        addFitParameter(FitSuite self, FitParameter fitPar) -> FitParameter

        FitParameter * FitSuite::addFitParameter(const FitParameter &fitPar)

        Adds fit parameter

        Parameters:
        -----------

        fitPar: 
        Fully constructed fit parameter. 

        """
        return _libBornAgainCore.FitSuite_addFitParameter(self, *args)


    def setChiSquaredModule(self, chi2_module):
        """
        setChiSquaredModule(FitSuite self, IChiSquaredModule chi2_module)

        void FitSuite::setChiSquaredModule(const IChiSquaredModule &chi2_module)

        Replaces default  ChiSquaredModule with new one. 

        """
        return _libBornAgainCore.FitSuite_setChiSquaredModule(self, chi2_module)


    def addFitStrategy(self, strategy):
        """
        addFitStrategy(FitSuite self, IFitStrategy strategy)

        void FitSuite::addFitStrategy(const IFitStrategy &strategy)

        Adds fit strategy. 

        """
        return _libBornAgainCore.FitSuite_addFitStrategy(self, strategy)


    def setMinimizer(self, *args):
        """
        setMinimizer(FitSuite self, std::string const & minimizer_name, std::string const & algorithm_name, std::string const & minimizer_options)
        setMinimizer(FitSuite self, std::string const & minimizer_name, std::string const & algorithm_name)
        setMinimizer(FitSuite self, std::string const & minimizer_name)
        setMinimizer(FitSuite self, IMinimizer * minimizer)

        void FitSuite::setMinimizer(IMinimizer *minimizer)

        Sets minimizer. 

        """
        return _libBornAgainCore.FitSuite_setMinimizer(self, *args)


    def minimizer(self):
        """
        minimizer(FitSuite self) -> IMinimizer const *

        const IMinimizer * FitSuite::minimizer() const

        Returns minimizer. 

        """
        return _libBornAgainCore.FitSuite_minimizer(self)


    def initPrint(self, print_every_nth):
        """
        initPrint(FitSuite self, int print_every_nth)

        void FitSuite::initPrint(int print_every_nth)

        Initializes printing to standard output during the fitting. Prints also the summary when completed.

        Parameters:
        -----------

        print_every_nth: 
        Print every n'th iteration 

        """
        return _libBornAgainCore.FitSuite_initPrint(self, print_every_nth)


    def runFit(self):
        """
        runFit(FitSuite self)

        void FitSuite::runFit()

        main method to run the fitting 

        """
        return _libBornAgainCore.FitSuite_runFit(self)


    def numberOfFitObjects(self):
        """
        numberOfFitObjects(FitSuite self) -> size_t

        size_t FitSuite::numberOfFitObjects() const

        Returns number of fit objects, where fit object stands for (real, simulated) pair. 

        """
        return _libBornAgainCore.FitSuite_numberOfFitObjects(self)


    def fitObjects(self):
        """
        fitObjects(FitSuite self) -> FitSuiteObjects

        FitSuiteObjects * FitSuite::fitObjects()

        returns  FitObject (pair of simulation/real data) 

        """
        return _libBornAgainCore.FitSuite_fitObjects(self)


    def fitParameters(self):
        """
        fitParameters(FitSuite self) -> FitParameterSet *

        FitParameterSet * FitSuite::fitParameters()

        Returns reference to fit parameters. 

        """
        return _libBornAgainCore.FitSuite_fitParameters(self)


    def fitStrategies(self):
        """
        fitStrategies(FitSuite self) -> FitSuiteStrategies *

        FitSuiteStrategies * FitSuite::fitStrategies()

        Returns reference to fit parameters. 

        """
        return _libBornAgainCore.FitSuite_fitStrategies(self)


    def isLastIteration(self):
        """
        isLastIteration(FitSuite self) -> bool

        bool FitSuite::isLastIteration() const

        if the last iteration is done (used by observers to print summary) 

        """
        return _libBornAgainCore.FitSuite_isLastIteration(self)


    def numberOfIterations(self):
        """
        numberOfIterations(FitSuite self) -> size_t

        size_t FitSuite::numberOfIterations() const

        Returns current number of minimization function calls. 

        """
        return _libBornAgainCore.FitSuite_numberOfIterations(self)


    def currentStrategyIndex(self):
        """
        currentStrategyIndex(FitSuite self) -> size_t

        size_t FitSuite::currentStrategyIndex() const

        Returns the number of current strategy. 

        """
        return _libBornAgainCore.FitSuite_currentStrategyIndex(self)


    def printResults(self):
        """
        printResults(FitSuite self)

        void FitSuite::printResults() const

        Prints results of the minimization to the standard output. 

        """
        return _libBornAgainCore.FitSuite_printResults(self)


    def reportResults(self):
        """
        reportResults(FitSuite self) -> std::string

        std::string FitSuite::reportResults() const

        Reports results of minimization in the form of multi-line string. 

        """
        return _libBornAgainCore.FitSuite_reportResults(self)


    def getChi2(self):
        """
        getChi2(FitSuite self) -> double

        double FitSuite::getChi2() const

        Returns minimum chi squared value found. 

        """
        return _libBornAgainCore.FitSuite_getChi2(self)


    def interruptFitting(self):
        """
        interruptFitting(FitSuite self)

        void FitSuite::interruptFitting()

        """
        return _libBornAgainCore.FitSuite_interruptFitting(self)


    def resetInterrupt(self):
        """
        resetInterrupt(FitSuite self)

        void FitSuite::resetInterrupt()

        """
        return _libBornAgainCore.FitSuite_resetInterrupt(self)


    def isInterrupted(self):
        """
        isInterrupted(FitSuite self) -> bool

        bool FitSuite::isInterrupted()

        """
        return _libBornAgainCore.FitSuite_isInterrupted(self)


    def parametersToString(self):
        """
        parametersToString(FitSuite self) -> std::string

        std::string FitSuite::parametersToString() const

        Returns multiline string representing possible fit parameters. 

        """
        return _libBornAgainCore.FitSuite_parametersToString(self)


    def treeToString(self):
        """
        treeToString(FitSuite self) -> std::string

        std::string FitSuite::treeToString() const

        Returns multiline string representing tree structure of fit components. 

        """
        return _libBornAgainCore.FitSuite_treeToString(self)


    def setupToString(self):
        """
        setupToString(FitSuite self) -> std::string

        std::string FitSuite::setupToString()

        Returns multiline string representing fit setup. 

        """
        return _libBornAgainCore.FitSuite_setupToString(self)


    def simulationResult(self, i_item=0):
        """
        simulationResult(FitSuite self, size_t i_item=0) -> SimulationResult
        simulationResult(FitSuite self) -> SimulationResult

        SimulationResult FitSuite::simulationResult(size_t i_item=0) const

        Returns simulation result.

        Parameters:
        -----------

        i_item: 
        the index of fit pair 

        """
        return _libBornAgainCore.FitSuite_simulationResult(self, i_item)


    def experimentalData(self, i_item=0):
        """
        experimentalData(FitSuite self, size_t i_item=0) -> SimulationResult
        experimentalData(FitSuite self) -> SimulationResult

        SimulationResult FitSuite::experimentalData(size_t i_item=0) const

        Returns experimental data.

        Parameters:
        -----------

        i_item: 
        the index of fit pair 

        """
        return _libBornAgainCore.FitSuite_experimentalData(self, i_item)


    def relativeDifference(self, i_item=0):
        """
        relativeDifference(FitSuite self, size_t i_item=0) -> SimulationResult
        relativeDifference(FitSuite self) -> SimulationResult

        SimulationResult FitSuite::relativeDifference(size_t i_item=0) const

        Returns relative difference between simulation and real data.

        Parameters:
        -----------

        i_item: 
        the index of fit pair 

        """
        return _libBornAgainCore.FitSuite_relativeDifference(self, i_item)

FitSuite_swigregister = _libBornAgainCore.FitSuite_swigregister
FitSuite_swigregister(FitSuite)

class FitSuiteObjects(INode):
    """


    Holds vector of  FitObject's (simulation and real data) to fit

    C++ includes: FitSuiteObjects.h

    """

    __swig_setmethods__ = {}
    for _s in [INode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitSuiteObjects, name, value)
    __swig_getmethods__ = {}
    for _s in [INode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FitSuiteObjects, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(FitSuiteObjects self) -> FitSuiteObjects

        FitSuiteObjects::FitSuiteObjects()

        """
        this = _libBornAgainCore.new_FitSuiteObjects()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FitSuiteObjects
    __del__ = lambda self: None

    def accept(self, visitor):
        """
        accept(FitSuiteObjects self, INodeVisitor visitor)

        void FitSuiteObjects::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FitSuiteObjects_accept(self, visitor)


    def add(self, simulation, real_data, weight=1.0):
        """
        add(FitSuiteObjects self, Simulation simulation, IntensityData real_data, double weight=1.0) -> FitObject
        add(FitSuiteObjects self, Simulation simulation, IntensityData real_data) -> FitObject

        FitObject * FitSuiteObjects::add(const Simulation &simulation, const OutputData< double > &real_data, double weight=1.0)

        Adds to kit pair of (simulation, real data) for consecutive simulation. 

        """
        return _libBornAgainCore.FitSuiteObjects_add(self, simulation, real_data, weight)


    def getSizeOfDataSet(self):
        """
        getSizeOfDataSet(FitSuiteObjects self) -> size_t

        size_t FitSuiteObjects::getSizeOfDataSet() const

        Returns total number of data points (number of all non-masked channels in all fit objects)

        Returns total number of data points. 

        """
        return _libBornAgainCore.FitSuiteObjects_getSizeOfDataSet(self)


    def setChiSquaredModule(self, chi2_module):
        """
        setChiSquaredModule(FitSuiteObjects self, IChiSquaredModule chi2_module)

        void FitSuiteObjects::setChiSquaredModule(const IChiSquaredModule &chi2_module)

        Replaces default  ChiSquaredModule with new one. 

        """
        return _libBornAgainCore.FitSuiteObjects_setChiSquaredModule(self, chi2_module)


    def simulationResult(self, i_item=0):
        """
        simulationResult(FitSuiteObjects self, size_t i_item=0) -> SimulationResult
        simulationResult(FitSuiteObjects self) -> SimulationResult

        SimulationResult FitSuiteObjects::simulationResult(size_t i_item=0) const 

        """
        return _libBornAgainCore.FitSuiteObjects_simulationResult(self, i_item)


    def experimentalData(self, i_item=0):
        """
        experimentalData(FitSuiteObjects self, size_t i_item=0) -> SimulationResult
        experimentalData(FitSuiteObjects self) -> SimulationResult

        SimulationResult FitSuiteObjects::experimentalData(size_t i_item=0) const 

        """
        return _libBornAgainCore.FitSuiteObjects_experimentalData(self, i_item)


    def relativeDifference(self, i_item=0):
        """
        relativeDifference(FitSuiteObjects self, size_t i_item=0) -> SimulationResult
        relativeDifference(FitSuiteObjects self) -> SimulationResult

        SimulationResult FitSuiteObjects::relativeDifference(size_t i_item=0) const 

        """
        return _libBornAgainCore.FitSuiteObjects_relativeDifference(self, i_item)


    def runSimulations(self):
        """
        runSimulations(FitSuiteObjects self)

        void FitSuiteObjects::runSimulations()

        run all simulation defined in fit pairs

        loop through all defined simulations and run them 

        """
        return _libBornAgainCore.FitSuiteObjects_runSimulations(self)


    def getChiSquaredValue(self):
        """
        getChiSquaredValue(FitSuiteObjects self) -> double

        double FitSuiteObjects::getChiSquaredValue() const

        Returns chi2 calculated over whole dataset. 

        """
        return _libBornAgainCore.FitSuiteObjects_getChiSquaredValue(self)


    def getResidualValue(self, global_index):
        """
        getResidualValue(FitSuiteObjects self, size_t global_index) -> double

        double FitSuiteObjects::getResidualValue(size_t global_index)

        Returns residuals for single data element

        Parameters:
        -----------

        global_index: 
        index accross all element in  FitElement vector 

        """
        return _libBornAgainCore.FitSuiteObjects_getResidualValue(self, global_index)


    def setNfreeParameters(self, nfree_parameters):
        """
        setNfreeParameters(FitSuiteObjects self, int nfree_parameters)

        void FitSuiteObjects::setNfreeParameters(int nfree_parameters)

        """
        return _libBornAgainCore.FitSuiteObjects_setNfreeParameters(self, nfree_parameters)


    def clear(self):
        """
        clear(FitSuiteObjects self)

        void FitSuiteObjects::clear()

        clear all data 

        """
        return _libBornAgainCore.FitSuiteObjects_clear(self)


    def size(self):
        """
        size(FitSuiteObjects self) -> size_t

        size_t FitSuiteObjects::size() const 

        """
        return _libBornAgainCore.FitSuiteObjects_size(self)


    def begin(self):
        """
        begin(FitSuiteObjects self) -> FitSuiteObjects::iterator

        iterator FitSuiteObjects::begin()

        """
        return _libBornAgainCore.FitSuiteObjects_begin(self)


    def end(self):
        """
        end(FitSuiteObjects self) -> FitSuiteObjects::iterator

        iterator FitSuiteObjects::end()

        """
        return _libBornAgainCore.FitSuiteObjects_end(self)


    def getChildren(self):
        """
        getChildren(FitSuiteObjects self) -> swig_dummy_type_const_inode_vector

        std::vector< const INode * > FitSuiteObjects::getChildren() const

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.FitSuiteObjects_getChildren(self)

FitSuiteObjects_swigregister = _libBornAgainCore.FitSuiteObjects_swigregister
FitSuiteObjects_swigregister(FitSuiteObjects)


def StandardNormal(x):
    """
    StandardNormal(double x) -> double

    double MathFunctions::StandardNormal(double x)

    """
    return _libBornAgainCore.StandardNormal(x)

def Gaussian(x, average, std_dev):
    """
    Gaussian(double x, double average, double std_dev) -> double

    double MathFunctions::Gaussian(double x, double average, double std_dev)

    """
    return _libBornAgainCore.Gaussian(x, average, std_dev)

def IntegratedGaussian(x, average, std_dev):
    """
    IntegratedGaussian(double x, double average, double std_dev) -> double

    double MathFunctions::IntegratedGaussian(double x, double average, double std_dev)

    """
    return _libBornAgainCore.IntegratedGaussian(x, average, std_dev)

def cot(x):
    """
    cot(double x) -> double

    double MathFunctions::cot(double x)

    cotangent function:  $cot(x)\\equiv1/tan(x)$

    """
    return _libBornAgainCore.cot(x)

def Si(x):
    """
    Si(double x) -> double

    double MathFunctions::Si(double x)

    Sine integral function:  $Si(x)\\equiv\\int_0^x du \\sin(u)/u$. 

    """
    return _libBornAgainCore.Si(x)

def sinc(*args):
    """
    sinc(double x) -> double
    sinc(complex_t const z) -> complex_t

    complex_t MathFunctions::sinc(const complex_t z)

    Complex sinc function:  $sinc(x)\\equiv\\sin(x)/x$. 

    """
    return _libBornAgainCore.sinc(*args)

def tanhc(z):
    """
    tanhc(complex_t const z) -> complex_t

    complex_t MathFunctions::tanhc(const complex_t z)

    Complex tanhc function:  $tanhc(x)\\equiv\\tanh(x)/x$. 

    """
    return _libBornAgainCore.tanhc(z)

def Laue(z, N):
    """
    Laue(complex_t const z, size_t N) -> complex_t

    complex_t MathFunctions::Laue(const complex_t z, size_t N)

    """
    return _libBornAgainCore.Laue(z, N)

def erf(arg):
    """
    erf(double arg) -> double

    double MathFunctions::erf(double arg)

    Error function of real-valued argument. 

    """
    return _libBornAgainCore.erf(arg)

def Bessel_J0(*args):
    """
    Bessel_J0(double x) -> double
    Bessel_J0(complex_t const z) -> complex_t

    complex_t MathFunctions::Bessel_J0(const complex_t z)

    Complex Bessel function of the first kind and order 0. 

    """
    return _libBornAgainCore.Bessel_J0(*args)

def Bessel_J1(*args):
    """
    Bessel_J1(double x) -> double
    Bessel_J1(complex_t const z) -> complex_t

    complex_t MathFunctions::Bessel_J1(const complex_t z)

    Complex Bessel function of the first kind and order 1. 

    """
    return _libBornAgainCore.Bessel_J1(*args)

def Bessel_J1c(*args):
    """
    Bessel_J1c(double x) -> double
    Bessel_J1c(complex_t const z) -> complex_t

    complex_t MathFunctions::Bessel_J1c(const complex_t z)

    Complex Bessel function Bessel_J1(x)/x. 

    """
    return _libBornAgainCore.Bessel_J1c(*args)
FORWARD_FFT = _libBornAgainCore.FORWARD_FFT
BACKWARD_FFT = _libBornAgainCore.BACKWARD_FFT

def FastFourierTransform(*args):
    """
    FastFourierTransform(vector_complex_t data, MathFunctions::EFFTDirection tcase) -> vector_complex_t
    FastFourierTransform(vdouble1d_t data, MathFunctions::EFFTDirection tcase) -> vector_complex_t

    std::vector< complex_t > MathFunctions::FastFourierTransform(const std::vector< double > &data, EFFTDirection tcase)

    simple (and unoptimized) wrapper function for the discrete fast Fourier transformation library (fftw3); transforms real to complex 

    """
    return _libBornAgainCore.FastFourierTransform(*args)

def ConvolveFFT(signal, resfunc):
    """
    ConvolveFFT(vdouble1d_t signal, vdouble1d_t resfunc) -> vector_complex_t

    std::vector< complex_t > MathFunctions::ConvolveFFT(const std::vector< double > &signal, const std::vector< double > &resfunc)

    convolution of two real vectors of equal size 

    """
    return _libBornAgainCore.ConvolveFFT(signal, resfunc)

def GenerateUniformRandom():
    """
    GenerateUniformRandom() -> double

    double MathFunctions::GenerateUniformRandom()

    """
    return _libBornAgainCore.GenerateUniformRandom()

def GenerateStandardNormalRandom():
    """
    GenerateStandardNormalRandom() -> double

    double MathFunctions::GenerateStandardNormalRandom()

    """
    return _libBornAgainCore.GenerateStandardNormalRandom()

def GenerateNormalRandom(average, std_dev):
    """
    GenerateNormalRandom(double average, double std_dev) -> double

    double MathFunctions::GenerateNormalRandom(double average, double std_dev)

    """
    return _libBornAgainCore.GenerateNormalRandom(average, std_dev)

def GeneratePoissonRandom(average):
    """
    GeneratePoissonRandom(double average) -> double

    double MathFunctions::GeneratePoissonRandom(double average)

    """
    return _libBornAgainCore.GeneratePoissonRandom(average)
class AdjustMinimizerStrategy(IFitStrategy):
    """


    Strategy modifies mimimizer settings before running minimization round.

    C++ includes: AdjustMinimizerStrategy.h

    """

    __swig_setmethods__ = {}
    for _s in [IFitStrategy]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdjustMinimizerStrategy, name, value)
    __swig_getmethods__ = {}
    for _s in [IFitStrategy]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdjustMinimizerStrategy, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(AdjustMinimizerStrategy self) -> AdjustMinimizerStrategy
        __init__(AdjustMinimizerStrategy self, std::string const & minimizerName, std::string const & algorithmName, std::string const & optionString) -> AdjustMinimizerStrategy
        __init__(AdjustMinimizerStrategy self, std::string const & minimizerName, std::string const & algorithmName) -> AdjustMinimizerStrategy
        __init__(AdjustMinimizerStrategy self, std::string const & minimizerName) -> AdjustMinimizerStrategy

        AdjustMinimizerStrategy::AdjustMinimizerStrategy(const std::string &minimizerName, const std::string &algorithmName="", const std::string &optionString="")

        """
        this = _libBornAgainCore.new_AdjustMinimizerStrategy(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(AdjustMinimizerStrategy self) -> AdjustMinimizerStrategy

        AdjustMinimizerStrategy * AdjustMinimizerStrategy::clone() const 

        """
        return _libBornAgainCore.AdjustMinimizerStrategy_clone(self)


    def setMinimizer(self, *args):
        """
        setMinimizer(AdjustMinimizerStrategy self, std::string const & minimizerName, std::string const & algorithmName, std::string const & optionString)
        setMinimizer(AdjustMinimizerStrategy self, std::string const & minimizerName, std::string const & algorithmName)
        setMinimizer(AdjustMinimizerStrategy self, std::string const & minimizerName)

        void AdjustMinimizerStrategy::setMinimizer(const std::string &minimizerName, const std::string &algorithmName="", const std::string &optionString="")

        """
        return _libBornAgainCore.AdjustMinimizerStrategy_setMinimizer(self, *args)


    def execute(self):
        """
        execute(AdjustMinimizerStrategy self)

        void AdjustMinimizerStrategy::execute()

        """
        return _libBornAgainCore.AdjustMinimizerStrategy_execute(self)

    __swig_destroy__ = _libBornAgainCore.delete_AdjustMinimizerStrategy
    __del__ = lambda self: None
AdjustMinimizerStrategy_swigregister = _libBornAgainCore.AdjustMinimizerStrategy_swigregister
AdjustMinimizerStrategy_swigregister(AdjustMinimizerStrategy)

class IMultiLayerBuilder(IParameterized):
    """


    Interface to the class capable to build samples to simulate.

    C++ includes: IMultiLayerBuilder.h

    """

    __swig_setmethods__ = {}
    for _s in [IParameterized]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMultiLayerBuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [IParameterized]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IMultiLayerBuilder, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(IMultiLayerBuilder self) -> IMultiLayerBuilder

        IMultiLayerBuilder::IMultiLayerBuilder()

        """
        if self.__class__ == IMultiLayerBuilder:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IMultiLayerBuilder(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def buildSample(self):
        """
        buildSample(IMultiLayerBuilder self) -> MultiLayer

        virtual MultiLayer* IMultiLayerBuilder::buildSample() const =0

        """
        return _libBornAgainCore.IMultiLayerBuilder_buildSample(self)


    def createSample(self, index=0):
        """
        createSample(IMultiLayerBuilder self, size_t index=0) -> MultiLayer
        createSample(IMultiLayerBuilder self) -> MultiLayer

        virtual MultiLayer* IMultiLayerBuilder::createSample(size_t index=0)

        """
        return _libBornAgainCore.IMultiLayerBuilder_createSample(self, index)


    def size(self):
        """
        size(IMultiLayerBuilder self) -> size_t

        virtual size_t IMultiLayerBuilder::size()

        """
        return _libBornAgainCore.IMultiLayerBuilder_size(self)


    def registerParameter(self, name, parpointer):
        """registerParameter(IMultiLayerBuilder self, std::string const & name, int64_t parpointer) -> RealParameter"""
        return _libBornAgainCore.IMultiLayerBuilder_registerParameter(self, name, parpointer)


    def setParameterValue(self, name, value):
        """setParameterValue(IMultiLayerBuilder self, std::string const & name, double value)"""
        return _libBornAgainCore.IMultiLayerBuilder_setParameterValue(self, name, value)


    def parametersToString(self):
        """parametersToString(IMultiLayerBuilder self) -> std::string"""
        return _libBornAgainCore.IMultiLayerBuilder_parametersToString(self)


    def createParameterTree(self):
        """createParameterTree(IMultiLayerBuilder self) -> ParameterPool"""
        return _libBornAgainCore.IMultiLayerBuilder_createParameterTree(self)


    def parameterPool(self):
        """parameterPool(IMultiLayerBuilder self) -> ParameterPool"""
        return _libBornAgainCore.IMultiLayerBuilder_parameterPool(self)


    def onChange(self):
        """onChange(IMultiLayerBuilder self)"""
        return _libBornAgainCore.IMultiLayerBuilder_onChange(self)


    def isPythonBuilder():
        """isPythonBuilder() -> bool"""
        return _libBornAgainCore.IMultiLayerBuilder_isPythonBuilder()

    isPythonBuilder = staticmethod(isPythonBuilder)
    __swig_destroy__ = _libBornAgainCore.delete_IMultiLayerBuilder
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IMultiLayerBuilder(self)
        return weakref_proxy(self)
IMultiLayerBuilder_swigregister = _libBornAgainCore.IMultiLayerBuilder_swigregister
IMultiLayerBuilder_swigregister(IMultiLayerBuilder)

def IMultiLayerBuilder_isPythonBuilder():
    """IMultiLayerBuilder_isPythonBuilder() -> bool"""
    return _libBornAgainCore.IMultiLayerBuilder_isPythonBuilder()

class INodeVisitor(_object):
    """


    From visitor pattern to achieve double dispatch.

    Visitor interface to visit  ISample objects.

    C++ includes: INodeVisitor.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, INodeVisitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, INodeVisitor, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(INodeVisitor self) -> INodeVisitor

        INodeVisitor::INodeVisitor()

        """
        this = _libBornAgainCore.new_INodeVisitor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_INodeVisitor
    __del__ = lambda self: None

    def visit(self, *args):
        """
        visit(INodeVisitor self, BasicLattice arg2)
        visit(INodeVisitor self, Beam arg2)
        visit(INodeVisitor self, ConstantBackground arg2)
        visit(INodeVisitor self, ConvolutionDetectorResolution const * arg2)
        visit(INodeVisitor self, Crystal arg2)
        visit(INodeVisitor self, DistributionCosine arg2)
        visit(INodeVisitor self, DistributionGate arg2)
        visit(INodeVisitor self, DistributionGaussian arg2)
        visit(INodeVisitor self, DistributionLogNormal arg2)
        visit(INodeVisitor self, DistributionLorentz arg2)
        visit(INodeVisitor self, DistributionTrapezoid arg2)
        visit(INodeVisitor self, FitObject arg2)
        visit(INodeVisitor self, FitSuiteObjects arg2)
        visit(INodeVisitor self, FootprintFactorGaussian arg2)
        visit(INodeVisitor self, FootprintFactorSquare arg2)
        visit(INodeVisitor self, FormFactorAnisoPyramid arg2)
        visit(INodeVisitor self, FormFactorBox arg2)
        visit(INodeVisitor self, FormFactorCone arg2)
        visit(INodeVisitor self, FormFactorCone6 arg2)
        visit(INodeVisitor self, FormFactorCoreShell const * arg2)
        visit(INodeVisitor self, FormFactorCrystal arg2)
        visit(INodeVisitor self, FormFactorCuboctahedron arg2)
        visit(INodeVisitor self, FormFactorCylinder arg2)
        visit(INodeVisitor self, FormFactorDecoratorDebyeWaller arg2)
        visit(INodeVisitor self, FormFactorDecoratorMaterial const * arg2)
        visit(INodeVisitor self, FormFactorDecoratorPositionFactor const * arg2)
        visit(INodeVisitor self, FormFactorDecoratorRotation const * arg2)
        visit(INodeVisitor self, FormFactorDodecahedron arg2)
        visit(INodeVisitor self, FormFactorDWBA const * arg2)
        visit(INodeVisitor self, FormFactorDWBAPol const * arg2)
        visit(INodeVisitor self, FormFactorEllipsoidalCylinder arg2)
        visit(INodeVisitor self, FormFactorFullSphere arg2)
        visit(INodeVisitor self, FormFactorFullSpheroid arg2)
        visit(INodeVisitor self, FormFactorGauss arg2)
        visit(INodeVisitor self, FormFactorHemiEllipsoid arg2)
        visit(INodeVisitor self, FormFactorIcosahedron arg2)
        visit(INodeVisitor self, FormFactorLongBoxGauss arg2)
        visit(INodeVisitor self, FormFactorLongBoxLorentz arg2)
        visit(INodeVisitor self, FormFactorLorentz arg2)
        visit(INodeVisitor self, FormFactorPrism3 arg2)
        visit(INodeVisitor self, FormFactorPrism6 arg2)
        visit(INodeVisitor self, FormFactorPyramid arg2)
        visit(INodeVisitor self, FormFactorRipple1 arg2)
        visit(INodeVisitor self, FormFactorRipple2 arg2)
        visit(INodeVisitor self, FormFactorSphereGaussianRadius arg2)
        visit(INodeVisitor self, FormFactorSphereLogNormalRadius arg2)
        visit(INodeVisitor self, FormFactorTetrahedron arg2)
        visit(INodeVisitor self, FormFactorDot arg2)
        visit(INodeVisitor self, FormFactorTruncatedCube arg2)
        visit(INodeVisitor self, FormFactorTruncatedSphere arg2)
        visit(INodeVisitor self, FormFactorTruncatedSpheroid arg2)
        visit(INodeVisitor self, FormFactorWeighted arg2)
        visit(INodeVisitor self, FTDecayFunction1DCauchy arg2)
        visit(INodeVisitor self, FTDecayFunction1DGauss arg2)
        visit(INodeVisitor self, FTDecayFunction1DTriangle arg2)
        visit(INodeVisitor self, FTDecayFunction1DVoigt arg2)
        visit(INodeVisitor self, FTDecayFunction2DCauchy arg2)
        visit(INodeVisitor self, FTDecayFunction2DGauss arg2)
        visit(INodeVisitor self, FTDecayFunction2DVoigt arg2)
        visit(INodeVisitor self, FTDistribution1DCauchy arg2)
        visit(INodeVisitor self, FTDistribution1DCosine arg2)
        visit(INodeVisitor self, FTDistribution1DGate arg2)
        visit(INodeVisitor self, FTDistribution1DGauss arg2)
        visit(INodeVisitor self, FTDistribution1DTriangle arg2)
        visit(INodeVisitor self, FTDistribution1DVoigt arg2)
        visit(INodeVisitor self, FTDistribution2DCauchy arg2)
        visit(INodeVisitor self, FTDistribution2DCone arg2)
        visit(INodeVisitor self, FTDistribution2DGate arg2)
        visit(INodeVisitor self, FTDistribution2DGauss arg2)
        visit(INodeVisitor self, FTDistribution2DVoigt arg2)
        visit(INodeVisitor self, GISASSimulation arg2)
        visit(INodeVisitor self, HexagonalLattice arg2)
        visit(INodeVisitor self, IAbstractParticle arg2)
        visit(INodeVisitor self, IClusteredParticles arg2)
        visit(INodeVisitor self, IdentityRotation arg2)
        visit(INodeVisitor self, IFormFactor arg2)
        visit(INodeVisitor self, IFormFactorBorn arg2)
        visit(INodeVisitor self, IFormFactorDecorator arg2)
        visit(INodeVisitor self, IInterferenceFunction arg2)
        visit(INodeVisitor self, ILayout arg2)
        visit(INodeVisitor self, INode arg2)
        visit(INodeVisitor self, Instrument arg2)
        visit(INodeVisitor self, IntensityNormalizer arg2)
        visit(INodeVisitor self, IntensityScaleAndShiftNormalizer arg2)
        visit(INodeVisitor self, InterferenceFunction1DLattice arg2)
        visit(INodeVisitor self, InterferenceFunction2DLattice arg2)
        visit(INodeVisitor self, InterferenceFunctionFinite2DLattice arg2)
        visit(INodeVisitor self, InterferenceFunction2DParaCrystal arg2)
        visit(INodeVisitor self, InterferenceFunctionNone arg2)
        visit(INodeVisitor self, InterferenceFunctionRadialParaCrystal arg2)
        visit(INodeVisitor self, IParticle arg2)
        visit(INodeVisitor self, IRotation arg2)
        visit(INodeVisitor self, ISample arg2)
        visit(INodeVisitor self, IsGISAXSDetector arg2)
        visit(INodeVisitor self, Layer arg2)
        visit(INodeVisitor self, LayerInterface const * arg2)
        visit(INodeVisitor self, LayerRoughness arg2)
        visit(INodeVisitor self, MesoCrystal arg2)
        visit(INodeVisitor self, MultiLayer arg2)
        visit(INodeVisitor self, OffSpecSimulation arg2)
        visit(INodeVisitor self, Particle arg2)
        visit(INodeVisitor self, ParticleComposition arg2)
        visit(INodeVisitor self, ParticleCoreShell arg2)
        visit(INodeVisitor self, ParticleDistribution arg2)
        visit(INodeVisitor self, ParticleLayout arg2)
        visit(INodeVisitor self, PoissonNoiseBackground arg2)
        visit(INodeVisitor self, RectangularDetector arg2)
        visit(INodeVisitor self, ResolutionFunction2DGaussian arg2)
        visit(INodeVisitor self, RotationEuler arg2)
        visit(INodeVisitor self, RotationX arg2)
        visit(INodeVisitor self, RotationY arg2)
        visit(INodeVisitor self, RotationZ arg2)
        visit(INodeVisitor self, SpecularDetector1D const * arg2)
        visit(INodeVisitor self, SpecularSimulation arg2)
        visit(INodeVisitor self, SphericalDetector arg2)
        visit(INodeVisitor self, SquareLattice arg2)

        virtual void INodeVisitor::visit(const SquareLattice *)

        """
        return _libBornAgainCore.INodeVisitor_visit(self, *args)


    def depth(self):
        """
        depth(INodeVisitor self) -> int

        int INodeVisitor::depth() const

        Returns depth of the visitor in the composite hierarchy. 

        """
        return _libBornAgainCore.INodeVisitor_depth(self)


    def setDepth(self, depth):
        """
        setDepth(INodeVisitor self, int depth)

        void INodeVisitor::setDepth(int depth)

        Sets depth of the visitor in the composite hierarchy. 

        """
        return _libBornAgainCore.INodeVisitor_setDepth(self, depth)

INodeVisitor_swigregister = _libBornAgainCore.INodeVisitor_swigregister
INodeVisitor_swigregister(INodeVisitor)


def VisitNodesPreorder(node, visitor):
    """
    VisitNodesPreorder(INode node, INodeVisitor visitor)

    BA_CORE_API_ void VisitNodesPreorder(const INode &node, INodeVisitor &visitor)

    """
    return _libBornAgainCore.VisitNodesPreorder(node, visitor)

def VisitNodesPostorder(node, visitor):
    """
    VisitNodesPostorder(INode node, INodeVisitor visitor)

    BA_CORE_API_ void VisitNodesPostorder(const INode &node, INodeVisitor &visitor)

    """
    return _libBornAgainCore.VisitNodesPostorder(node, visitor)
class IClusteredParticles(ISample):
    """


    An ordered assembly of particles. Currently, the only child class is  Crystal.

    C++ includes: IClusteredParticles.h

    """

    __swig_setmethods__ = {}
    for _s in [ISample]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IClusteredParticles, name, value)
    __swig_getmethods__ = {}
    for _s in [ISample]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IClusteredParticles, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        """
        clone(IClusteredParticles self) -> IClusteredParticles

        IClusteredParticles* IClusteredParticles::clone() const override=0

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.IClusteredParticles_clone(self)


    def accept(self, visitor):
        """
        accept(IClusteredParticles self, INodeVisitor visitor)

        void IClusteredParticles::accept(INodeVisitor *visitor) const override=0

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.IClusteredParticles_accept(self, visitor)


    def createTotalFormFactor(self, arg2, arg3, arg4):
        """
        createTotalFormFactor(IClusteredParticles self, IFormFactor arg2, IRotation arg3, kvector_t arg4) -> IFormFactor

        virtual IFormFactor* IClusteredParticles::createTotalFormFactor(const IFormFactor &, const IRotation *, const kvector_t &) const =0

        Creates a total form factor for the mesocrystal with a specific shape and content The bulk content of the mesocrystal is encapsulated by the  IClusteredParticles object itself 

        """
        return _libBornAgainCore.IClusteredParticles_createTotalFormFactor(self, arg2, arg3, arg4)


    def homogeneousRegions(self):
        """
        homogeneousRegions(IClusteredParticles self) -> std::vector< HomogeneousRegion,std::allocator< HomogeneousRegion > >

        virtual std::vector<HomogeneousRegion> IClusteredParticles::homogeneousRegions() const =0

        Creates region information with volumetric densities instead of absolute volume These densities need to be multiplied by the total mesocrystal volume 

        """
        return _libBornAgainCore.IClusteredParticles_homogeneousRegions(self)

    __swig_destroy__ = _libBornAgainCore.delete_IClusteredParticles
    __del__ = lambda self: None
IClusteredParticles_swigregister = _libBornAgainCore.IClusteredParticles_swigregister
IClusteredParticles_swigregister(IClusteredParticles)

class Crystal(IClusteredParticles):
    """


    A crystal structure with a  ParticleComposition as a basis. Used in  MesoCrystal, where it is given an outer shape.

    C++ includes: Crystal.h

    """

    __swig_setmethods__ = {}
    for _s in [IClusteredParticles]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Crystal, name, value)
    __swig_getmethods__ = {}
    for _s in [IClusteredParticles]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Crystal, name)
    __repr__ = _swig_repr

    def __init__(self, lattice_basis, lattice):
        """
        __init__(Crystal self, IParticle lattice_basis, Lattice lattice) -> Crystal

        Crystal::Crystal(const IParticle &lattice_basis, const Lattice &lattice)

        """
        this = _libBornAgainCore.new_Crystal(lattice_basis, lattice)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_Crystal
    __del__ = lambda self: None

    def clone(self):
        """
        clone(Crystal self) -> Crystal

        Crystal * Crystal::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.Crystal_clone(self)


    def accept(self, visitor):
        """
        accept(Crystal self, INodeVisitor visitor)

        void Crystal::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.Crystal_accept(self, visitor)


    def createTotalFormFactor(self, meso_crystal_form_factor, p_rotation, translation):
        """
        createTotalFormFactor(Crystal self, IFormFactor meso_crystal_form_factor, IRotation p_rotation, kvector_t translation) -> IFormFactor

        IFormFactor * Crystal::createTotalFormFactor(const IFormFactor &meso_crystal_form_factor, const IRotation *p_rotation, const kvector_t &translation) const overridefinal

        Creates a total form factor for the mesocrystal with a specific shape and content The bulk content of the mesocrystal is encapsulated by the  IClusteredParticles object itself 

        """
        return _libBornAgainCore.Crystal_createTotalFormFactor(self, meso_crystal_form_factor, p_rotation, translation)


    def homogeneousRegions(self):
        """
        homogeneousRegions(Crystal self) -> std::vector< HomogeneousRegion,std::allocator< HomogeneousRegion > >

        std::vector< HomogeneousRegion > Crystal::homogeneousRegions() const overridefinal

        Creates region information with volumetric densities instead of absolute volume These densities need to be multiplied by the total mesocrystal volume 

        """
        return _libBornAgainCore.Crystal_homogeneousRegions(self)


    def transformedLattice(self, p_rotation=None):
        """
        transformedLattice(Crystal self, IRotation p_rotation=None) -> Lattice
        transformedLattice(Crystal self) -> Lattice

        Lattice Crystal::transformedLattice(const IRotation *p_rotation=nullptr) const 

        """
        return _libBornAgainCore.Crystal_transformedLattice(self, p_rotation)


    def setDWFactor(self, dw_factor):
        """
        setDWFactor(Crystal self, double dw_factor)

        void Crystal::setDWFactor(double dw_factor)

        """
        return _libBornAgainCore.Crystal_setDWFactor(self, dw_factor)


    def getChildren(self):
        """
        getChildren(Crystal self) -> swig_dummy_type_const_inode_vector

        std::vector< const INode * > Crystal::getChildren() const overridefinal

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.Crystal_getChildren(self)

Crystal_swigregister = _libBornAgainCore.Crystal_swigregister
Crystal_swigregister(Crystal)

class IDistribution1D(ICloneable, INode):
    """


    Interface for one-dimensional distributions.

    C++ includes: Distributions.h

    """

    __swig_setmethods__ = {}
    for _s in [ICloneable, INode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDistribution1D, name, value)
    __swig_getmethods__ = {}
    for _s in [ICloneable, INode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IDistribution1D, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IDistribution1D
    __del__ = lambda self: None

    def clone(self):
        """
        clone(IDistribution1D self) -> IDistribution1D

        virtual IDistribution1D* IDistribution1D::clone() const =0

        """
        return _libBornAgainCore.IDistribution1D_clone(self)


    def probabilityDensity(self, x):
        """
        probabilityDensity(IDistribution1D self, double x) -> double

        virtual double IDistribution1D::probabilityDensity(double x) const =0

        Returns the distribution-specific probability density for value x. 

        """
        return _libBornAgainCore.IDistribution1D_probabilityDensity(self, x)


    def getMean(self):
        """
        getMean(IDistribution1D self) -> double

        virtual double IDistribution1D::getMean() const =0

        Returns the distribution-specific mean. 

        """
        return _libBornAgainCore.IDistribution1D_getMean(self)


    def equidistantSamples(self, *args):
        """
        equidistantSamples(IDistribution1D self, size_t nbr_samples, double sigma_factor=0., RealLimits limits) -> ParameterSampleVector
        equidistantSamples(IDistribution1D self, size_t nbr_samples, double sigma_factor=0.) -> ParameterSampleVector
        equidistantSamples(IDistribution1D self, size_t nbr_samples) -> ParameterSampleVector

        std::vector< ParameterSample > IDistribution1D::equidistantSamples(size_t nbr_samples, double sigma_factor=0., const RealLimits &limits=RealLimits()) const

        Returns equidistant samples, using intrinsic parameters, weighted with  probabilityDensity(). 

        """
        return _libBornAgainCore.IDistribution1D_equidistantSamples(self, *args)


    def equidistantSamplesInRange(self, nbr_samples, xmin, xmax):
        """
        equidistantSamplesInRange(IDistribution1D self, size_t nbr_samples, double xmin, double xmax) -> ParameterSampleVector

        std::vector< ParameterSample > IDistribution1D::equidistantSamplesInRange(size_t nbr_samples, double xmin, double xmax) const

        Returns equidistant samples from xmin to xmax, weighted with  probabilityDensity(). 

        """
        return _libBornAgainCore.IDistribution1D_equidistantSamplesInRange(self, nbr_samples, xmin, xmax)


    def equidistantPoints(self, *args):
        """
        equidistantPoints(IDistribution1D self, size_t nbr_samples, double sigma_factor, RealLimits limits) -> vdouble1d_t
        equidistantPoints(IDistribution1D self, size_t nbr_samples, double sigma_factor) -> vdouble1d_t

        virtual std::vector<double> IDistribution1D::equidistantPoints(size_t nbr_samples, double sigma_factor, const RealLimits &limits=RealLimits()) const =0

        Returns equidistant interpolation points, with range computed in distribution-specific way from mean and width parameter, taking into account limits and sigma_factor. 

        """
        return _libBornAgainCore.IDistribution1D_equidistantPoints(self, *args)


    def equidistantPointsInRange(self, nbr_samples, xmin, xmax):
        """
        equidistantPointsInRange(IDistribution1D self, size_t nbr_samples, double xmin, double xmax) -> vdouble1d_t

        std::vector< double > IDistribution1D::equidistantPointsInRange(size_t nbr_samples, double xmin, double xmax) const

        Returns equidistant interpolation points from xmin to xmax. 

        """
        return _libBornAgainCore.IDistribution1D_equidistantPointsInRange(self, nbr_samples, xmin, xmax)


    def isDelta(self):
        """
        isDelta(IDistribution1D self) -> bool

        virtual bool IDistribution1D::isDelta() const =0

        Returns true if the distribution is in the limit case of a Dirac delta distribution. 

        """
        return _libBornAgainCore.IDistribution1D_isDelta(self)


    def setUnits(self, units):
        """
        setUnits(IDistribution1D self, std::string const & units)

        void IDistribution1D::setUnits(const std::string &units)

        Sets distribution units. 

        """
        return _libBornAgainCore.IDistribution1D_setUnits(self, units)

IDistribution1D_swigregister = _libBornAgainCore.IDistribution1D_swigregister
IDistribution1D_swigregister(IDistribution1D)

class DistributionGate(IDistribution1D):
    """


    Uniform distribution function with half width hwhm.

    C++ includes: Distributions.h

    """

    __swig_setmethods__ = {}
    for _s in [IDistribution1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DistributionGate, name, value)
    __swig_getmethods__ = {}
    for _s in [IDistribution1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DistributionGate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(DistributionGate self) -> DistributionGate
        __init__(DistributionGate self, double min, double max) -> DistributionGate

        DistributionGate::DistributionGate(double min, double max)

        """
        this = _libBornAgainCore.new_DistributionGate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_DistributionGate
    __del__ = lambda self: None

    def clone(self):
        """
        clone(DistributionGate self) -> DistributionGate

        DistributionGate* DistributionGate::clone() const final

        """
        return _libBornAgainCore.DistributionGate_clone(self)


    def probabilityDensity(self, x):
        """
        probabilityDensity(DistributionGate self, double x) -> double

        double DistributionGate::probabilityDensity(double x) const final

        Returns the distribution-specific probability density for value x. 

        """
        return _libBornAgainCore.DistributionGate_probabilityDensity(self, x)


    def getMean(self):
        """
        getMean(DistributionGate self) -> double

        double DistributionGate::getMean() const final

        Returns the distribution-specific mean. 

        """
        return _libBornAgainCore.DistributionGate_getMean(self)


    def getMin(self):
        """
        getMin(DistributionGate self) -> double

        double DistributionGate::getMin() const 

        """
        return _libBornAgainCore.DistributionGate_getMin(self)


    def getMax(self):
        """
        getMax(DistributionGate self) -> double

        double DistributionGate::getMax() const 

        """
        return _libBornAgainCore.DistributionGate_getMax(self)


    def equidistantPoints(self, *args):
        """
        equidistantPoints(DistributionGate self, size_t nbr_samples, double sigma_factor, RealLimits limits) -> vdouble1d_t
        equidistantPoints(DistributionGate self, size_t nbr_samples, double sigma_factor) -> vdouble1d_t

        std::vector< double > DistributionGate::equidistantPoints(size_t nbr_samples, double sigma_factor, const RealLimits &limits=RealLimits()) const

        Returns list of sample values. 

        """
        return _libBornAgainCore.DistributionGate_equidistantPoints(self, *args)


    def isDelta(self):
        """
        isDelta(DistributionGate self) -> bool

        bool DistributionGate::isDelta() const final

        Returns true if the distribution is in the limit case of a Dirac delta distribution. 

        """
        return _libBornAgainCore.DistributionGate_isDelta(self)


    def accept(self, visitor):
        """
        accept(DistributionGate self, INodeVisitor visitor)

        void DistributionGate::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.DistributionGate_accept(self, visitor)

DistributionGate_swigregister = _libBornAgainCore.DistributionGate_swigregister
DistributionGate_swigregister(DistributionGate)

class DistributionLorentz(IDistribution1D):
    """


    Lorentz distribution with half width hwhm.

    C++ includes: Distributions.h

    """

    __swig_setmethods__ = {}
    for _s in [IDistribution1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DistributionLorentz, name, value)
    __swig_getmethods__ = {}
    for _s in [IDistribution1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DistributionLorentz, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(DistributionLorentz self) -> DistributionLorentz
        __init__(DistributionLorentz self, double mean, double hwhm) -> DistributionLorentz

        DistributionLorentz::DistributionLorentz(double mean, double hwhm)

        """
        this = _libBornAgainCore.new_DistributionLorentz(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_DistributionLorentz
    __del__ = lambda self: None

    def clone(self):
        """
        clone(DistributionLorentz self) -> DistributionLorentz

        DistributionLorentz* DistributionLorentz::clone() const final

        """
        return _libBornAgainCore.DistributionLorentz_clone(self)


    def probabilityDensity(self, x):
        """
        probabilityDensity(DistributionLorentz self, double x) -> double

        double DistributionLorentz::probabilityDensity(double x) const final

        Returns the distribution-specific probability density for value x. 

        """
        return _libBornAgainCore.DistributionLorentz_probabilityDensity(self, x)


    def getMean(self):
        """
        getMean(DistributionLorentz self) -> double

        double DistributionLorentz::getMean() const final

        Returns the distribution-specific mean. 

        """
        return _libBornAgainCore.DistributionLorentz_getMean(self)


    def getHWHM(self):
        """
        getHWHM(DistributionLorentz self) -> double

        double DistributionLorentz::getHWHM() const 

        """
        return _libBornAgainCore.DistributionLorentz_getHWHM(self)


    def equidistantPoints(self, *args):
        """
        equidistantPoints(DistributionLorentz self, size_t nbr_samples, double sigma_factor, RealLimits limits) -> vdouble1d_t
        equidistantPoints(DistributionLorentz self, size_t nbr_samples, double sigma_factor) -> vdouble1d_t

        std::vector< double > DistributionLorentz::equidistantPoints(size_t nbr_samples, double sigma_factor, const RealLimits &limits=RealLimits()) const

        generate list of sample values 

        """
        return _libBornAgainCore.DistributionLorentz_equidistantPoints(self, *args)


    def isDelta(self):
        """
        isDelta(DistributionLorentz self) -> bool

        bool DistributionLorentz::isDelta() const final

        Returns true if the distribution is in the limit case of a Dirac delta distribution. 

        """
        return _libBornAgainCore.DistributionLorentz_isDelta(self)


    def accept(self, visitor):
        """
        accept(DistributionLorentz self, INodeVisitor visitor)

        void DistributionLorentz::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.DistributionLorentz_accept(self, visitor)

DistributionLorentz_swigregister = _libBornAgainCore.DistributionLorentz_swigregister
DistributionLorentz_swigregister(DistributionLorentz)

class DistributionGaussian(IDistribution1D):
    """


    Gaussian distribution with standard deviation std_dev.

    C++ includes: Distributions.h

    """

    __swig_setmethods__ = {}
    for _s in [IDistribution1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DistributionGaussian, name, value)
    __swig_getmethods__ = {}
    for _s in [IDistribution1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DistributionGaussian, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(DistributionGaussian self) -> DistributionGaussian
        __init__(DistributionGaussian self, double mean, double std_dev) -> DistributionGaussian

        DistributionGaussian::DistributionGaussian(double mean, double std_dev)

        """
        this = _libBornAgainCore.new_DistributionGaussian(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_DistributionGaussian
    __del__ = lambda self: None

    def clone(self):
        """
        clone(DistributionGaussian self) -> DistributionGaussian

        DistributionGaussian* DistributionGaussian::clone() const final

        """
        return _libBornAgainCore.DistributionGaussian_clone(self)


    def probabilityDensity(self, x):
        """
        probabilityDensity(DistributionGaussian self, double x) -> double

        double DistributionGaussian::probabilityDensity(double x) const final

        Returns the distribution-specific probability density for value x. 

        """
        return _libBornAgainCore.DistributionGaussian_probabilityDensity(self, x)


    def getMean(self):
        """
        getMean(DistributionGaussian self) -> double

        double DistributionGaussian::getMean() const final

        Returns the distribution-specific mean. 

        """
        return _libBornAgainCore.DistributionGaussian_getMean(self)


    def getStdDev(self):
        """
        getStdDev(DistributionGaussian self) -> double

        double DistributionGaussian::getStdDev() const 

        """
        return _libBornAgainCore.DistributionGaussian_getStdDev(self)


    def equidistantPoints(self, *args):
        """
        equidistantPoints(DistributionGaussian self, size_t nbr_samples, double sigma_factor, RealLimits limits) -> vdouble1d_t
        equidistantPoints(DistributionGaussian self, size_t nbr_samples, double sigma_factor) -> vdouble1d_t

        std::vector< double > DistributionGaussian::equidistantPoints(size_t nbr_samples, double sigma_factor, const RealLimits &limits=RealLimits()) const

        generate list of sample values 

        """
        return _libBornAgainCore.DistributionGaussian_equidistantPoints(self, *args)


    def isDelta(self):
        """
        isDelta(DistributionGaussian self) -> bool

        bool DistributionGaussian::isDelta() const final

        Returns true if the distribution is in the limit case of a Dirac delta distribution. 

        """
        return _libBornAgainCore.DistributionGaussian_isDelta(self)


    def accept(self, visitor):
        """
        accept(DistributionGaussian self, INodeVisitor visitor)

        void DistributionGaussian::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.DistributionGaussian_accept(self, visitor)

DistributionGaussian_swigregister = _libBornAgainCore.DistributionGaussian_swigregister
DistributionGaussian_swigregister(DistributionGaussian)

class DistributionLogNormal(IDistribution1D):
    """


    Log-normal distribution.

    C++ includes: Distributions.h

    """

    __swig_setmethods__ = {}
    for _s in [IDistribution1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DistributionLogNormal, name, value)
    __swig_getmethods__ = {}
    for _s in [IDistribution1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DistributionLogNormal, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(DistributionLogNormal self, double scale_param) -> DistributionLogNormal
        __init__(DistributionLogNormal self, double median, double scale_param) -> DistributionLogNormal

        DistributionLogNormal::DistributionLogNormal(double median, double scale_param)

        """
        this = _libBornAgainCore.new_DistributionLogNormal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_DistributionLogNormal
    __del__ = lambda self: None

    def clone(self):
        """
        clone(DistributionLogNormal self) -> DistributionLogNormal

        DistributionLogNormal* DistributionLogNormal::clone() const final

        """
        return _libBornAgainCore.DistributionLogNormal_clone(self)


    def probabilityDensity(self, x):
        """
        probabilityDensity(DistributionLogNormal self, double x) -> double

        double DistributionLogNormal::probabilityDensity(double x) const final

        Returns the distribution-specific probability density for value x. 

        """
        return _libBornAgainCore.DistributionLogNormal_probabilityDensity(self, x)


    def getMean(self):
        """
        getMean(DistributionLogNormal self) -> double

        double DistributionLogNormal::getMean() const final

        Returns the distribution-specific mean. 

        """
        return _libBornAgainCore.DistributionLogNormal_getMean(self)


    def getMedian(self):
        """
        getMedian(DistributionLogNormal self) -> double

        double DistributionLogNormal::getMedian() const 

        """
        return _libBornAgainCore.DistributionLogNormal_getMedian(self)


    def getScalePar(self):
        """
        getScalePar(DistributionLogNormal self) -> double

        double DistributionLogNormal::getScalePar() const 

        """
        return _libBornAgainCore.DistributionLogNormal_getScalePar(self)


    def equidistantPoints(self, *args):
        """
        equidistantPoints(DistributionLogNormal self, size_t nbr_samples, double sigma_factor, RealLimits limits) -> vdouble1d_t
        equidistantPoints(DistributionLogNormal self, size_t nbr_samples, double sigma_factor) -> vdouble1d_t

        std::vector< double > DistributionLogNormal::equidistantPoints(size_t nbr_samples, double sigma_factor, const RealLimits &limits=RealLimits()) const

        generate list of sample values 

        """
        return _libBornAgainCore.DistributionLogNormal_equidistantPoints(self, *args)


    def isDelta(self):
        """
        isDelta(DistributionLogNormal self) -> bool

        bool DistributionLogNormal::isDelta() const final

        Returns true if the distribution is in the limit case of a Dirac delta distribution. 

        """
        return _libBornAgainCore.DistributionLogNormal_isDelta(self)


    def accept(self, visitor):
        """
        accept(DistributionLogNormal self, INodeVisitor visitor)

        void DistributionLogNormal::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.DistributionLogNormal_accept(self, visitor)


    def setUnits(self, units):
        """
        setUnits(DistributionLogNormal self, std::string const & units)

        void DistributionLogNormal::setUnits(const std::string &units)

        Sets distribution units. 

        """
        return _libBornAgainCore.DistributionLogNormal_setUnits(self, units)

DistributionLogNormal_swigregister = _libBornAgainCore.DistributionLogNormal_swigregister
DistributionLogNormal_swigregister(DistributionLogNormal)

class DistributionCosine(IDistribution1D):
    """


    Cosine distribution.

    C++ includes: Distributions.h

    """

    __swig_setmethods__ = {}
    for _s in [IDistribution1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DistributionCosine, name, value)
    __swig_getmethods__ = {}
    for _s in [IDistribution1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DistributionCosine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(DistributionCosine self) -> DistributionCosine
        __init__(DistributionCosine self, double mean, double sigma) -> DistributionCosine

        DistributionCosine::DistributionCosine(double mean, double sigma)

        """
        this = _libBornAgainCore.new_DistributionCosine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_DistributionCosine
    __del__ = lambda self: None

    def clone(self):
        """
        clone(DistributionCosine self) -> DistributionCosine

        DistributionCosine* DistributionCosine::clone() const final

        """
        return _libBornAgainCore.DistributionCosine_clone(self)


    def probabilityDensity(self, x):
        """
        probabilityDensity(DistributionCosine self, double x) -> double

        double DistributionCosine::probabilityDensity(double x) const final

        Returns the distribution-specific probability density for value x. 

        """
        return _libBornAgainCore.DistributionCosine_probabilityDensity(self, x)


    def getMean(self):
        """
        getMean(DistributionCosine self) -> double

        double DistributionCosine::getMean() const final

        Returns the distribution-specific mean. 

        """
        return _libBornAgainCore.DistributionCosine_getMean(self)


    def getSigma(self):
        """
        getSigma(DistributionCosine self) -> double

        double DistributionCosine::getSigma() const 

        """
        return _libBornAgainCore.DistributionCosine_getSigma(self)


    def equidistantPoints(self, *args):
        """
        equidistantPoints(DistributionCosine self, size_t nbr_samples, double sigma_factor, RealLimits limits) -> vdouble1d_t
        equidistantPoints(DistributionCosine self, size_t nbr_samples, double sigma_factor) -> vdouble1d_t

        std::vector< double > DistributionCosine::equidistantPoints(size_t nbr_samples, double sigma_factor, const RealLimits &limits=RealLimits()) const

        generate list of sample values 

        """
        return _libBornAgainCore.DistributionCosine_equidistantPoints(self, *args)


    def isDelta(self):
        """
        isDelta(DistributionCosine self) -> bool

        bool DistributionCosine::isDelta() const final

        Returns true if the distribution is in the limit case of a Dirac delta distribution. 

        """
        return _libBornAgainCore.DistributionCosine_isDelta(self)


    def accept(self, visitor):
        """
        accept(DistributionCosine self, INodeVisitor visitor)

        void DistributionCosine::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.DistributionCosine_accept(self, visitor)

DistributionCosine_swigregister = _libBornAgainCore.DistributionCosine_swigregister
DistributionCosine_swigregister(DistributionCosine)

class DistributionTrapezoid(IDistribution1D):
    """


    Trapezoidal distribution.

    C++ includes: Distributions.h

    """

    __swig_setmethods__ = {}
    for _s in [IDistribution1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DistributionTrapezoid, name, value)
    __swig_getmethods__ = {}
    for _s in [IDistribution1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DistributionTrapezoid, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(DistributionTrapezoid self) -> DistributionTrapezoid
        __init__(DistributionTrapezoid self, double center, double left_width, double middle_width, double right_width) -> DistributionTrapezoid

        DistributionTrapezoid::DistributionTrapezoid(double center, double left_width, double middle_width, double right_width)

        """
        this = _libBornAgainCore.new_DistributionTrapezoid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_DistributionTrapezoid
    __del__ = lambda self: None

    def clone(self):
        """
        clone(DistributionTrapezoid self) -> DistributionTrapezoid

        DistributionTrapezoid* DistributionTrapezoid::clone() const final

        """
        return _libBornAgainCore.DistributionTrapezoid_clone(self)


    def probabilityDensity(self, x):
        """
        probabilityDensity(DistributionTrapezoid self, double x) -> double

        double DistributionTrapezoid::probabilityDensity(double x) const final

        Returns the distribution-specific probability density for value x. 

        """
        return _libBornAgainCore.DistributionTrapezoid_probabilityDensity(self, x)


    def getMean(self):
        """
        getMean(DistributionTrapezoid self) -> double

        double DistributionTrapezoid::getMean() const final

        Returns the distribution-specific mean. 

        """
        return _libBornAgainCore.DistributionTrapezoid_getMean(self)


    def getLeftWidth(self):
        """
        getLeftWidth(DistributionTrapezoid self) -> double

        double DistributionTrapezoid::getLeftWidth() const 

        """
        return _libBornAgainCore.DistributionTrapezoid_getLeftWidth(self)


    def getMiddleWidth(self):
        """
        getMiddleWidth(DistributionTrapezoid self) -> double

        double DistributionTrapezoid::getMiddleWidth() const 

        """
        return _libBornAgainCore.DistributionTrapezoid_getMiddleWidth(self)


    def getRightWidth(self):
        """
        getRightWidth(DistributionTrapezoid self) -> double

        double DistributionTrapezoid::getRightWidth() const 

        """
        return _libBornAgainCore.DistributionTrapezoid_getRightWidth(self)


    def equidistantPoints(self, *args):
        """
        equidistantPoints(DistributionTrapezoid self, size_t nbr_samples, double sigma_factor, RealLimits limits) -> vdouble1d_t
        equidistantPoints(DistributionTrapezoid self, size_t nbr_samples, double sigma_factor) -> vdouble1d_t

        std::vector< double > DistributionTrapezoid::equidistantPoints(size_t nbr_samples, double sigma_factor, const RealLimits &limits=RealLimits()) const

        generate list of sample values 

        """
        return _libBornAgainCore.DistributionTrapezoid_equidistantPoints(self, *args)


    def isDelta(self):
        """
        isDelta(DistributionTrapezoid self) -> bool

        bool DistributionTrapezoid::isDelta() const final

        Returns true if the distribution is in the limit case of a Dirac delta distribution. 

        """
        return _libBornAgainCore.DistributionTrapezoid_isDelta(self)


    def accept(self, visitor):
        """
        accept(DistributionTrapezoid self, INodeVisitor visitor)

        void DistributionTrapezoid::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.DistributionTrapezoid_accept(self, visitor)

DistributionTrapezoid_swigregister = _libBornAgainCore.DistributionTrapezoid_swigregister
DistributionTrapezoid_swigregister(DistributionTrapezoid)

class DetectorMask(_object):
    """


    Collection of detector masks.

    C++ includes: DetectorMask.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DetectorMask, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DetectorMask, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(DetectorMask self) -> DetectorMask
        __init__(DetectorMask self, DetectorMask other) -> DetectorMask

        DetectorMask::DetectorMask(const DetectorMask &other)

        """
        this = _libBornAgainCore.new_DetectorMask(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def addMask(self, shape, mask_value):
        """
        addMask(DetectorMask self, IShape2D shape, bool mask_value)

        void DetectorMask::addMask(const IShape2D &shape, bool mask_value)

        Add mask to the stack of detector masks. The value "true" means that the area will be excluded from the analysis.

        Parameters:
        -----------

        shape: 
        The shape of mask.

        mask_value: 
        The value of mask 

        """
        return _libBornAgainCore.DetectorMask_addMask(self, shape, mask_value)


    def initMaskData(self, *args):
        """
        initMaskData(DetectorMask self, IDetector2D detector)
        initMaskData(DetectorMask self, IntensityData data)

        void DetectorMask::initMaskData(const OutputData< double > &data)

        """
        return _libBornAgainCore.DetectorMask_initMaskData(self, *args)


    def isMasked(self, index):
        """
        isMasked(DetectorMask self, size_t index) -> bool

        bool DetectorMask::isMasked(size_t index) const 

        """
        return _libBornAgainCore.DetectorMask_isMasked(self, index)


    def getMaskData(self):
        """
        getMaskData(DetectorMask self) -> OutputData< bool > const *

        const OutputData<bool>* DetectorMask::getMaskData() const 

        """
        return _libBornAgainCore.DetectorMask_getMaskData(self)


    def createHistogram(self):
        """
        createHistogram(DetectorMask self) -> Histogram2D

        Histogram2D * DetectorMask::createHistogram() const 

        """
        return _libBornAgainCore.DetectorMask_createHistogram(self)


    def removeMasks(self):
        """
        removeMasks(DetectorMask self)

        void DetectorMask::removeMasks()

        remove all masks and return object to initial state 

        """
        return _libBornAgainCore.DetectorMask_removeMasks(self)


    def hasMasks(self):
        """
        hasMasks(DetectorMask self) -> bool

        bool DetectorMask::hasMasks() const

        returns true if has masks 

        """
        return _libBornAgainCore.DetectorMask_hasMasks(self)


    def numberOfMaskedChannels(self):
        """
        numberOfMaskedChannels(DetectorMask self) -> int

        int DetectorMask::numberOfMaskedChannels() const 

        """
        return _libBornAgainCore.DetectorMask_numberOfMaskedChannels(self)


    def numberOfMasks(self):
        """
        numberOfMasks(DetectorMask self) -> size_t

        size_t DetectorMask::numberOfMasks() const 

        """
        return _libBornAgainCore.DetectorMask_numberOfMasks(self)


    def getMaskShape(self, mask_index, mask_value):
        """
        getMaskShape(DetectorMask self, size_t mask_index, bool & mask_value) -> IShape2D

        const IShape2D * DetectorMask::getMaskShape(size_t mask_index, bool &mask_value) const 

        """
        return _libBornAgainCore.DetectorMask_getMaskShape(self, mask_index, mask_value)

    __swig_destroy__ = _libBornAgainCore.delete_DetectorMask
    __del__ = lambda self: None
DetectorMask_swigregister = _libBornAgainCore.DetectorMask_swigregister
DetectorMask_swigregister(DetectorMask)

class Ellipse(IShape2D):
    """


    Ellipse shape.

    C++ includes: Ellipse.h

    """

    __swig_setmethods__ = {}
    for _s in [IShape2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ellipse, name, value)
    __swig_getmethods__ = {}
    for _s in [IShape2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ellipse, name)
    __repr__ = _swig_repr

    def __init__(self, xcenter, ycenter, xradius, yradius, theta=0.0):
        """
        __init__(Ellipse self, double xcenter, double ycenter, double xradius, double yradius, double theta=0.0) -> Ellipse
        __init__(Ellipse self, double xcenter, double ycenter, double xradius, double yradius) -> Ellipse

        Ellipse::Ellipse(double xcenter, double ycenter, double xradius, double yradius, double theta=0.0)

        Parameters:
        -----------

        xcenter: 
        x-coordinate of  Ellipse's center

        ycenter: 
        y-coordinate of  Ellipse's center

        xradius: 
        Radius along x-axis

        yradius: 
        Radius along y-axis

        theta: 
        Angle of  Ellipse rotation in radians 

        """
        this = _libBornAgainCore.new_Ellipse(xcenter, ycenter, xradius, yradius, theta)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(Ellipse self) -> Ellipse

        Ellipse* Ellipse::clone() const 

        """
        return _libBornAgainCore.Ellipse_clone(self)


    def contains(self, *args):
        """
        contains(Ellipse self, double x, double y) -> bool
        contains(Ellipse self, Bin1D binx, Bin1D biny) -> bool

        bool Ellipse::contains(const Bin1D &binx, const Bin1D &biny) const

        Returns true if area defined by two bins is inside or on border of ellipse; more precisely, if mid point of two bins satisfy this condition. 

        """
        return _libBornAgainCore.Ellipse_contains(self, *args)


    def getCenterX(self):
        """
        getCenterX(Ellipse self) -> double

        double Ellipse::getCenterX() const 

        """
        return _libBornAgainCore.Ellipse_getCenterX(self)


    def getCenterY(self):
        """
        getCenterY(Ellipse self) -> double

        double Ellipse::getCenterY() const 

        """
        return _libBornAgainCore.Ellipse_getCenterY(self)


    def getRadiusX(self):
        """
        getRadiusX(Ellipse self) -> double

        double Ellipse::getRadiusX() const 

        """
        return _libBornAgainCore.Ellipse_getRadiusX(self)


    def getRadiusY(self):
        """
        getRadiusY(Ellipse self) -> double

        double Ellipse::getRadiusY() const 

        """
        return _libBornAgainCore.Ellipse_getRadiusY(self)


    def getTheta(self):
        """
        getTheta(Ellipse self) -> double

        double Ellipse::getTheta() const 

        """
        return _libBornAgainCore.Ellipse_getTheta(self)

    __swig_destroy__ = _libBornAgainCore.delete_Ellipse
    __del__ = lambda self: None
Ellipse_swigregister = _libBornAgainCore.Ellipse_swigregister
Ellipse_swigregister(Ellipse)

class IFTDecayFunction1D(ICloneable, INode):
    """


    Interface for a one-dimensional decay function, with evaluate(q) returning the Fourier transform, normalized to  $\\int dq\\; {\\rm evaluate}(q) = 1$.

    C++ includes: FTDecayFunctions.h

    """

    __swig_setmethods__ = {}
    for _s in [ICloneable, INode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFTDecayFunction1D, name, value)
    __swig_getmethods__ = {}
    for _s in [ICloneable, INode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IFTDecayFunction1D, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        """
        clone(IFTDecayFunction1D self) -> IFTDecayFunction1D

        virtual IFTDecayFunction1D* IFTDecayFunction1D::clone() const =0

        """
        return _libBornAgainCore.IFTDecayFunction1D_clone(self)


    def evaluate(self, q):
        """
        evaluate(IFTDecayFunction1D self, double q) -> double

        virtual double IFTDecayFunction1D::evaluate(double q) const =0

        """
        return _libBornAgainCore.IFTDecayFunction1D_evaluate(self, q)


    def decayLength(self):
        """
        decayLength(IFTDecayFunction1D self) -> double

        double IFTDecayFunction1D::decayLength() const 

        """
        return _libBornAgainCore.IFTDecayFunction1D_decayLength(self)

    __swig_destroy__ = _libBornAgainCore.delete_IFTDecayFunction1D
    __del__ = lambda self: None
IFTDecayFunction1D_swigregister = _libBornAgainCore.IFTDecayFunction1D_swigregister
IFTDecayFunction1D_swigregister(IFTDecayFunction1D)

class FTDecayFunction1DCauchy(IFTDecayFunction1D):
    """


    One-dimensional Cauchy decay function in reciprocal space; corresponds to exp(-|x|/decay_length) in real space.

    C++ includes: FTDecayFunctions.h

    """

    __swig_setmethods__ = {}
    for _s in [IFTDecayFunction1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDecayFunction1DCauchy, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDecayFunction1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDecayFunction1DCauchy, name)
    __repr__ = _swig_repr

    def __init__(self, decay_length):
        """
        __init__(FTDecayFunction1DCauchy self, double decay_length) -> FTDecayFunction1DCauchy

        FTDecayFunction1DCauchy::FTDecayFunction1DCauchy(double decay_length)

        """
        this = _libBornAgainCore.new_FTDecayFunction1DCauchy(decay_length)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FTDecayFunction1DCauchy self) -> FTDecayFunction1DCauchy

        FTDecayFunction1DCauchy * FTDecayFunction1DCauchy::clone() const 

        """
        return _libBornAgainCore.FTDecayFunction1DCauchy_clone(self)


    def accept(self, visitor):
        """
        accept(FTDecayFunction1DCauchy self, INodeVisitor visitor)

        void FTDecayFunction1DCauchy::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDecayFunction1DCauchy_accept(self, visitor)


    def evaluate(self, q):
        """
        evaluate(FTDecayFunction1DCauchy self, double q) -> double

        double FTDecayFunction1DCauchy::evaluate(double q) const final

        """
        return _libBornAgainCore.FTDecayFunction1DCauchy_evaluate(self, q)

    __swig_destroy__ = _libBornAgainCore.delete_FTDecayFunction1DCauchy
    __del__ = lambda self: None
FTDecayFunction1DCauchy_swigregister = _libBornAgainCore.FTDecayFunction1DCauchy_swigregister
FTDecayFunction1DCauchy_swigregister(FTDecayFunction1DCauchy)

class FTDecayFunction1DGauss(IFTDecayFunction1D):
    """


    One-dimensional Gauss decay function in reciprocal space; corresponds to exp[-x^2/(2*decay_length^2)] in real space.

    C++ includes: FTDecayFunctions.h

    """

    __swig_setmethods__ = {}
    for _s in [IFTDecayFunction1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDecayFunction1DGauss, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDecayFunction1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDecayFunction1DGauss, name)
    __repr__ = _swig_repr

    def __init__(self, decay_length):
        """
        __init__(FTDecayFunction1DGauss self, double decay_length) -> FTDecayFunction1DGauss

        FTDecayFunction1DGauss::FTDecayFunction1DGauss(double decay_length)

        """
        this = _libBornAgainCore.new_FTDecayFunction1DGauss(decay_length)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FTDecayFunction1DGauss self) -> FTDecayFunction1DGauss

        FTDecayFunction1DGauss * FTDecayFunction1DGauss::clone() const 

        """
        return _libBornAgainCore.FTDecayFunction1DGauss_clone(self)


    def accept(self, visitor):
        """
        accept(FTDecayFunction1DGauss self, INodeVisitor visitor)

        void FTDecayFunction1DGauss::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDecayFunction1DGauss_accept(self, visitor)


    def evaluate(self, q):
        """
        evaluate(FTDecayFunction1DGauss self, double q) -> double

        double FTDecayFunction1DGauss::evaluate(double q) const final

        """
        return _libBornAgainCore.FTDecayFunction1DGauss_evaluate(self, q)

    __swig_destroy__ = _libBornAgainCore.delete_FTDecayFunction1DGauss
    __del__ = lambda self: None
FTDecayFunction1DGauss_swigregister = _libBornAgainCore.FTDecayFunction1DGauss_swigregister
FTDecayFunction1DGauss_swigregister(FTDecayFunction1DGauss)

class FTDecayFunction1DTriangle(IFTDecayFunction1D):
    """


    One-dimensional triangle decay function in reciprocal space; corresponds to 1-|x|/decay_length if |x|<decay_length (and 0 otherwise) in real space.

    C++ includes: FTDecayFunctions.h

    """

    __swig_setmethods__ = {}
    for _s in [IFTDecayFunction1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDecayFunction1DTriangle, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDecayFunction1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDecayFunction1DTriangle, name)
    __repr__ = _swig_repr

    def __init__(self, decay_length):
        """
        __init__(FTDecayFunction1DTriangle self, double decay_length) -> FTDecayFunction1DTriangle

        FTDecayFunction1DTriangle::FTDecayFunction1DTriangle(double decay_length)

        """
        this = _libBornAgainCore.new_FTDecayFunction1DTriangle(decay_length)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FTDecayFunction1DTriangle self) -> FTDecayFunction1DTriangle

        FTDecayFunction1DTriangle * FTDecayFunction1DTriangle::clone() const 

        """
        return _libBornAgainCore.FTDecayFunction1DTriangle_clone(self)


    def accept(self, visitor):
        """
        accept(FTDecayFunction1DTriangle self, INodeVisitor visitor)

        void FTDecayFunction1DTriangle::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDecayFunction1DTriangle_accept(self, visitor)


    def evaluate(self, q):
        """
        evaluate(FTDecayFunction1DTriangle self, double q) -> double

        double FTDecayFunction1DTriangle::evaluate(double q) const final

        """
        return _libBornAgainCore.FTDecayFunction1DTriangle_evaluate(self, q)

    __swig_destroy__ = _libBornAgainCore.delete_FTDecayFunction1DTriangle
    __del__ = lambda self: None
FTDecayFunction1DTriangle_swigregister = _libBornAgainCore.FTDecayFunction1DTriangle_swigregister
FTDecayFunction1DTriangle_swigregister(FTDecayFunction1DTriangle)

class FTDecayFunction1DVoigt(IFTDecayFunction1D):
    """


    One-dimensional pseudo-Voigt decay function in reciprocal space; corresponds to eta*Gauss + (1-eta)*Cauchy.

    C++ includes: FTDecayFunctions.h

    """

    __swig_setmethods__ = {}
    for _s in [IFTDecayFunction1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDecayFunction1DVoigt, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDecayFunction1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDecayFunction1DVoigt, name)
    __repr__ = _swig_repr

    def __init__(self, decay_length, eta):
        """
        __init__(FTDecayFunction1DVoigt self, double decay_length, double eta) -> FTDecayFunction1DVoigt

        FTDecayFunction1DVoigt::FTDecayFunction1DVoigt(double decay_length, double eta)

        Constructor of pseudo-Voigt decay function.

        Parameters:
        -----------

        decay_length: 
        half-width of the distribution in nanometers

        eta: 
        parameter [0,1] to balance between Cauchy (eta=0.0) and Gauss (eta=1.0) 

        """
        this = _libBornAgainCore.new_FTDecayFunction1DVoigt(decay_length, eta)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FTDecayFunction1DVoigt self) -> FTDecayFunction1DVoigt

        FTDecayFunction1DVoigt * FTDecayFunction1DVoigt::clone() const 

        """
        return _libBornAgainCore.FTDecayFunction1DVoigt_clone(self)


    def accept(self, visitor):
        """
        accept(FTDecayFunction1DVoigt self, INodeVisitor visitor)

        void FTDecayFunction1DVoigt::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDecayFunction1DVoigt_accept(self, visitor)


    def evaluate(self, q):
        """
        evaluate(FTDecayFunction1DVoigt self, double q) -> double

        double FTDecayFunction1DVoigt::evaluate(double q) const final

        """
        return _libBornAgainCore.FTDecayFunction1DVoigt_evaluate(self, q)


    def eEta(self):
        """
        eEta(FTDecayFunction1DVoigt self) -> double

        double FTDecayFunction1DVoigt::eEta() const 

        """
        return _libBornAgainCore.FTDecayFunction1DVoigt_eEta(self)

    __swig_destroy__ = _libBornAgainCore.delete_FTDecayFunction1DVoigt
    __del__ = lambda self: None
FTDecayFunction1DVoigt_swigregister = _libBornAgainCore.FTDecayFunction1DVoigt_swigregister
FTDecayFunction1DVoigt_swigregister(FTDecayFunction1DVoigt)

class IFTDecayFunction2D(ICloneable, INode):
    """


    Interface for two-dimensional decay function in reciprocal space.

    C++ includes: FTDecayFunctions.h

    """

    __swig_setmethods__ = {}
    for _s in [ICloneable, INode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFTDecayFunction2D, name, value)
    __swig_getmethods__ = {}
    for _s in [ICloneable, INode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IFTDecayFunction2D, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        """
        clone(IFTDecayFunction2D self) -> IFTDecayFunction2D

        virtual IFTDecayFunction2D* IFTDecayFunction2D::clone() const =0

        """
        return _libBornAgainCore.IFTDecayFunction2D_clone(self)


    def setGamma(self, gamma):
        """
        setGamma(IFTDecayFunction2D self, double gamma)

        void IFTDecayFunction2D::setGamma(double gamma)

        set angle between first lattice vector and X-axis of distribution (both in direct space) 

        """
        return _libBornAgainCore.IFTDecayFunction2D_setGamma(self, gamma)


    def gamma(self):
        """
        gamma(IFTDecayFunction2D self) -> double

        double IFTDecayFunction2D::gamma() const

        get angle between first lattice vector and X-axis of distribution (both in direct space) 

        """
        return _libBornAgainCore.IFTDecayFunction2D_gamma(self)


    def delta(self):
        """
        delta(IFTDecayFunction2D self) -> double

        double IFTDecayFunction2D::delta() const

        get angle between X- and Y-axis of distribution (in direct space) 

        """
        return _libBornAgainCore.IFTDecayFunction2D_delta(self)


    def decayLengthX(self):
        """
        decayLengthX(IFTDecayFunction2D self) -> double

        double IFTDecayFunction2D::decayLengthX() const

        get decay length in distribution's X-direction 

        """
        return _libBornAgainCore.IFTDecayFunction2D_decayLengthX(self)


    def decayLengthY(self):
        """
        decayLengthY(IFTDecayFunction2D self) -> double

        double IFTDecayFunction2D::decayLengthY() const

        get decay length in distribution's Y-direction 

        """
        return _libBornAgainCore.IFTDecayFunction2D_decayLengthY(self)


    def evaluate(self, qx, qy):
        """
        evaluate(IFTDecayFunction2D self, double qx, double qy) -> double

        virtual double IFTDecayFunction2D::evaluate(double qx, double qy) const =0

        evaluate Fourier transformed decay function for q in X,Y coordinates 

        """
        return _libBornAgainCore.IFTDecayFunction2D_evaluate(self, qx, qy)


    def transformToStarBasis(self, qX, qY, alpha, a, b, qa, qb):
        """
        transformToStarBasis(IFTDecayFunction2D self, double qX, double qY, double alpha, double a, double b, double & qa, double & qb)

        void IFTDecayFunction2D::transformToStarBasis(double qX, double qY, double alpha, double a, double b, double &qa, double &qb) const

        transform back to a*, b* basis: 

        """
        return _libBornAgainCore.IFTDecayFunction2D_transformToStarBasis(self, qX, qY, alpha, a, b, qa, qb)

    __swig_destroy__ = _libBornAgainCore.delete_IFTDecayFunction2D
    __del__ = lambda self: None
IFTDecayFunction2D_swigregister = _libBornAgainCore.IFTDecayFunction2D_swigregister
IFTDecayFunction2D_swigregister(IFTDecayFunction2D)

class FTDecayFunction2DCauchy(IFTDecayFunction2D):
    """


    Two-dimensional Cauchy decay function in reciprocal space; corresponds to exp(-r) in real space, with  $r=\\sqrt{(\\frac{x}{\\omega_x})^2 + (\\frac{y}{\\omega_y})^2}$.

    C++ includes: FTDecayFunctions.h

    """

    __swig_setmethods__ = {}
    for _s in [IFTDecayFunction2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDecayFunction2DCauchy, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDecayFunction2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDecayFunction2DCauchy, name)
    __repr__ = _swig_repr

    def __init__(self, decay_length_x, decay_length_y, gamma=0):
        """
        __init__(FTDecayFunction2DCauchy self, double decay_length_x, double decay_length_y, double gamma=0) -> FTDecayFunction2DCauchy
        __init__(FTDecayFunction2DCauchy self, double decay_length_x, double decay_length_y) -> FTDecayFunction2DCauchy

        FTDecayFunction2DCauchy::FTDecayFunction2DCauchy(double decay_length_x, double decay_length_y, double gamma=0)

        """
        this = _libBornAgainCore.new_FTDecayFunction2DCauchy(decay_length_x, decay_length_y, gamma)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FTDecayFunction2DCauchy self) -> FTDecayFunction2DCauchy

        FTDecayFunction2DCauchy * FTDecayFunction2DCauchy::clone() const 

        """
        return _libBornAgainCore.FTDecayFunction2DCauchy_clone(self)


    def accept(self, visitor):
        """
        accept(FTDecayFunction2DCauchy self, INodeVisitor visitor)

        void FTDecayFunction2DCauchy::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDecayFunction2DCauchy_accept(self, visitor)


    def evaluate(self, qx, qy):
        """
        evaluate(FTDecayFunction2DCauchy self, double qx, double qy) -> double

        double FTDecayFunction2DCauchy::evaluate(double qx, double qy) const final

        evaluate Fourier transformed decay function for q in X,Y coordinates 

        """
        return _libBornAgainCore.FTDecayFunction2DCauchy_evaluate(self, qx, qy)

    __swig_destroy__ = _libBornAgainCore.delete_FTDecayFunction2DCauchy
    __del__ = lambda self: None
FTDecayFunction2DCauchy_swigregister = _libBornAgainCore.FTDecayFunction2DCauchy_swigregister
FTDecayFunction2DCauchy_swigregister(FTDecayFunction2DCauchy)

class FTDecayFunction2DGauss(IFTDecayFunction2D):
    """


    Two-dimensional Gauss decay function in reciprocal space; corresponds to exp(-r^2/2) in real space, with  $r=\\sqrt{(\\frac{x}{\\omega_x})^2 + (\\frac{y}{\\omega_y})^2}$.

    C++ includes: FTDecayFunctions.h

    """

    __swig_setmethods__ = {}
    for _s in [IFTDecayFunction2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDecayFunction2DGauss, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDecayFunction2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDecayFunction2DGauss, name)
    __repr__ = _swig_repr

    def __init__(self, decay_length_x, decay_length_y, gamma=0):
        """
        __init__(FTDecayFunction2DGauss self, double decay_length_x, double decay_length_y, double gamma=0) -> FTDecayFunction2DGauss
        __init__(FTDecayFunction2DGauss self, double decay_length_x, double decay_length_y) -> FTDecayFunction2DGauss

        FTDecayFunction2DGauss::FTDecayFunction2DGauss(double decay_length_x, double decay_length_y, double gamma=0)

        """
        this = _libBornAgainCore.new_FTDecayFunction2DGauss(decay_length_x, decay_length_y, gamma)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FTDecayFunction2DGauss self) -> FTDecayFunction2DGauss

        FTDecayFunction2DGauss * FTDecayFunction2DGauss::clone() const 

        """
        return _libBornAgainCore.FTDecayFunction2DGauss_clone(self)


    def accept(self, visitor):
        """
        accept(FTDecayFunction2DGauss self, INodeVisitor visitor)

        void FTDecayFunction2DGauss::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDecayFunction2DGauss_accept(self, visitor)


    def evaluate(self, qx, qy):
        """
        evaluate(FTDecayFunction2DGauss self, double qx, double qy) -> double

        double FTDecayFunction2DGauss::evaluate(double qx, double qy) const final

        evaluate Fourier transformed decay function for q in X,Y coordinates 

        """
        return _libBornAgainCore.FTDecayFunction2DGauss_evaluate(self, qx, qy)

    __swig_destroy__ = _libBornAgainCore.delete_FTDecayFunction2DGauss
    __del__ = lambda self: None
FTDecayFunction2DGauss_swigregister = _libBornAgainCore.FTDecayFunction2DGauss_swigregister
FTDecayFunction2DGauss_swigregister(FTDecayFunction2DGauss)

class FTDecayFunction2DVoigt(IFTDecayFunction2D):
    """


    Two-dimensional pseudo-Voigt decay function in reciprocal space; corresponds to eta*Gauss + (1-eta)*Cauchy.

    C++ includes: FTDecayFunctions.h

    """

    __swig_setmethods__ = {}
    for _s in [IFTDecayFunction2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDecayFunction2DVoigt, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDecayFunction2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDecayFunction2DVoigt, name)
    __repr__ = _swig_repr

    def __init__(self, decay_length_x, decay_length_y, eta, gamma=0):
        """
        __init__(FTDecayFunction2DVoigt self, double decay_length_x, double decay_length_y, double eta, double gamma=0) -> FTDecayFunction2DVoigt
        __init__(FTDecayFunction2DVoigt self, double decay_length_x, double decay_length_y, double eta) -> FTDecayFunction2DVoigt

        FTDecayFunction2DVoigt::FTDecayFunction2DVoigt(double decay_length_x, double decay_length_y, double eta, double gamma=0)

        Constructor of two-dimensional pseudo-Voigt decay function in reciprocal space.

        Parameters:
        -----------

        decay_length_x: 
        the decay length in nanometers along x-axis of the distribution

        decay_length_y: 
        the decay length in nanometers along y-axis of the distribution

        eta: 
        parameter [0,1] to balance between Cauchy (eta=0.0) and Gauss (eta=1.0)

        gamma: 
        distribution orientation with respect to the first lattice vector in radians 

        """
        this = _libBornAgainCore.new_FTDecayFunction2DVoigt(decay_length_x, decay_length_y, eta, gamma)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FTDecayFunction2DVoigt self) -> FTDecayFunction2DVoigt

        FTDecayFunction2DVoigt * FTDecayFunction2DVoigt::clone() const 

        """
        return _libBornAgainCore.FTDecayFunction2DVoigt_clone(self)


    def accept(self, visitor):
        """
        accept(FTDecayFunction2DVoigt self, INodeVisitor visitor)

        void FTDecayFunction2DVoigt::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDecayFunction2DVoigt_accept(self, visitor)


    def evaluate(self, qx, qy):
        """
        evaluate(FTDecayFunction2DVoigt self, double qx, double qy) -> double

        double FTDecayFunction2DVoigt::evaluate(double qx, double qy) const final

        evaluate Fourier transformed decay function for q in X,Y coordinates 

        """
        return _libBornAgainCore.FTDecayFunction2DVoigt_evaluate(self, qx, qy)


    def eta(self):
        """
        eta(FTDecayFunction2DVoigt self) -> double

        double FTDecayFunction2DVoigt::eta() const 

        """
        return _libBornAgainCore.FTDecayFunction2DVoigt_eta(self)

    __swig_destroy__ = _libBornAgainCore.delete_FTDecayFunction2DVoigt
    __del__ = lambda self: None
FTDecayFunction2DVoigt_swigregister = _libBornAgainCore.FTDecayFunction2DVoigt_swigregister
FTDecayFunction2DVoigt_swigregister(FTDecayFunction2DVoigt)

class IFTDistribution1D(ICloneable, INode):
    """


    Interface for a one-dimensional distribution, with normalization adjusted so that the Fourier transform evaluate(q) is a decay function that starts at evaluate(0)=1.

    C++ includes: FTDistributions1D.h

    """

    __swig_setmethods__ = {}
    for _s in [ICloneable, INode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFTDistribution1D, name, value)
    __swig_getmethods__ = {}
    for _s in [ICloneable, INode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IFTDistribution1D, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        """
        clone(IFTDistribution1D self) -> IFTDistribution1D

        virtual IFTDistribution1D* IFTDistribution1D::clone() const =0

        """
        return _libBornAgainCore.IFTDistribution1D_clone(self)


    def evaluate(self, q):
        """
        evaluate(IFTDistribution1D self, double q) -> double

        virtual double IFTDistribution1D::evaluate(double q) const =0

        Returns Fourier transform of this distribution; is a decay function starting at evaluate(0)=1. 

        """
        return _libBornAgainCore.IFTDistribution1D_evaluate(self, q)


    def setOmega(self, omega):
        """
        setOmega(IFTDistribution1D self, double omega)

        void IFTDistribution1D::setOmega(double omega)

        """
        return _libBornAgainCore.IFTDistribution1D_setOmega(self, omega)


    def omega(self):
        """
        omega(IFTDistribution1D self) -> double

        double IFTDistribution1D::omega() const 

        """
        return _libBornAgainCore.IFTDistribution1D_omega(self)

    __swig_destroy__ = _libBornAgainCore.delete_IFTDistribution1D
    __del__ = lambda self: None
IFTDistribution1D_swigregister = _libBornAgainCore.IFTDistribution1D_swigregister
IFTDistribution1D_swigregister(IFTDistribution1D)

class FTDistribution1DCauchy(IFTDistribution1D):
    """


    Exponential  IFTDistribution1D exp(-|omega*x|); its Fourier transform evaluate(q) is a Cauchy-Lorentzian starting at evaluate(0)=1.

    C++ includes: FTDistributions1D.h

    """

    __swig_setmethods__ = {}
    for _s in [IFTDistribution1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDistribution1DCauchy, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDistribution1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDistribution1DCauchy, name)
    __repr__ = _swig_repr

    def __init__(self, omega):
        """
        __init__(FTDistribution1DCauchy self, double omega) -> FTDistribution1DCauchy

        FTDistribution1DCauchy::FTDistribution1DCauchy(double omega)

        """
        this = _libBornAgainCore.new_FTDistribution1DCauchy(omega)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FTDistribution1DCauchy self) -> FTDistribution1DCauchy

        FTDistribution1DCauchy * FTDistribution1DCauchy::clone() const final

        """
        return _libBornAgainCore.FTDistribution1DCauchy_clone(self)


    def accept(self, visitor):
        """
        accept(FTDistribution1DCauchy self, INodeVisitor visitor)

        void FTDistribution1DCauchy::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDistribution1DCauchy_accept(self, visitor)


    def evaluate(self, q):
        """
        evaluate(FTDistribution1DCauchy self, double q) -> double

        double FTDistribution1DCauchy::evaluate(double q) const final

        Returns Fourier transform of this distribution; is a decay function starting at evaluate(0)=1. 

        """
        return _libBornAgainCore.FTDistribution1DCauchy_evaluate(self, q)

    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution1DCauchy
    __del__ = lambda self: None
FTDistribution1DCauchy_swigregister = _libBornAgainCore.FTDistribution1DCauchy_swigregister
FTDistribution1DCauchy_swigregister(FTDistribution1DCauchy)

class FTDistribution1DGauss(IFTDistribution1D):
    """


    Gaussian  IFTDistribution1D; its Fourier transform evaluate(q) is a Gaussian starting at evaluate(0)=1.

    C++ includes: FTDistributions1D.h

    """

    __swig_setmethods__ = {}
    for _s in [IFTDistribution1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDistribution1DGauss, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDistribution1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDistribution1DGauss, name)
    __repr__ = _swig_repr

    def __init__(self, omega):
        """
        __init__(FTDistribution1DGauss self, double omega) -> FTDistribution1DGauss

        FTDistribution1DGauss::FTDistribution1DGauss(double omega)

        """
        this = _libBornAgainCore.new_FTDistribution1DGauss(omega)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FTDistribution1DGauss self) -> FTDistribution1DGauss

        FTDistribution1DGauss * FTDistribution1DGauss::clone() const final

        """
        return _libBornAgainCore.FTDistribution1DGauss_clone(self)


    def accept(self, visitor):
        """
        accept(FTDistribution1DGauss self, INodeVisitor visitor)

        void FTDistribution1DGauss::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDistribution1DGauss_accept(self, visitor)


    def evaluate(self, q):
        """
        evaluate(FTDistribution1DGauss self, double q) -> double

        double FTDistribution1DGauss::evaluate(double q) const final

        Returns Fourier transform of this distribution; is a decay function starting at evaluate(0)=1. 

        """
        return _libBornAgainCore.FTDistribution1DGauss_evaluate(self, q)

    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution1DGauss
    __del__ = lambda self: None
FTDistribution1DGauss_swigregister = _libBornAgainCore.FTDistribution1DGauss_swigregister
FTDistribution1DGauss_swigregister(FTDistribution1DGauss)

class FTDistribution1DGate(IFTDistribution1D):
    """


    Square gate  IFTDistribution1D; its Fourier transform evaluate(q) is a sinc function starting at evaluate(0)=1.

    C++ includes: FTDistributions1D.h

    """

    __swig_setmethods__ = {}
    for _s in [IFTDistribution1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDistribution1DGate, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDistribution1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDistribution1DGate, name)
    __repr__ = _swig_repr

    def __init__(self, omega):
        """
        __init__(FTDistribution1DGate self, double omega) -> FTDistribution1DGate

        FTDistribution1DGate::FTDistribution1DGate(double omega)

        """
        this = _libBornAgainCore.new_FTDistribution1DGate(omega)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FTDistribution1DGate self) -> FTDistribution1DGate

        FTDistribution1DGate * FTDistribution1DGate::clone() const final

        """
        return _libBornAgainCore.FTDistribution1DGate_clone(self)


    def accept(self, visitor):
        """
        accept(FTDistribution1DGate self, INodeVisitor visitor)

        void FTDistribution1DGate::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDistribution1DGate_accept(self, visitor)


    def evaluate(self, q):
        """
        evaluate(FTDistribution1DGate self, double q) -> double

        double FTDistribution1DGate::evaluate(double q) const final

        Returns Fourier transform of this distribution; is a decay function starting at evaluate(0)=1. 

        """
        return _libBornAgainCore.FTDistribution1DGate_evaluate(self, q)

    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution1DGate
    __del__ = lambda self: None
FTDistribution1DGate_swigregister = _libBornAgainCore.FTDistribution1DGate_swigregister
FTDistribution1DGate_swigregister(FTDistribution1DGate)

class FTDistribution1DTriangle(IFTDistribution1D):
    """


    Triangle IFTDistribution1D [1-|x|/omega if |x|<omega, and 0 otherwise]; its Fourier transform evaluate(q) is a squared sinc function starting at evaluate(0)=1.

    C++ includes: FTDistributions1D.h

    """

    __swig_setmethods__ = {}
    for _s in [IFTDistribution1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDistribution1DTriangle, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDistribution1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDistribution1DTriangle, name)
    __repr__ = _swig_repr

    def __init__(self, omega):
        """
        __init__(FTDistribution1DTriangle self, double omega) -> FTDistribution1DTriangle

        FTDistribution1DTriangle::FTDistribution1DTriangle(double omega)

        """
        this = _libBornAgainCore.new_FTDistribution1DTriangle(omega)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FTDistribution1DTriangle self) -> FTDistribution1DTriangle

        FTDistribution1DTriangle * FTDistribution1DTriangle::clone() const final

        """
        return _libBornAgainCore.FTDistribution1DTriangle_clone(self)


    def accept(self, visitor):
        """
        accept(FTDistribution1DTriangle self, INodeVisitor visitor)

        void FTDistribution1DTriangle::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDistribution1DTriangle_accept(self, visitor)


    def evaluate(self, q):
        """
        evaluate(FTDistribution1DTriangle self, double q) -> double

        double FTDistribution1DTriangle::evaluate(double q) const final

        Returns Fourier transform of this distribution; is a decay function starting at evaluate(0)=1. 

        """
        return _libBornAgainCore.FTDistribution1DTriangle_evaluate(self, q)

    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution1DTriangle
    __del__ = lambda self: None
FTDistribution1DTriangle_swigregister = _libBornAgainCore.FTDistribution1DTriangle_swigregister
FTDistribution1DTriangle_swigregister(FTDistribution1DTriangle)

class FTDistribution1DCosine(IFTDistribution1D):
    """


    IFTDistribution1D consisting of one cosine wave [1+cos(pi*x/omega) if |x|<omega, and 0 otherwise]; its Fourier transform evaluate(q) starts at evaluate(0)=1.

    C++ includes: FTDistributions1D.h

    """

    __swig_setmethods__ = {}
    for _s in [IFTDistribution1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDistribution1DCosine, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDistribution1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDistribution1DCosine, name)
    __repr__ = _swig_repr

    def __init__(self, omega):
        """
        __init__(FTDistribution1DCosine self, double omega) -> FTDistribution1DCosine

        FTDistribution1DCosine::FTDistribution1DCosine(double omega)

        """
        this = _libBornAgainCore.new_FTDistribution1DCosine(omega)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FTDistribution1DCosine self) -> FTDistribution1DCosine

        FTDistribution1DCosine * FTDistribution1DCosine::clone() const final

        """
        return _libBornAgainCore.FTDistribution1DCosine_clone(self)


    def accept(self, visitor):
        """
        accept(FTDistribution1DCosine self, INodeVisitor visitor)

        void FTDistribution1DCosine::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDistribution1DCosine_accept(self, visitor)


    def evaluate(self, q):
        """
        evaluate(FTDistribution1DCosine self, double q) -> double

        double FTDistribution1DCosine::evaluate(double q) const final

        Returns Fourier transform of this distribution; is a decay function starting at evaluate(0)=1. 

        """
        return _libBornAgainCore.FTDistribution1DCosine_evaluate(self, q)

    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution1DCosine
    __del__ = lambda self: None
FTDistribution1DCosine_swigregister = _libBornAgainCore.FTDistribution1DCosine_swigregister
FTDistribution1DCosine_swigregister(FTDistribution1DCosine)

class FTDistribution1DVoigt(IFTDistribution1D):
    """


    IFTDistribution1D that provides a Fourier transform evaluate(q) in form of a pseudo-Voigt decay function eta*Gauss + (1-eta)*Cauchy, with both components starting at 1 for q=0.

    C++ includes: FTDistributions1D.h

    """

    __swig_setmethods__ = {}
    for _s in [IFTDistribution1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDistribution1DVoigt, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDistribution1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDistribution1DVoigt, name)
    __repr__ = _swig_repr

    def __init__(self, omega, eta):
        """
        __init__(FTDistribution1DVoigt self, double omega, double eta) -> FTDistribution1DVoigt

        FTDistribution1DVoigt::FTDistribution1DVoigt(double omega, double eta)

        Constructor of one-dimensional pseudo-Voigt probability distribution.

        Parameters:
        -----------

        omega: 
        half-width of the distribution in nanometers

        eta: 
        parameter [0,1] to balance between Cauchy (eta=0.0) and Gauss (eta=1.0) 

        """
        this = _libBornAgainCore.new_FTDistribution1DVoigt(omega, eta)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FTDistribution1DVoigt self) -> FTDistribution1DVoigt

        FTDistribution1DVoigt * FTDistribution1DVoigt::clone() const final

        """
        return _libBornAgainCore.FTDistribution1DVoigt_clone(self)


    def accept(self, visitor):
        """
        accept(FTDistribution1DVoigt self, INodeVisitor visitor)

        void FTDistribution1DVoigt::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDistribution1DVoigt_accept(self, visitor)


    def evaluate(self, q):
        """
        evaluate(FTDistribution1DVoigt self, double q) -> double

        double FTDistribution1DVoigt::evaluate(double q) const final

        Returns Fourier transform of this distribution; is a decay function starting at evaluate(0)=1. 

        """
        return _libBornAgainCore.FTDistribution1DVoigt_evaluate(self, q)


    def eta(self):
        """
        eta(FTDistribution1DVoigt self) -> double

        double FTDistribution1DVoigt::eta() const 

        """
        return _libBornAgainCore.FTDistribution1DVoigt_eta(self)

    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution1DVoigt
    __del__ = lambda self: None
FTDistribution1DVoigt_swigregister = _libBornAgainCore.FTDistribution1DVoigt_swigregister
FTDistribution1DVoigt_swigregister(FTDistribution1DVoigt)

class IFTDistribution2D(ICloneable, INode):
    """


    Interface for two-dimensional distributions in Fourier space.

    C++ includes: FTDistributions2D.h

    """

    __swig_setmethods__ = {}
    for _s in [ICloneable, INode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFTDistribution2D, name, value)
    __swig_getmethods__ = {}
    for _s in [ICloneable, INode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IFTDistribution2D, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        """
        clone(IFTDistribution2D self) -> IFTDistribution2D

        IFTDistribution2D* IFTDistribution2D::clone() const =0

        """
        return _libBornAgainCore.IFTDistribution2D_clone(self)


    def setGamma(self, gamma):
        """
        setGamma(IFTDistribution2D self, double gamma)

        void IFTDistribution2D::setGamma(double gamma)

        """
        return _libBornAgainCore.IFTDistribution2D_setGamma(self, gamma)


    def gamma(self):
        """
        gamma(IFTDistribution2D self) -> double

        double IFTDistribution2D::gamma() const 

        """
        return _libBornAgainCore.IFTDistribution2D_gamma(self)


    def delta(self):
        """
        delta(IFTDistribution2D self) -> double

        double IFTDistribution2D::delta() const 

        """
        return _libBornAgainCore.IFTDistribution2D_delta(self)


    def omegaX(self):
        """
        omegaX(IFTDistribution2D self) -> double

        double IFTDistribution2D::omegaX() const 

        """
        return _libBornAgainCore.IFTDistribution2D_omegaX(self)


    def omegaY(self):
        """
        omegaY(IFTDistribution2D self) -> double

        double IFTDistribution2D::omegaY() const 

        """
        return _libBornAgainCore.IFTDistribution2D_omegaY(self)


    def evaluate(self, qx, qy):
        """
        evaluate(IFTDistribution2D self, double qx, double qy) -> double

        virtual double IFTDistribution2D::evaluate(double qx, double qy) const =0

        evaluate Fourier transformed distribution for q in X,Y coordinates the original distribution (in real space) is assumed to be normalized: total integral is equal to 1 

        """
        return _libBornAgainCore.IFTDistribution2D_evaluate(self, qx, qy)

    __swig_destroy__ = _libBornAgainCore.delete_IFTDistribution2D
    __del__ = lambda self: None
IFTDistribution2D_swigregister = _libBornAgainCore.IFTDistribution2D_swigregister
IFTDistribution2D_swigregister(IFTDistribution2D)

class FTDistribution2DCauchy(IFTDistribution2D):
    """


    Two-dimensional Cauchy distribution in Fourier space; corresponds to a normalized exp(-r) in real space, with  $r=\\sqrt{(\\frac{x}{\\omega_x})^2 + (\\frac{y}{\\omega_y})^2}$.

    C++ includes: FTDistributions2D.h

    """

    __swig_setmethods__ = {}
    for _s in [IFTDistribution2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDistribution2DCauchy, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDistribution2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDistribution2DCauchy, name)
    __repr__ = _swig_repr

    def __init__(self, omega_x, omega_y, gamma=0):
        """
        __init__(FTDistribution2DCauchy self, double omega_x, double omega_y, double gamma=0) -> FTDistribution2DCauchy
        __init__(FTDistribution2DCauchy self, double omega_x, double omega_y) -> FTDistribution2DCauchy

        FTDistribution2DCauchy::FTDistribution2DCauchy(double omega_x, double omega_y, double gamma=0)

        """
        this = _libBornAgainCore.new_FTDistribution2DCauchy(omega_x, omega_y, gamma)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FTDistribution2DCauchy self) -> FTDistribution2DCauchy

        FTDistribution2DCauchy * FTDistribution2DCauchy::clone() const final

        """
        return _libBornAgainCore.FTDistribution2DCauchy_clone(self)


    def accept(self, visitor):
        """
        accept(FTDistribution2DCauchy self, INodeVisitor visitor)

        void FTDistribution2DCauchy::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDistribution2DCauchy_accept(self, visitor)


    def evaluate(self, qx, qy):
        """
        evaluate(FTDistribution2DCauchy self, double qx, double qy) -> double

        double FTDistribution2DCauchy::evaluate(double qx, double qy) const final

        evaluate Fourier transformed distribution for q in X,Y coordinates the original distribution (in real space) is assumed to be normalized: total integral is equal to 1 

        """
        return _libBornAgainCore.FTDistribution2DCauchy_evaluate(self, qx, qy)

    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution2DCauchy
    __del__ = lambda self: None
FTDistribution2DCauchy_swigregister = _libBornAgainCore.FTDistribution2DCauchy_swigregister
FTDistribution2DCauchy_swigregister(FTDistribution2DCauchy)

class FTDistribution2DGauss(IFTDistribution2D):
    """


    Two-dimensional Gauss distribution in Fourier space; corresponds to normalized exp(-r^2/2) in real space with  $r=\\sqrt{(\\frac{x}{\\omega_x})^2 + (\\frac{y}{\\omega_y})^2}$.

    C++ includes: FTDistributions2D.h

    """

    __swig_setmethods__ = {}
    for _s in [IFTDistribution2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDistribution2DGauss, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDistribution2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDistribution2DGauss, name)
    __repr__ = _swig_repr

    def __init__(self, omega_x, omega_y, gamma=0):
        """
        __init__(FTDistribution2DGauss self, double omega_x, double omega_y, double gamma=0) -> FTDistribution2DGauss
        __init__(FTDistribution2DGauss self, double omega_x, double omega_y) -> FTDistribution2DGauss

        FTDistribution2DGauss::FTDistribution2DGauss(double omega_x, double omega_y, double gamma=0)

        """
        this = _libBornAgainCore.new_FTDistribution2DGauss(omega_x, omega_y, gamma)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FTDistribution2DGauss self) -> FTDistribution2DGauss

        FTDistribution2DGauss * FTDistribution2DGauss::clone() const final

        """
        return _libBornAgainCore.FTDistribution2DGauss_clone(self)


    def accept(self, visitor):
        """
        accept(FTDistribution2DGauss self, INodeVisitor visitor)

        void FTDistribution2DGauss::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDistribution2DGauss_accept(self, visitor)


    def evaluate(self, qx, qy):
        """
        evaluate(FTDistribution2DGauss self, double qx, double qy) -> double

        double FTDistribution2DGauss::evaluate(double qx, double qy) const final

        evaluate Fourier transformed distribution for q in X,Y coordinates the original distribution (in real space) is assumed to be normalized: total integral is equal to 1 

        """
        return _libBornAgainCore.FTDistribution2DGauss_evaluate(self, qx, qy)

    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution2DGauss
    __del__ = lambda self: None
FTDistribution2DGauss_swigregister = _libBornAgainCore.FTDistribution2DGauss_swigregister
FTDistribution2DGauss_swigregister(FTDistribution2DGauss)

class FTDistribution2DGate(IFTDistribution2D):
    """


    Two-dimensional gate distribution in Fourier space; corresponds to normalized constant if r<1 (and 0 otherwise) in real space, with  $r=\\sqrt{(\\frac{x}{\\omega_x})^2 + (\\frac{y}{\\omega_y})^2}$.

    C++ includes: FTDistributions2D.h

    """

    __swig_setmethods__ = {}
    for _s in [IFTDistribution2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDistribution2DGate, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDistribution2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDistribution2DGate, name)
    __repr__ = _swig_repr

    def __init__(self, omega_x, omega_y, gamma=0):
        """
        __init__(FTDistribution2DGate self, double omega_x, double omega_y, double gamma=0) -> FTDistribution2DGate
        __init__(FTDistribution2DGate self, double omega_x, double omega_y) -> FTDistribution2DGate

        FTDistribution2DGate::FTDistribution2DGate(double omega_x, double omega_y, double gamma=0)

        """
        this = _libBornAgainCore.new_FTDistribution2DGate(omega_x, omega_y, gamma)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FTDistribution2DGate self) -> FTDistribution2DGate

        FTDistribution2DGate * FTDistribution2DGate::clone() const final

        """
        return _libBornAgainCore.FTDistribution2DGate_clone(self)


    def accept(self, visitor):
        """
        accept(FTDistribution2DGate self, INodeVisitor visitor)

        void FTDistribution2DGate::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDistribution2DGate_accept(self, visitor)


    def evaluate(self, qx, qy):
        """
        evaluate(FTDistribution2DGate self, double qx, double qy) -> double

        double FTDistribution2DGate::evaluate(double qx, double qy) const final

        evaluate Fourier transformed distribution for q in X,Y coordinates the original distribution (in real space) is assumed to be normalized: total integral is equal to 1 

        """
        return _libBornAgainCore.FTDistribution2DGate_evaluate(self, qx, qy)

    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution2DGate
    __del__ = lambda self: None
FTDistribution2DGate_swigregister = _libBornAgainCore.FTDistribution2DGate_swigregister
FTDistribution2DGate_swigregister(FTDistribution2DGate)

class FTDistribution2DCone(IFTDistribution2D):
    """


    Two-dimensional cone distribution in Fourier space; corresponds to 1-r if r<1 (and 0 otherwise) in real space with  $r=\\sqrt{(\\frac{x}{\\omega_x})^2 + (\\frac{y}{\\omega_y})^2}$.

    C++ includes: FTDistributions2D.h

    """

    __swig_setmethods__ = {}
    for _s in [IFTDistribution2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDistribution2DCone, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDistribution2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDistribution2DCone, name)
    __repr__ = _swig_repr

    def __init__(self, omega_x, omega_y, gamma=0):
        """
        __init__(FTDistribution2DCone self, double omega_x, double omega_y, double gamma=0) -> FTDistribution2DCone
        __init__(FTDistribution2DCone self, double omega_x, double omega_y) -> FTDistribution2DCone

        FTDistribution2DCone::FTDistribution2DCone(double omega_x, double omega_y, double gamma=0)

        """
        this = _libBornAgainCore.new_FTDistribution2DCone(omega_x, omega_y, gamma)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FTDistribution2DCone self) -> FTDistribution2DCone

        FTDistribution2DCone * FTDistribution2DCone::clone() const final

        """
        return _libBornAgainCore.FTDistribution2DCone_clone(self)


    def accept(self, visitor):
        """
        accept(FTDistribution2DCone self, INodeVisitor visitor)

        void FTDistribution2DCone::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDistribution2DCone_accept(self, visitor)


    def evaluate(self, qx, qy):
        """
        evaluate(FTDistribution2DCone self, double qx, double qy) -> double

        double FTDistribution2DCone::evaluate(double qx, double qy) const final

        evaluate Fourier transformed distribution for q in X,Y coordinates the original distribution (in real space) is assumed to be normalized: total integral is equal to 1 

        """
        return _libBornAgainCore.FTDistribution2DCone_evaluate(self, qx, qy)

    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution2DCone
    __del__ = lambda self: None
FTDistribution2DCone_swigregister = _libBornAgainCore.FTDistribution2DCone_swigregister
FTDistribution2DCone_swigregister(FTDistribution2DCone)

class FTDistribution2DVoigt(IFTDistribution2D):
    """


    Two-dimensional Voigt distribution in Fourier space; corresponds to eta*Gauss + (1-eta)*Cauchy

    C++ includes: FTDistributions2D.h

    """

    __swig_setmethods__ = {}
    for _s in [IFTDistribution2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDistribution2DVoigt, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDistribution2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDistribution2DVoigt, name)
    __repr__ = _swig_repr

    def __init__(self, omega_x, omega_y, eta, gamma=0):
        """
        __init__(FTDistribution2DVoigt self, double omega_x, double omega_y, double eta, double gamma=0) -> FTDistribution2DVoigt
        __init__(FTDistribution2DVoigt self, double omega_x, double omega_y, double eta) -> FTDistribution2DVoigt

        FTDistribution2DVoigt::FTDistribution2DVoigt(double omega_x, double omega_y, double eta, double gamma=0)

        Constructor of two-dimensional pseudo-Voigt probability distribution.

        Parameters:
        -----------

        omega_x: 
        half-width of the distribution along its x-axis in nanometers

        omega_y: 
        half-width of the distribution along its y-axis in nanometers

        eta: 
        parameter [0,1] to balance between Cauchy (eta=0.0) and Gauss (eta=1.0)

        gamma: 
        angle in direct space between first lattice vector and x-axis of the distribution in radians 

        """
        this = _libBornAgainCore.new_FTDistribution2DVoigt(omega_x, omega_y, eta, gamma)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FTDistribution2DVoigt self) -> FTDistribution2DVoigt

        FTDistribution2DVoigt * FTDistribution2DVoigt::clone() const final

        """
        return _libBornAgainCore.FTDistribution2DVoigt_clone(self)


    def accept(self, visitor):
        """
        accept(FTDistribution2DVoigt self, INodeVisitor visitor)

        void FTDistribution2DVoigt::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDistribution2DVoigt_accept(self, visitor)


    def evaluate(self, qx, qy):
        """
        evaluate(FTDistribution2DVoigt self, double qx, double qy) -> double

        double FTDistribution2DVoigt::evaluate(double qx, double qy) const final

        evaluate Fourier transformed distribution for q in X,Y coordinates the original distribution (in real space) is assumed to be normalized: total integral is equal to 1 

        """
        return _libBornAgainCore.FTDistribution2DVoigt_evaluate(self, qx, qy)


    def eta(self):
        """
        eta(FTDistribution2DVoigt self) -> double

        double FTDistribution2DVoigt::eta() const 

        """
        return _libBornAgainCore.FTDistribution2DVoigt_eta(self)

    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution2DVoigt
    __del__ = lambda self: None
FTDistribution2DVoigt_swigregister = _libBornAgainCore.FTDistribution2DVoigt_swigregister
FTDistribution2DVoigt_swigregister(FTDistribution2DVoigt)

class FixedBinAxis(IAxis):
    """


    Axis with fixed bin size.

    C++ includes: FixedBinAxis.h

    """

    __swig_setmethods__ = {}
    for _s in [IAxis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FixedBinAxis, name, value)
    __swig_getmethods__ = {}
    for _s in [IAxis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FixedBinAxis, name)
    __repr__ = _swig_repr

    def __init__(self, name, nbins, start, end):
        """
        __init__(FixedBinAxis self, std::string const & name, size_t nbins, double start, double end) -> FixedBinAxis

        FixedBinAxis::FixedBinAxis(const std::string &name, size_t nbins, double start, double end)

        FixedBinAxis constructor.

        Parameters:
        -----------

        name: 
        Axis name

        nbins: 
        number of bins

        start: 
        low edge of first bin

        end: 
        upper edge of last bin 

        """
        this = _libBornAgainCore.new_FixedBinAxis(name, nbins, start, end)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FixedBinAxis
    __del__ = lambda self: None

    def clone(self):
        """
        clone(FixedBinAxis self) -> FixedBinAxis

        FixedBinAxis * FixedBinAxis::clone() const

        clone function 

        """
        return _libBornAgainCore.FixedBinAxis_clone(self)


    def size(self):
        """
        size(FixedBinAxis self) -> size_t

        size_t FixedBinAxis::size() const

        retrieve the number of bins 

        """
        return _libBornAgainCore.FixedBinAxis_size(self)


    def getBin(self, index):
        """
        getBin(FixedBinAxis self, size_t index) -> Bin1D

        Bin1D FixedBinAxis::getBin(size_t index) const

        retrieve a 1d bin for the given index 

        """
        return _libBornAgainCore.FixedBinAxis_getBin(self, index)


    def getMin(self):
        """
        getMin(FixedBinAxis self) -> double

        double FixedBinAxis::getMin() const

        Returns value of first point of axis. 

        """
        return _libBornAgainCore.FixedBinAxis_getMin(self)


    def getMax(self):
        """
        getMax(FixedBinAxis self) -> double

        double FixedBinAxis::getMax() const

        Returns value of last point of axis. 

        """
        return _libBornAgainCore.FixedBinAxis_getMax(self)


    def getBinCenter(self, index):
        """
        getBinCenter(FixedBinAxis self, size_t index) -> double

        double FixedBinAxis::getBinCenter(size_t index) const 

        """
        return _libBornAgainCore.FixedBinAxis_getBinCenter(self, index)


    def findClosestIndex(self, value):
        """
        findClosestIndex(FixedBinAxis self, double value) -> size_t

        size_t FixedBinAxis::findClosestIndex(double value) const

        find bin index which is best match for given value 

        """
        return _libBornAgainCore.FixedBinAxis_findClosestIndex(self, value)


    def getBinCenters(self):
        """
        getBinCenters(FixedBinAxis self) -> vdouble1d_t

        std::vector< double > FixedBinAxis::getBinCenters() const 

        """
        return _libBornAgainCore.FixedBinAxis_getBinCenters(self)


    def getBinBoundaries(self):
        """
        getBinBoundaries(FixedBinAxis self) -> vdouble1d_t

        std::vector< double > FixedBinAxis::getBinBoundaries() const 

        """
        return _libBornAgainCore.FixedBinAxis_getBinBoundaries(self)


    def createClippedAxis(self, left, right):
        """
        createClippedAxis(FixedBinAxis self, double left, double right) -> FixedBinAxis

        FixedBinAxis * FixedBinAxis::createClippedAxis(double left, double right) const

        Creates a new clipped axis. 

        """
        return _libBornAgainCore.FixedBinAxis_createClippedAxis(self, left, right)


    def __getitem__(self, i):
        """__getitem__(FixedBinAxis self, unsigned int i) -> double"""
        return _libBornAgainCore.FixedBinAxis___getitem__(self, i)

FixedBinAxis_swigregister = _libBornAgainCore.FixedBinAxis_swigregister
FixedBinAxis_swigregister(FixedBinAxis)

class IFormFactor(ISample):
    """


    Pure virtual base class for all form factors.

    The actual form factor is returned by the complex valued function  IFormFactor::evaluate, which depends on the incoming and outgoing wave vectors ki and kf. If it only depends on the scattering vector q=ki-kf, then it is a IBornFormFactor.

    Other children besides IBornFormFactor are  IFormFactorDecorator,  FormFactorWeighted,  FormFactorDWBA,  FormFactorDWBAPol and  FormFactorCrystal.

    C++ includes: IFormFactor.h

    """

    __swig_setmethods__ = {}
    for _s in [ISample]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFormFactor, name, value)
    __swig_getmethods__ = {}
    for _s in [ISample]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IFormFactor, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(IFormFactor self) -> IFormFactor

        IFormFactor::IFormFactor()

        """
        if self.__class__ == IFormFactor:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IFormFactor(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_IFormFactor
    __del__ = lambda self: None

    def clone(self):
        """
        clone(IFormFactor self) -> IFormFactor

        IFormFactor* IFormFactor::clone() const override=0

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.IFormFactor_clone(self)


    def createSlicedFormFactor(self, limits, rot, translation):
        """
        createSlicedFormFactor(IFormFactor self, ZLimits limits, IRotation rot, kvector_t translation) -> IFormFactor

        IFormFactor * IFormFactor::createSlicedFormFactor(ZLimits limits, const IRotation &rot, kvector_t translation) const

        Creates a (possibly sliced) form factor with the given rotation and translation. 

        """
        return _libBornAgainCore.IFormFactor_createSlicedFormFactor(self, limits, rot, translation)


    def setAmbientMaterial(self, arg0):
        """
        setAmbientMaterial(IFormFactor self, Material arg0)

        virtual void IFormFactor::setAmbientMaterial(Material)=0

        Passes the material in which this particle is embedded. 

        """
        return _libBornAgainCore.IFormFactor_setAmbientMaterial(self, arg0)


    def evaluate(self, wavevectors):
        """
        evaluate(IFormFactor self, WavevectorInfo wavevectors) -> complex_t

        virtual complex_t IFormFactor::evaluate(const WavevectorInfo &wavevectors) const =0

        Returns scattering amplitude for complex wavevectors ki, kf. 

        """
        return _libBornAgainCore.IFormFactor_evaluate(self, wavevectors)


    def volume(self):
        """
        volume(IFormFactor self) -> double

        double IFormFactor::volume() const

        Returns the total volume of the particle of this form factor's shape. 

        """
        return _libBornAgainCore.IFormFactor_volume(self)


    def radialExtension(self):
        """
        radialExtension(IFormFactor self) -> double

        virtual double IFormFactor::radialExtension() const =0

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.IFormFactor_radialExtension(self)


    def bottomZ(self, rotation):
        """
        bottomZ(IFormFactor self, IRotation rotation) -> double

        virtual double IFormFactor::bottomZ(const IRotation &rotation) const =0

        Returns the z-coordinate of the lowest point in this shape after a given rotation. 

        """
        return _libBornAgainCore.IFormFactor_bottomZ(self, rotation)


    def topZ(self, rotation):
        """
        topZ(IFormFactor self, IRotation rotation) -> double

        virtual double IFormFactor::topZ(const IRotation &rotation) const =0

        Returns the z-coordinate of the lowest point in this shape after a given rotation. 

        """
        return _libBornAgainCore.IFormFactor_topZ(self, rotation)


    def canSliceAnalytically(self, rot):
        """canSliceAnalytically(IFormFactor self, IRotation rot) -> bool"""
        return _libBornAgainCore.IFormFactor_canSliceAnalytically(self, rot)


    def sliceFormFactor(self, limits, rot, translation):
        """sliceFormFactor(IFormFactor self, ZLimits limits, IRotation rot, kvector_t translation) -> IFormFactor"""
        return _libBornAgainCore.IFormFactor_sliceFormFactor(self, limits, rot, translation)

    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IFormFactor(self)
        return weakref_proxy(self)
IFormFactor_swigregister = _libBornAgainCore.IFormFactor_swigregister
IFormFactor_swigregister(IFormFactor)


def CreateTransformedFormFactor(formfactor, rot, translation):
    """
    CreateTransformedFormFactor(IFormFactor formfactor, IRotation rot, kvector_t translation) -> IFormFactor

    IFormFactor* CreateTransformedFormFactor(const IFormFactor &formfactor, const IRotation &rot, kvector_t translation)

    """
    return _libBornAgainCore.CreateTransformedFormFactor(formfactor, rot, translation)
class vector_IFormFactorPtr_t(_object):
    """Proxy of C++ std::vector<(p.IFormFactor)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_IFormFactorPtr_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_IFormFactorPtr_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vector_IFormFactorPtr_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vector_IFormFactorPtr_t self) -> bool"""
        return _libBornAgainCore.vector_IFormFactorPtr_t___nonzero__(self)


    def __bool__(self):
        """__bool__(vector_IFormFactorPtr_t self) -> bool"""
        return _libBornAgainCore.vector_IFormFactorPtr_t___bool__(self)


    def __len__(self):
        """__len__(vector_IFormFactorPtr_t self) -> std::vector< IFormFactor * >::size_type"""
        return _libBornAgainCore.vector_IFormFactorPtr_t___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::difference_type i, std::vector< IFormFactor * >::difference_type j) -> vector_IFormFactorPtr_t"""
        return _libBornAgainCore.vector_IFormFactorPtr_t___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::difference_type i, std::vector< IFormFactor * >::difference_type j)
        __setslice__(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::difference_type i, std::vector< IFormFactor * >::difference_type j, vector_IFormFactorPtr_t v)
        """
        return _libBornAgainCore.vector_IFormFactorPtr_t___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::difference_type i, std::vector< IFormFactor * >::difference_type j)"""
        return _libBornAgainCore.vector_IFormFactorPtr_t___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::difference_type i)
        __delitem__(vector_IFormFactorPtr_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vector_IFormFactorPtr_t___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vector_IFormFactorPtr_t self, PySliceObject * slice) -> vector_IFormFactorPtr_t
        __getitem__(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::difference_type i) -> IFormFactor
        """
        return _libBornAgainCore.vector_IFormFactorPtr_t___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vector_IFormFactorPtr_t self, PySliceObject * slice, vector_IFormFactorPtr_t v)
        __setitem__(vector_IFormFactorPtr_t self, PySliceObject * slice)
        __setitem__(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::difference_type i, IFormFactor x)
        """
        return _libBornAgainCore.vector_IFormFactorPtr_t___setitem__(self, *args)


    def pop(self):
        """pop(vector_IFormFactorPtr_t self) -> IFormFactor"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_pop(self)


    def append(self, x):
        """append(vector_IFormFactorPtr_t self, IFormFactor x)"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_append(self, x)


    def empty(self):
        """empty(vector_IFormFactorPtr_t self) -> bool"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_empty(self)


    def size(self):
        """size(vector_IFormFactorPtr_t self) -> std::vector< IFormFactor * >::size_type"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_size(self)


    def swap(self, v):
        """
        swap(vector_IFormFactorPtr_t self, vector_IFormFactorPtr_t v)

        void swap(OutputDataIterator< TValue, TContainer > &left, OutputDataIterator< TValue, TContainer > &right)

        make Swappable 

        """
        return _libBornAgainCore.vector_IFormFactorPtr_t_swap(self, v)


    def begin(self):
        """begin(vector_IFormFactorPtr_t self) -> std::vector< IFormFactor * >::iterator"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_begin(self)


    def end(self):
        """end(vector_IFormFactorPtr_t self) -> std::vector< IFormFactor * >::iterator"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_end(self)


    def rbegin(self):
        """rbegin(vector_IFormFactorPtr_t self) -> std::vector< IFormFactor * >::reverse_iterator"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_rbegin(self)


    def rend(self):
        """rend(vector_IFormFactorPtr_t self) -> std::vector< IFormFactor * >::reverse_iterator"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_rend(self)


    def clear(self):
        """clear(vector_IFormFactorPtr_t self)"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_clear(self)


    def get_allocator(self):
        """get_allocator(vector_IFormFactorPtr_t self) -> std::vector< IFormFactor * >::allocator_type"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_get_allocator(self)


    def pop_back(self):
        """pop_back(vector_IFormFactorPtr_t self)"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_pop_back(self)


    def erase(self, *args):
        """
        erase(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::iterator pos) -> std::vector< IFormFactor * >::iterator
        erase(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::iterator first, std::vector< IFormFactor * >::iterator last) -> std::vector< IFormFactor * >::iterator
        """
        return _libBornAgainCore.vector_IFormFactorPtr_t_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.IFormFactor)> self) -> vector_IFormFactorPtr_t
        __init__(std::vector<(p.IFormFactor)> self, vector_IFormFactorPtr_t arg2) -> vector_IFormFactorPtr_t
        __init__(std::vector<(p.IFormFactor)> self, std::vector< IFormFactor * >::size_type size) -> vector_IFormFactorPtr_t
        __init__(std::vector<(p.IFormFactor)> self, std::vector< IFormFactor * >::size_type size, IFormFactor value) -> vector_IFormFactorPtr_t
        """
        this = _libBornAgainCore.new_vector_IFormFactorPtr_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(vector_IFormFactorPtr_t self, IFormFactor x)"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_push_back(self, x)


    def front(self):
        """front(vector_IFormFactorPtr_t self) -> IFormFactor"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_front(self)


    def back(self):
        """back(vector_IFormFactorPtr_t self) -> IFormFactor"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_back(self)


    def assign(self, n, x):
        """assign(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::size_type n, IFormFactor x)"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::size_type new_size)
        resize(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::size_type new_size, IFormFactor x)
        """
        return _libBornAgainCore.vector_IFormFactorPtr_t_resize(self, *args)


    def insert(self, *args):
        """
        insert(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::iterator pos, IFormFactor x) -> std::vector< IFormFactor * >::iterator
        insert(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::iterator pos, std::vector< IFormFactor * >::size_type n, IFormFactor x)
        """
        return _libBornAgainCore.vector_IFormFactorPtr_t_insert(self, *args)


    def reserve(self, n):
        """reserve(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::size_type n)"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_reserve(self, n)


    def capacity(self):
        """capacity(vector_IFormFactorPtr_t self) -> std::vector< IFormFactor * >::size_type"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_capacity(self)

    __swig_destroy__ = _libBornAgainCore.delete_vector_IFormFactorPtr_t
    __del__ = lambda self: None
vector_IFormFactorPtr_t_swigregister = _libBornAgainCore.vector_IFormFactorPtr_t_swigregister
vector_IFormFactorPtr_t_swigregister(vector_IFormFactorPtr_t)

class IFormFactorBorn(IFormFactor):
    """


    Pure virtual base class for Born form factors.

    In contrast to the generic  IFormFactor, a Born form factor does not depend on the incoming and outgoing wave vectors ki and kf, except through their difference, the scattering vector q=ki-kf.

    C++ includes: IFormFactorBorn.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFormFactorBorn, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IFormFactorBorn, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(IFormFactorBorn self) -> IFormFactorBorn

        IFormFactorBorn::IFormFactorBorn()

        """
        if self.__class__ == IFormFactorBorn:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IFormFactorBorn(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_IFormFactorBorn
    __del__ = lambda self: None

    def clone(self):
        """
        clone(IFormFactorBorn self) -> IFormFactorBorn

        IFormFactorBorn* IFormFactorBorn::clone() const override=0

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.IFormFactorBorn_clone(self)


    def setAmbientMaterial(self, arg0):
        """
        setAmbientMaterial(IFormFactorBorn self, Material arg0)

        void IFormFactorBorn::setAmbientMaterial(Material) override

        Passes the material in which this particle is embedded. 

        """
        return _libBornAgainCore.IFormFactorBorn_setAmbientMaterial(self, arg0)


    def evaluate(self, wavevectors):
        """
        evaluate(IFormFactorBorn self, WavevectorInfo wavevectors) -> complex_t

        complex_t IFormFactorBorn::evaluate(const WavevectorInfo &wavevectors) const override

        Returns scattering amplitude for complex wavevectors ki, kf. 

        """
        return _libBornAgainCore.IFormFactorBorn_evaluate(self, wavevectors)


    def bottomZ(self, rotation):
        """
        bottomZ(IFormFactorBorn self, IRotation rotation) -> double

        double IFormFactorBorn::bottomZ(const IRotation &rotation) const override

        Returns the z-coordinate of the lowest point in this shape after a given rotation. 

        """
        return _libBornAgainCore.IFormFactorBorn_bottomZ(self, rotation)


    def topZ(self, rotation):
        """
        topZ(IFormFactorBorn self, IRotation rotation) -> double

        double IFormFactorBorn::topZ(const IRotation &rotation) const override

        Returns the z-coordinate of the lowest point in this shape after a given rotation. 

        """
        return _libBornAgainCore.IFormFactorBorn_topZ(self, rotation)


    def evaluate_for_q(self, q):
        """
        evaluate_for_q(IFormFactorBorn self, cvector_t q) -> complex_t

        virtual complex_t IFormFactorBorn::evaluate_for_q(cvector_t q) const =0

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.IFormFactorBorn_evaluate_for_q(self, q)


    def canSliceAnalytically(self, rot):
        """canSliceAnalytically(IFormFactorBorn self, IRotation rot) -> bool"""
        return _libBornAgainCore.IFormFactorBorn_canSliceAnalytically(self, rot)

    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IFormFactorBorn(self)
        return weakref_proxy(self)

    def sliceFormFactor(self, limits, rot, translation):
        """sliceFormFactor(IFormFactorBorn self, ZLimits limits, IRotation rot, kvector_t translation) -> IFormFactor"""
        return _libBornAgainCore.IFormFactorBorn_sliceFormFactor(self, limits, rot, translation)

IFormFactorBorn_swigregister = _libBornAgainCore.IFormFactorBorn_swigregister
IFormFactorBorn_swigregister(IFormFactorBorn)

class SlicingEffects(_object):
    """


    Nested structure that holds slicing effects on position and removed parts.

    C++ includes: IFormFactorBorn.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SlicingEffects, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SlicingEffects, name)
    __repr__ = _swig_repr
    __swig_setmethods__["position"] = _libBornAgainCore.SlicingEffects_position_set
    __swig_getmethods__["position"] = _libBornAgainCore.SlicingEffects_position_get
    if _newclass:
        position = _swig_property(_libBornAgainCore.SlicingEffects_position_get, _libBornAgainCore.SlicingEffects_position_set)
    __swig_setmethods__["dz_bottom"] = _libBornAgainCore.SlicingEffects_dz_bottom_set
    __swig_getmethods__["dz_bottom"] = _libBornAgainCore.SlicingEffects_dz_bottom_get
    if _newclass:
        dz_bottom = _swig_property(_libBornAgainCore.SlicingEffects_dz_bottom_get, _libBornAgainCore.SlicingEffects_dz_bottom_set)
    __swig_setmethods__["dz_top"] = _libBornAgainCore.SlicingEffects_dz_top_set
    __swig_getmethods__["dz_top"] = _libBornAgainCore.SlicingEffects_dz_top_get
    if _newclass:
        dz_top = _swig_property(_libBornAgainCore.SlicingEffects_dz_top_get, _libBornAgainCore.SlicingEffects_dz_top_set)

    def __init__(self):
        """
        __init__(SlicingEffects self) -> SlicingEffects



        Nested structure that holds slicing effects on position and removed parts.

        C++ includes: IFormFactorBorn.h

        """
        this = _libBornAgainCore.new_SlicingEffects()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_SlicingEffects
    __del__ = lambda self: None
SlicingEffects_swigregister = _libBornAgainCore.SlicingEffects_swigregister
SlicingEffects_swigregister(SlicingEffects)

class IFormFactorDecorator(IFormFactor):
    """


    Encapsulates another formfactor and adds extra functionality (a scalar factor, a Debye-Waller factor, a position-dependent phase factor, ...).

    This class is designed according to the Decorator Pattern. It inherits from  IFormFactor and has a member of type IFormFactor*.

    C++ includes: IFormFactorDecorator.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFormFactorDecorator, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IFormFactorDecorator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IFormFactorDecorator
    __del__ = lambda self: None

    def clone(self):
        """
        clone(IFormFactorDecorator self) -> IFormFactorDecorator

        IFormFactorDecorator* IFormFactorDecorator::clone() const override=0

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.IFormFactorDecorator_clone(self)


    def accept(self, visitor):
        """
        accept(IFormFactorDecorator self, INodeVisitor visitor)

        void IFormFactorDecorator::accept(INodeVisitor *visitor) const override=0

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.IFormFactorDecorator_accept(self, visitor)


    def setAmbientMaterial(self, material):
        """
        setAmbientMaterial(IFormFactorDecorator self, Material material)

        void IFormFactorDecorator::setAmbientMaterial(Material material) override

        Passes the material in which this particle is embedded. 

        """
        return _libBornAgainCore.IFormFactorDecorator_setAmbientMaterial(self, material)


    def volume(self):
        """
        volume(IFormFactorDecorator self) -> double

        double IFormFactorDecorator::volume() const override

        Returns the total volume of the particle of this form factor's shape. 

        """
        return _libBornAgainCore.IFormFactorDecorator_volume(self)


    def radialExtension(self):
        """
        radialExtension(IFormFactorDecorator self) -> double

        double IFormFactorDecorator::radialExtension() const override

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.IFormFactorDecorator_radialExtension(self)


    def bottomZ(self, rotation):
        """
        bottomZ(IFormFactorDecorator self, IRotation rotation) -> double

        double IFormFactorDecorator::bottomZ(const IRotation &rotation) const override

        Returns the z-coordinate of the lowest point in this shape after a given rotation. 

        """
        return _libBornAgainCore.IFormFactorDecorator_bottomZ(self, rotation)


    def topZ(self, rotation):
        """
        topZ(IFormFactorDecorator self, IRotation rotation) -> double

        double IFormFactorDecorator::topZ(const IRotation &rotation) const override

        Returns the z-coordinate of the lowest point in this shape after a given rotation. 

        """
        return _libBornAgainCore.IFormFactorDecorator_topZ(self, rotation)

IFormFactorDecorator_swigregister = _libBornAgainCore.IFormFactorDecorator_swigregister
IFormFactorDecorator_swigregister(IFormFactorDecorator)

class PolygonalTopology(_object):
    """


    For internal use in  PolyhedralFace.

    C++ includes: FormFactorPolyhedron.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolygonalTopology, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolygonalTopology, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vertexIndices"] = _libBornAgainCore.PolygonalTopology_vertexIndices_set
    __swig_getmethods__["vertexIndices"] = _libBornAgainCore.PolygonalTopology_vertexIndices_get
    if _newclass:
        vertexIndices = _swig_property(_libBornAgainCore.PolygonalTopology_vertexIndices_get, _libBornAgainCore.PolygonalTopology_vertexIndices_set)
    __swig_setmethods__["symmetry_S2"] = _libBornAgainCore.PolygonalTopology_symmetry_S2_set
    __swig_getmethods__["symmetry_S2"] = _libBornAgainCore.PolygonalTopology_symmetry_S2_get
    if _newclass:
        symmetry_S2 = _swig_property(_libBornAgainCore.PolygonalTopology_symmetry_S2_get, _libBornAgainCore.PolygonalTopology_symmetry_S2_set)

    def __init__(self):
        """
        __init__(PolygonalTopology self) -> PolygonalTopology



        For internal use in  PolyhedralFace.

        C++ includes: FormFactorPolyhedron.h

        """
        this = _libBornAgainCore.new_PolygonalTopology()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_PolygonalTopology
    __del__ = lambda self: None
PolygonalTopology_swigregister = _libBornAgainCore.PolygonalTopology_swigregister
PolygonalTopology_swigregister(PolygonalTopology)

class PolyhedralTopology(_object):
    """


    For internal use in  FormFactorPolyhedron.

    C++ includes: FormFactorPolyhedron.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolyhedralTopology, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolyhedralTopology, name)
    __repr__ = _swig_repr
    __swig_setmethods__["faces"] = _libBornAgainCore.PolyhedralTopology_faces_set
    __swig_getmethods__["faces"] = _libBornAgainCore.PolyhedralTopology_faces_get
    if _newclass:
        faces = _swig_property(_libBornAgainCore.PolyhedralTopology_faces_get, _libBornAgainCore.PolyhedralTopology_faces_set)
    __swig_setmethods__["symmetry_Ci"] = _libBornAgainCore.PolyhedralTopology_symmetry_Ci_set
    __swig_getmethods__["symmetry_Ci"] = _libBornAgainCore.PolyhedralTopology_symmetry_Ci_get
    if _newclass:
        symmetry_Ci = _swig_property(_libBornAgainCore.PolyhedralTopology_symmetry_Ci_get, _libBornAgainCore.PolyhedralTopology_symmetry_Ci_set)

    def __init__(self):
        """
        __init__(PolyhedralTopology self) -> PolyhedralTopology



        For internal use in  FormFactorPolyhedron.

        C++ includes: FormFactorPolyhedron.h

        """
        this = _libBornAgainCore.new_PolyhedralTopology()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_PolyhedralTopology
    __del__ = lambda self: None
PolyhedralTopology_swigregister = _libBornAgainCore.PolyhedralTopology_swigregister
PolyhedralTopology_swigregister(PolyhedralTopology)

class PolyhedralEdge(_object):
    """


    One edge of a polygon, for form factor computation.

    C++ includes: FormFactorPolyhedron.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolyhedralEdge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolyhedralEdge, name)
    __repr__ = _swig_repr

    def __init__(self, _Vlow, _Vhig):
        """
        __init__(PolyhedralEdge self, kvector_t _Vlow, kvector_t _Vhig) -> PolyhedralEdge

        PolyhedralEdge::PolyhedralEdge(const kvector_t _Vlow, const kvector_t _Vhig)

        """
        this = _libBornAgainCore.new_PolyhedralEdge(_Vlow, _Vhig)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def E(self):
        """
        E(PolyhedralEdge self) -> kvector_t

        kvector_t PolyhedralEdge::E() const 

        """
        return _libBornAgainCore.PolyhedralEdge_E(self)


    def R(self):
        """
        R(PolyhedralEdge self) -> kvector_t

        kvector_t PolyhedralEdge::R() const 

        """
        return _libBornAgainCore.PolyhedralEdge_R(self)


    def qE(self, q):
        """
        qE(PolyhedralEdge self, cvector_t q) -> complex_t

        complex_t PolyhedralEdge::qE(cvector_t q) const 

        """
        return _libBornAgainCore.PolyhedralEdge_qE(self, q)


    def qR(self, q):
        """
        qR(PolyhedralEdge self, cvector_t q) -> complex_t

        complex_t PolyhedralEdge::qR(cvector_t q) const 

        """
        return _libBornAgainCore.PolyhedralEdge_qR(self, q)


    def contrib(self, m, qpa, qrperp):
        """
        contrib(PolyhedralEdge self, int m, cvector_t qpa, complex_t qrperp) -> complex_t

        complex_t PolyhedralEdge::contrib(int m, cvector_t qpa, complex_t qrperp) const

        Returns sum_l=0^M/2 u^2l v^(M-2l) / (2l+1)!(M-2l)! - vperp^M/M! 

        """
        return _libBornAgainCore.PolyhedralEdge_contrib(self, m, qpa, qrperp)

    __swig_destroy__ = _libBornAgainCore.delete_PolyhedralEdge
    __del__ = lambda self: None
PolyhedralEdge_swigregister = _libBornAgainCore.PolyhedralEdge_swigregister
PolyhedralEdge_swigregister(PolyhedralEdge)

class PolyhedralFace(_object):
    """


    A polygon, for form factor computation.

    C++ includes: FormFactorPolyhedron.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolyhedralFace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolyhedralFace, name)
    __repr__ = _swig_repr

    def diameter(V):
        """diameter(vector_kvector_t V) -> double"""
        return _libBornAgainCore.PolyhedralFace_diameter(V)

    diameter = staticmethod(diameter)

    def __init__(self, *args):
        """
        __init__(PolyhedralFace self, vector_kvector_t _V, bool _sym_S2=False) -> PolyhedralFace
        __init__(PolyhedralFace self, vector_kvector_t _V) -> PolyhedralFace
        __init__(PolyhedralFace self) -> PolyhedralFace

        PolyhedralFace::PolyhedralFace(const std::vector< kvector_t > &_V=std::vector< kvector_t >(), bool _sym_S2=false)

        Sets internal variables for given vertex chain.

        Parameters:
        -----------

        V: 
        oriented vertex list

        _sym_S2: 
        true if face has a perpedicular two-fold symmetry axis 

        """
        this = _libBornAgainCore.new_PolyhedralFace(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def area(self):
        """
        area(PolyhedralFace self) -> double

        double PolyhedralFace::area() const 

        """
        return _libBornAgainCore.PolyhedralFace_area(self)


    def center(self):
        """
        center(PolyhedralFace self) -> kvector_t

        kvector_t PolyhedralFace::center() const 

        """
        return _libBornAgainCore.PolyhedralFace_center(self)


    def pyramidalVolume(self):
        """
        pyramidalVolume(PolyhedralFace self) -> double

        double PolyhedralFace::pyramidalVolume() const 

        """
        return _libBornAgainCore.PolyhedralFace_pyramidalVolume(self)


    def radius3d(self):
        """
        radius3d(PolyhedralFace self) -> double

        double PolyhedralFace::radius3d() const 

        """
        return _libBornAgainCore.PolyhedralFace_radius3d(self)


    def normalProjectionConj(self, q):
        """
        normalProjectionConj(PolyhedralFace self, cvector_t q) -> complex_t

        complex_t PolyhedralFace::normalProjectionConj(cvector_t q) const

        Returns conj(q)*normal [ BasicVector3D::dot is antilinear in 'this' argument]. 

        """
        return _libBornAgainCore.PolyhedralFace_normalProjectionConj(self, q)


    def ff_n(self, m, q):
        """
        ff_n(PolyhedralFace self, int m, cvector_t q) -> complex_t

        complex_t PolyhedralFace::ff_n(int m, cvector_t q) const

        Returns contribution qn*f_n [of order q^(n+1)] from this face to the polyhedral form factor. 

        """
        return _libBornAgainCore.PolyhedralFace_ff_n(self, m, q)


    def ff(self, q, sym_Ci):
        """
        ff(PolyhedralFace self, cvector_t q, bool sym_Ci) -> complex_t

        complex_t PolyhedralFace::ff(cvector_t q, bool sym_Ci) const

        Returns the contribution ff(q) of this face to the polyhedral form factor. 

        """
        return _libBornAgainCore.PolyhedralFace_ff(self, q, sym_Ci)


    def ff_2D(self, qpa):
        """
        ff_2D(PolyhedralFace self, cvector_t qpa) -> complex_t

        complex_t PolyhedralFace::ff_2D(cvector_t qpa) const

        Returns the two-dimensional form factor of this face, for use in a prism. 

        """
        return _libBornAgainCore.PolyhedralFace_ff_2D(self, qpa)


    def assert_Ci(self, other):
        """
        assert_Ci(PolyhedralFace self, PolyhedralFace other)

        void PolyhedralFace::assert_Ci(const PolyhedralFace &other) const

        Throws if deviation from inversion symmetry is detected. Does not check vertices. 

        """
        return _libBornAgainCore.PolyhedralFace_assert_Ci(self, other)

    __swig_destroy__ = _libBornAgainCore.delete_PolyhedralFace
    __del__ = lambda self: None
PolyhedralFace_swigregister = _libBornAgainCore.PolyhedralFace_swigregister
PolyhedralFace_swigregister(PolyhedralFace)

def PolyhedralFace_diameter(V):
    """PolyhedralFace_diameter(vector_kvector_t V) -> double"""
    return _libBornAgainCore.PolyhedralFace_diameter(V)

class FormFactorPolyhedron(IFormFactorBorn):
    """


    A polyhedron, for form factor computation.

    C++ includes: FormFactorPolyhedron.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorPolyhedron, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorPolyhedron, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def evaluate_for_q(self, q):
        """
        evaluate_for_q(FormFactorPolyhedron self, cvector_t q) -> complex_t

        complex_t FormFactorPolyhedron::evaluate_for_q(cvector_t q) const overridefinal

        Returns the form factor F(q) of this polyhedron, respecting the offset z_origin. 

        """
        return _libBornAgainCore.FormFactorPolyhedron_evaluate_for_q(self, q)


    def evaluate_centered(self, q):
        """
        evaluate_centered(FormFactorPolyhedron self, cvector_t q) -> complex_t

        complex_t FormFactorPolyhedron::evaluate_centered(cvector_t q) const

        Returns the form factor F(q) of this polyhedron, with origin at z=0. 

        """
        return _libBornAgainCore.FormFactorPolyhedron_evaluate_centered(self, q)


    def volume(self):
        """
        volume(FormFactorPolyhedron self) -> double

        double FormFactorPolyhedron::volume() const overridefinal

        Returns the total volume of the particle of this form factor's shape. 

        """
        return _libBornAgainCore.FormFactorPolyhedron_volume(self)


    def radialExtension(self):
        """
        radialExtension(FormFactorPolyhedron self) -> double

        double FormFactorPolyhedron::radialExtension() const overridefinal

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorPolyhedron_radialExtension(self)


    def assert_platonic(self):
        """
        assert_platonic(FormFactorPolyhedron self)

        void FormFactorPolyhedron::assert_platonic() const

        Assertions for Platonic solid. 

        """
        return _libBornAgainCore.FormFactorPolyhedron_assert_platonic(self)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorPolyhedron
    __del__ = lambda self: None
FormFactorPolyhedron_swigregister = _libBornAgainCore.FormFactorPolyhedron_swigregister
FormFactorPolyhedron_swigregister(FormFactorPolyhedron)

class FormFactorPolygonalPrism(IFormFactorBorn):
    """


    A prism with a polygonal base, for form factor computation.

    C++ includes: FormFactorPolyhedron.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorPolygonalPrism, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorPolygonalPrism, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def evaluate_for_q(self, q):
        """
        evaluate_for_q(FormFactorPolygonalPrism self, cvector_t q) -> complex_t

        complex_t FormFactorPolygonalPrism::evaluate_for_q(cvector_t q) const overridefinal

        Returns the form factor F(q) of this polyhedron, respecting the offset height/2. 

        """
        return _libBornAgainCore.FormFactorPolygonalPrism_evaluate_for_q(self, q)


    def volume(self):
        """
        volume(FormFactorPolygonalPrism self) -> double

        double FormFactorPolygonalPrism::volume() const overridefinal

        Returns the volume of this prism. 

        """
        return _libBornAgainCore.FormFactorPolygonalPrism_volume(self)


    def getHeight(self):
        """
        getHeight(FormFactorPolygonalPrism self) -> double

        double FormFactorPolygonalPrism::getHeight() const 

        """
        return _libBornAgainCore.FormFactorPolygonalPrism_getHeight(self)


    def radialExtension(self):
        """
        radialExtension(FormFactorPolygonalPrism self) -> double

        double FormFactorPolygonalPrism::radialExtension() const overridefinal

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorPolygonalPrism_radialExtension(self)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorPolygonalPrism
    __del__ = lambda self: None
FormFactorPolygonalPrism_swigregister = _libBornAgainCore.FormFactorPolygonalPrism_swigregister
FormFactorPolygonalPrism_swigregister(FormFactorPolygonalPrism)

class FormFactorPolygonalSurface(IFormFactorBorn):
    """


    A polygonal surface, for testing form factor computations.

    C++ includes: FormFactorPolyhedron.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorPolygonalSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorPolygonalSurface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def evaluate_for_q(self, q):
        """
        evaluate_for_q(FormFactorPolygonalSurface self, cvector_t q) -> complex_t

        complex_t FormFactorPolygonalSurface::evaluate_for_q(cvector_t q) const overridefinal

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorPolygonalSurface_evaluate_for_q(self, q)


    def volume(self):
        """
        volume(FormFactorPolygonalSurface self) -> double

        double FormFactorPolygonalSurface::volume() const override

        Returns the total volume of the particle of this form factor's shape. 

        """
        return _libBornAgainCore.FormFactorPolygonalSurface_volume(self)


    def radialExtension(self):
        """
        radialExtension(FormFactorPolygonalSurface self) -> double

        double FormFactorPolygonalSurface::radialExtension() const overridefinal

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorPolygonalSurface_radialExtension(self)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorPolygonalSurface
    __del__ = lambda self: None
FormFactorPolygonalSurface_swigregister = _libBornAgainCore.FormFactorPolygonalSurface_swigregister
FormFactorPolygonalSurface_swigregister(FormFactorPolygonalSurface)

class FormFactorAnisoPyramid(FormFactorPolyhedron):
    """


    A frustum (truncated pyramid) with rectangular base.

    C++ includes: FormFactorAnisoPyramid.h

    """

    __swig_setmethods__ = {}
    for _s in [FormFactorPolyhedron]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorAnisoPyramid, name, value)
    __swig_getmethods__ = {}
    for _s in [FormFactorPolyhedron]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorAnisoPyramid, name)
    __repr__ = _swig_repr

    def __init__(self, length, width, height, alpha):
        """
        __init__(FormFactorAnisoPyramid self, double length, double width, double height, double alpha) -> FormFactorAnisoPyramid

        FormFactorAnisoPyramid::FormFactorAnisoPyramid(double length, double width, double height, double alpha)

        Constructor of a truncated pyramid with a rectangular base.

        Parameters:
        -----------

        length: 
        length of the rectangular base in nm

        width: 
        width of the rectangular base in nm

        height: 
        height of pyramid in nm

        alpha: 
        dihedral angle in radians between base and facet 

        """
        this = _libBornAgainCore.new_FormFactorAnisoPyramid(length, width, height, alpha)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorAnisoPyramid self) -> FormFactorAnisoPyramid

        FormFactorAnisoPyramid* FormFactorAnisoPyramid::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorAnisoPyramid_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorAnisoPyramid self, INodeVisitor visitor)

        void FormFactorAnisoPyramid::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorAnisoPyramid_accept(self, visitor)


    def getLength(self):
        """
        getLength(FormFactorAnisoPyramid self) -> double

        double FormFactorAnisoPyramid::getLength() const 

        """
        return _libBornAgainCore.FormFactorAnisoPyramid_getLength(self)


    def getWidth(self):
        """
        getWidth(FormFactorAnisoPyramid self) -> double

        double FormFactorAnisoPyramid::getWidth() const 

        """
        return _libBornAgainCore.FormFactorAnisoPyramid_getWidth(self)


    def getHeight(self):
        """
        getHeight(FormFactorAnisoPyramid self) -> double

        double FormFactorAnisoPyramid::getHeight() const 

        """
        return _libBornAgainCore.FormFactorAnisoPyramid_getHeight(self)


    def getAlpha(self):
        """
        getAlpha(FormFactorAnisoPyramid self) -> double

        double FormFactorAnisoPyramid::getAlpha() const 

        """
        return _libBornAgainCore.FormFactorAnisoPyramid_getAlpha(self)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorAnisoPyramid
    __del__ = lambda self: None
FormFactorAnisoPyramid_swigregister = _libBornAgainCore.FormFactorAnisoPyramid_swigregister
FormFactorAnisoPyramid_swigregister(FormFactorAnisoPyramid)

class FormFactorBox(IFormFactorBorn):
    """


    A rectangular prism (parallelepiped).

    C++ includes: FormFactorBox.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorBox, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorBox, name)
    __repr__ = _swig_repr

    def __init__(self, length, width, height):
        """
        __init__(FormFactorBox self, double length, double width, double height) -> FormFactorBox

        FormFactorBox::FormFactorBox(double length, double width, double height)

        Constructor of a rectangular cuboid.

        Parameters:
        -----------

        length: 
        length of the base in nanometers

        width: 
        width of the base in nanometers

        height: 
        height of the box in nanometers 

        """
        this = _libBornAgainCore.new_FormFactorBox(length, width, height)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorBox self) -> FormFactorBox

        FormFactorBox* FormFactorBox::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorBox_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorBox self, INodeVisitor visitor)

        void FormFactorBox::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorBox_accept(self, visitor)


    def getLength(self):
        """
        getLength(FormFactorBox self) -> double

        double FormFactorBox::getLength() const 

        """
        return _libBornAgainCore.FormFactorBox_getLength(self)


    def getHeight(self):
        """
        getHeight(FormFactorBox self) -> double

        double FormFactorBox::getHeight() const 

        """
        return _libBornAgainCore.FormFactorBox_getHeight(self)


    def getWidth(self):
        """
        getWidth(FormFactorBox self) -> double

        double FormFactorBox::getWidth() const 

        """
        return _libBornAgainCore.FormFactorBox_getWidth(self)


    def radialExtension(self):
        """
        radialExtension(FormFactorBox self) -> double

        double FormFactorBox::radialExtension() const overridefinal

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorBox_radialExtension(self)


    def evaluate_for_q(self, q):
        """
        evaluate_for_q(FormFactorBox self, cvector_t q) -> complex_t

        complex_t FormFactorBox::evaluate_for_q(cvector_t q) const overridefinal

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorBox_evaluate_for_q(self, q)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorBox
    __del__ = lambda self: None
FormFactorBox_swigregister = _libBornAgainCore.FormFactorBox_swigregister
FormFactorBox_swigregister(FormFactorBox)

class FormFactorCone(IFormFactorBorn):
    """


    A conical frustum (cone truncated parallel to the base) with circular base.

    C++ includes: FormFactorCone.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorCone, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorCone, name)
    __repr__ = _swig_repr

    def __init__(self, radius, height, alpha):
        """
        __init__(FormFactorCone self, double radius, double height, double alpha) -> FormFactorCone

        FormFactorCone::FormFactorCone(double radius, double height, double alpha)

        Constructor of a truncated cone with circular base.

        Parameters:
        -----------

        radius: 
        radius of the base in nanometers

        height: 
        height of the cone in nanometers

        alpha: 
        angle between the base and the side surface in radians 

        """
        this = _libBornAgainCore.new_FormFactorCone(radius, height, alpha)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorCone self) -> FormFactorCone

        FormFactorCone* FormFactorCone::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorCone_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorCone self, INodeVisitor visitor)

        void FormFactorCone::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorCone_accept(self, visitor)


    def getHeight(self):
        """
        getHeight(FormFactorCone self) -> double

        double FormFactorCone::getHeight() const 

        """
        return _libBornAgainCore.FormFactorCone_getHeight(self)


    def getAlpha(self):
        """
        getAlpha(FormFactorCone self) -> double

        double FormFactorCone::getAlpha() const 

        """
        return _libBornAgainCore.FormFactorCone_getAlpha(self)


    def getRadius(self):
        """
        getRadius(FormFactorCone self) -> double

        double FormFactorCone::getRadius() const 

        """
        return _libBornAgainCore.FormFactorCone_getRadius(self)


    def radialExtension(self):
        """
        radialExtension(FormFactorCone self) -> double

        double FormFactorCone::radialExtension() const overridefinal

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorCone_radialExtension(self)


    def evaluate_for_q(self, q):
        """
        evaluate_for_q(FormFactorCone self, cvector_t q) -> complex_t

        complex_t FormFactorCone::evaluate_for_q(cvector_t q) const overridefinal

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorCone_evaluate_for_q(self, q)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorCone
    __del__ = lambda self: None
FormFactorCone_swigregister = _libBornAgainCore.FormFactorCone_swigregister
FormFactorCone_swigregister(FormFactorCone)

class FormFactorCone6(FormFactorPolyhedron):
    """


    A frustum (truncated pyramid) with regular hexagonal base.

    C++ includes: FormFactorCone6.h

    """

    __swig_setmethods__ = {}
    for _s in [FormFactorPolyhedron]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorCone6, name, value)
    __swig_getmethods__ = {}
    for _s in [FormFactorPolyhedron]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorCone6, name)
    __repr__ = _swig_repr

    def __init__(self, base_edge, height, alpha):
        """
        __init__(FormFactorCone6 self, double base_edge, double height, double alpha) -> FormFactorCone6

        FormFactorCone6::FormFactorCone6(double base_edge, double height, double alpha)

        Constructor of a truncated pyramid, based on a regular hexagon

        Parameters:
        -----------

        base_edge: 
        Edge of the regular hexagonal base in nanometers

        height: 
        height of a truncated pyramid in nanometers

        alpha: 
        dihedral angle in radians between base and facet 

        """
        this = _libBornAgainCore.new_FormFactorCone6(base_edge, height, alpha)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorCone6 self) -> FormFactorCone6

        FormFactorCone6* FormFactorCone6::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorCone6_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorCone6 self, INodeVisitor visitor)

        void FormFactorCone6::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorCone6_accept(self, visitor)


    def getBaseEdge(self):
        """
        getBaseEdge(FormFactorCone6 self) -> double

        double FormFactorCone6::getBaseEdge() const 

        """
        return _libBornAgainCore.FormFactorCone6_getBaseEdge(self)


    def getHeight(self):
        """
        getHeight(FormFactorCone6 self) -> double

        double FormFactorCone6::getHeight() const 

        """
        return _libBornAgainCore.FormFactorCone6_getHeight(self)


    def getAlpha(self):
        """
        getAlpha(FormFactorCone6 self) -> double

        double FormFactorCone6::getAlpha() const 

        """
        return _libBornAgainCore.FormFactorCone6_getAlpha(self)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorCone6
    __del__ = lambda self: None
FormFactorCone6_swigregister = _libBornAgainCore.FormFactorCone6_swigregister
FormFactorCone6_swigregister(FormFactorCone6)

class FormFactorCrystal(IFormFactor):
    """


    The formfactor of a  MesoCrystal.

    C++ includes: FormFactorCrystal.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorCrystal, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorCrystal, name)
    __repr__ = _swig_repr

    def __init__(self, lattice, basis_form_factor, meso_form_factor):
        """
        __init__(FormFactorCrystal self, Lattice lattice, IFormFactor basis_form_factor, IFormFactor meso_form_factor) -> FormFactorCrystal

        FormFactorCrystal::FormFactorCrystal(const Lattice &lattice, const IFormFactor &basis_form_factor, const IFormFactor &meso_form_factor)

        """
        this = _libBornAgainCore.new_FormFactorCrystal(lattice, basis_form_factor, meso_form_factor)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorCrystal
    __del__ = lambda self: None

    def clone(self):
        """
        clone(FormFactorCrystal self) -> FormFactorCrystal

        FormFactorCrystal* FormFactorCrystal::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorCrystal_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorCrystal self, INodeVisitor visitor)

        void FormFactorCrystal::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorCrystal_accept(self, visitor)


    def setAmbientMaterial(self, material):
        """
        setAmbientMaterial(FormFactorCrystal self, Material material)

        void FormFactorCrystal::setAmbientMaterial(Material material) override

        Passes the material in which this particle is embedded. 

        """
        return _libBornAgainCore.FormFactorCrystal_setAmbientMaterial(self, material)


    def volume(self):
        """
        volume(FormFactorCrystal self) -> double

        double FormFactorCrystal::volume() const overridefinal

        Returns the total volume of the particle of this form factor's shape. 

        """
        return _libBornAgainCore.FormFactorCrystal_volume(self)


    def radialExtension(self):
        """
        radialExtension(FormFactorCrystal self) -> double

        double FormFactorCrystal::radialExtension() const overridefinal

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorCrystal_radialExtension(self)


    def bottomZ(self, rotation):
        """
        bottomZ(FormFactorCrystal self, IRotation rotation) -> double

        double FormFactorCrystal::bottomZ(const IRotation &rotation) const override

        Returns the z-coordinate of the lowest point in this shape after a given rotation. 

        """
        return _libBornAgainCore.FormFactorCrystal_bottomZ(self, rotation)


    def topZ(self, rotation):
        """
        topZ(FormFactorCrystal self, IRotation rotation) -> double

        double FormFactorCrystal::topZ(const IRotation &rotation) const overridefinal

        Returns the z-coordinate of the lowest point in this shape after a given rotation. 

        """
        return _libBornAgainCore.FormFactorCrystal_topZ(self, rotation)


    def evaluate(self, wavevectors):
        """
        evaluate(FormFactorCrystal self, WavevectorInfo wavevectors) -> complex_t

        complex_t FormFactorCrystal::evaluate(const WavevectorInfo &wavevectors) const overridefinal

        Returns scattering amplitude for complex wavevectors ki, kf. 

        """
        return _libBornAgainCore.FormFactorCrystal_evaluate(self, wavevectors)

FormFactorCrystal_swigregister = _libBornAgainCore.FormFactorCrystal_swigregister
FormFactorCrystal_swigregister(FormFactorCrystal)

class FormFactorCuboctahedron(FormFactorPolyhedron):
    """


    A truncated bifrustum with quadratic base.

    C++ includes: FormFactorCuboctahedron.h

    """

    __swig_setmethods__ = {}
    for _s in [FormFactorPolyhedron]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorCuboctahedron, name, value)
    __swig_getmethods__ = {}
    for _s in [FormFactorPolyhedron]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorCuboctahedron, name)
    __repr__ = _swig_repr

    def __init__(self, length, height, height_ratio, alpha):
        """
        __init__(FormFactorCuboctahedron self, double length, double height, double height_ratio, double alpha) -> FormFactorCuboctahedron

        FormFactorCuboctahedron::FormFactorCuboctahedron(double length, double height, double height_ratio, double alpha)

        Constructor of cuboctahedron (compound of two truncated pyramids with a common square base and opposite orientations).

        Parameters:
        -----------

        length: 
        side length of the common square base in nanometers

        height: 
        height of the lower pyramid in nanometers

        height_ratio: 
        ratio of heights of top to bottom pyramids

        alpha: 
        dihedral angle in radians between base and facet 

        """
        this = _libBornAgainCore.new_FormFactorCuboctahedron(length, height, height_ratio, alpha)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorCuboctahedron self) -> FormFactorCuboctahedron

        FormFactorCuboctahedron* FormFactorCuboctahedron::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorCuboctahedron_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorCuboctahedron self, INodeVisitor visitor)

        void FormFactorCuboctahedron::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorCuboctahedron_accept(self, visitor)


    def getLength(self):
        """
        getLength(FormFactorCuboctahedron self) -> double

        double FormFactorCuboctahedron::getLength() const 

        """
        return _libBornAgainCore.FormFactorCuboctahedron_getLength(self)


    def getHeight(self):
        """
        getHeight(FormFactorCuboctahedron self) -> double

        double FormFactorCuboctahedron::getHeight() const 

        """
        return _libBornAgainCore.FormFactorCuboctahedron_getHeight(self)


    def getHeightRatio(self):
        """
        getHeightRatio(FormFactorCuboctahedron self) -> double

        double FormFactorCuboctahedron::getHeightRatio() const 

        """
        return _libBornAgainCore.FormFactorCuboctahedron_getHeightRatio(self)


    def getAlpha(self):
        """
        getAlpha(FormFactorCuboctahedron self) -> double

        double FormFactorCuboctahedron::getAlpha() const 

        """
        return _libBornAgainCore.FormFactorCuboctahedron_getAlpha(self)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorCuboctahedron
    __del__ = lambda self: None
FormFactorCuboctahedron_swigregister = _libBornAgainCore.FormFactorCuboctahedron_swigregister
FormFactorCuboctahedron_swigregister(FormFactorCuboctahedron)

class FormFactorCylinder(IFormFactorBorn):
    """


    A circular cylinder.

    C++ includes: FormFactorCylinder.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorCylinder, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorCylinder, name)
    __repr__ = _swig_repr

    def __init__(self, radius, height):
        """
        __init__(FormFactorCylinder self, double radius, double height) -> FormFactorCylinder

        FormFactorCylinder::FormFactorCylinder(double radius, double height)

        Constructor of a cylinder with a circular base.

        Parameters:
        -----------

        radius: 
        radius of the circular base in nanometers

        height: 
        height of the cylinder in nanometers 

        """
        this = _libBornAgainCore.new_FormFactorCylinder(radius, height)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorCylinder self) -> FormFactorCylinder

        FormFactorCylinder* FormFactorCylinder::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorCylinder_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorCylinder self, INodeVisitor visitor)

        void FormFactorCylinder::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorCylinder_accept(self, visitor)


    def getHeight(self):
        """
        getHeight(FormFactorCylinder self) -> double

        double FormFactorCylinder::getHeight() const 

        """
        return _libBornAgainCore.FormFactorCylinder_getHeight(self)


    def getRadius(self):
        """
        getRadius(FormFactorCylinder self) -> double

        double FormFactorCylinder::getRadius() const 

        """
        return _libBornAgainCore.FormFactorCylinder_getRadius(self)


    def radialExtension(self):
        """
        radialExtension(FormFactorCylinder self) -> double

        double FormFactorCylinder::radialExtension() const overridefinal

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorCylinder_radialExtension(self)


    def evaluate_for_q(self, q):
        """
        evaluate_for_q(FormFactorCylinder self, cvector_t q) -> complex_t

        complex_t FormFactorCylinder::evaluate_for_q(cvector_t q) const overridefinal

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorCylinder_evaluate_for_q(self, q)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorCylinder
    __del__ = lambda self: None
FormFactorCylinder_swigregister = _libBornAgainCore.FormFactorCylinder_swigregister
FormFactorCylinder_swigregister(FormFactorCylinder)

class FormFactorDecoratorDebyeWaller(IFormFactorDecorator):
    """


    Debye-Waller factors in radial and z directions.

    C++ includes: FormFactorDecoratorDebyeWaller.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactorDecorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorDecoratorDebyeWaller, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorDecorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorDecoratorDebyeWaller, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FormFactorDecoratorDebyeWaller self, IFormFactor form_factor, double dw_h_factor, double dw_r_factor) -> FormFactorDecoratorDebyeWaller
        __init__(FormFactorDecoratorDebyeWaller self, IFormFactor form_factor, double dw_factor) -> FormFactorDecoratorDebyeWaller

        FormFactorDecoratorDebyeWaller::FormFactorDecoratorDebyeWaller(const IFormFactor &form_factor, double dw_factor)

        Isotropic Debye-Waller factor. 

        """
        this = _libBornAgainCore.new_FormFactorDecoratorDebyeWaller(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorDecoratorDebyeWaller self) -> FormFactorDecoratorDebyeWaller

        FormFactorDecoratorDebyeWaller* FormFactorDecoratorDebyeWaller::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorDecoratorDebyeWaller_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorDecoratorDebyeWaller self, INodeVisitor visitor)

        void FormFactorDecoratorDebyeWaller::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorDecoratorDebyeWaller_accept(self, visitor)


    def evaluate(self, wavevectors):
        """
        evaluate(FormFactorDecoratorDebyeWaller self, WavevectorInfo wavevectors) -> complex_t

        complex_t FormFactorDecoratorDebyeWaller::evaluate(const WavevectorInfo &wavevectors) const overridefinal

        Returns scattering amplitude for complex wavevectors ki, kf. 

        """
        return _libBornAgainCore.FormFactorDecoratorDebyeWaller_evaluate(self, wavevectors)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorDecoratorDebyeWaller
    __del__ = lambda self: None
FormFactorDecoratorDebyeWaller_swigregister = _libBornAgainCore.FormFactorDecoratorDebyeWaller_swigregister
FormFactorDecoratorDebyeWaller_swigregister(FormFactorDecoratorDebyeWaller)

class FormFactorDodecahedron(FormFactorPolyhedron):
    """


    A regular dodecahedron.

    C++ includes: FormFactorDodecahedron.h

    """

    __swig_setmethods__ = {}
    for _s in [FormFactorPolyhedron]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorDodecahedron, name, value)
    __swig_getmethods__ = {}
    for _s in [FormFactorPolyhedron]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorDodecahedron, name)
    __repr__ = _swig_repr

    def __init__(self, edge):
        """
        __init__(FormFactorDodecahedron self, double edge) -> FormFactorDodecahedron

        FormFactorDodecahedron::FormFactorDodecahedron(double edge)

        Constructs a regular dodecahedron.

        Parameters:
        -----------

        edge: 
        length

        Constructor of a dodecahedron.

        Parameters:
        -----------

        edge: 
        length of the edge in nanometers 

        """
        this = _libBornAgainCore.new_FormFactorDodecahedron(edge)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorDodecahedron self) -> FormFactorDodecahedron

        FormFactorDodecahedron* FormFactorDodecahedron::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorDodecahedron_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorDodecahedron self, INodeVisitor visitor)

        void FormFactorDodecahedron::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorDodecahedron_accept(self, visitor)


    def getEdge(self):
        """
        getEdge(FormFactorDodecahedron self) -> double

        double FormFactorDodecahedron::getEdge() const 

        """
        return _libBornAgainCore.FormFactorDodecahedron_getEdge(self)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorDodecahedron
    __del__ = lambda self: None
FormFactorDodecahedron_swigregister = _libBornAgainCore.FormFactorDodecahedron_swigregister
FormFactorDodecahedron_swigregister(FormFactorDodecahedron)

class FormFactorDot(IFormFactorBorn):
    """


    A dot, with trivial formfactor F(q)=1.

    C++ includes: FormFactorDot.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorDot, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorDot, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(FormFactorDot self) -> FormFactorDot

        FormFactorDot::FormFactorDot()

        """
        this = _libBornAgainCore.new_FormFactorDot()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorDot self) -> FormFactorDot

        FormFactorDot* FormFactorDot::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorDot_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorDot self, INodeVisitor visitor)

        void FormFactorDot::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorDot_accept(self, visitor)


    def radialExtension(self):
        """
        radialExtension(FormFactorDot self) -> double

        double FormFactorDot::radialExtension() const overridefinal

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorDot_radialExtension(self)


    def evaluate_for_q(self, arg2):
        """
        evaluate_for_q(FormFactorDot self, cvector_t arg2) -> complex_t

        complex_t FormFactorDot::evaluate_for_q(cvector_t) const overridefinal

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorDot_evaluate_for_q(self, arg2)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorDot
    __del__ = lambda self: None
FormFactorDot_swigregister = _libBornAgainCore.FormFactorDot_swigregister
FormFactorDot_swigregister(FormFactorDot)

class FormFactorEllipsoidalCylinder(IFormFactorBorn):
    """


    A cylinder with elliptical base.

    C++ includes: FormFactorEllipsoidalCylinder.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorEllipsoidalCylinder, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorEllipsoidalCylinder, name)
    __repr__ = _swig_repr

    def __init__(self, radius_x, radius_y, height):
        """
        __init__(FormFactorEllipsoidalCylinder self, double radius_x, double radius_y, double height) -> FormFactorEllipsoidalCylinder

        FormFactorEllipsoidalCylinder::FormFactorEllipsoidalCylinder(double radius_x, double radius_y, double height)

        Constructor of a cylinder with an ellipse cross section.

        Parameters:
        -----------

        radius_x: 
        radius of the ellipse base in the x-direction, in nanometers

        radius_y: 
        radius of the ellipse base in the y-direction, in nanometers

        height: 
        height of the ellipsoidal cylinder in nanometers 

        """
        this = _libBornAgainCore.new_FormFactorEllipsoidalCylinder(radius_x, radius_y, height)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorEllipsoidalCylinder self) -> FormFactorEllipsoidalCylinder

        FormFactorEllipsoidalCylinder* FormFactorEllipsoidalCylinder::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorEllipsoidalCylinder_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorEllipsoidalCylinder self, INodeVisitor visitor)

        void FormFactorEllipsoidalCylinder::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorEllipsoidalCylinder_accept(self, visitor)


    def getRadiusX(self):
        """
        getRadiusX(FormFactorEllipsoidalCylinder self) -> double

        double FormFactorEllipsoidalCylinder::getRadiusX() const 

        """
        return _libBornAgainCore.FormFactorEllipsoidalCylinder_getRadiusX(self)


    def getRadiusY(self):
        """
        getRadiusY(FormFactorEllipsoidalCylinder self) -> double

        double FormFactorEllipsoidalCylinder::getRadiusY() const 

        """
        return _libBornAgainCore.FormFactorEllipsoidalCylinder_getRadiusY(self)


    def getHeight(self):
        """
        getHeight(FormFactorEllipsoidalCylinder self) -> double

        double FormFactorEllipsoidalCylinder::getHeight() const 

        """
        return _libBornAgainCore.FormFactorEllipsoidalCylinder_getHeight(self)


    def radialExtension(self):
        """
        radialExtension(FormFactorEllipsoidalCylinder self) -> double

        double FormFactorEllipsoidalCylinder::radialExtension() const overridefinal

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorEllipsoidalCylinder_radialExtension(self)


    def evaluate_for_q(self, q):
        """
        evaluate_for_q(FormFactorEllipsoidalCylinder self, cvector_t q) -> complex_t

        complex_t FormFactorEllipsoidalCylinder::evaluate_for_q(cvector_t q) const overridefinal

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorEllipsoidalCylinder_evaluate_for_q(self, q)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorEllipsoidalCylinder
    __del__ = lambda self: None
FormFactorEllipsoidalCylinder_swigregister = _libBornAgainCore.FormFactorEllipsoidalCylinder_swigregister
FormFactorEllipsoidalCylinder_swigregister(FormFactorEllipsoidalCylinder)

class FormFactorFullSphere(IFormFactorBorn):
    """


    A full sphere.

    C++ includes: FormFactorFullSphere.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorFullSphere, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorFullSphere, name)
    __repr__ = _swig_repr

    def __init__(self, radius):
        """
        __init__(FormFactorFullSphere self, double radius) -> FormFactorFullSphere

        FormFactorFullSphere::FormFactorFullSphere(double radius)

        Constructor of a full sphere.

        Parameters:
        -----------

        radius: 
        radius of the sphere in nanometers 

        """
        this = _libBornAgainCore.new_FormFactorFullSphere(radius)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorFullSphere self) -> FormFactorFullSphere

        FormFactorFullSphere* FormFactorFullSphere::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorFullSphere_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorFullSphere self, INodeVisitor visitor)

        void FormFactorFullSphere::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorFullSphere_accept(self, visitor)


    def getRadius(self):
        """
        getRadius(FormFactorFullSphere self) -> double

        double FormFactorFullSphere::getRadius() const 

        """
        return _libBornAgainCore.FormFactorFullSphere_getRadius(self)


    def radialExtension(self):
        """
        radialExtension(FormFactorFullSphere self) -> double

        double FormFactorFullSphere::radialExtension() const overridefinal

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorFullSphere_radialExtension(self)


    def bottomZ(self, rotation):
        """
        bottomZ(FormFactorFullSphere self, IRotation rotation) -> double

        double FormFactorFullSphere::bottomZ(const IRotation &rotation) const overridefinal

        Returns the z-coordinate of the lowest point in this shape after a given rotation. 

        """
        return _libBornAgainCore.FormFactorFullSphere_bottomZ(self, rotation)


    def topZ(self, rotation):
        """
        topZ(FormFactorFullSphere self, IRotation rotation) -> double

        double FormFactorFullSphere::topZ(const IRotation &rotation) const overridefinal

        Returns the z-coordinate of the lowest point in this shape after a given rotation. 

        """
        return _libBornAgainCore.FormFactorFullSphere_topZ(self, rotation)


    def evaluate_for_q(self, q):
        """
        evaluate_for_q(FormFactorFullSphere self, cvector_t q) -> complex_t

        complex_t FormFactorFullSphere::evaluate_for_q(cvector_t q) const overridefinal

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorFullSphere_evaluate_for_q(self, q)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorFullSphere
    __del__ = lambda self: None
FormFactorFullSphere_swigregister = _libBornAgainCore.FormFactorFullSphere_swigregister
FormFactorFullSphere_swigregister(FormFactorFullSphere)

class FormFactorFullSpheroid(IFormFactorBorn):
    """


    A full spheroid (an ellipsoid with two equal axes, hence with circular cross section)

    C++ includes: FormFactorFullSpheroid.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorFullSpheroid, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorFullSpheroid, name)
    __repr__ = _swig_repr

    def __init__(self, radius, height):
        """
        __init__(FormFactorFullSpheroid self, double radius, double height) -> FormFactorFullSpheroid

        FormFactorFullSpheroid::FormFactorFullSpheroid(double radius, double height)

        Constructor of full spheroid.

        Parameters:
        -----------

        radius: 
        radius of the circular cross section in nanometers

        height: 
        height of the full spheroid in nanometers 

        """
        this = _libBornAgainCore.new_FormFactorFullSpheroid(radius, height)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorFullSpheroid self) -> FormFactorFullSpheroid

        FormFactorFullSpheroid* FormFactorFullSpheroid::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorFullSpheroid_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorFullSpheroid self, INodeVisitor visitor)

        void FormFactorFullSpheroid::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorFullSpheroid_accept(self, visitor)


    def getHeight(self):
        """
        getHeight(FormFactorFullSpheroid self) -> double

        double FormFactorFullSpheroid::getHeight() const 

        """
        return _libBornAgainCore.FormFactorFullSpheroid_getHeight(self)


    def getRadius(self):
        """
        getRadius(FormFactorFullSpheroid self) -> double

        double FormFactorFullSpheroid::getRadius() const 

        """
        return _libBornAgainCore.FormFactorFullSpheroid_getRadius(self)


    def radialExtension(self):
        """
        radialExtension(FormFactorFullSpheroid self) -> double

        double FormFactorFullSpheroid::radialExtension() const overridefinal

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorFullSpheroid_radialExtension(self)


    def evaluate_for_q(self, q):
        """
        evaluate_for_q(FormFactorFullSpheroid self, cvector_t q) -> complex_t

        complex_t FormFactorFullSpheroid::evaluate_for_q(cvector_t q) const overridefinal

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorFullSpheroid_evaluate_for_q(self, q)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorFullSpheroid
    __del__ = lambda self: None
FormFactorFullSpheroid_swigregister = _libBornAgainCore.FormFactorFullSpheroid_swigregister
FormFactorFullSpheroid_swigregister(FormFactorFullSpheroid)

class FormFactorGauss(IFormFactorBorn):
    """


    The formfactor of a gaussian.

    C++ includes: FormFactorGauss.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorGauss, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorGauss, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FormFactorGauss self, double length) -> FormFactorGauss
        __init__(FormFactorGauss self, double width, double height) -> FormFactorGauss

        FormFactorGauss::FormFactorGauss(double width, double height)

        """
        this = _libBornAgainCore.new_FormFactorGauss(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorGauss self) -> FormFactorGauss

        FormFactorGauss* FormFactorGauss::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorGauss_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorGauss self, INodeVisitor visitor)

        void FormFactorGauss::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorGauss_accept(self, visitor)


    def getWidth(self):
        """
        getWidth(FormFactorGauss self) -> double

        double FormFactorGauss::getWidth() const 

        """
        return _libBornAgainCore.FormFactorGauss_getWidth(self)


    def getHeight(self):
        """
        getHeight(FormFactorGauss self) -> double

        double FormFactorGauss::getHeight() const 

        """
        return _libBornAgainCore.FormFactorGauss_getHeight(self)


    def radialExtension(self):
        """
        radialExtension(FormFactorGauss self) -> double

        double FormFactorGauss::radialExtension() const overridefinal

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorGauss_radialExtension(self)


    def evaluate_for_q(self, q):
        """
        evaluate_for_q(FormFactorGauss self, cvector_t q) -> complex_t

        complex_t FormFactorGauss::evaluate_for_q(cvector_t q) const overridefinal

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorGauss_evaluate_for_q(self, q)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorGauss
    __del__ = lambda self: None
FormFactorGauss_swigregister = _libBornAgainCore.FormFactorGauss_swigregister
FormFactorGauss_swigregister(FormFactorGauss)

class FormFactorHemiEllipsoid(IFormFactorBorn):
    """


    An hemi ellipsoid, obtained by truncating a full ellipsoid in the middle plane spanned by two principal axes.

    C++ includes: FormFactorHemiEllipsoid.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorHemiEllipsoid, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorHemiEllipsoid, name)
    __repr__ = _swig_repr

    def __init__(self, radius_x, radius_y, height):
        """
        __init__(FormFactorHemiEllipsoid self, double radius_x, double radius_y, double height) -> FormFactorHemiEllipsoid

        FormFactorHemiEllipsoid::FormFactorHemiEllipsoid(double radius_x, double radius_y, double height)

        Constructor of horizontally oriented ellipsoid, truncated at the central plane.

        Parameters:
        -----------

        radius_x: 
        radius of the ellipse base in the x-direction, in nanometers

        radius_y: 
        radius of the ellipse base in the y-direction, in nanometers

        height: 
        height of the hemi ellipsoid in nanometers 

        """
        this = _libBornAgainCore.new_FormFactorHemiEllipsoid(radius_x, radius_y, height)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorHemiEllipsoid
    __del__ = lambda self: None

    def clone(self):
        """
        clone(FormFactorHemiEllipsoid self) -> FormFactorHemiEllipsoid

        FormFactorHemiEllipsoid* FormFactorHemiEllipsoid::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorHemiEllipsoid_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorHemiEllipsoid self, INodeVisitor visitor)

        void FormFactorHemiEllipsoid::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorHemiEllipsoid_accept(self, visitor)


    def getHeight(self):
        """
        getHeight(FormFactorHemiEllipsoid self) -> double

        double FormFactorHemiEllipsoid::getHeight() const 

        """
        return _libBornAgainCore.FormFactorHemiEllipsoid_getHeight(self)


    def getRadiusX(self):
        """
        getRadiusX(FormFactorHemiEllipsoid self) -> double

        double FormFactorHemiEllipsoid::getRadiusX() const 

        """
        return _libBornAgainCore.FormFactorHemiEllipsoid_getRadiusX(self)


    def getRadiusY(self):
        """
        getRadiusY(FormFactorHemiEllipsoid self) -> double

        double FormFactorHemiEllipsoid::getRadiusY() const 

        """
        return _libBornAgainCore.FormFactorHemiEllipsoid_getRadiusY(self)


    def radialExtension(self):
        """
        radialExtension(FormFactorHemiEllipsoid self) -> double

        double FormFactorHemiEllipsoid::radialExtension() const overridefinal

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorHemiEllipsoid_radialExtension(self)


    def evaluate_for_q(self, q):
        """
        evaluate_for_q(FormFactorHemiEllipsoid self, cvector_t q) -> complex_t

        complex_t FormFactorHemiEllipsoid::evaluate_for_q(cvector_t q) const overridefinal

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorHemiEllipsoid_evaluate_for_q(self, q)

FormFactorHemiEllipsoid_swigregister = _libBornAgainCore.FormFactorHemiEllipsoid_swigregister
FormFactorHemiEllipsoid_swigregister(FormFactorHemiEllipsoid)

class FormFactorIcosahedron(FormFactorPolyhedron):
    """


    A regular icosahedron.

    C++ includes: FormFactorIcosahedron.h

    """

    __swig_setmethods__ = {}
    for _s in [FormFactorPolyhedron]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorIcosahedron, name, value)
    __swig_getmethods__ = {}
    for _s in [FormFactorPolyhedron]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorIcosahedron, name)
    __repr__ = _swig_repr

    def __init__(self, edge):
        """
        __init__(FormFactorIcosahedron self, double edge) -> FormFactorIcosahedron

        FormFactorIcosahedron::FormFactorIcosahedron(double edge)

        Constructor of a icosahedron.

        Parameters:
        -----------

        edge: 
        length of the edge in nanometers 

        """
        this = _libBornAgainCore.new_FormFactorIcosahedron(edge)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorIcosahedron self) -> FormFactorIcosahedron

        FormFactorIcosahedron* FormFactorIcosahedron::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorIcosahedron_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorIcosahedron self, INodeVisitor visitor)

        void FormFactorIcosahedron::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorIcosahedron_accept(self, visitor)


    def getEdge(self):
        """
        getEdge(FormFactorIcosahedron self) -> double

        double FormFactorIcosahedron::getEdge() const 

        """
        return _libBornAgainCore.FormFactorIcosahedron_getEdge(self)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorIcosahedron
    __del__ = lambda self: None
FormFactorIcosahedron_swigregister = _libBornAgainCore.FormFactorIcosahedron_swigregister
FormFactorIcosahedron_swigregister(FormFactorIcosahedron)

class FormFactorLongBoxGauss(IFormFactorBorn):
    """


    The formfactor for a long rectangular box.

    C++ includes: FormFactorLongBoxGauss.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorLongBoxGauss, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorLongBoxGauss, name)
    __repr__ = _swig_repr

    def __init__(self, length, width, height):
        """
        __init__(FormFactorLongBoxGauss self, double length, double width, double height) -> FormFactorLongBoxGauss

        FormFactorLongBoxGauss::FormFactorLongBoxGauss(double length, double width, double height)

        Box constructor.

        Parameters:
        -----------

        length: 
        of  Box's base

        width: 
        of  Box's base

        height: 
        of  Box

        """
        this = _libBornAgainCore.new_FormFactorLongBoxGauss(length, width, height)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorLongBoxGauss self) -> FormFactorLongBoxGauss

        FormFactorLongBoxGauss* FormFactorLongBoxGauss::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorLongBoxGauss_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorLongBoxGauss self, INodeVisitor visitor)

        void FormFactorLongBoxGauss::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorLongBoxGauss_accept(self, visitor)


    def getLength(self):
        """
        getLength(FormFactorLongBoxGauss self) -> double

        double FormFactorLongBoxGauss::getLength() const 

        """
        return _libBornAgainCore.FormFactorLongBoxGauss_getLength(self)


    def getHeight(self):
        """
        getHeight(FormFactorLongBoxGauss self) -> double

        double FormFactorLongBoxGauss::getHeight() const 

        """
        return _libBornAgainCore.FormFactorLongBoxGauss_getHeight(self)


    def getWidth(self):
        """
        getWidth(FormFactorLongBoxGauss self) -> double

        double FormFactorLongBoxGauss::getWidth() const 

        """
        return _libBornAgainCore.FormFactorLongBoxGauss_getWidth(self)


    def radialExtension(self):
        """
        radialExtension(FormFactorLongBoxGauss self) -> double

        double FormFactorLongBoxGauss::radialExtension() const overridefinal

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorLongBoxGauss_radialExtension(self)


    def evaluate_for_q(self, q):
        """
        evaluate_for_q(FormFactorLongBoxGauss self, cvector_t q) -> complex_t

        complex_t FormFactorLongBoxGauss::evaluate_for_q(cvector_t q) const overridefinal

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorLongBoxGauss_evaluate_for_q(self, q)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorLongBoxGauss
    __del__ = lambda self: None
FormFactorLongBoxGauss_swigregister = _libBornAgainCore.FormFactorLongBoxGauss_swigregister
FormFactorLongBoxGauss_swigregister(FormFactorLongBoxGauss)

class FormFactorLongBoxLorentz(IFormFactorBorn):
    """


    The formfactor for a long rectangular box.

    C++ includes: FormFactorLongBoxLorentz.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorLongBoxLorentz, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorLongBoxLorentz, name)
    __repr__ = _swig_repr

    def __init__(self, length, width, height):
        """
        __init__(FormFactorLongBoxLorentz self, double length, double width, double height) -> FormFactorLongBoxLorentz

        FormFactorLongBoxLorentz::FormFactorLongBoxLorentz(double length, double width, double height)

        Box constructor.

        Parameters:
        -----------

        length: 
        of  Box's base

        width: 
        of  Box's base

        height: 
        of  Box

        """
        this = _libBornAgainCore.new_FormFactorLongBoxLorentz(length, width, height)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorLongBoxLorentz self) -> FormFactorLongBoxLorentz

        FormFactorLongBoxLorentz* FormFactorLongBoxLorentz::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorLongBoxLorentz_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorLongBoxLorentz self, INodeVisitor visitor)

        void FormFactorLongBoxLorentz::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorLongBoxLorentz_accept(self, visitor)


    def getLength(self):
        """
        getLength(FormFactorLongBoxLorentz self) -> double

        double FormFactorLongBoxLorentz::getLength() const 

        """
        return _libBornAgainCore.FormFactorLongBoxLorentz_getLength(self)


    def getHeight(self):
        """
        getHeight(FormFactorLongBoxLorentz self) -> double

        double FormFactorLongBoxLorentz::getHeight() const 

        """
        return _libBornAgainCore.FormFactorLongBoxLorentz_getHeight(self)


    def getWidth(self):
        """
        getWidth(FormFactorLongBoxLorentz self) -> double

        double FormFactorLongBoxLorentz::getWidth() const 

        """
        return _libBornAgainCore.FormFactorLongBoxLorentz_getWidth(self)


    def radialExtension(self):
        """
        radialExtension(FormFactorLongBoxLorentz self) -> double

        double FormFactorLongBoxLorentz::radialExtension() const overridefinal

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorLongBoxLorentz_radialExtension(self)


    def evaluate_for_q(self, q):
        """
        evaluate_for_q(FormFactorLongBoxLorentz self, cvector_t q) -> complex_t

        complex_t FormFactorLongBoxLorentz::evaluate_for_q(cvector_t q) const overridefinal

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorLongBoxLorentz_evaluate_for_q(self, q)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorLongBoxLorentz
    __del__ = lambda self: None
FormFactorLongBoxLorentz_swigregister = _libBornAgainCore.FormFactorLongBoxLorentz_swigregister
FormFactorLongBoxLorentz_swigregister(FormFactorLongBoxLorentz)

class FormFactorLongRipple1Gauss(IFormFactorBorn):
    """


    The formfactor for a cosine ripple.

    C++ includes: FormFactorLongRipple1Gauss.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorLongRipple1Gauss, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorLongRipple1Gauss, name)
    __repr__ = _swig_repr

    def __init__(self, length, width, height):
        """
        __init__(FormFactorLongRipple1Gauss self, double length, double width, double height) -> FormFactorLongRipple1Gauss

        FormFactorLongRipple1Gauss::FormFactorLongRipple1Gauss(double length, double width, double height)

        Ripple1 constructor.

        Parameters:
        -----------

        length: 
        of Ripple1

        width: 
        of cosine cross section

        height: 
        of cosine cross section 

        """
        this = _libBornAgainCore.new_FormFactorLongRipple1Gauss(length, width, height)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorLongRipple1Gauss self) -> FormFactorLongRipple1Gauss

        FormFactorLongRipple1Gauss* FormFactorLongRipple1Gauss::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorLongRipple1Gauss_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorLongRipple1Gauss self, INodeVisitor visitor)

        void FormFactorLongRipple1Gauss::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorLongRipple1Gauss_accept(self, visitor)


    def getHeight(self):
        """
        getHeight(FormFactorLongRipple1Gauss self) -> double

        double FormFactorLongRipple1Gauss::getHeight() const 

        """
        return _libBornAgainCore.FormFactorLongRipple1Gauss_getHeight(self)


    def getWidth(self):
        """
        getWidth(FormFactorLongRipple1Gauss self) -> double

        double FormFactorLongRipple1Gauss::getWidth() const 

        """
        return _libBornAgainCore.FormFactorLongRipple1Gauss_getWidth(self)


    def getLength(self):
        """
        getLength(FormFactorLongRipple1Gauss self) -> double

        double FormFactorLongRipple1Gauss::getLength() const 

        """
        return _libBornAgainCore.FormFactorLongRipple1Gauss_getLength(self)


    def radialExtension(self):
        """
        radialExtension(FormFactorLongRipple1Gauss self) -> double

        double FormFactorLongRipple1Gauss::radialExtension() const overridefinal

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorLongRipple1Gauss_radialExtension(self)


    def evaluate_for_q(self, q):
        """
        evaluate_for_q(FormFactorLongRipple1Gauss self, cvector_t q) -> complex_t

        complex_t FormFactorLongRipple1Gauss::evaluate_for_q(cvector_t q) const overridefinal

        Complex formfactor. 

        """
        return _libBornAgainCore.FormFactorLongRipple1Gauss_evaluate_for_q(self, q)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorLongRipple1Gauss
    __del__ = lambda self: None
FormFactorLongRipple1Gauss_swigregister = _libBornAgainCore.FormFactorLongRipple1Gauss_swigregister
FormFactorLongRipple1Gauss_swigregister(FormFactorLongRipple1Gauss)

class FormFactorLongRipple1Lorentz(IFormFactorBorn):
    """


    The formfactor for a cosine ripple.

    C++ includes: FormFactorLongRipple1Lorentz.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorLongRipple1Lorentz, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorLongRipple1Lorentz, name)
    __repr__ = _swig_repr

    def __init__(self, length, width, height):
        """
        __init__(FormFactorLongRipple1Lorentz self, double length, double width, double height) -> FormFactorLongRipple1Lorentz

        FormFactorLongRipple1Lorentz::FormFactorLongRipple1Lorentz(double length, double width, double height)

        FormFactorLongRipple1Lorentz constructor.

        Parameters:
        -----------

        length: 
        of Ripple1

        width: 
        of cosine cross section

        height: 
        of cosine cross section 

        """
        this = _libBornAgainCore.new_FormFactorLongRipple1Lorentz(length, width, height)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorLongRipple1Lorentz self) -> FormFactorLongRipple1Lorentz

        FormFactorLongRipple1Lorentz* FormFactorLongRipple1Lorentz::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorLongRipple1Lorentz_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorLongRipple1Lorentz self, INodeVisitor visitor)

        void FormFactorLongRipple1Lorentz::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorLongRipple1Lorentz_accept(self, visitor)


    def radialExtension(self):
        """
        radialExtension(FormFactorLongRipple1Lorentz self) -> double

        double FormFactorLongRipple1Lorentz::radialExtension() const overridefinal

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorLongRipple1Lorentz_radialExtension(self)


    def getHeight(self):
        """
        getHeight(FormFactorLongRipple1Lorentz self) -> double

        double FormFactorLongRipple1Lorentz::getHeight() const 

        """
        return _libBornAgainCore.FormFactorLongRipple1Lorentz_getHeight(self)


    def getWidth(self):
        """
        getWidth(FormFactorLongRipple1Lorentz self) -> double

        double FormFactorLongRipple1Lorentz::getWidth() const 

        """
        return _libBornAgainCore.FormFactorLongRipple1Lorentz_getWidth(self)


    def getLength(self):
        """
        getLength(FormFactorLongRipple1Lorentz self) -> double

        double FormFactorLongRipple1Lorentz::getLength() const 

        """
        return _libBornAgainCore.FormFactorLongRipple1Lorentz_getLength(self)


    def evaluate_for_q(self, q):
        """
        evaluate_for_q(FormFactorLongRipple1Lorentz self, cvector_t q) -> complex_t

        complex_t FormFactorLongRipple1Lorentz::evaluate_for_q(cvector_t q) const overridefinal

        Complex formfactor. 

        """
        return _libBornAgainCore.FormFactorLongRipple1Lorentz_evaluate_for_q(self, q)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorLongRipple1Lorentz
    __del__ = lambda self: None
FormFactorLongRipple1Lorentz_swigregister = _libBornAgainCore.FormFactorLongRipple1Lorentz_swigregister
FormFactorLongRipple1Lorentz_swigregister(FormFactorLongRipple1Lorentz)

class FormFactorLongRipple2Gauss(IFormFactorBorn):
    """


    The formfactor for a triangular ripple.

    C++ includes: FormFactorLongRipple2Gauss.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorLongRipple2Gauss, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorLongRipple2Gauss, name)
    __repr__ = _swig_repr

    def __init__(self, length, width, height, asymmetry):
        """
        __init__(FormFactorLongRipple2Gauss self, double length, double width, double height, double asymmetry) -> FormFactorLongRipple2Gauss

        FormFactorLongRipple2Gauss::FormFactorLongRipple2Gauss(double length, double width, double height, double asymmetry)

        FormFactorLongRipple2Gauss constructor.

        Parameters:
        -----------

        length: 
        of Ripple2

        width: 
        of triangular cross section

        height: 
        of triangular cross section

        asymmetry: 
        length of triangular cross section 

        """
        this = _libBornAgainCore.new_FormFactorLongRipple2Gauss(length, width, height, asymmetry)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorLongRipple2Gauss self) -> FormFactorLongRipple2Gauss

        FormFactorLongRipple2Gauss* FormFactorLongRipple2Gauss::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorLongRipple2Gauss_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorLongRipple2Gauss self, INodeVisitor visitor)

        void FormFactorLongRipple2Gauss::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorLongRipple2Gauss_accept(self, visitor)


    def getHeight(self):
        """
        getHeight(FormFactorLongRipple2Gauss self) -> double

        double FormFactorLongRipple2Gauss::getHeight() const 

        """
        return _libBornAgainCore.FormFactorLongRipple2Gauss_getHeight(self)


    def getWidth(self):
        """
        getWidth(FormFactorLongRipple2Gauss self) -> double

        double FormFactorLongRipple2Gauss::getWidth() const 

        """
        return _libBornAgainCore.FormFactorLongRipple2Gauss_getWidth(self)


    def getLength(self):
        """
        getLength(FormFactorLongRipple2Gauss self) -> double

        double FormFactorLongRipple2Gauss::getLength() const 

        """
        return _libBornAgainCore.FormFactorLongRipple2Gauss_getLength(self)


    def getAsymmetry(self):
        """
        getAsymmetry(FormFactorLongRipple2Gauss self) -> double

        double FormFactorLongRipple2Gauss::getAsymmetry() const 

        """
        return _libBornAgainCore.FormFactorLongRipple2Gauss_getAsymmetry(self)


    def radialExtension(self):
        """
        radialExtension(FormFactorLongRipple2Gauss self) -> double

        double FormFactorLongRipple2Gauss::radialExtension() const overridefinal

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorLongRipple2Gauss_radialExtension(self)


    def evaluate_for_q(self, q):
        """
        evaluate_for_q(FormFactorLongRipple2Gauss self, cvector_t q) -> complex_t

        complex_t FormFactorLongRipple2Gauss::evaluate_for_q(cvector_t q) const overridefinal

        Complex formfactor. 

        """
        return _libBornAgainCore.FormFactorLongRipple2Gauss_evaluate_for_q(self, q)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorLongRipple2Gauss
    __del__ = lambda self: None
FormFactorLongRipple2Gauss_swigregister = _libBornAgainCore.FormFactorLongRipple2Gauss_swigregister
FormFactorLongRipple2Gauss_swigregister(FormFactorLongRipple2Gauss)

class FormFactorLongRipple2Lorentz(IFormFactorBorn):
    """


    The formfactor for a triangular ripple.

    C++ includes: FormFactorLongRipple2Lorentz.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorLongRipple2Lorentz, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorLongRipple2Lorentz, name)
    __repr__ = _swig_repr

    def __init__(self, length, width, height, asymmetry):
        """
        __init__(FormFactorLongRipple2Lorentz self, double length, double width, double height, double asymmetry) -> FormFactorLongRipple2Lorentz

        FormFactorLongRipple2Lorentz::FormFactorLongRipple2Lorentz(double length, double width, double height, double asymmetry)

        Parameters:
        -----------

        length: 
        of Ripple2

        width: 
        of triangular cross section

        height: 
        of triangular cross section

        asymmetry: 
        length of triangular cross section 

        """
        this = _libBornAgainCore.new_FormFactorLongRipple2Lorentz(length, width, height, asymmetry)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorLongRipple2Lorentz self) -> FormFactorLongRipple2Lorentz

        FormFactorLongRipple2Lorentz* FormFactorLongRipple2Lorentz::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorLongRipple2Lorentz_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorLongRipple2Lorentz self, INodeVisitor visitor)

        void FormFactorLongRipple2Lorentz::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorLongRipple2Lorentz_accept(self, visitor)


    def getHeight(self):
        """
        getHeight(FormFactorLongRipple2Lorentz self) -> double

        double FormFactorLongRipple2Lorentz::getHeight() const 

        """
        return _libBornAgainCore.FormFactorLongRipple2Lorentz_getHeight(self)


    def getWidth(self):
        """
        getWidth(FormFactorLongRipple2Lorentz self) -> double

        double FormFactorLongRipple2Lorentz::getWidth() const 

        """
        return _libBornAgainCore.FormFactorLongRipple2Lorentz_getWidth(self)


    def getLength(self):
        """
        getLength(FormFactorLongRipple2Lorentz self) -> double

        double FormFactorLongRipple2Lorentz::getLength() const 

        """
        return _libBornAgainCore.FormFactorLongRipple2Lorentz_getLength(self)


    def getAsymmetry(self):
        """
        getAsymmetry(FormFactorLongRipple2Lorentz self) -> double

        double FormFactorLongRipple2Lorentz::getAsymmetry() const 

        """
        return _libBornAgainCore.FormFactorLongRipple2Lorentz_getAsymmetry(self)


    def radialExtension(self):
        """
        radialExtension(FormFactorLongRipple2Lorentz self) -> double

        double FormFactorLongRipple2Lorentz::radialExtension() const overridefinal

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorLongRipple2Lorentz_radialExtension(self)


    def evaluate_for_q(self, q):
        """
        evaluate_for_q(FormFactorLongRipple2Lorentz self, cvector_t q) -> complex_t

        complex_t FormFactorLongRipple2Lorentz::evaluate_for_q(cvector_t q) const overridefinal

        Complex formfactor. 

        """
        return _libBornAgainCore.FormFactorLongRipple2Lorentz_evaluate_for_q(self, q)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorLongRipple2Lorentz
    __del__ = lambda self: None
FormFactorLongRipple2Lorentz_swigregister = _libBornAgainCore.FormFactorLongRipple2Lorentz_swigregister
FormFactorLongRipple2Lorentz_swigregister(FormFactorLongRipple2Lorentz)

class FormFactorLorentz(IFormFactorBorn):
    """


    The formfactor of a lorentzian.

    C++ includes: FormFactorLorentz.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorLorentz, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorLorentz, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FormFactorLorentz self, double length) -> FormFactorLorentz
        __init__(FormFactorLorentz self, double width, double height) -> FormFactorLorentz

        FormFactorLorentz::FormFactorLorentz(double width, double height)

        """
        this = _libBornAgainCore.new_FormFactorLorentz(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorLorentz self) -> FormFactorLorentz

        FormFactorLorentz* FormFactorLorentz::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorLorentz_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorLorentz self, INodeVisitor visitor)

        void FormFactorLorentz::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorLorentz_accept(self, visitor)


    def getWidth(self):
        """
        getWidth(FormFactorLorentz self) -> double

        double FormFactorLorentz::getWidth() const 

        """
        return _libBornAgainCore.FormFactorLorentz_getWidth(self)


    def getHeight(self):
        """
        getHeight(FormFactorLorentz self) -> double

        double FormFactorLorentz::getHeight() const 

        """
        return _libBornAgainCore.FormFactorLorentz_getHeight(self)


    def radialExtension(self):
        """
        radialExtension(FormFactorLorentz self) -> double

        double FormFactorLorentz::radialExtension() const overridefinal

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorLorentz_radialExtension(self)


    def evaluate_for_q(self, q):
        """
        evaluate_for_q(FormFactorLorentz self, cvector_t q) -> complex_t

        complex_t FormFactorLorentz::evaluate_for_q(cvector_t q) const overridefinal

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorLorentz_evaluate_for_q(self, q)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorLorentz
    __del__ = lambda self: None
FormFactorLorentz_swigregister = _libBornAgainCore.FormFactorLorentz_swigregister
FormFactorLorentz_swigregister(FormFactorLorentz)

class FormFactorPrism3(FormFactorPolygonalPrism):
    """


    A prism based on an equilateral triangle.

    C++ includes: FormFactorPrism3.h

    """

    __swig_setmethods__ = {}
    for _s in [FormFactorPolygonalPrism]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorPrism3, name, value)
    __swig_getmethods__ = {}
    for _s in [FormFactorPolygonalPrism]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorPrism3, name)
    __repr__ = _swig_repr

    def __init__(self, base_edge, height):
        """
        __init__(FormFactorPrism3 self, double base_edge, double height) -> FormFactorPrism3

        FormFactorPrism3::FormFactorPrism3(double base_edge, double height)

        Constructor of a prism with an equilaterial triangle base.

        Parameters:
        -----------

        base_edge: 
        length of the base edge in nanometers

        height: 
        height in nanometers 

        """
        this = _libBornAgainCore.new_FormFactorPrism3(base_edge, height)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorPrism3 self) -> FormFactorPrism3

        FormFactorPrism3* FormFactorPrism3::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorPrism3_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorPrism3 self, INodeVisitor visitor)

        void FormFactorPrism3::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorPrism3_accept(self, visitor)


    def getBaseEdge(self):
        """
        getBaseEdge(FormFactorPrism3 self) -> double

        double FormFactorPrism3::getBaseEdge() const 

        """
        return _libBornAgainCore.FormFactorPrism3_getBaseEdge(self)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorPrism3
    __del__ = lambda self: None
FormFactorPrism3_swigregister = _libBornAgainCore.FormFactorPrism3_swigregister
FormFactorPrism3_swigregister(FormFactorPrism3)

class FormFactorPrism6(FormFactorPolygonalPrism):
    """


    A prism based on a regular hexagonal.

    C++ includes: FormFactorPrism6.h

    """

    __swig_setmethods__ = {}
    for _s in [FormFactorPolygonalPrism]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorPrism6, name, value)
    __swig_getmethods__ = {}
    for _s in [FormFactorPolygonalPrism]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorPrism6, name)
    __repr__ = _swig_repr

    def __init__(self, base_edge, height):
        """
        __init__(FormFactorPrism6 self, double base_edge, double height) -> FormFactorPrism6

        FormFactorPrism6::FormFactorPrism6(double base_edge, double height)

        Constructor of a prism with a regular hexagonal base.

        Parameters:
        -----------

        base_edge: 
        length of the hexagonal base in nanometers

        height: 
        height in nanometers 

        """
        this = _libBornAgainCore.new_FormFactorPrism6(base_edge, height)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorPrism6 self) -> FormFactorPrism6

        FormFactorPrism6* FormFactorPrism6::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorPrism6_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorPrism6 self, INodeVisitor visitor)

        void FormFactorPrism6::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorPrism6_accept(self, visitor)


    def getBaseEdge(self):
        """
        getBaseEdge(FormFactorPrism6 self) -> double

        double FormFactorPrism6::getBaseEdge() const 

        """
        return _libBornAgainCore.FormFactorPrism6_getBaseEdge(self)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorPrism6
    __del__ = lambda self: None
FormFactorPrism6_swigregister = _libBornAgainCore.FormFactorPrism6_swigregister
FormFactorPrism6_swigregister(FormFactorPrism6)

class FormFactorPyramid(FormFactorPolyhedron):
    """


    A frustum with a quadratic base.

    C++ includes: FormFactorPyramid.h

    """

    __swig_setmethods__ = {}
    for _s in [FormFactorPolyhedron]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorPyramid, name, value)
    __swig_getmethods__ = {}
    for _s in [FormFactorPolyhedron]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorPyramid, name)
    __repr__ = _swig_repr

    def __init__(self, base_edge, height, alpha):
        """
        __init__(FormFactorPyramid self, double base_edge, double height, double alpha) -> FormFactorPyramid

        FormFactorPyramid::FormFactorPyramid(double base_edge, double height, double alpha)

        Constructor of a truncated pyramid with a square base

        Parameters:
        -----------

        base_edge: 
        length of the square base in nanometers

        height: 
        height of the pyramid in nanometers

        alpha: 
        dihedral angle between the base and a side face in radians 

        """
        this = _libBornAgainCore.new_FormFactorPyramid(base_edge, height, alpha)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorPyramid self) -> FormFactorPyramid

        FormFactorPyramid* FormFactorPyramid::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorPyramid_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorPyramid self, INodeVisitor visitor)

        void FormFactorPyramid::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorPyramid_accept(self, visitor)


    def getHeight(self):
        """
        getHeight(FormFactorPyramid self) -> double

        double FormFactorPyramid::getHeight() const 

        """
        return _libBornAgainCore.FormFactorPyramid_getHeight(self)


    def getBaseEdge(self):
        """
        getBaseEdge(FormFactorPyramid self) -> double

        double FormFactorPyramid::getBaseEdge() const 

        """
        return _libBornAgainCore.FormFactorPyramid_getBaseEdge(self)


    def getAlpha(self):
        """
        getAlpha(FormFactorPyramid self) -> double

        double FormFactorPyramid::getAlpha() const 

        """
        return _libBornAgainCore.FormFactorPyramid_getAlpha(self)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorPyramid
    __del__ = lambda self: None
FormFactorPyramid_swigregister = _libBornAgainCore.FormFactorPyramid_swigregister
FormFactorPyramid_swigregister(FormFactorPyramid)

class FormFactorRipple1(IFormFactorBorn):
    """


    The formfactor for a cosine ripple.

    C++ includes: FormFactorRipple1.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorRipple1, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorRipple1, name)
    __repr__ = _swig_repr

    def __init__(self, length, width, height):
        """
        __init__(FormFactorRipple1 self, double length, double width, double height) -> FormFactorRipple1

        FormFactorRipple1::FormFactorRipple1(double length, double width, double height)

        Constructor of cosine ripple.

        Parameters:
        -----------

        length: 
        length of the rectangular base in nanometers

        width: 
        width of the rectangular base in nanometers

        height: 
        height of the ripple in nanometers 

        """
        this = _libBornAgainCore.new_FormFactorRipple1(length, width, height)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorRipple1 self) -> FormFactorRipple1

        FormFactorRipple1* FormFactorRipple1::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorRipple1_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorRipple1 self, INodeVisitor visitor)

        void FormFactorRipple1::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorRipple1_accept(self, visitor)


    def getLength(self):
        """
        getLength(FormFactorRipple1 self) -> double

        double FormFactorRipple1::getLength() const 

        """
        return _libBornAgainCore.FormFactorRipple1_getLength(self)


    def getHeight(self):
        """
        getHeight(FormFactorRipple1 self) -> double

        double FormFactorRipple1::getHeight() const 

        """
        return _libBornAgainCore.FormFactorRipple1_getHeight(self)


    def getWidth(self):
        """
        getWidth(FormFactorRipple1 self) -> double

        double FormFactorRipple1::getWidth() const 

        """
        return _libBornAgainCore.FormFactorRipple1_getWidth(self)


    def radialExtension(self):
        """
        radialExtension(FormFactorRipple1 self) -> double

        double FormFactorRipple1::radialExtension() const overridefinal

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorRipple1_radialExtension(self)


    def evaluate_for_q(self, q):
        """
        evaluate_for_q(FormFactorRipple1 self, cvector_t q) -> complex_t

        complex_t FormFactorRipple1::evaluate_for_q(cvector_t q) const overridefinal

        Complex formfactor. 

        """
        return _libBornAgainCore.FormFactorRipple1_evaluate_for_q(self, q)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorRipple1
    __del__ = lambda self: None
FormFactorRipple1_swigregister = _libBornAgainCore.FormFactorRipple1_swigregister
FormFactorRipple1_swigregister(FormFactorRipple1)

class FormFactorRipple2(IFormFactorBorn):
    """


    The formfactor for a triangular ripple.

    C++ includes: FormFactorRipple2.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorRipple2, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorRipple2, name)
    __repr__ = _swig_repr

    def __init__(self, length, width, height, asymmetry):
        """
        __init__(FormFactorRipple2 self, double length, double width, double height, double asymmetry) -> FormFactorRipple2

        FormFactorRipple2::FormFactorRipple2(double length, double width, double height, double asymmetry)

        Constructor of a triangular ripple.

        Parameters:
        -----------

        length: 
        length of the rectangular base in nanometers

        width: 
        width of the rectangular base in nanometers

        height: 
        height of the ripple in nanometers

        asymmetry: 
        asymmetry length of the triangular profile in nanometers 

        """
        this = _libBornAgainCore.new_FormFactorRipple2(length, width, height, asymmetry)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorRipple2 self) -> FormFactorRipple2

        FormFactorRipple2* FormFactorRipple2::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorRipple2_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorRipple2 self, INodeVisitor visitor)

        void FormFactorRipple2::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorRipple2_accept(self, visitor)


    def getHeight(self):
        """
        getHeight(FormFactorRipple2 self) -> double

        double FormFactorRipple2::getHeight() const 

        """
        return _libBornAgainCore.FormFactorRipple2_getHeight(self)


    def getWidth(self):
        """
        getWidth(FormFactorRipple2 self) -> double

        double FormFactorRipple2::getWidth() const 

        """
        return _libBornAgainCore.FormFactorRipple2_getWidth(self)


    def getLength(self):
        """
        getLength(FormFactorRipple2 self) -> double

        double FormFactorRipple2::getLength() const 

        """
        return _libBornAgainCore.FormFactorRipple2_getLength(self)


    def getAsymmetry(self):
        """
        getAsymmetry(FormFactorRipple2 self) -> double

        double FormFactorRipple2::getAsymmetry() const 

        """
        return _libBornAgainCore.FormFactorRipple2_getAsymmetry(self)


    def radialExtension(self):
        """
        radialExtension(FormFactorRipple2 self) -> double

        double FormFactorRipple2::radialExtension() const overridefinal

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorRipple2_radialExtension(self)


    def evaluate_for_q(self, q):
        """
        evaluate_for_q(FormFactorRipple2 self, cvector_t q) -> complex_t

        complex_t FormFactorRipple2::evaluate_for_q(cvector_t q) const overridefinal

        Complex formfactor. 

        """
        return _libBornAgainCore.FormFactorRipple2_evaluate_for_q(self, q)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorRipple2
    __del__ = lambda self: None
FormFactorRipple2_swigregister = _libBornAgainCore.FormFactorRipple2_swigregister
FormFactorRipple2_swigregister(FormFactorRipple2)

class FormFactorSphereGaussianRadius(IFormFactorBorn):
    """


    A sphere with gaussian radius distribution.

    C++ includes: FormFactorSphereGaussianRadius.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorSphereGaussianRadius, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorSphereGaussianRadius, name)
    __repr__ = _swig_repr

    def __init__(self, mean, sigma):
        """
        __init__(FormFactorSphereGaussianRadius self, double mean, double sigma) -> FormFactorSphereGaussianRadius

        FormFactorSphereGaussianRadius::FormFactorSphereGaussianRadius(double mean, double sigma)

        """
        this = _libBornAgainCore.new_FormFactorSphereGaussianRadius(mean, sigma)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorSphereGaussianRadius self) -> FormFactorSphereGaussianRadius

        FormFactorSphereGaussianRadius* FormFactorSphereGaussianRadius::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorSphereGaussianRadius_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorSphereGaussianRadius self, INodeVisitor visitor)

        void FormFactorSphereGaussianRadius::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorSphereGaussianRadius_accept(self, visitor)


    def radialExtension(self):
        """
        radialExtension(FormFactorSphereGaussianRadius self) -> double

        double FormFactorSphereGaussianRadius::radialExtension() const overridefinal

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorSphereGaussianRadius_radialExtension(self)


    def evaluate_for_q(self, q):
        """
        evaluate_for_q(FormFactorSphereGaussianRadius self, cvector_t q) -> complex_t

        complex_t FormFactorSphereGaussianRadius::evaluate_for_q(cvector_t q) const overridefinal

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorSphereGaussianRadius_evaluate_for_q(self, q)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorSphereGaussianRadius
    __del__ = lambda self: None
FormFactorSphereGaussianRadius_swigregister = _libBornAgainCore.FormFactorSphereGaussianRadius_swigregister
FormFactorSphereGaussianRadius_swigregister(FormFactorSphereGaussianRadius)

class FormFactorSphereLogNormalRadius(IFormFactorBorn):
    """


    A sphere with log normal radius distribution.

    C++ includes: FormFactorSphereLogNormalRadius.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorSphereLogNormalRadius, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorSphereLogNormalRadius, name)
    __repr__ = _swig_repr

    def __init__(self, mean, scale_param, n_samples):
        """
        __init__(FormFactorSphereLogNormalRadius self, double mean, double scale_param, size_t n_samples) -> FormFactorSphereLogNormalRadius

        FormFactorSphereLogNormalRadius::FormFactorSphereLogNormalRadius(double mean, double scale_param, size_t n_samples)

        """
        this = _libBornAgainCore.new_FormFactorSphereLogNormalRadius(mean, scale_param, n_samples)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorSphereLogNormalRadius self) -> FormFactorSphereLogNormalRadius

        FormFactorSphereLogNormalRadius* FormFactorSphereLogNormalRadius::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorSphereLogNormalRadius_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorSphereLogNormalRadius self, INodeVisitor visitor)

        void FormFactorSphereLogNormalRadius::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorSphereLogNormalRadius_accept(self, visitor)


    def radialExtension(self):
        """
        radialExtension(FormFactorSphereLogNormalRadius self) -> double

        double FormFactorSphereLogNormalRadius::radialExtension() const overridefinal

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorSphereLogNormalRadius_radialExtension(self)


    def evaluate_for_q(self, q):
        """
        evaluate_for_q(FormFactorSphereLogNormalRadius self, cvector_t q) -> complex_t

        complex_t FormFactorSphereLogNormalRadius::evaluate_for_q(cvector_t q) const overridefinal

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorSphereLogNormalRadius_evaluate_for_q(self, q)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorSphereLogNormalRadius
    __del__ = lambda self: None
FormFactorSphereLogNormalRadius_swigregister = _libBornAgainCore.FormFactorSphereLogNormalRadius_swigregister
FormFactorSphereLogNormalRadius_swigregister(FormFactorSphereLogNormalRadius)

class FormFactorSphereUniformRadius(IFormFactorBorn):
    """


    Integrated full sphere form factor over a uniform distribution of radii.

    C++ includes: FormFactorSphereUniformRadius.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorSphereUniformRadius, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorSphereUniformRadius, name)
    __repr__ = _swig_repr

    def __init__(self, mean, full_width):
        """
        __init__(FormFactorSphereUniformRadius self, double mean, double full_width) -> FormFactorSphereUniformRadius

        FormFactorSphereUniformRadius::FormFactorSphereUniformRadius(double mean, double full_width)

        """
        this = _libBornAgainCore.new_FormFactorSphereUniformRadius(mean, full_width)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorSphereUniformRadius self) -> FormFactorSphereUniformRadius

        FormFactorSphereUniformRadius* FormFactorSphereUniformRadius::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorSphereUniformRadius_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorSphereUniformRadius self, INodeVisitor visitor)

        void FormFactorSphereUniformRadius::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorSphereUniformRadius_accept(self, visitor)


    def radialExtension(self):
        """
        radialExtension(FormFactorSphereUniformRadius self) -> double

        double FormFactorSphereUniformRadius::radialExtension() const overridefinal

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorSphereUniformRadius_radialExtension(self)


    def evaluate_for_q(self, q):
        """
        evaluate_for_q(FormFactorSphereUniformRadius self, cvector_t q) -> complex_t

        complex_t FormFactorSphereUniformRadius::evaluate_for_q(cvector_t q) const overridefinal

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorSphereUniformRadius_evaluate_for_q(self, q)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorSphereUniformRadius
    __del__ = lambda self: None
FormFactorSphereUniformRadius_swigregister = _libBornAgainCore.FormFactorSphereUniformRadius_swigregister
FormFactorSphereUniformRadius_swigregister(FormFactorSphereUniformRadius)

class FormFactorTetrahedron(FormFactorPolyhedron):
    """


    A frustum with equilateral trigonal base.

    C++ includes: FormFactorTetrahedron.h

    """

    __swig_setmethods__ = {}
    for _s in [FormFactorPolyhedron]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorTetrahedron, name, value)
    __swig_getmethods__ = {}
    for _s in [FormFactorPolyhedron]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorTetrahedron, name)
    __repr__ = _swig_repr

    def __init__(self, base_edge, height, alpha):
        """
        __init__(FormFactorTetrahedron self, double base_edge, double height, double alpha) -> FormFactorTetrahedron

        FormFactorTetrahedron::FormFactorTetrahedron(double base_edge, double height, double alpha)

        Constructor of a truncated tethrahedron.

        Parameters:
        -----------

        base_edge: 
        length of one edge of the equilateral triangular base in nanometers

        height: 
        height of the tetrahedron in nanometers

        alpha: 
        dihedral angle in radians between base and facet 

        """
        this = _libBornAgainCore.new_FormFactorTetrahedron(base_edge, height, alpha)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorTetrahedron self) -> FormFactorTetrahedron

        FormFactorTetrahedron* FormFactorTetrahedron::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorTetrahedron_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorTetrahedron self, INodeVisitor visitor)

        void FormFactorTetrahedron::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorTetrahedron_accept(self, visitor)


    def getBaseEdge(self):
        """
        getBaseEdge(FormFactorTetrahedron self) -> double

        double FormFactorTetrahedron::getBaseEdge() const 

        """
        return _libBornAgainCore.FormFactorTetrahedron_getBaseEdge(self)


    def getHeight(self):
        """
        getHeight(FormFactorTetrahedron self) -> double

        double FormFactorTetrahedron::getHeight() const 

        """
        return _libBornAgainCore.FormFactorTetrahedron_getHeight(self)


    def getAlpha(self):
        """
        getAlpha(FormFactorTetrahedron self) -> double

        double FormFactorTetrahedron::getAlpha() const 

        """
        return _libBornAgainCore.FormFactorTetrahedron_getAlpha(self)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorTetrahedron
    __del__ = lambda self: None
FormFactorTetrahedron_swigregister = _libBornAgainCore.FormFactorTetrahedron_swigregister
FormFactorTetrahedron_swigregister(FormFactorTetrahedron)

class FormFactorTruncatedCube(FormFactorPolyhedron):
    """


    A cube, with tetrahedral truncation of all edges.

    C++ includes: FormFactorTruncatedCube.h

    """

    __swig_setmethods__ = {}
    for _s in [FormFactorPolyhedron]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorTruncatedCube, name, value)
    __swig_getmethods__ = {}
    for _s in [FormFactorPolyhedron]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorTruncatedCube, name)
    __repr__ = _swig_repr

    def __init__(self, length, removed_length):
        """
        __init__(FormFactorTruncatedCube self, double length, double removed_length) -> FormFactorTruncatedCube

        FormFactorTruncatedCube::FormFactorTruncatedCube(double length, double removed_length)

        Constructor of a truncated cube.

        Parameters:
        -----------

        length: 
        length of the full cube's edge in nanometers

        removed_length: 
        removed length from each edge of the cube in nanometers 

        """
        this = _libBornAgainCore.new_FormFactorTruncatedCube(length, removed_length)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorTruncatedCube self) -> FormFactorTruncatedCube

        FormFactorTruncatedCube* FormFactorTruncatedCube::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorTruncatedCube_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorTruncatedCube self, INodeVisitor visitor)

        void FormFactorTruncatedCube::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorTruncatedCube_accept(self, visitor)


    def getLength(self):
        """
        getLength(FormFactorTruncatedCube self) -> double

        double FormFactorTruncatedCube::getLength() const 

        """
        return _libBornAgainCore.FormFactorTruncatedCube_getLength(self)


    def getRemovedLength(self):
        """
        getRemovedLength(FormFactorTruncatedCube self) -> double

        double FormFactorTruncatedCube::getRemovedLength() const 

        """
        return _libBornAgainCore.FormFactorTruncatedCube_getRemovedLength(self)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorTruncatedCube
    __del__ = lambda self: None
FormFactorTruncatedCube_swigregister = _libBornAgainCore.FormFactorTruncatedCube_swigregister
FormFactorTruncatedCube_swigregister(FormFactorTruncatedCube)

class FormFactorTruncatedSphere(IFormFactorBorn):
    """


    A truncated Sphere.

    C++ includes: FormFactorTruncatedSphere.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorTruncatedSphere, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorTruncatedSphere, name)
    __repr__ = _swig_repr

    def __init__(self, radius, height, dh=0.0):
        """
        __init__(FormFactorTruncatedSphere self, double radius, double height, double dh=0.0) -> FormFactorTruncatedSphere
        __init__(FormFactorTruncatedSphere self, double radius, double height) -> FormFactorTruncatedSphere

        FormFactorTruncatedSphere::FormFactorTruncatedSphere(double radius, double height, double dh=0.0)

        Constructor of a spherical dome.

        Parameters:
        -----------

        radius: 
        radius of the truncated sphere in nanometers

        height: 
        height of the truncated sphere in nanometers

        dh: 
        length of cup truncated from the top 

        """
        this = _libBornAgainCore.new_FormFactorTruncatedSphere(radius, height, dh)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorTruncatedSphere self) -> FormFactorTruncatedSphere

        FormFactorTruncatedSphere* FormFactorTruncatedSphere::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorTruncatedSphere_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorTruncatedSphere self, INodeVisitor visitor)

        void FormFactorTruncatedSphere::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorTruncatedSphere_accept(self, visitor)


    def getHeight(self):
        """
        getHeight(FormFactorTruncatedSphere self) -> double

        double FormFactorTruncatedSphere::getHeight() const 

        """
        return _libBornAgainCore.FormFactorTruncatedSphere_getHeight(self)


    def getRadius(self):
        """
        getRadius(FormFactorTruncatedSphere self) -> double

        double FormFactorTruncatedSphere::getRadius() const 

        """
        return _libBornAgainCore.FormFactorTruncatedSphere_getRadius(self)


    def getRemovedTop(self):
        """
        getRemovedTop(FormFactorTruncatedSphere self) -> double

        double FormFactorTruncatedSphere::getRemovedTop() const 

        """
        return _libBornAgainCore.FormFactorTruncatedSphere_getRemovedTop(self)


    def radialExtension(self):
        """
        radialExtension(FormFactorTruncatedSphere self) -> double

        double FormFactorTruncatedSphere::radialExtension() const overridefinal

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorTruncatedSphere_radialExtension(self)


    def evaluate_for_q(self, q):
        """
        evaluate_for_q(FormFactorTruncatedSphere self, cvector_t q) -> complex_t

        complex_t FormFactorTruncatedSphere::evaluate_for_q(cvector_t q) const overridefinal

        Complex formfactor. 

        """
        return _libBornAgainCore.FormFactorTruncatedSphere_evaluate_for_q(self, q)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorTruncatedSphere
    __del__ = lambda self: None
FormFactorTruncatedSphere_swigregister = _libBornAgainCore.FormFactorTruncatedSphere_swigregister
FormFactorTruncatedSphere_swigregister(FormFactorTruncatedSphere)

class FormFactorTruncatedSpheroid(IFormFactorBorn):
    """


    A truncated spheroid. An ellipsoid with two equal axis, truncated by a plane perpendicular to the third axis.

    C++ includes: FormFactorTruncatedSpheroid.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorTruncatedSpheroid, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorTruncatedSpheroid, name)
    __repr__ = _swig_repr

    def __init__(self, radius, height, height_flattening, dh=0.0):
        """
        __init__(FormFactorTruncatedSpheroid self, double radius, double height, double height_flattening, double dh=0.0) -> FormFactorTruncatedSpheroid
        __init__(FormFactorTruncatedSpheroid self, double radius, double height, double height_flattening) -> FormFactorTruncatedSpheroid

        FormFactorTruncatedSpheroid::FormFactorTruncatedSpheroid(double radius, double height, double height_flattening, double dh=0.0)

        Constructor of a spheroidal dome.

        Parameters:
        -----------

        radius: 
        radius of the truncated spheroid in nanometers

        height: 
        height of the truncated spheroid in nanometers

        height_flattening: 
        ratio of the height of the corresponding full spheroid to its diameter

        dh: 
        length of cup truncated from the top 

        """
        this = _libBornAgainCore.new_FormFactorTruncatedSpheroid(radius, height, height_flattening, dh)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(FormFactorTruncatedSpheroid self) -> FormFactorTruncatedSpheroid

        FormFactorTruncatedSpheroid* FormFactorTruncatedSpheroid::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorTruncatedSpheroid_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorTruncatedSpheroid self, INodeVisitor visitor)

        void FormFactorTruncatedSpheroid::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorTruncatedSpheroid_accept(self, visitor)


    def getRadius(self):
        """
        getRadius(FormFactorTruncatedSpheroid self) -> double

        double FormFactorTruncatedSpheroid::getRadius() const 

        """
        return _libBornAgainCore.FormFactorTruncatedSpheroid_getRadius(self)


    def getHeight(self):
        """
        getHeight(FormFactorTruncatedSpheroid self) -> double

        double FormFactorTruncatedSpheroid::getHeight() const 

        """
        return _libBornAgainCore.FormFactorTruncatedSpheroid_getHeight(self)


    def getHeightFlattening(self):
        """
        getHeightFlattening(FormFactorTruncatedSpheroid self) -> double

        double FormFactorTruncatedSpheroid::getHeightFlattening() const 

        """
        return _libBornAgainCore.FormFactorTruncatedSpheroid_getHeightFlattening(self)


    def getRemovedTop(self):
        """
        getRemovedTop(FormFactorTruncatedSpheroid self) -> double

        double FormFactorTruncatedSpheroid::getRemovedTop() const 

        """
        return _libBornAgainCore.FormFactorTruncatedSpheroid_getRemovedTop(self)


    def radialExtension(self):
        """
        radialExtension(FormFactorTruncatedSpheroid self) -> double

        double FormFactorTruncatedSpheroid::radialExtension() const overridefinal

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorTruncatedSpheroid_radialExtension(self)


    def evaluate_for_q(self, q):
        """
        evaluate_for_q(FormFactorTruncatedSpheroid self, cvector_t q) -> complex_t

        complex_t FormFactorTruncatedSpheroid::evaluate_for_q(cvector_t q) const overridefinal

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorTruncatedSpheroid_evaluate_for_q(self, q)

    __swig_destroy__ = _libBornAgainCore.delete_FormFactorTruncatedSpheroid
    __del__ = lambda self: None
FormFactorTruncatedSpheroid_swigregister = _libBornAgainCore.FormFactorTruncatedSpheroid_swigregister
FormFactorTruncatedSpheroid_swigregister(FormFactorTruncatedSpheroid)

class FormFactorWeighted(IFormFactor):
    """


    Coherent sum of different scalar  IFormFactor's with different weights.

    Used by  ParticleComposition. If same particles are at different positions, then consider FormFactorDecoratorMultiPositionFactor (restore from commit 0500a26de76).

    C++ includes: FormFactorWeighted.h

    """

    __swig_setmethods__ = {}
    for _s in [IFormFactor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorWeighted, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorWeighted, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(FormFactorWeighted self) -> FormFactorWeighted

        FormFactorWeighted::FormFactorWeighted()

        """
        this = _libBornAgainCore.new_FormFactorWeighted()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorWeighted
    __del__ = lambda self: None

    def clone(self):
        """
        clone(FormFactorWeighted self) -> FormFactorWeighted

        FormFactorWeighted * FormFactorWeighted::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorWeighted_clone(self)


    def accept(self, visitor):
        """
        accept(FormFactorWeighted self, INodeVisitor visitor)

        void FormFactorWeighted::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorWeighted_accept(self, visitor)


    def radialExtension(self):
        """
        radialExtension(FormFactorWeighted self) -> double

        double FormFactorWeighted::radialExtension() const overridefinal

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorWeighted_radialExtension(self)


    def bottomZ(self, rotation):
        """
        bottomZ(FormFactorWeighted self, IRotation rotation) -> double

        double FormFactorWeighted::bottomZ(const IRotation &rotation) const overridefinal

        Returns the z-coordinate of the lowest point in this shape after a given rotation. 

        """
        return _libBornAgainCore.FormFactorWeighted_bottomZ(self, rotation)


    def topZ(self, rotation):
        """
        topZ(FormFactorWeighted self, IRotation rotation) -> double

        double FormFactorWeighted::topZ(const IRotation &rotation) const overridefinal

        Returns the z-coordinate of the lowest point in this shape after a given rotation. 

        """
        return _libBornAgainCore.FormFactorWeighted_topZ(self, rotation)


    def addFormFactor(self, form_factor, weight=1.0):
        """
        addFormFactor(FormFactorWeighted self, IFormFactor form_factor, double weight=1.0)
        addFormFactor(FormFactorWeighted self, IFormFactor form_factor)

        void FormFactorWeighted::addFormFactor(const IFormFactor &form_factor, double weight=1.0)

        """
        return _libBornAgainCore.FormFactorWeighted_addFormFactor(self, form_factor, weight)


    def setAmbientMaterial(self, material):
        """
        setAmbientMaterial(FormFactorWeighted self, Material material)

        void FormFactorWeighted::setAmbientMaterial(Material material) overridefinal

        Passes the material in which this particle is embedded. 

        """
        return _libBornAgainCore.FormFactorWeighted_setAmbientMaterial(self, material)


    def evaluate(self, wavevectors):
        """
        evaluate(FormFactorWeighted self, WavevectorInfo wavevectors) -> complex_t

        complex_t FormFactorWeighted::evaluate(const WavevectorInfo &wavevectors) const overridefinal

        Returns scattering amplitude for complex wavevectors ki, kf. 

        """
        return _libBornAgainCore.FormFactorWeighted_evaluate(self, wavevectors)

FormFactorWeighted_swigregister = _libBornAgainCore.FormFactorWeighted_swigregister
FormFactorWeighted_swigregister(FormFactorWeighted)

class IFootprintFactor(ICloneable, INode):
    """


    Defines the base for classes to calculate beam footprint factor

    C++ includes: IFootprintFactor.h

    """

    __swig_setmethods__ = {}
    for _s in [ICloneable, INode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFootprintFactor, name, value)
    __swig_getmethods__ = {}
    for _s in [ICloneable, INode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IFootprintFactor, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IFootprintFactor
    __del__ = lambda self: None

    def clone(self):
        """
        clone(IFootprintFactor self) -> IFootprintFactor

        virtual IFootprintFactor* IFootprintFactor::clone() const =0

        """
        return _libBornAgainCore.IFootprintFactor_clone(self)


    def setWidthRatio(self, width_ratio):
        """
        setWidthRatio(IFootprintFactor self, double width_ratio)

        void IFootprintFactor::setWidthRatio(double width_ratio)

        """
        return _libBornAgainCore.IFootprintFactor_setWidthRatio(self, width_ratio)


    def widthRatio(self):
        """
        widthRatio(IFootprintFactor self) -> double

        double IFootprintFactor::widthRatio() const 

        """
        return _libBornAgainCore.IFootprintFactor_widthRatio(self)


    def calculate(self, alpha):
        """
        calculate(IFootprintFactor self, double alpha) -> double

        virtual double IFootprintFactor::calculate(double alpha) const =0

        Calculate footprint correction coefficient from the beam incident angle  alpha. 

        """
        return _libBornAgainCore.IFootprintFactor_calculate(self, alpha)

IFootprintFactor_swigregister = _libBornAgainCore.IFootprintFactor_swigregister
IFootprintFactor_swigregister(IFootprintFactor)

class FootprintFactorGaussian(IFootprintFactor):
    """


    Calculates footprint coefficient for a gaussian beam  Beam width is interpreted as the full width on the level of  \\[ \\exp{-1/2} \\] from the peak intensity.

    C++ includes: FootprintFactorGaussian.h

    """

    __swig_setmethods__ = {}
    for _s in [IFootprintFactor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FootprintFactorGaussian, name, value)
    __swig_getmethods__ = {}
    for _s in [IFootprintFactor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FootprintFactorGaussian, name)
    __repr__ = _swig_repr

    def __init__(self, width_ratio):
        """
        __init__(FootprintFactorGaussian self, double width_ratio) -> FootprintFactorGaussian

        FootprintFactorGaussian::FootprintFactorGaussian(double width_ratio)

        """
        this = _libBornAgainCore.new_FootprintFactorGaussian(width_ratio)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def accept(self, visitor):
        """
        accept(FootprintFactorGaussian self, INodeVisitor visitor)

        void FootprintFactorGaussian::accept(INodeVisitor *visitor) const override

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FootprintFactorGaussian_accept(self, visitor)


    def clone(self):
        """
        clone(FootprintFactorGaussian self) -> FootprintFactorGaussian

        FootprintFactorGaussian * FootprintFactorGaussian::clone() const override

        """
        return _libBornAgainCore.FootprintFactorGaussian_clone(self)


    def calculate(self, alpha):
        """
        calculate(FootprintFactorGaussian self, double alpha) -> double

        double FootprintFactorGaussian::calculate(double alpha) const override

        Calculate footprint correction coefficient from the beam incident angle  alpha. 

        """
        return _libBornAgainCore.FootprintFactorGaussian_calculate(self, alpha)

    __swig_destroy__ = _libBornAgainCore.delete_FootprintFactorGaussian
    __del__ = lambda self: None
FootprintFactorGaussian_swigregister = _libBornAgainCore.FootprintFactorGaussian_swigregister
FootprintFactorGaussian_swigregister(FootprintFactorGaussian)

class FootprintFactorSquare(IFootprintFactor):
    """


    Calculates footprint coefficient for a square beam

    C++ includes: FootprintFactorSquare.h

    """

    __swig_setmethods__ = {}
    for _s in [IFootprintFactor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FootprintFactorSquare, name, value)
    __swig_getmethods__ = {}
    for _s in [IFootprintFactor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FootprintFactorSquare, name)
    __repr__ = _swig_repr

    def __init__(self, width_ratio):
        """
        __init__(FootprintFactorSquare self, double width_ratio) -> FootprintFactorSquare

        FootprintFactorSquare::FootprintFactorSquare(double width_ratio)

        """
        this = _libBornAgainCore.new_FootprintFactorSquare(width_ratio)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def accept(self, visitor):
        """
        accept(FootprintFactorSquare self, INodeVisitor visitor)

        void FootprintFactorSquare::accept(INodeVisitor *visitor) const override

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FootprintFactorSquare_accept(self, visitor)


    def clone(self):
        """
        clone(FootprintFactorSquare self) -> FootprintFactorSquare

        FootprintFactorSquare * FootprintFactorSquare::clone() const override

        """
        return _libBornAgainCore.FootprintFactorSquare_clone(self)


    def calculate(self, alpha):
        """
        calculate(FootprintFactorSquare self, double alpha) -> double

        double FootprintFactorSquare::calculate(double alpha) const override

        Calculate footprint correction coefficient from the beam incident angle  alpha. 

        """
        return _libBornAgainCore.FootprintFactorSquare_calculate(self, alpha)

    __swig_destroy__ = _libBornAgainCore.delete_FootprintFactorSquare
    __del__ = lambda self: None
FootprintFactorSquare_swigregister = _libBornAgainCore.FootprintFactorSquare_swigregister
FootprintFactorSquare_swigregister(FootprintFactorSquare)

class Simulation(ICloneable, INode):
    """


    Pure virtual base class of OffSpecularSimulation,  GISASSimulation and  SpecularSimulation. Holds the common infrastructure to run a simulation: multithreading, batch processing, weighting over parameter distributions, ...

    C++ includes: Simulation.h

    """

    __swig_setmethods__ = {}
    for _s in [ICloneable, INode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Simulation, name, value)
    __swig_getmethods__ = {}
    for _s in [ICloneable, INode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Simulation, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_Simulation
    __del__ = lambda self: None

    def clone(self):
        """
        clone(Simulation self) -> Simulation

        virtual Simulation* Simulation::clone() const =0

        """
        return _libBornAgainCore.Simulation_clone(self)


    def prepareSimulation(self):
        """
        prepareSimulation(Simulation self)

        void Simulation::prepareSimulation()

        Put into a clean state for running a simulation. 

        """
        return _libBornAgainCore.Simulation_prepareSimulation(self)


    def runSimulation(self):
        """
        runSimulation(Simulation self)

        void Simulation::runSimulation()

        Run a simulation, possibly averaged over parameter distributions.

        Run simulation with possible averaging over parameter distributions. 

        """
        return _libBornAgainCore.Simulation_runSimulation(self)


    def runMPISimulation(self):
        """
        runMPISimulation(Simulation self)

        void Simulation::runMPISimulation()

        Run a simulation in a MPI environment. 

        """
        return _libBornAgainCore.Simulation_runMPISimulation(self)


    def setInstrument(self, instrument):
        """
        setInstrument(Simulation self, Instrument instrument)

        void Simulation::setInstrument(const Instrument &instrument)

        """
        return _libBornAgainCore.Simulation_setInstrument(self, instrument)


    def getInstrument(self, *args):
        """
        getInstrument(Simulation self) -> Instrument
        getInstrument(Simulation self) -> Instrument

        Instrument& Simulation::getInstrument()

        """
        return _libBornAgainCore.Simulation_getInstrument(self, *args)


    def setBeamIntensity(self, intensity):
        """
        setBeamIntensity(Simulation self, double intensity)

        void Simulation::setBeamIntensity(double intensity)

        """
        return _libBornAgainCore.Simulation_setBeamIntensity(self, intensity)


    def getBeamIntensity(self):
        """
        getBeamIntensity(Simulation self) -> double

        double Simulation::getBeamIntensity() const 

        """
        return _libBornAgainCore.Simulation_getBeamIntensity(self)


    def setBeamPolarization(self, bloch_vector):
        """
        setBeamPolarization(Simulation self, kvector_t bloch_vector)

        void Simulation::setBeamPolarization(const kvector_t bloch_vector)

        Sets the beam polarization according to the given Bloch vector. 

        """
        return _libBornAgainCore.Simulation_setBeamPolarization(self, bloch_vector)


    def setDetectorResolutionFunction(self, resolution_function):
        """
        setDetectorResolutionFunction(Simulation self, IResolutionFunction2D resolution_function)

        void Simulation::setDetectorResolutionFunction(const IResolutionFunction2D &resolution_function)

        """
        return _libBornAgainCore.Simulation_setDetectorResolutionFunction(self, resolution_function)


    def removeDetectorResolutionFunction(self):
        """
        removeDetectorResolutionFunction(Simulation self)

        void Simulation::removeDetectorResolutionFunction()

        """
        return _libBornAgainCore.Simulation_removeDetectorResolutionFunction(self)


    def setAnalyzerProperties(self, direction, efficiency, total_transmission):
        """
        setAnalyzerProperties(Simulation self, kvector_t direction, double efficiency, double total_transmission)

        void Simulation::setAnalyzerProperties(const kvector_t direction, double efficiency, double total_transmission)

        Sets the polarization analyzer characteristics of the detector. 

        """
        return _libBornAgainCore.Simulation_setAnalyzerProperties(self, direction, efficiency, total_transmission)


    def setSample(self, sample):
        """
        setSample(Simulation self, MultiLayer sample)

        void Simulation::setSample(const MultiLayer &sample)

        The  MultiLayer object will not be owned by the  Simulation object. 

        """
        return _libBornAgainCore.Simulation_setSample(self, sample)


    def sample(self):
        """
        sample(Simulation self) -> MultiLayer

        const MultiLayer * Simulation::sample() const 

        """
        return _libBornAgainCore.Simulation_sample(self)


    def setSampleBuilderCpp(self, sample_builder):
        """
        setSampleBuilderCpp(Simulation self, std::shared_ptr< IMultiLayerBuilder > const sample_builder)

        void Simulation::setSampleBuilder(const std::shared_ptr< IMultiLayerBuilder > sample_builder)

        """
        return _libBornAgainCore.Simulation_setSampleBuilderCpp(self, sample_builder)


    def setBackground(self, bg):
        """
        setBackground(Simulation self, IBackground bg)

        void Simulation::setBackground(const IBackground &bg)

        """
        return _libBornAgainCore.Simulation_setBackground(self, bg)


    def background(self):
        """
        background(Simulation self) -> IBackground

        const IBackground* Simulation::background() const 

        """
        return _libBornAgainCore.Simulation_background(self)


    def numberOfSimulationElements(self):
        """
        numberOfSimulationElements(Simulation self) -> size_t

        virtual size_t Simulation::numberOfSimulationElements() const =0

        """
        return _libBornAgainCore.Simulation_numberOfSimulationElements(self)


    def result(self):
        """
        result(Simulation self) -> SimulationResult

        virtual SimulationResult Simulation::result() const =0

        Returns the results of the simulation in a format that supports unit conversion and export to numpy arrays 

        """
        return _libBornAgainCore.Simulation_result(self)


    def addParameterDistribution(self, *args):
        """
        addParameterDistribution(Simulation self, std::string const & param_name, IDistribution1D distribution, size_t nbr_samples, double sigma_factor=0.0, RealLimits limits)
        addParameterDistribution(Simulation self, std::string const & param_name, IDistribution1D distribution, size_t nbr_samples, double sigma_factor=0.0)
        addParameterDistribution(Simulation self, std::string const & param_name, IDistribution1D distribution, size_t nbr_samples)
        addParameterDistribution(Simulation self, ParameterDistribution par_distr)

        void Simulation::addParameterDistribution(const ParameterDistribution &par_distr)

        """
        return _libBornAgainCore.Simulation_addParameterDistribution(self, *args)


    def getDistributionHandler(self):
        """
        getDistributionHandler(Simulation self) -> DistributionHandler const &

        const DistributionHandler& Simulation::getDistributionHandler() const 

        """
        return _libBornAgainCore.Simulation_getDistributionHandler(self)


    def setOptions(self, options):
        """
        setOptions(Simulation self, SimulationOptions options)

        void Simulation::setOptions(const SimulationOptions &options)

        """
        return _libBornAgainCore.Simulation_setOptions(self, options)


    def getOptions(self, *args):
        """
        getOptions(Simulation self) -> SimulationOptions
        getOptions(Simulation self) -> SimulationOptions

        SimulationOptions& Simulation::getOptions()

        """
        return _libBornAgainCore.Simulation_getOptions(self, *args)


    def subscribe(self, inform):
        """
        subscribe(Simulation self, ProgressHandler::Callback_t inform)

        void Simulation::subscribe(ProgressHandler::Callback_t inform)

        """
        return _libBornAgainCore.Simulation_subscribe(self, inform)


    def setTerminalProgressMonitor(self):
        """
        setTerminalProgressMonitor(Simulation self)

        void Simulation::setTerminalProgressMonitor()

        Initializes a progress monitor that prints to stdout. 

        """
        return _libBornAgainCore.Simulation_setTerminalProgressMonitor(self)


    def getChildren(self):
        """
        getChildren(Simulation self) -> swig_dummy_type_const_inode_vector

        std::vector< const INode * > Simulation::getChildren() const

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.Simulation_getChildren(self)


    def setSampleBuilder(self, ptr):
        self.samplebuilder = ptr
        self.setSampleBuilderCpp(ptr)

Simulation_swigregister = _libBornAgainCore.Simulation_swigregister
Simulation_swigregister(Simulation)

class Simulation2D(Simulation):
    """


    Pure virtual base class of OffSpecularSimulation and  GISASSimulation. Holds the common implementations for simulations with a 2D detector

    C++ includes: Simulation2D.h

    """

    __swig_setmethods__ = {}
    for _s in [Simulation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Simulation2D, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Simulation2D, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_Simulation2D
    __del__ = lambda self: None

    def clone(self):
        """
        clone(Simulation2D self) -> Simulation2D

        Simulation2D* Simulation2D::clone() const override=0

        """
        return _libBornAgainCore.Simulation2D_clone(self)


    def setDetectorParameters(self, n_phi, phi_min, phi_max, n_alpha, alpha_min, alpha_max):
        """
        setDetectorParameters(Simulation2D self, size_t n_phi, double phi_min, double phi_max, size_t n_alpha, double alpha_min, double alpha_max)

        void Simulation2D::setDetectorParameters(size_t n_phi, double phi_min, double phi_max, size_t n_alpha, double alpha_min, double alpha_max)

        Sets spherical detector parameters using angle ranges

        Parameters:
        -----------

        n_phi: 
        number of phi-axis bins

        phi_min: 
        low edge of first phi-bin

        phi_max: 
        upper edge of last phi-bin

        n_alpha: 
        number of alpha-axis bins

        alpha_min: 
        low edge of first alpha-bin

        alpha_max: 
        upper edge of last alpha-bin 

        """
        return _libBornAgainCore.Simulation2D_setDetectorParameters(self, n_phi, phi_min, phi_max, n_alpha, alpha_min, alpha_max)


    def setDetector(self, detector):
        """
        setDetector(Simulation2D self, IDetector2D detector)

        void Simulation2D::setDetector(const IDetector2D &detector)

        Sets the detector (axes can be overwritten later) 

        """
        return _libBornAgainCore.Simulation2D_setDetector(self, detector)


    def removeMasks(self):
        """
        removeMasks(Simulation2D self)

        void Simulation2D::removeMasks()

        removes all masks from the detector 

        """
        return _libBornAgainCore.Simulation2D_removeMasks(self)


    def addMask(self, shape, mask_value=True):
        """
        addMask(Simulation2D self, IShape2D shape, bool mask_value=True)
        addMask(Simulation2D self, IShape2D shape)

        void Simulation2D::addMask(const IShape2D &shape, bool mask_value=true)

        Adds mask of given shape to the stack of detector masks. The mask value 'true' means that the channel will be excluded from the simulation. The mask which is added last has priority.

        Parameters:
        -----------

        shape: 
        The shape of mask ( Rectangle,  Polygon,  Line,  Ellipse)

        mask_value: 
        The value of mask 

        """
        return _libBornAgainCore.Simulation2D_addMask(self, shape, mask_value)


    def maskAll(self):
        """
        maskAll(Simulation2D self)

        void Simulation2D::maskAll()

        Put the mask for all detector channels (i.e. exclude whole detector from the analysis) 

        """
        return _libBornAgainCore.Simulation2D_maskAll(self)


    def setRegionOfInterest(self, xlow, ylow, xup, yup):
        """
        setRegionOfInterest(Simulation2D self, double xlow, double ylow, double xup, double yup)

        void Simulation2D::setRegionOfInterest(double xlow, double ylow, double xup, double yup)

        Sets rectangular region of interest with lower left and upper right corners defined. 

        """
        return _libBornAgainCore.Simulation2D_setRegionOfInterest(self, xlow, ylow, xup, yup)

Simulation2D_swigregister = _libBornAgainCore.Simulation2D_swigregister
Simulation2D_swigregister(Simulation2D)

class SimulationOptions(_object):
    """


    Collect the different options for simulation.

    SimulationOptions

    C++ includes: SimulationOptions.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimulationOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimulationOptions, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(SimulationOptions self) -> SimulationOptions

        SimulationOptions::SimulationOptions()

        """
        this = _libBornAgainCore.new_SimulationOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isIntegrate(self):
        """
        isIntegrate(SimulationOptions self) -> bool

        bool SimulationOptions::isIntegrate() const 

        """
        return _libBornAgainCore.SimulationOptions_isIntegrate(self)


    def getMcPoints(self):
        """
        getMcPoints(SimulationOptions self) -> size_t

        size_t SimulationOptions::getMcPoints() const 

        """
        return _libBornAgainCore.SimulationOptions_getMcPoints(self)


    def setMonteCarloIntegration(self, flag=True, mc_points=50):
        """
        setMonteCarloIntegration(SimulationOptions self, bool flag=True, size_t mc_points=50)
        setMonteCarloIntegration(SimulationOptions self, bool flag=True)
        setMonteCarloIntegration(SimulationOptions self)

        void SimulationOptions::setMonteCarloIntegration(bool flag=true, size_t mc_points=50)

        Enables/disables MonetCarlo integration.

        Parameters:
        -----------

        flag: 
        If true, MonteCarlo integration will be used, otherwise analytical calculations

        mc_points: 
        Number of points for MonteCarlo integrator 

        """
        return _libBornAgainCore.SimulationOptions_setMonteCarloIntegration(self, flag, mc_points)


    def setNumberOfThreads(self, nthreads):
        """
        setNumberOfThreads(SimulationOptions self, int nthreads)

        void SimulationOptions::setNumberOfThreads(int nthreads)

        Sets number of threads to use during the simulation (0 - take the default value from the hardware) 

        """
        return _libBornAgainCore.SimulationOptions_setNumberOfThreads(self, nthreads)


    def getNumberOfThreads(self):
        """
        getNumberOfThreads(SimulationOptions self) -> unsigned int

        unsigned SimulationOptions::getNumberOfThreads() const 

        """
        return _libBornAgainCore.SimulationOptions_getNumberOfThreads(self)


    def setNumberOfBatches(self, nbatches):
        """
        setNumberOfBatches(SimulationOptions self, int nbatches)

        void SimulationOptions::setNumberOfBatches(int nbatches)

        Sets number of batches to split. 

        """
        return _libBornAgainCore.SimulationOptions_setNumberOfBatches(self, nbatches)


    def getNumberOfBatches(self):
        """
        getNumberOfBatches(SimulationOptions self) -> unsigned int

        unsigned SimulationOptions::getNumberOfBatches() const 

        """
        return _libBornAgainCore.SimulationOptions_getNumberOfBatches(self)


    def getCurrentBatch(self):
        """
        getCurrentBatch(SimulationOptions self) -> unsigned int

        unsigned SimulationOptions::getCurrentBatch() const 

        """
        return _libBornAgainCore.SimulationOptions_getCurrentBatch(self)


    def setThreadInfo(self, thread_info):
        """
        setThreadInfo(SimulationOptions self, ThreadInfo thread_info)

        void SimulationOptions::setThreadInfo(const ThreadInfo &thread_info)

        Sets the batch and thread information to be used. 

        """
        return _libBornAgainCore.SimulationOptions_setThreadInfo(self, thread_info)


    def getHardwareConcurrency(self):
        """
        getHardwareConcurrency(SimulationOptions self) -> unsigned int

        unsigned SimulationOptions::getHardwareConcurrency() const 

        """
        return _libBornAgainCore.SimulationOptions_getHardwareConcurrency(self)


    def setIncludeSpecular(self, include_specular):
        """
        setIncludeSpecular(SimulationOptions self, bool include_specular)

        void SimulationOptions::setIncludeSpecular(bool include_specular)

        """
        return _libBornAgainCore.SimulationOptions_setIncludeSpecular(self, include_specular)


    def includeSpecular(self):
        """
        includeSpecular(SimulationOptions self) -> bool

        bool SimulationOptions::includeSpecular() const 

        """
        return _libBornAgainCore.SimulationOptions_includeSpecular(self)


    def setUseAvgMaterials(self, use_avg_materials):
        """
        setUseAvgMaterials(SimulationOptions self, bool use_avg_materials)

        void SimulationOptions::setUseAvgMaterials(bool use_avg_materials)

        """
        return _libBornAgainCore.SimulationOptions_setUseAvgMaterials(self, use_avg_materials)


    def useAvgMaterials(self):
        """
        useAvgMaterials(SimulationOptions self) -> bool

        bool SimulationOptions::useAvgMaterials() const 

        """
        return _libBornAgainCore.SimulationOptions_useAvgMaterials(self)

    __swig_destroy__ = _libBornAgainCore.delete_SimulationOptions
    __del__ = lambda self: None
SimulationOptions_swigregister = _libBornAgainCore.SimulationOptions_swigregister
SimulationOptions_swigregister(SimulationOptions)

class GISASSimulation(Simulation2D):
    """


    Main class to run a Grazing-Incidence Small-Angle Scattering simulation.

    C++ includes: GISASSimulation.h

    """

    __swig_setmethods__ = {}
    for _s in [Simulation2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GISASSimulation, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GISASSimulation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GISASSimulation self) -> GISASSimulation
        __init__(GISASSimulation self, MultiLayer p_sample) -> GISASSimulation
        __init__(GISASSimulation self, std::shared_ptr< IMultiLayerBuilder > const p_sample_builder) -> GISASSimulation

        GISASSimulation::GISASSimulation(const std::shared_ptr< IMultiLayerBuilder > p_sample_builder)

        """
        this = _libBornAgainCore.new_GISASSimulation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_GISASSimulation
    __del__ = lambda self: None

    def clone(self):
        """
        clone(GISASSimulation self) -> GISASSimulation

        GISASSimulation* GISASSimulation::clone() const override

        """
        return _libBornAgainCore.GISASSimulation_clone(self)


    def accept(self, visitor):
        """
        accept(GISASSimulation self, INodeVisitor visitor)

        void GISASSimulation::accept(INodeVisitor *visitor) const override

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.GISASSimulation_accept(self, visitor)


    def prepareSimulation(self):
        """
        prepareSimulation(GISASSimulation self)

        void GISASSimulation::prepareSimulation() override

        Put into a clean state for running a simulation. 

        """
        return _libBornAgainCore.GISASSimulation_prepareSimulation(self)


    def numberOfSimulationElements(self):
        """
        numberOfSimulationElements(GISASSimulation self) -> size_t

        size_t GISASSimulation::numberOfSimulationElements() const override

        Gets the number of elements this simulation needs to calculate. 

        """
        return _libBornAgainCore.GISASSimulation_numberOfSimulationElements(self)


    def result(self):
        """
        result(GISASSimulation self) -> SimulationResult

        SimulationResult GISASSimulation::result() const override

        Returns the results of the simulation in a format that supports unit conversion and export to numpy arrays 

        """
        return _libBornAgainCore.GISASSimulation_result(self)


    def setBeamParameters(self, wavelength, alpha_i, phi_i):
        """
        setBeamParameters(GISASSimulation self, double wavelength, double alpha_i, double phi_i)

        void GISASSimulation::setBeamParameters(double wavelength, double alpha_i, double phi_i)

        Sets beam parameters from here (forwarded to  Instrument) 

        """
        return _libBornAgainCore.GISASSimulation_setBeamParameters(self, wavelength, alpha_i, phi_i)

GISASSimulation_swigregister = _libBornAgainCore.GISASSimulation_swigregister
GISASSimulation_swigregister(GISASSimulation)

class IHistogram(_object):
    """


    Base class for 1D and 2D histograms holding values of double type.

    C++ includes: IHistogram.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IHistogram, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IHistogram, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    INTEGRAL = _libBornAgainCore.IHistogram_INTEGRAL
    AVERAGE = _libBornAgainCore.IHistogram_AVERAGE
    STANDARD_ERROR = _libBornAgainCore.IHistogram_STANDARD_ERROR
    NENTRIES = _libBornAgainCore.IHistogram_NENTRIES
    __swig_destroy__ = _libBornAgainCore.delete_IHistogram
    __del__ = lambda self: None

    def clone(self):
        """
        clone(IHistogram self) -> IHistogram

        virtual IHistogram* IHistogram::clone() const =0

        """
        return _libBornAgainCore.IHistogram_clone(self)


    def getRank(self):
        """
        getRank(IHistogram self) -> size_t

        virtual size_t IHistogram::getRank() const =0

        Returns number of histogram dimensions. 

        """
        return _libBornAgainCore.IHistogram_getRank(self)


    def getTotalNumberOfBins(self):
        """
        getTotalNumberOfBins(IHistogram self) -> size_t

        size_t IHistogram::getTotalNumberOfBins() const

        Returns total number of histogram bins. For 2D histograms the result will be the product of bin numbers along X and Y axes. 

        """
        return _libBornAgainCore.IHistogram_getTotalNumberOfBins(self)


    def getXaxis(self):
        """
        getXaxis(IHistogram self) -> IAxis

        const IAxis & IHistogram::getXaxis() const

        returns x-axis 

        """
        return _libBornAgainCore.IHistogram_getXaxis(self)


    def getYaxis(self):
        """
        getYaxis(IHistogram self) -> IAxis

        const IAxis & IHistogram::getYaxis() const

        returns y-axis for 2D histograms 

        """
        return _libBornAgainCore.IHistogram_getYaxis(self)


    def getXmin(self):
        """
        getXmin(IHistogram self) -> double

        double IHistogram::getXmin() const

        Returns x-axis min (lower edge of first bin). 

        """
        return _libBornAgainCore.IHistogram_getXmin(self)


    def getXmax(self):
        """
        getXmax(IHistogram self) -> double

        double IHistogram::getXmax() const

        Returns x-axis max (upper edge of last bin). 

        """
        return _libBornAgainCore.IHistogram_getXmax(self)


    def getNbinsX(self):
        """
        getNbinsX(IHistogram self) -> size_t

        size_t IHistogram::getNbinsX() const

        Returns number of bins on x-axis. 

        """
        return _libBornAgainCore.IHistogram_getNbinsX(self)


    def getYmin(self):
        """
        getYmin(IHistogram self) -> double

        double IHistogram::getYmin() const

        Returns y-axis min (lower edge of first bin) for 2D histograms. 

        """
        return _libBornAgainCore.IHistogram_getYmin(self)


    def getYmax(self):
        """
        getYmax(IHistogram self) -> double

        double IHistogram::getYmax() const

        Returns y-axis max (upper edge of last bin) for 2D histograms. 

        """
        return _libBornAgainCore.IHistogram_getYmax(self)


    def getNbinsY(self):
        """
        getNbinsY(IHistogram self) -> size_t

        size_t IHistogram::getNbinsY() const

        Returns number of bins on y-axis. 

        """
        return _libBornAgainCore.IHistogram_getNbinsY(self)


    def getGlobalBin(self, binx, biny=0):
        """
        getGlobalBin(IHistogram self, size_t binx, size_t biny=0) -> size_t
        getGlobalBin(IHistogram self, size_t binx) -> size_t

        size_t IHistogram::getGlobalBin(size_t binx, size_t biny=0) const

        Returns global bin index for given axes indices. For 1D histogram the global bin index coinside with x-axis index.

        Parameters:
        -----------

        binx: 
        x-axis bin index

        biny: 
        y-axis bin index (for 2D histograms)

        The global bin index 

        """
        return _libBornAgainCore.IHistogram_getGlobalBin(self, binx, biny)


    def findGlobalBin(self, x, y):
        """
        findGlobalBin(IHistogram self, double x, double y) -> size_t

        size_t IHistogram::findGlobalBin(double x, double y) const

        Returns closest global bin index for given axes coordinates. For 1D.

        Parameters:
        -----------

        x: 
        Value on x-axis

        y: 
        Value on y-axis (for 2D histograms)

        Closest global bin index 

        """
        return _libBornAgainCore.IHistogram_findGlobalBin(self, x, y)


    def getXaxisIndex(self, i):
        """
        getXaxisIndex(IHistogram self, size_t i) -> size_t

        size_t IHistogram::getXaxisIndex(size_t i) const

        Returns x-axis bin index for given globalbin. For 1D histograms returned value conicide with globalbin value. 

        """
        return _libBornAgainCore.IHistogram_getXaxisIndex(self, i)


    def getYaxisIndex(self, i):
        """
        getYaxisIndex(IHistogram self, size_t i) -> size_t

        size_t IHistogram::getYaxisIndex(size_t i) const

        Returns y-axis bin index for given globalbin (for 2D histograms). 

        """
        return _libBornAgainCore.IHistogram_getYaxisIndex(self, i)


    def getXaxisValue(self, i):
        """
        getXaxisValue(IHistogram self, size_t i) -> double

        double IHistogram::getXaxisValue(size_t i)

        Returns the value on x-axis corresponding to the global bin index.

        Parameters:
        -----------

        globalbin: 
        The global bin index

        The center of corresponding bin of the axis 

        """
        return _libBornAgainCore.IHistogram_getXaxisValue(self, i)


    def getYaxisValue(self, i):
        """
        getYaxisValue(IHistogram self, size_t i) -> double

        double IHistogram::getYaxisValue(size_t i)

        Returns the value on y-axis corresponding to the 2D histogram global bin index.

        Parameters:
        -----------

        globalbin: 
        The global bin index

        The center of corresponding bin of the axis 

        """
        return _libBornAgainCore.IHistogram_getYaxisValue(self, i)


    def getData(self, *args):
        """
        getData(IHistogram self) -> OutputData< CumulativeValue > const
        getData(IHistogram self) -> OutputData< CumulativeValue > &

        OutputData<CumulativeValue>& IHistogram::getData()

        """
        return _libBornAgainCore.IHistogram_getData(self, *args)


    def getBinContent(self, *args):
        """
        getBinContent(IHistogram self, size_t i) -> double
        getBinContent(IHistogram self, size_t binx, size_t biny) -> double

        double IHistogram::getBinContent(size_t binx, size_t biny) const

        Returns content (accumulated value) of the 2D histogram bin with given indices.

        Parameters:
        -----------

        binx: 
        x-axis bin index

        biny: 
        y-axis bin index

        The value accumulated by the bin (integral) 

        """
        return _libBornAgainCore.IHistogram_getBinContent(self, *args)


    def setBinContent(self, i, value):
        """
        setBinContent(IHistogram self, size_t i, double value)

        void IHistogram::setBinContent(size_t i, double value)

        Sets content of the bin corresponding to the globalbin number. 

        """
        return _libBornAgainCore.IHistogram_setBinContent(self, i, value)


    def addBinContent(self, i, value):
        """
        addBinContent(IHistogram self, size_t i, double value)

        void IHistogram::addBinContent(size_t i, double value)

        Add the value to the bin. 

        """
        return _libBornAgainCore.IHistogram_addBinContent(self, i, value)


    def getBinError(self, *args):
        """
        getBinError(IHistogram self, size_t i) -> double
        getBinError(IHistogram self, size_t binx, size_t biny) -> double

        double IHistogram::getBinError(size_t binx, size_t biny) const

        Returns error of the bin with given indices (for 2D histograms). 

        """
        return _libBornAgainCore.IHistogram_getBinError(self, *args)


    def getBinAverage(self, *args):
        """
        getBinAverage(IHistogram self, size_t i) -> double
        getBinAverage(IHistogram self, size_t binx, size_t biny) -> double

        double IHistogram::getBinAverage(size_t binx, size_t biny) const

        Returns average value of the bin with given indices (for 2D histograms). 

        """
        return _libBornAgainCore.IHistogram_getBinAverage(self, *args)


    def getBinNumberOfEntries(self, *args):
        """
        getBinNumberOfEntries(IHistogram self, size_t i) -> int
        getBinNumberOfEntries(IHistogram self, size_t binx, size_t biny) -> int

        int IHistogram::getBinNumberOfEntries(size_t binx, size_t biny) const

        Returns number of entries in the bin with given indices (for 2D histograms). 

        """
        return _libBornAgainCore.IHistogram_getBinNumberOfEntries(self, *args)


    def getMaximum(self):
        """
        getMaximum(IHistogram self) -> double

        double IHistogram::getMaximum() const

        Returns histogram maximum value (maximum of  getBinContent() over all bins) 

        """
        return _libBornAgainCore.IHistogram_getMaximum(self)


    def getMaximumBinIndex(self):
        """
        getMaximumBinIndex(IHistogram self) -> size_t

        size_t IHistogram::getMaximumBinIndex() const

        Returns globalbin index with maximum content. 

        """
        return _libBornAgainCore.IHistogram_getMaximumBinIndex(self)


    def getMinimum(self):
        """
        getMinimum(IHistogram self) -> double

        double IHistogram::getMinimum() const

        Returns histogram minimum value (minimum of  getBinContent() over all bins) 

        """
        return _libBornAgainCore.IHistogram_getMinimum(self)


    def getMinimumBinIndex(self):
        """
        getMinimumBinIndex(IHistogram self) -> size_t

        size_t IHistogram::getMinimumBinIndex() const

        Returns globalbin index with minimum content. 

        """
        return _libBornAgainCore.IHistogram_getMinimumBinIndex(self)


    def scale(self, value):
        """
        scale(IHistogram self, double value)

        void IHistogram::scale(double value)

        Multiply this histogram (every bin content value) by a constant. 

        """
        return _libBornAgainCore.IHistogram_scale(self, value)


    def integral(self):
        """
        integral(IHistogram self) -> double

        double IHistogram::integral() const

        Returns integral of bins content (computed as a sum of all bin content). 

        """
        return _libBornAgainCore.IHistogram_integral(self)


    def array(self, *args):
        """
        array(IHistogram self, IHistogram::DataType dataType) -> PyObject
        array(IHistogram self) -> PyObject *

        PyObject * IHistogram::array(DataType dataType=DataType::INTEGRAL) const

        Returns numpy array with bin content (accumulated values). 

        """
        return _libBornAgainCore.IHistogram_array(self, *args)


    def getArrayObsolete(self, *args):
        """
        getArrayObsolete(IHistogram self, IHistogram::DataType dataType) -> PyObject
        getArrayObsolete(IHistogram self) -> PyObject *

        PyObject * IHistogram::getArray(DataType dataType=DataType::INTEGRAL) const

        Deprecated
        Use  array() instead. 

        """
        return _libBornAgainCore.IHistogram_getArrayObsolete(self, *args)


    def reset(self):
        """
        reset(IHistogram self)

        void IHistogram::reset()

        Reset histogram content (axes remains) 

        """
        return _libBornAgainCore.IHistogram_reset(self)


    def createHistogram(source):
        """createHistogram(IntensityData source) -> IHistogram"""
        return _libBornAgainCore.IHistogram_createHistogram(source)

    createHistogram = staticmethod(createHistogram)

    def createFrom(*args):
        """
        createFrom(std::string const & filename) -> IHistogram
        createFrom(vdouble2d_t data) -> IHistogram
        """
        return _libBornAgainCore.IHistogram_createFrom(*args)

    createFrom = staticmethod(createFrom)

    def createOutputData(self, *args):
        """
        createOutputData(IHistogram self, IHistogram::DataType dataType) -> IntensityData
        createOutputData(IHistogram self) -> IntensityData

        OutputData< double > * IHistogram::createOutputData(DataType dataType=DataType::INTEGRAL) const

        creates new  OutputData with histogram's shape and values corresponding to DataType

        creates new  OutputData with histogram's shape and put there values corresponding to DataType 

        """
        return _libBornAgainCore.IHistogram_createOutputData(self, *args)


    def hasSameShape(self, other):
        """
        hasSameShape(IHistogram self, IHistogram other) -> bool

        bool IHistogram::hasSameShape(const IHistogram &other) const

        Returns true if objects a) have same dimensions b) bin boundaries of axes coincide. 

        """
        return _libBornAgainCore.IHistogram_hasSameShape(self, other)


    def hasSameDimensions(self, other):
        """
        hasSameDimensions(IHistogram self, IHistogram other) -> bool

        bool IHistogram::hasSameDimensions(const IHistogram &other) const

        Returns true if object have same rank and number of axes bins. 

        """
        return _libBornAgainCore.IHistogram_hasSameDimensions(self, other)


    def __iadd__(self, right):
        """__iadd__(IHistogram self, IHistogram right) -> IHistogram"""
        return _libBornAgainCore.IHistogram___iadd__(self, right)


    def relativeDifferenceHistogram(self, rhs):
        """
        relativeDifferenceHistogram(IHistogram self, IHistogram rhs) -> IHistogram

        IHistogram * IHistogram::relativeDifferenceHistogram(const IHistogram &rhs)

        returns histogram representing relative difference of two histograms. 

        """
        return _libBornAgainCore.IHistogram_relativeDifferenceHistogram(self, rhs)


    def save(self, filename):
        """
        save(IHistogram self, std::string const & filename)

        void IHistogram::save(const std::string &filename)

        Saves histogram in file Following formats are available: *.txt, *.tif, *.int (*.txt.gz, *.tif.gz, *.int.gz) 

        """
        return _libBornAgainCore.IHistogram_save(self, filename)


    def load(self, filename):
        """
        load(IHistogram self, std::string const & filename)

        void IHistogram::load(const std::string &filename)

        Loads histogram from file, the shape of array in file should match Following formats are available: *.txt, *.tif, *.int (*.txt.gz, *.tif.gz, *.int.gz) Only bin content will be loaded, histogram axes remain the same. 

        """
        return _libBornAgainCore.IHistogram_load(self, filename)


    @deprecated("Deprecated. Use array() instead.")
    def getArray(self):
        return self.getArrayObsolete()

IHistogram_swigregister = _libBornAgainCore.IHistogram_swigregister
IHistogram_swigregister(IHistogram)

def IHistogram_createHistogram(source):
    """IHistogram_createHistogram(IntensityData source) -> IHistogram"""
    return _libBornAgainCore.IHistogram_createHistogram(source)

def IHistogram_createFrom(*args):
    """
    createFrom(std::string const & filename) -> IHistogram
    IHistogram_createFrom(vdouble2d_t data) -> IHistogram
    """
    return _libBornAgainCore.IHistogram_createFrom(*args)

class Histogram1D(IHistogram):
    """


    One dimensional histogram.

    C++ includes: Histogram1D.h

    """

    __swig_setmethods__ = {}
    for _s in [IHistogram]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Histogram1D, name, value)
    __swig_getmethods__ = {}
    for _s in [IHistogram]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Histogram1D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Histogram1D self, int nbinsx, double xlow, double xup) -> Histogram1D
        __init__(Histogram1D self, int nbinsx, vdouble1d_t xbins) -> Histogram1D
        __init__(Histogram1D self, IAxis axis) -> Histogram1D
        __init__(Histogram1D self, IntensityData data) -> Histogram1D

        Histogram1D::Histogram1D(const OutputData< double > &data)

        Constructor for 1D histograms from basic  OutputData object. 

        """
        this = _libBornAgainCore.new_Histogram1D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(Histogram1D self) -> Histogram1D

        Histogram1D * Histogram1D::clone() const

        Returns clone of other histogram. 

        """
        return _libBornAgainCore.Histogram1D_clone(self)


    def getRank(self):
        """
        getRank(Histogram1D self) -> size_t

        size_t Histogram1D::getRank() const

        Returns the number of histogram dimensions. 

        """
        return _libBornAgainCore.Histogram1D_getRank(self)


    def fill(self, x, weight=1.0):
        """
        fill(Histogram1D self, double x, double weight=1.0) -> int
        fill(Histogram1D self, double x) -> int

        int Histogram1D::fill(double x, double weight=1.0)

        Increment bin with abscissa x with a weight. 

        """
        return _libBornAgainCore.Histogram1D_fill(self, x, weight)


    def getBinCenters(self):
        """
        getBinCenters(Histogram1D self) -> vdouble1d_t

        std::vector< double > Histogram1D::getBinCenters() const

        returns vector of histogram bin centers 

        """
        return self.getBinCentersNumpy()


    def getBinValues(self):
        """
        getBinValues(Histogram1D self) -> vdouble1d_t

        std::vector< double > Histogram1D::getBinValues() const

        returns vector of bin content (the value accumulated by bins) 

        """
        return self.getBinValuesNumpy()


    def getBinErrors(self):
        """
        getBinErrors(Histogram1D self) -> vdouble1d_t

        std::vector< double > Histogram1D::getBinErrors() const

        returns vector of bin errors 

        """
        return self.getBinErrorsNumpy()


    def getBinCentersNumpy(self):
        """
        getBinCentersNumpy(Histogram1D self) -> PyObject *

        PyObject * Histogram1D::getBinCentersNumpy() const 

        """
        return _libBornAgainCore.Histogram1D_getBinCentersNumpy(self)


    def getBinValuesNumpy(self):
        """
        getBinValuesNumpy(Histogram1D self) -> PyObject *

        PyObject * Histogram1D::getBinValuesNumpy() const 

        """
        return _libBornAgainCore.Histogram1D_getBinValuesNumpy(self)


    def getBinErrorsNumpy(self):
        """
        getBinErrorsNumpy(Histogram1D self) -> PyObject *

        PyObject * Histogram1D::getBinErrorsNumpy() const 

        """
        return _libBornAgainCore.Histogram1D_getBinErrorsNumpy(self)


    def crop(self, xmin, xmax):
        """
        crop(Histogram1D self, double xmin, double xmax) -> Histogram1D

        Histogram1D * Histogram1D::crop(double xmin, double xmax)

        Create new histogram by applying crop on axis. 

        """
        return _libBornAgainCore.Histogram1D_crop(self, xmin, xmax)

    __swig_destroy__ = _libBornAgainCore.delete_Histogram1D
    __del__ = lambda self: None
Histogram1D_swigregister = _libBornAgainCore.Histogram1D_swigregister
Histogram1D_swigregister(Histogram1D)

class Histogram2D(IHistogram):
    """


    Two dimensional histogram.

    C++ includes: Histogram2D.h

    """

    __swig_setmethods__ = {}
    for _s in [IHistogram]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Histogram2D, name, value)
    __swig_getmethods__ = {}
    for _s in [IHistogram]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Histogram2D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Histogram2D self, int nbinsx, double xlow, double xup, int nbinsy, double ylow, double yup) -> Histogram2D
        __init__(Histogram2D self, int nbinsx, vdouble1d_t xbins, int nbinsy, vdouble1d_t ybins) -> Histogram2D
        __init__(Histogram2D self, IAxis axis_x, IAxis axis_y) -> Histogram2D
        __init__(Histogram2D self, IntensityData data) -> Histogram2D
        __init__(Histogram2D self, vdouble2d_t data) -> Histogram2D

        Histogram2D::Histogram2D(std::vector< std::vector< double >> data)

        Constructor for 2D histograms from numpy array (thanks to swig) 

        """
        this = _libBornAgainCore.new_Histogram2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(Histogram2D self) -> Histogram2D

        Histogram2D * Histogram2D::clone() const

        Returns clone of other histogram. 

        """
        return _libBornAgainCore.Histogram2D_clone(self)


    def getRank(self):
        """
        getRank(Histogram2D self) -> size_t

        size_t Histogram2D::getRank() const

        Returns the number of histogram dimensions. 

        """
        return _libBornAgainCore.Histogram2D_getRank(self)


    def fill(self, x, y, weight=1.0):
        """
        fill(Histogram2D self, double x, double y, double weight=1.0) -> int
        fill(Histogram2D self, double x, double y) -> int

        int Histogram2D::fill(double x, double y, double weight=1.0)

        Increment bin with abscissa x and ordinate y with a weight. 

        """
        return _libBornAgainCore.Histogram2D_fill(self, x, y, weight)


    def projectionX(self, *args):
        """
        projectionX(Histogram2D self) -> Histogram1D
        projectionX(Histogram2D self, double yvalue) -> Histogram1D
        projectionX(Histogram2D self, double ylow, double yup) -> Histogram1D

        Histogram1D * Histogram2D::projectionX(double ylow, double yup)

        Project a 2D histogram into 1D histogram along X. The projection is made from all y-bins corresponding to ordinate between ylow and yup.

        Parameters:
        -----------

        ylow: 
        lower edje on y-axis

        yup: 
        upper edje on y-axis 

        """
        return _libBornAgainCore.Histogram2D_projectionX(self, *args)


    def projectionY(self, *args):
        """
        projectionY(Histogram2D self) -> Histogram1D
        projectionY(Histogram2D self, double xvalue) -> Histogram1D
        projectionY(Histogram2D self, double xlow, double xup) -> Histogram1D

        Histogram1D * Histogram2D::projectionY(double xlow, double xup)

        Project a 2D histogram into 1D histogram along Y. The projection is made from all x-bins corresponding to abscissa between xlow and xup.

        Parameters:
        -----------

        xlow: 
        lower edje on x-axis

        xup: 
        upper edje on x-axis 

        """
        return _libBornAgainCore.Histogram2D_projectionY(self, *args)


    def crop(self, xmin, ymin, xmax, ymax):
        """
        crop(Histogram2D self, double xmin, double ymin, double xmax, double ymax) -> Histogram2D

        Histogram2D * Histogram2D::crop(double xmin, double ymin, double xmax, double ymax)

        Create new histogram by applying rectangular clip. 

        """
        return _libBornAgainCore.Histogram2D_crop(self, xmin, ymin, xmax, ymax)


    def setContent(self, data):
        """
        setContent(Histogram2D self, vdouble2d_t data)

        void Histogram2D::setContent(const std::vector< std::vector< double >> &data)

        Sets the values in histograms channels from numpy array,. 

        """
        return _libBornAgainCore.Histogram2D_setContent(self, data)


    def addContent(self, data):
        """
        addContent(Histogram2D self, vdouble2d_t data)

        void Histogram2D::addContent(const std::vector< std::vector< double >> &data)

        Add to values in histograms channels from numpy array,. 

        """
        return _libBornAgainCore.Histogram2D_addContent(self, data)

    __swig_destroy__ = _libBornAgainCore.delete_Histogram2D
    __del__ = lambda self: None
Histogram2D_swigregister = _libBornAgainCore.Histogram2D_swigregister
Histogram2D_swigregister(Histogram2D)

class AxisInfo(_object):
    """


    Information about an axis in specific units. Can be used for plotting.

    C++ includes: SimulationResult.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AxisInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AxisInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_name"] = _libBornAgainCore.AxisInfo_m_name_set
    __swig_getmethods__["m_name"] = _libBornAgainCore.AxisInfo_m_name_get
    if _newclass:
        m_name = _swig_property(_libBornAgainCore.AxisInfo_m_name_get, _libBornAgainCore.AxisInfo_m_name_set)
    __swig_setmethods__["m_min"] = _libBornAgainCore.AxisInfo_m_min_set
    __swig_getmethods__["m_min"] = _libBornAgainCore.AxisInfo_m_min_get
    if _newclass:
        m_min = _swig_property(_libBornAgainCore.AxisInfo_m_min_get, _libBornAgainCore.AxisInfo_m_min_set)
    __swig_setmethods__["m_max"] = _libBornAgainCore.AxisInfo_m_max_set
    __swig_getmethods__["m_max"] = _libBornAgainCore.AxisInfo_m_max_get
    if _newclass:
        m_max = _swig_property(_libBornAgainCore.AxisInfo_m_max_get, _libBornAgainCore.AxisInfo_m_max_set)

    def __init__(self):
        """
        __init__(AxisInfo self) -> AxisInfo



        Information about an axis in specific units. Can be used for plotting.

        C++ includes: SimulationResult.h

        """
        this = _libBornAgainCore.new_AxisInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_AxisInfo
    __del__ = lambda self: None
AxisInfo_swigregister = _libBornAgainCore.AxisInfo_swigregister
AxisInfo_swigregister(AxisInfo)

class SimulationResult(_object):
    """


    Wrapper around  OutputData<double> that also provides unit conversions.

    C++ includes: SimulationResult.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimulationResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimulationResult, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SimulationResult self) -> SimulationResult
        __init__(SimulationResult self, IntensityData data, IUnitConverter unit_converter) -> SimulationResult
        __init__(SimulationResult self, SimulationResult other) -> SimulationResult
        __init__(SimulationResult self, SimulationResult other) -> SimulationResult

        SimulationResult::SimulationResult(SimulationResult &&other)

        """
        this = _libBornAgainCore.new_SimulationResult(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def data(self, *args):
        """
        data(SimulationResult self, AxesUnits units) -> IntensityData
        data(SimulationResult self) -> IntensityData

        OutputData< double > * SimulationResult::data(AxesUnits units=AxesUnits::DEFAULT) const 

        """
        return _libBornAgainCore.SimulationResult_data(self, *args)


    def histogram1d(self, *args):
        """
        histogram1d(SimulationResult self, AxesUnits units) -> Histogram1D
        histogram1d(SimulationResult self) -> Histogram1D

        Histogram1D * SimulationResult::histogram1d(AxesUnits units=AxesUnits::DEFAULT) const 

        """
        return _libBornAgainCore.SimulationResult_histogram1d(self, *args)


    def histogram2d(self, *args):
        """
        histogram2d(SimulationResult self, AxesUnits units) -> Histogram2D
        histogram2d(SimulationResult self) -> Histogram2D

        Histogram2D * SimulationResult::histogram2d(AxesUnits units=AxesUnits::DEFAULT) const 

        """
        return _libBornAgainCore.SimulationResult_histogram2d(self, *args)


    def axisInfo(self, *args):
        """
        axisInfo(SimulationResult self, AxesUnits units) -> swig_dummy_type_axisinfo_vector
        axisInfo(SimulationResult self) -> swig_dummy_type_axisinfo_vector

        std::vector< AxisInfo > SimulationResult::axisInfo(AxesUnits units=AxesUnits::DEFAULT) const

        Provide  AxisInfo for each axis and the given units. 

        """
        return _libBornAgainCore.SimulationResult_axisInfo(self, *args)


    def converter(self):
        """
        converter(SimulationResult self) -> IUnitConverter

        const IUnitConverter & SimulationResult::converter() const

        Returns underlying unit converter. 

        """
        return _libBornAgainCore.SimulationResult_converter(self)


    def size(self):
        """
        size(SimulationResult self) -> size_t

        size_t SimulationResult::size() const 

        """
        return _libBornAgainCore.SimulationResult_size(self)


    def array(self):
        """
        array(SimulationResult self) -> PyObject *

        PyObject * SimulationResult::array() const

        returns data as Python numpy array 

        """
        return _libBornAgainCore.SimulationResult_array(self)

    __swig_destroy__ = _libBornAgainCore.delete_SimulationResult
    __del__ = lambda self: None
SimulationResult_swigregister = _libBornAgainCore.SimulationResult_swigregister
SimulationResult_swigregister(SimulationResult)

class IBackground(ICloneable, INode):
    """


    Interface for a simulating the background signal

    C++ includes: IBackground.h

    """

    __swig_setmethods__ = {}
    for _s in [ICloneable, INode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IBackground, name, value)
    __swig_getmethods__ = {}
    for _s in [ICloneable, INode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IBackground, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IBackground
    __del__ = lambda self: None

    def clone(self):
        """
        clone(IBackground self) -> IBackground

        virtual IBackground* IBackground::clone() const =0

        """
        return _libBornAgainCore.IBackground_clone(self)


    def addBackGround(self, element):
        """
        addBackGround(IBackground self, double element) -> double

        virtual double IBackground::addBackGround(double element) const =0

        """
        return _libBornAgainCore.IBackground_addBackGround(self, element)

IBackground_swigregister = _libBornAgainCore.IBackground_swigregister
IBackground_swigregister(IBackground)

class ConstantBackground(IBackground):
    """


    Class representing a constant background signal

    C++ includes: ConstantBackground.h

    """

    __swig_setmethods__ = {}
    for _s in [IBackground]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantBackground, name, value)
    __swig_getmethods__ = {}
    for _s in [IBackground]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantBackground, name)
    __repr__ = _swig_repr

    def __init__(self, background_value):
        """
        __init__(ConstantBackground self, double background_value) -> ConstantBackground

        ConstantBackground::ConstantBackground(double background_value)

        """
        this = _libBornAgainCore.new_ConstantBackground(background_value)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_ConstantBackground
    __del__ = lambda self: None

    def clone(self):
        """
        clone(ConstantBackground self) -> ConstantBackground

        ConstantBackground * ConstantBackground::clone() const overridefinal

        """
        return _libBornAgainCore.ConstantBackground_clone(self)


    def backgroundValue(self):
        """
        backgroundValue(ConstantBackground self) -> double

        double ConstantBackground::backgroundValue() const 

        """
        return _libBornAgainCore.ConstantBackground_backgroundValue(self)


    def accept(self, visitor):
        """
        accept(ConstantBackground self, INodeVisitor visitor)

        void ConstantBackground::accept(INodeVisitor *visitor) const override

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.ConstantBackground_accept(self, visitor)


    def addBackGround(self, intensity):
        """
        addBackGround(ConstantBackground self, double intensity) -> double

        double ConstantBackground::addBackGround(double intensity) const overridefinal

        """
        return _libBornAgainCore.ConstantBackground_addBackGround(self, intensity)

ConstantBackground_swigregister = _libBornAgainCore.ConstantBackground_swigregister
ConstantBackground_swigregister(ConstantBackground)

class IDetector(ICloneable, INode):
    """


    Abstract detector interface.

    C++ includes: IDetector.h

    """

    __swig_setmethods__ = {}
    for _s in [ICloneable, INode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDetector, name, value)
    __swig_getmethods__ = {}
    for _s in [ICloneable, INode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IDetector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        """
        clone(IDetector self) -> IDetector

        IDetector* IDetector::clone() const override=0

        """
        return _libBornAgainCore.IDetector_clone(self)

    __swig_destroy__ = _libBornAgainCore.delete_IDetector
    __del__ = lambda self: None

    def init(self, arg2):
        """
        init(IDetector self, Beam arg2)

        virtual void IDetector::init(const Beam &)

        Inits detector with the beam settings. 

        """
        return _libBornAgainCore.IDetector_init(self, arg2)


    def clear(self):
        """
        clear(IDetector self)

        void IDetector::clear()

        """
        return _libBornAgainCore.IDetector_clear(self)


    def addAxis(self, axis):
        """
        addAxis(IDetector self, IAxis axis)

        void IDetector::addAxis(const IAxis &axis)

        """
        return _libBornAgainCore.IDetector_addAxis(self, axis)


    def getAxis(self, index):
        """
        getAxis(IDetector self, size_t index) -> IAxis

        const IAxis & IDetector::getAxis(size_t index) const 

        """
        return _libBornAgainCore.IDetector_getAxis(self, index)


    def dimension(self):
        """
        dimension(IDetector self) -> size_t

        size_t IDetector::dimension() const

        Returns actual dimensionality of the detector (number of defined axes) 

        """
        return _libBornAgainCore.IDetector_dimension(self)


    def axisBinIndex(self, index, selected_axis):
        """
        axisBinIndex(IDetector self, size_t index, size_t selected_axis) -> size_t

        size_t IDetector::axisBinIndex(size_t index, size_t selected_axis) const

        Calculate axis index for given global index. 

        """
        return _libBornAgainCore.IDetector_axisBinIndex(self, index, selected_axis)


    def totalSize(self):
        """
        totalSize(IDetector self) -> size_t

        size_t IDetector::totalSize() const

        Returns total number of pixels. 

        """
        return _libBornAgainCore.IDetector_totalSize(self)


    def detectorMask(self):
        """
        detectorMask(IDetector self) -> DetectorMask

        virtual const DetectorMask* IDetector::detectorMask() const =0

        Returns detector masks container. 

        """
        return _libBornAgainCore.IDetector_detectorMask(self)


    def setAnalyzerProperties(self, direction, efficiency, total_transmission):
        """
        setAnalyzerProperties(IDetector self, kvector_t direction, double efficiency, double total_transmission)

        void IDetector::setAnalyzerProperties(const kvector_t direction, double efficiency, double total_transmission)

        Sets the polarization analyzer characteristics of the detector. 

        """
        return _libBornAgainCore.IDetector_setAnalyzerProperties(self, direction, efficiency, total_transmission)


    def setDetectorResolution(self, p_detector_resolution):
        """
        setDetectorResolution(IDetector self, IDetectorResolution p_detector_resolution)

        void IDetector::setDetectorResolution(const IDetectorResolution &p_detector_resolution)

        Sets the detector resolution. 

        """
        return _libBornAgainCore.IDetector_setDetectorResolution(self, p_detector_resolution)


    def setResolutionFunction(self, resFunc):
        """
        setResolutionFunction(IDetector self, IResolutionFunction2D resFunc)

        void IDetector::setResolutionFunction(const IResolutionFunction2D &resFunc)

        """
        return _libBornAgainCore.IDetector_setResolutionFunction(self, resFunc)


    def applyDetectorResolution(self, p_intensity_map):
        """
        applyDetectorResolution(IDetector self, IntensityData p_intensity_map)

        void IDetector::applyDetectorResolution(OutputData< double > *p_intensity_map) const

        Applies the detector resolution to the given intensity maps. 

        """
        return _libBornAgainCore.IDetector_applyDetectorResolution(self, p_intensity_map)


    def removeDetectorResolution(self):
        """
        removeDetectorResolution(IDetector self)

        void IDetector::removeDetectorResolution()

        Removes detector resolution function. 

        """
        return _libBornAgainCore.IDetector_removeDetectorResolution(self)


    def detectorResolution(self):
        """
        detectorResolution(IDetector self) -> IDetectorResolution

        const IDetectorResolution * IDetector::detectorResolution() const

        Returns a pointer to detector resolution object. 

        """
        return _libBornAgainCore.IDetector_detectorResolution(self)


    def regionOfInterest(self):
        """
        regionOfInterest(IDetector self) -> RegionOfInterest const *

        virtual const RegionOfInterest* IDetector::regionOfInterest() const =0

        Returns region of interest if exists. 

        """
        return _libBornAgainCore.IDetector_regionOfInterest(self)


    def resetRegionOfInterest(self):
        """
        resetRegionOfInterest(IDetector self)

        virtual void IDetector::resetRegionOfInterest()=0

        Resets region of interest making whole detector plane available for the simulation. 

        """
        return _libBornAgainCore.IDetector_resetRegionOfInterest(self)


    def detectionProperties(self):
        """
        detectionProperties(IDetector self) -> DetectionProperties const &

        const DetectionProperties& IDetector::detectionProperties() const

        Returns detection properties. 

        """
        return _libBornAgainCore.IDetector_detectionProperties(self)


    def initOutputData(self, data):
        """
        initOutputData(IDetector self, IntensityData data)

        void IDetector::initOutputData(OutputData< double > &data) const

        Inits axes of  OutputData to match the detector and sets values to zero. 

        """
        return _libBornAgainCore.IDetector_initOutputData(self, data)


    def createDetectorIntensity(self, *args):
        """
        createDetectorIntensity(IDetector self, std::vector< SimulationElement,std::allocator< SimulationElement > > const & elements, Beam beam, AxesUnits units_type) -> IntensityData
        createDetectorIntensity(IDetector self, std::vector< SimulationElement,std::allocator< SimulationElement > > const & elements, Beam beam) -> IntensityData

        OutputData< double > * IDetector::createDetectorIntensity(const std::vector< SimulationElement > &elements, const Beam &beam, AxesUnits units_type=AxesUnits::DEFAULT) const

        Returns new intensity map with detector resolution applied and axes in requested units. 

        """
        return _libBornAgainCore.IDetector_createDetectorIntensity(self, *args)


    def defaultAxesUnits(self):
        """
        defaultAxesUnits(IDetector self) -> AxesUnits

        virtual AxesUnits IDetector::defaultAxesUnits() const

        Return default axes units. 

        """
        return _libBornAgainCore.IDetector_defaultAxesUnits(self)


    def validAxesUnits(self):
        """
        validAxesUnits(IDetector self) -> std::vector< AxesUnits,std::allocator< AxesUnits > >

        virtual std::vector<AxesUnits> IDetector::validAxesUnits() const

        Returns vector of valid axes units. 

        """
        return _libBornAgainCore.IDetector_validAxesUnits(self)


    def numberOfSimulationElements(self):
        """
        numberOfSimulationElements(IDetector self) -> size_t

        size_t IDetector::numberOfSimulationElements() const

        Returns number of simulation elements. 

        """
        return _libBornAgainCore.IDetector_numberOfSimulationElements(self)


    def getChildren(self):
        """
        getChildren(IDetector self) -> swig_dummy_type_const_inode_vector

        std::vector< const INode * > IDetector::getChildren() const override

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.IDetector_getChildren(self)


    def iterate(self, func, visit_masks=False):
        """
        iterate(IDetector self, std::function< void (IDetector::const_iterator) > func, bool visit_masks=False)
        iterate(IDetector self, std::function< void (IDetector::const_iterator) > func)

        void IDetector::iterate(std::function< void(const_iterator)> func, bool visit_masks=false) const 

        """
        return _libBornAgainCore.IDetector_iterate(self, func, visit_masks)

IDetector_swigregister = _libBornAgainCore.IDetector_swigregister
IDetector_swigregister(IDetector)

class IDetector2D(IDetector):
    """


    Abstract 2D detector interface.

    C++ includes: IDetector2D.h

    """

    __swig_setmethods__ = {}
    for _s in [IDetector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDetector2D, name, value)
    __swig_getmethods__ = {}
    for _s in [IDetector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IDetector2D, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        """
        clone(IDetector2D self) -> IDetector2D

        IDetector2D* IDetector2D::clone() const override=0

        """
        return _libBornAgainCore.IDetector2D_clone(self)

    __swig_destroy__ = _libBornAgainCore.delete_IDetector2D
    __del__ = lambda self: None

    def setDetectorParameters(self, n_x, x_min, x_max, n_y, y_min, y_max):
        """
        setDetectorParameters(IDetector2D self, size_t n_x, double x_min, double x_max, size_t n_y, double y_min, double y_max)

        void IDetector2D::setDetectorParameters(size_t n_x, double x_min, double x_max, size_t n_y, double y_min, double y_max)

        Sets detector parameters using angle ranges. 

        """
        return _libBornAgainCore.IDetector2D_setDetectorParameters(self, n_x, x_min, x_max, n_y, y_min, y_max)


    def setDetectorAxes(self, axis0, axis1):
        """
        setDetectorAxes(IDetector2D self, IAxis axis0, IAxis axis1)

        void IDetector2D::setDetectorAxes(const IAxis &axis0, const IAxis &axis1)

        Sets detector parameters using axes. 

        """
        return _libBornAgainCore.IDetector2D_setDetectorAxes(self, axis0, axis1)


    def removeMasks(self):
        """
        removeMasks(IDetector2D self)

        void IDetector2D::removeMasks()

        Removes all masks from the detector. 

        """
        return _libBornAgainCore.IDetector2D_removeMasks(self)


    def detectorMask(self):
        """
        detectorMask(IDetector2D self) -> DetectorMask

        const DetectorMask * IDetector2D::detectorMask() const override

        Returns detector masks container. 

        """
        return _libBornAgainCore.IDetector2D_detectorMask(self)


    def addMask(self, shape, mask_value=True):
        """
        addMask(IDetector2D self, IShape2D shape, bool mask_value=True)
        addMask(IDetector2D self, IShape2D shape)

        void IDetector2D::addMask(const IShape2D &shape, bool mask_value=true)

        Adds mask of given shape to the stack of detector masks. The mask value 'true' means that the channel will be excluded from the simulation. The mask which is added last has priority.

        Parameters:
        -----------

        shape: 
        The shape of mask ( Rectangle,  Polygon,  Line,  Ellipse)

        mask_value: 
        The value of mask 

        """
        return _libBornAgainCore.IDetector2D_addMask(self, shape, mask_value)


    def maskAll(self):
        """
        maskAll(IDetector2D self)

        void IDetector2D::maskAll()

        Put the mask for all detector channels (i.e. exclude whole detector from the analysis) 

        """
        return _libBornAgainCore.IDetector2D_maskAll(self)


    def regionOfInterest(self):
        """
        regionOfInterest(IDetector2D self) -> RegionOfInterest const *

        const RegionOfInterest * IDetector2D::regionOfInterest() const override

        Returns region of interest if exists. 

        """
        return _libBornAgainCore.IDetector2D_regionOfInterest(self)


    def setRegionOfInterest(self, xlow, ylow, xup, yup):
        """
        setRegionOfInterest(IDetector2D self, double xlow, double ylow, double xup, double yup)

        void IDetector2D::setRegionOfInterest(double xlow, double ylow, double xup, double yup)

        Sets rectangular region of interest with lower left and upper right corners defined. 

        """
        return _libBornAgainCore.IDetector2D_setRegionOfInterest(self, xlow, ylow, xup, yup)


    def resetRegionOfInterest(self):
        """
        resetRegionOfInterest(IDetector2D self)

        void IDetector2D::resetRegionOfInterest() override

        Resets region of interest making whole detector plane available for the simulation. 

        """
        return _libBornAgainCore.IDetector2D_resetRegionOfInterest(self)

IDetector2D_swigregister = _libBornAgainCore.IDetector2D_swigregister
IDetector2D_swigregister(IDetector2D)

class IDetectorResolution(ICloneable, INode):
    """


    Interface for detector resolution algorithms

    C++ includes: IDetectorResolution.h

    """

    __swig_setmethods__ = {}
    for _s in [ICloneable, INode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDetectorResolution, name, value)
    __swig_getmethods__ = {}
    for _s in [ICloneable, INode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IDetectorResolution, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IDetectorResolution
    __del__ = lambda self: None

    def applyDetectorResolution(self, p_intensity_map):
        """
        applyDetectorResolution(IDetectorResolution self, IntensityData p_intensity_map)

        virtual void IDetectorResolution::applyDetectorResolution(OutputData< double > *p_intensity_map) const =0

        Apply the resolution function to the intensity data. 

        """
        return _libBornAgainCore.IDetectorResolution_applyDetectorResolution(self, p_intensity_map)


    def clone(self):
        """
        clone(IDetectorResolution self) -> IDetectorResolution

        virtual IDetectorResolution* IDetectorResolution::clone() const =0

        """
        return _libBornAgainCore.IDetectorResolution_clone(self)

IDetectorResolution_swigregister = _libBornAgainCore.IDetectorResolution_swigregister
IDetectorResolution_swigregister(IDetectorResolution)

class IInterferenceFunction(ISample):
    """


    Pure virtual base class of interference functions.

    C++ includes: IInterferenceFunction.h

    """

    __swig_setmethods__ = {}
    for _s in [ISample]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IInterferenceFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [ISample]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IInterferenceFunction, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IInterferenceFunction
    __del__ = lambda self: None

    def clone(self):
        """
        clone(IInterferenceFunction self) -> IInterferenceFunction

        virtual IInterferenceFunction* IInterferenceFunction::clone() const =0

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.IInterferenceFunction_clone(self)


    def accept(self, visitor):
        """
        accept(IInterferenceFunction self, INodeVisitor visitor)

        virtual void IInterferenceFunction::accept(INodeVisitor *visitor) const =0

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.IInterferenceFunction_accept(self, visitor)


    def evaluate(self, q):
        """
        evaluate(IInterferenceFunction self, kvector_t q) -> double

        virtual double IInterferenceFunction::evaluate(const kvector_t q) const =0

        Evaluates the interference function for a given wavevector transfer (only the real x and y components are relevant) 

        """
        return _libBornAgainCore.IInterferenceFunction_evaluate(self, q)


    def kappa(self):
        """
        kappa(IInterferenceFunction self) -> double

        virtual double IInterferenceFunction::kappa() const

        Retrieves the size-distance coupling constant (default 0.0) 

        """
        return _libBornAgainCore.IInterferenceFunction_kappa(self)


    def getParticleDensity(self):
        """
        getParticleDensity(IInterferenceFunction self) -> double

        virtual double IInterferenceFunction::getParticleDensity() const

        If defined by this interference function's parameters, returns the particle density (per area). Otherwise, returns zero or a user-defined value 

        """
        return _libBornAgainCore.IInterferenceFunction_getParticleDensity(self)


    def __init__(self):
        """
        __init__(IInterferenceFunction self) -> IInterferenceFunction



        Pure virtual base class of interference functions.

        C++ includes: IInterferenceFunction.h

        """
        if self.__class__ == IInterferenceFunction:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IInterferenceFunction(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IInterferenceFunction(self)
        return weakref_proxy(self)
IInterferenceFunction_swigregister = _libBornAgainCore.IInterferenceFunction_swigregister
IInterferenceFunction_swigregister(IInterferenceFunction)

class ILayout(ISample):
    """


    Pure virtual interface class to equip a sample layer with scattering properties. Currently only inherited by  ParticleLayout; in the future also by domain structure.

    C++ includes: ILayout.h

    """

    __swig_setmethods__ = {}
    for _s in [ISample]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ILayout, name, value)
    __swig_getmethods__ = {}
    for _s in [ISample]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ILayout, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    DA = _libBornAgainCore.ILayout_DA
    SSCA = _libBornAgainCore.ILayout_SSCA
    __swig_destroy__ = _libBornAgainCore.delete_ILayout
    __del__ = lambda self: None

    def clone(self):
        """
        clone(ILayout self) -> ILayout

        virtual ILayout* ILayout::clone() const =0

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.ILayout_clone(self)


    def cloneWithOffset(self, offset):
        """
        cloneWithOffset(ILayout self, double offset) -> ILayout

        virtual ILayout* ILayout::cloneWithOffset(double offset) const =0

        """
        return _libBornAgainCore.ILayout_cloneWithOffset(self, offset)


    def accept(self, visitor):
        """
        accept(ILayout self, INodeVisitor visitor)

        virtual void ILayout::accept(INodeVisitor *visitor) const =0

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.ILayout_accept(self, visitor)


    def particles(self):
        """
        particles(ILayout self) -> SafePointerVector< IParticle const >

        virtual SafePointerVector<const IParticle> ILayout::particles() const =0

        Returns information on all particles (type and abundance) and generates new particles if an  IAbstractParticle denotes a collection 

        """
        return _libBornAgainCore.ILayout_particles(self)


    def getTotalAbundance(self):
        """
        getTotalAbundance(ILayout self) -> double

        virtual double ILayout::getTotalAbundance() const =0

        Get total abundance of all particles. 

        """
        return _libBornAgainCore.ILayout_getTotalAbundance(self)


    def totalParticleSurfaceDensity(self):
        """
        totalParticleSurfaceDensity(ILayout self) -> double

        virtual double ILayout::totalParticleSurfaceDensity() const =0

        Returns surface density of all particles. 

        """
        return _libBornAgainCore.ILayout_totalParticleSurfaceDensity(self)


    def setTotalParticleSurfaceDensity(self, particle_density):
        """
        setTotalParticleSurfaceDensity(ILayout self, double particle_density)

        virtual void ILayout::setTotalParticleSurfaceDensity(double particle_density)=0

        Sets surface density of all particles. 

        """
        return _libBornAgainCore.ILayout_setTotalParticleSurfaceDensity(self, particle_density)


    def getApproximation(self):
        """
        getApproximation(ILayout self) -> ILayout::EInterferenceApproximation

        EInterferenceApproximation ILayout::getApproximation() const

        Gets the used approximation for particles and interference functions. 

        """
        return _libBornAgainCore.ILayout_getApproximation(self)


    def setApproximation(self, approximation):
        """
        setApproximation(ILayout self, ILayout::EInterferenceApproximation approximation)

        void ILayout::setApproximation(EInterferenceApproximation approximation)

        Sets the used approximation for particles and interference functions. 

        """
        return _libBornAgainCore.ILayout_setApproximation(self, approximation)

ILayout_swigregister = _libBornAgainCore.ILayout_swigregister
ILayout_swigregister(ILayout)

class IAbstractParticle(ISample):
    """


    Interface for a generic particle.

    Inherited by  IParticle and  ParticleDistribution.

    C++ includes: IAbstractParticle.h

    """

    __swig_setmethods__ = {}
    for _s in [ISample]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAbstractParticle, name, value)
    __swig_getmethods__ = {}
    for _s in [ISample]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IAbstractParticle, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IAbstractParticle
    __del__ = lambda self: None

    def clone(self):
        """
        clone(IAbstractParticle self) -> IAbstractParticle

        virtual IAbstractParticle* IAbstractParticle::clone() const =0

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.IAbstractParticle_clone(self)


    def accept(self, visitor):
        """
        accept(IAbstractParticle self, INodeVisitor visitor)

        void IAbstractParticle::accept(INodeVisitor *visitor) const

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.IAbstractParticle_accept(self, visitor)


    def abundance(self):
        """
        abundance(IAbstractParticle self) -> double

        double IAbstractParticle::abundance() const 

        """
        return _libBornAgainCore.IAbstractParticle_abundance(self)


    def setAbundance(self, abundance):
        """
        setAbundance(IAbstractParticle self, double abundance)

        void IAbstractParticle::setAbundance(double abundance)

        Sets particle abundance.

        Parameters:
        -----------

        abundance: 
        proportion of this type of particles normalized to the total number of particles in the layout. 

        """
        return _libBornAgainCore.IAbstractParticle_setAbundance(self, abundance)


    def translate(self, translation):
        """
        translate(IAbstractParticle self, kvector_t translation)

        virtual void IAbstractParticle::translate(kvector_t translation)=0

        Translates the particle with the given vector. 

        """
        return _libBornAgainCore.IAbstractParticle_translate(self, translation)


    def rotate(self, rotation):
        """
        rotate(IAbstractParticle self, IRotation rotation)

        virtual void IAbstractParticle::rotate(const IRotation &rotation)=0

        Applies the given rotation to the particle. 

        """
        return _libBornAgainCore.IAbstractParticle_rotate(self, rotation)

IAbstractParticle_swigregister = _libBornAgainCore.IAbstractParticle_swigregister
IAbstractParticle_swigregister(IAbstractParticle)

class IParameterReal(INamed):
    """


    Pure virtual base class for parameter wrapper classes  RealParameter, ComponentParameter. Holds a pointer to the wrapped parameter, a name, and a callback function to be called when the parameter is changed. This class is templated on the data type of the wrapped parameter.

    C++ includes: IParameter.h

    """

    __swig_setmethods__ = {}
    for _s in [INamed]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IParameterReal, name, value)
    __swig_getmethods__ = {}
    for _s in [INamed]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IParameterReal, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self, *args):
        """
        clone(IParameterReal self, std::string const & new_name) -> IParameterReal
        clone(IParameterReal self) -> IParameterReal

        virtual IParameter* IParameter< T >::clone(const std::string &new_name="") const =0

        """
        return _libBornAgainCore.IParameterReal_clone(self, *args)


    def isNull(self):
        """
        isNull(IParameterReal self) -> bool

        virtual bool IParameter< T >::isNull() const

        Returns true if wrapped parameter was not initialized with proper real value. 

        """
        return _libBornAgainCore.IParameterReal_isNull(self)


    def getData(self):
        """
        getData(IParameterReal self) -> double &

        T& IParameter< T >::getData() const 

        """
        return _libBornAgainCore.IParameterReal_getData(self)


    def setData(self, data):
        """
        setData(IParameterReal self, double & data)

        void IParameter< T >::setData(T &data)

        """
        return _libBornAgainCore.IParameterReal_setData(self, data)


    def hasSameData(self, other):
        """
        hasSameData(IParameterReal self, IParameterReal other) -> bool

        bool IParameter< T >::hasSameData(const IParameter &other)

        Returns true if two parameters are pointing to the same raw data. 

        """
        return _libBornAgainCore.IParameterReal_hasSameData(self, other)

    __swig_destroy__ = _libBornAgainCore.delete_IParameterReal
    __del__ = lambda self: None
IParameterReal_swigregister = _libBornAgainCore.IParameterReal_swigregister
IParameterReal_swigregister(IParameterReal)

class ParticleLimits(_object):
    """Proxy of C++ ParticleLimits class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleLimits, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleLimits, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_bottom"] = _libBornAgainCore.ParticleLimits_m_bottom_set
    __swig_getmethods__["m_bottom"] = _libBornAgainCore.ParticleLimits_m_bottom_get
    if _newclass:
        m_bottom = _swig_property(_libBornAgainCore.ParticleLimits_m_bottom_get, _libBornAgainCore.ParticleLimits_m_bottom_set)
    __swig_setmethods__["m_top"] = _libBornAgainCore.ParticleLimits_m_top_set
    __swig_getmethods__["m_top"] = _libBornAgainCore.ParticleLimits_m_top_get
    if _newclass:
        m_top = _swig_property(_libBornAgainCore.ParticleLimits_m_top_get, _libBornAgainCore.ParticleLimits_m_top_set)

    def __init__(self):
        """__init__(ParticleLimits self) -> ParticleLimits"""
        this = _libBornAgainCore.new_ParticleLimits()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_ParticleLimits
    __del__ = lambda self: None
ParticleLimits_swigregister = _libBornAgainCore.ParticleLimits_swigregister
ParticleLimits_swigregister(ParticleLimits)

class IParticle(IAbstractParticle):
    """


    Pure virtual base class for  Particle,  ParticleComposition,  ParticleCoreShell,  MesoCrystal. Provides position/rotation and form factor. Abundance is inherited from  IAbstractParticle.

    C++ includes: IParticle.h

    """

    __swig_setmethods__ = {}
    for _s in [IAbstractParticle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IParticle, name, value)
    __swig_getmethods__ = {}
    for _s in [IAbstractParticle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IParticle, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IParticle
    __del__ = lambda self: None

    def clone(self):
        """
        clone(IParticle self) -> IParticle

        IParticle* IParticle::clone() const override=0

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.IParticle_clone(self)


    def accept(self, visitor):
        """
        accept(IParticle self, INodeVisitor visitor)

        void IParticle::accept(INodeVisitor *visitor) const override

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.IParticle_accept(self, visitor)


    def createFormFactor(self):
        """
        createFormFactor(IParticle self) -> IFormFactor

        IFormFactor * IParticle::createFormFactor() const

        Create a form factor for this particle. 

        """
        return _libBornAgainCore.IParticle_createFormFactor(self)


    def createSlicedParticle(self, limits):
        """
        createSlicedParticle(IParticle self, ZLimits limits) -> SlicedParticle

        SlicedParticle IParticle::createSlicedParticle(ZLimits limits) const

        Create a sliced form factor for this particle. 

        """
        return _libBornAgainCore.IParticle_createSlicedParticle(self, limits)


    def position(self):
        """
        position(IParticle self) -> kvector_t

        kvector_t IParticle::position() const

        Returns particle position. 

        """
        return _libBornAgainCore.IParticle_position(self)


    def setPosition(self, *args):
        """
        setPosition(IParticle self, kvector_t position)
        setPosition(IParticle self, double x, double y, double z)

        void IParticle::setPosition(double x, double y, double z)

        Sets relative position of the particle's reference point in the coordinate system of parent.

        Parameters:
        -----------

        x: 
        x-coordinate in nanometers

        y: 
        y-coordinate in nanometers

        z: 
        z-coordinate in nanometers 

        """
        return _libBornAgainCore.IParticle_setPosition(self, *args)


    def translate(self, translation):
        """
        translate(IParticle self, kvector_t translation)

        void IParticle::translate(kvector_t translation) overridefinal

        Translates the particle. 

        """
        return _libBornAgainCore.IParticle_translate(self, translation)


    def rotation(self):
        """
        rotation(IParticle self) -> IRotation

        const IRotation * IParticle::rotation() const

        Returns rotation object. 

        """
        return _libBornAgainCore.IParticle_rotation(self)


    def setRotation(self, rotation):
        """
        setRotation(IParticle self, IRotation rotation)

        void IParticle::setRotation(const IRotation &rotation)

        Sets transformation. 

        """
        return _libBornAgainCore.IParticle_setRotation(self, rotation)


    def rotate(self, rotation):
        """
        rotate(IParticle self, IRotation rotation)

        void IParticle::rotate(const IRotation &rotation) overridefinal

        Rotates the particle. 

        """
        return _libBornAgainCore.IParticle_rotate(self, rotation)


    def getChildren(self):
        """
        getChildren(IParticle self) -> swig_dummy_type_const_inode_vector

        std::vector< const INode * > IParticle::getChildren() const override

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.IParticle_getChildren(self)


    def registerAbundance(self, make_registered=True):
        """
        registerAbundance(IParticle self, bool make_registered=True)
        registerAbundance(IParticle self)

        void IParticle::registerAbundance(bool make_registered=true)

        """
        return _libBornAgainCore.IParticle_registerAbundance(self, make_registered)


    def registerPosition(self, make_registered=True):
        """
        registerPosition(IParticle self, bool make_registered=True)
        registerPosition(IParticle self)

        void IParticle::registerPosition(bool make_registered=true)

        Registers the three components of its position. 

        """
        return _libBornAgainCore.IParticle_registerPosition(self, make_registered)


    def decompose(self):
        """
        decompose(IParticle self) -> SafePointerVector< IParticle >

        SafePointerVector< IParticle > IParticle::decompose() const

        Decompose in constituent  IParticle objects. 

        """
        return _libBornAgainCore.IParticle_decompose(self)


    def bottomTopZ(self):
        """
        bottomTopZ(IParticle self) -> ParticleLimits

        ParticleLimits IParticle::bottomTopZ() const

        Top and bottom z-coordinate. 

        """
        return _libBornAgainCore.IParticle_bottomTopZ(self)

IParticle_swigregister = _libBornAgainCore.IParticle_swigregister
IParticle_swigregister(IParticle)

class IResolutionFunction2D(ICloneable, INode):
    """


    Interface providing two-dimensional resolution function.

    C++ includes: IResolutionFunction2D.h

    """

    __swig_setmethods__ = {}
    for _s in [ICloneable, INode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IResolutionFunction2D, name, value)
    __swig_getmethods__ = {}
    for _s in [ICloneable, INode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IResolutionFunction2D, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IResolutionFunction2D
    __del__ = lambda self: None

    def evaluateCDF(self, x, y):
        """
        evaluateCDF(IResolutionFunction2D self, double x, double y) -> double

        virtual double IResolutionFunction2D::evaluateCDF(double x, double y) const =0

        """
        return _libBornAgainCore.IResolutionFunction2D_evaluateCDF(self, x, y)


    def clone(self):
        """
        clone(IResolutionFunction2D self) -> IResolutionFunction2D

        virtual IResolutionFunction2D* IResolutionFunction2D::clone() const =0

        """
        return _libBornAgainCore.IResolutionFunction2D_clone(self)

IResolutionFunction2D_swigregister = _libBornAgainCore.IResolutionFunction2D_swigregister
IResolutionFunction2D_swigregister(IResolutionFunction2D)

class IRotation(ISample):
    """


    Pure virtual interface for rotations.

    C++ includes: Rotations.h

    """

    __swig_setmethods__ = {}
    for _s in [ISample]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IRotation, name, value)
    __swig_getmethods__ = {}
    for _s in [ISample]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IRotation, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def createRotation(transform):
        """createRotation(Transform3D const & transform) -> IRotation"""
        return _libBornAgainCore.IRotation_createRotation(transform)

    createRotation = staticmethod(createRotation)

    def createIdentity():
        """createIdentity() -> IRotation"""
        return _libBornAgainCore.IRotation_createIdentity()

    createIdentity = staticmethod(createIdentity)
    __swig_destroy__ = _libBornAgainCore.delete_IRotation
    __del__ = lambda self: None

    def clone(self):
        """
        clone(IRotation self) -> IRotation

        virtual IRotation* IRotation::clone() const =0

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.IRotation_clone(self)


    def createInverse(self):
        """
        createInverse(IRotation self) -> IRotation

        virtual IRotation* IRotation::createInverse() const =0

        Returns a new  IRotation object that is the current object's inverse. 

        """
        return _libBornAgainCore.IRotation_createInverse(self)


    def accept(self, visitor):
        """
        accept(IRotation self, INodeVisitor visitor)

        void IRotation::accept(INodeVisitor *visitor) const

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.IRotation_accept(self, visitor)


    def getTransform3D(self):
        """
        getTransform3D(IRotation self) -> Transform3D

        virtual Transform3D IRotation::getTransform3D() const =0

        Returns transformation. 

        """
        return _libBornAgainCore.IRotation_getTransform3D(self)


    def isIdentity(self):
        """
        isIdentity(IRotation self) -> bool

        bool IRotation::isIdentity() const

        Returns true if rotation matrix is identity matrix (no rotations) 

        """
        return _libBornAgainCore.IRotation_isIdentity(self)

IRotation_swigregister = _libBornAgainCore.IRotation_swigregister
IRotation_swigregister(IRotation)

def IRotation_createRotation(transform):
    """IRotation_createRotation(Transform3D const & transform) -> IRotation"""
    return _libBornAgainCore.IRotation_createRotation(transform)

def IRotation_createIdentity():
    """IRotation_createIdentity() -> IRotation"""
    return _libBornAgainCore.IRotation_createIdentity()


def createProduct(left, right):
    """
    createProduct(IRotation left, IRotation right) -> IRotation

    BA_CORE_API_ IRotation* createProduct(const IRotation &left, const IRotation &right)

    Returns concatenated rotation (first right, then left). 

    """
    return _libBornAgainCore.createProduct(left, right)

def IsZRotation(rot):
    """
    IsZRotation(IRotation rot) -> bool

    bool IsZRotation(const IRotation &rot)

    """
    return _libBornAgainCore.IsZRotation(rot)
class IdentityRotation(IRotation):
    """Proxy of C++ IdentityRotation class."""

    __swig_setmethods__ = {}
    for _s in [IRotation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdentityRotation, name, value)
    __swig_getmethods__ = {}
    for _s in [IRotation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IdentityRotation, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(IdentityRotation self) -> IdentityRotation

        IdentityRotation::IdentityRotation()=default

        """
        this = _libBornAgainCore.new_IdentityRotation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(IdentityRotation self) -> IdentityRotation

        IdentityRotation* IdentityRotation::clone() const

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.IdentityRotation_clone(self)


    def createInverse(self):
        """
        createInverse(IdentityRotation self) -> IdentityRotation

        IdentityRotation* IdentityRotation::createInverse() const

        Returns a new  IRotation object that is the current object's inverse. 

        """
        return _libBornAgainCore.IdentityRotation_createInverse(self)


    def accept(self, visitor):
        """
        accept(IdentityRotation self, INodeVisitor visitor)

        void IdentityRotation::accept(INodeVisitor *visitor) const

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.IdentityRotation_accept(self, visitor)


    def getTransform3D(self):
        """
        getTransform3D(IdentityRotation self) -> Transform3D

        Transform3D IdentityRotation::getTransform3D() const

        Returns transformation. 

        """
        return _libBornAgainCore.IdentityRotation_getTransform3D(self)


    def isIdentity(self):
        """
        isIdentity(IdentityRotation self) -> bool

        bool IdentityRotation::isIdentity() const

        Returns true if rotation matrix is identity matrix (no rotations) 

        """
        return _libBornAgainCore.IdentityRotation_isIdentity(self)

    __swig_destroy__ = _libBornAgainCore.delete_IdentityRotation
    __del__ = lambda self: None
IdentityRotation_swigregister = _libBornAgainCore.IdentityRotation_swigregister
IdentityRotation_swigregister(IdentityRotation)

class RotationX(IRotation):
    """Proxy of C++ RotationX class."""

    __swig_setmethods__ = {}
    for _s in [IRotation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RotationX, name, value)
    __swig_getmethods__ = {}
    for _s in [IRotation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotationX, name)
    __repr__ = _swig_repr

    def __init__(self, angle):
        """
        __init__(RotationX self, double angle) -> RotationX

        RotationX::RotationX(double angle)

        Constructor of rotation around x-axis

        Parameters:
        -----------

        angle: 
        rotation angle around x-axis in radians 

        """
        this = _libBornAgainCore.new_RotationX(angle)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(RotationX self) -> RotationX

        RotationX* RotationX::clone() const

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.RotationX_clone(self)


    def createInverse(self):
        """
        createInverse(RotationX self) -> RotationX

        RotationX* RotationX::createInverse() const

        Returns a new  IRotation object that is the current object's inverse. 

        """
        return _libBornAgainCore.RotationX_createInverse(self)


    def accept(self, visitor):
        """
        accept(RotationX self, INodeVisitor visitor)

        void RotationX::accept(INodeVisitor *visitor) const

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.RotationX_accept(self, visitor)


    def getAngle(self):
        """
        getAngle(RotationX self) -> double

        double RotationX::getAngle() const 

        """
        return _libBornAgainCore.RotationX_getAngle(self)


    def getTransform3D(self):
        """
        getTransform3D(RotationX self) -> Transform3D

        Transform3D RotationX::getTransform3D() const

        Returns transformation. 

        """
        return _libBornAgainCore.RotationX_getTransform3D(self)

    __swig_destroy__ = _libBornAgainCore.delete_RotationX
    __del__ = lambda self: None
RotationX_swigregister = _libBornAgainCore.RotationX_swigregister
RotationX_swigregister(RotationX)

class RotationY(IRotation):
    """Proxy of C++ RotationY class."""

    __swig_setmethods__ = {}
    for _s in [IRotation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RotationY, name, value)
    __swig_getmethods__ = {}
    for _s in [IRotation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotationY, name)
    __repr__ = _swig_repr

    def __init__(self, angle):
        """
        __init__(RotationY self, double angle) -> RotationY

        RotationY::RotationY(double angle)

        Constructor of rotation around y-axis

        Parameters:
        -----------

        angle: 
        rotation angle around y-axis in radians 

        """
        this = _libBornAgainCore.new_RotationY(angle)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(RotationY self) -> RotationY

        RotationY* RotationY::clone() const

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.RotationY_clone(self)


    def createInverse(self):
        """
        createInverse(RotationY self) -> RotationY

        RotationY* RotationY::createInverse() const

        Returns a new  IRotation object that is the current object's inverse. 

        """
        return _libBornAgainCore.RotationY_createInverse(self)


    def accept(self, visitor):
        """
        accept(RotationY self, INodeVisitor visitor)

        void RotationY::accept(INodeVisitor *visitor) const

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.RotationY_accept(self, visitor)


    def getAngle(self):
        """
        getAngle(RotationY self) -> double

        double RotationY::getAngle() const 

        """
        return _libBornAgainCore.RotationY_getAngle(self)


    def getTransform3D(self):
        """
        getTransform3D(RotationY self) -> Transform3D

        Transform3D RotationY::getTransform3D() const

        Returns transformation. 

        """
        return _libBornAgainCore.RotationY_getTransform3D(self)

    __swig_destroy__ = _libBornAgainCore.delete_RotationY
    __del__ = lambda self: None
RotationY_swigregister = _libBornAgainCore.RotationY_swigregister
RotationY_swigregister(RotationY)

class RotationZ(IRotation):
    """Proxy of C++ RotationZ class."""

    __swig_setmethods__ = {}
    for _s in [IRotation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RotationZ, name, value)
    __swig_getmethods__ = {}
    for _s in [IRotation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotationZ, name)
    __repr__ = _swig_repr

    def __init__(self, angle=0.0):
        """
        __init__(RotationZ self, double angle=0.0) -> RotationZ
        __init__(RotationZ self) -> RotationZ

        RotationZ::RotationZ(double angle=0.0)

        Constructor of rotation around z-axis

        Parameters:
        -----------

        angle: 
        rotation angle around z-axis in radians 

        """
        this = _libBornAgainCore.new_RotationZ(angle)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(RotationZ self) -> RotationZ

        RotationZ* RotationZ::clone() const

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.RotationZ_clone(self)


    def createInverse(self):
        """
        createInverse(RotationZ self) -> RotationZ

        RotationZ* RotationZ::createInverse() const

        Returns a new  IRotation object that is the current object's inverse. 

        """
        return _libBornAgainCore.RotationZ_createInverse(self)


    def accept(self, visitor):
        """
        accept(RotationZ self, INodeVisitor visitor)

        void RotationZ::accept(INodeVisitor *visitor) const

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.RotationZ_accept(self, visitor)


    def getAngle(self):
        """
        getAngle(RotationZ self) -> double

        double RotationZ::getAngle() const 

        """
        return _libBornAgainCore.RotationZ_getAngle(self)


    def getTransform3D(self):
        """
        getTransform3D(RotationZ self) -> Transform3D

        Transform3D RotationZ::getTransform3D() const

        Returns transformation. 

        """
        return _libBornAgainCore.RotationZ_getTransform3D(self)

    __swig_destroy__ = _libBornAgainCore.delete_RotationZ
    __del__ = lambda self: None
RotationZ_swigregister = _libBornAgainCore.RotationZ_swigregister
RotationZ_swigregister(RotationZ)

class RotationEuler(IRotation):
    """Proxy of C++ RotationEuler class."""

    __swig_setmethods__ = {}
    for _s in [IRotation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RotationEuler, name, value)
    __swig_getmethods__ = {}
    for _s in [IRotation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotationEuler, name)
    __repr__ = _swig_repr

    def __init__(self, alpha, beta, gamma):
        """
        __init__(RotationEuler self, double alpha, double beta, double gamma) -> RotationEuler

        RotationEuler::RotationEuler(double alpha, double beta, double gamma)

        Constructor of Euler rotation (sequence of three rotations following Euler angles notation z-x'-z').

        Parameters:
        -----------

        alpha: 
        first Euler angle in radians

        beta: 
        second Euler angle in radians

        gamma: 
        third Euler angle in radians 

        """
        this = _libBornAgainCore.new_RotationEuler(alpha, beta, gamma)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(RotationEuler self) -> RotationEuler

        RotationEuler* RotationEuler::clone() const

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.RotationEuler_clone(self)


    def createInverse(self):
        """
        createInverse(RotationEuler self) -> IRotation

        IRotation * RotationEuler::createInverse() const

        Returns a new  IRotation object that is the current object's inverse. 

        """
        return _libBornAgainCore.RotationEuler_createInverse(self)


    def accept(self, visitor):
        """
        accept(RotationEuler self, INodeVisitor visitor)

        void RotationEuler::accept(INodeVisitor *visitor) const

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.RotationEuler_accept(self, visitor)


    def getAlpha(self):
        """
        getAlpha(RotationEuler self) -> double

        double RotationEuler::getAlpha() const 

        """
        return _libBornAgainCore.RotationEuler_getAlpha(self)


    def getBeta(self):
        """
        getBeta(RotationEuler self) -> double

        double RotationEuler::getBeta() const 

        """
        return _libBornAgainCore.RotationEuler_getBeta(self)


    def getGamma(self):
        """
        getGamma(RotationEuler self) -> double

        double RotationEuler::getGamma() const 

        """
        return _libBornAgainCore.RotationEuler_getGamma(self)


    def getTransform3D(self):
        """
        getTransform3D(RotationEuler self) -> Transform3D

        Transform3D RotationEuler::getTransform3D() const

        Returns transformation. 

        """
        return _libBornAgainCore.RotationEuler_getTransform3D(self)

    __swig_destroy__ = _libBornAgainCore.delete_RotationEuler
    __del__ = lambda self: None
RotationEuler_swigregister = _libBornAgainCore.RotationEuler_swigregister
RotationEuler_swigregister(RotationEuler)

class ISelectionRule(_object):
    """


    Pure virtual base class for selection rules.

    C++ includes: ISelectionRule.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISelectionRule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ISelectionRule, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_ISelectionRule
    __del__ = lambda self: None

    def clone(self):
        """
        clone(ISelectionRule self) -> ISelectionRule

        virtual ISelectionRule* ISelectionRule::clone() const =0

        """
        return _libBornAgainCore.ISelectionRule_clone(self)


    def coordinateSelected(self, coordinate):
        """
        coordinateSelected(ISelectionRule self, ivector_t const & coordinate) -> bool

        virtual bool ISelectionRule::coordinateSelected(const ivector_t &coordinate) const =0

        """
        return _libBornAgainCore.ISelectionRule_coordinateSelected(self, coordinate)

ISelectionRule_swigregister = _libBornAgainCore.ISelectionRule_swigregister
ISelectionRule_swigregister(ISelectionRule)

class SimpleSelectionRule(ISelectionRule):
    """


    Selection rule (v*q)modulus!=0, defined by vector v(a,b,c) and modulus.

    C++ includes: ISelectionRule.h

    """

    __swig_setmethods__ = {}
    for _s in [ISelectionRule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleSelectionRule, name, value)
    __swig_getmethods__ = {}
    for _s in [ISelectionRule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleSelectionRule, name)
    __repr__ = _swig_repr

    def __init__(self, a, b, c, modulus):
        """
        __init__(SimpleSelectionRule self, int a, int b, int c, int modulus) -> SimpleSelectionRule

        SimpleSelectionRule::SimpleSelectionRule(int a, int b, int c, int modulus)

        """
        this = _libBornAgainCore.new_SimpleSelectionRule(a, b, c, modulus)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_SimpleSelectionRule
    __del__ = lambda self: None

    def clone(self):
        """
        clone(SimpleSelectionRule self) -> SimpleSelectionRule

        SimpleSelectionRule * SimpleSelectionRule::clone() const 

        """
        return _libBornAgainCore.SimpleSelectionRule_clone(self)


    def coordinateSelected(self, coordinate):
        """
        coordinateSelected(SimpleSelectionRule self, ivector_t const & coordinate) -> bool

        bool SimpleSelectionRule::coordinateSelected(const ivector_t &coordinate) const 

        """
        return _libBornAgainCore.SimpleSelectionRule_coordinateSelected(self, coordinate)

SimpleSelectionRule_swigregister = _libBornAgainCore.SimpleSelectionRule_swigregister
SimpleSelectionRule_swigregister(SimpleSelectionRule)

class Instrument(INode):
    """


    Assembles beam, detector and their relative positions wrt the sample.

    C++ includes: Instrument.h

    """

    __swig_setmethods__ = {}
    for _s in [INode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Instrument, name, value)
    __swig_getmethods__ = {}
    for _s in [INode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Instrument, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Instrument self) -> Instrument
        __init__(Instrument self, Instrument other) -> Instrument

        Instrument::Instrument(const Instrument &other)

        """
        this = _libBornAgainCore.new_Instrument(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_Instrument
    __del__ = lambda self: None

    def accept(self, visitor):
        """
        accept(Instrument self, INodeVisitor visitor)

        void Instrument::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.Instrument_accept(self, visitor)


    def getBeam(self, *args):
        """
        getBeam(Instrument self) -> Beam
        getBeam(Instrument self) -> Beam

        const Beam& Instrument::getBeam() const 

        """
        return _libBornAgainCore.Instrument_getBeam(self, *args)


    def setBeam(self, beam):
        """
        setBeam(Instrument self, Beam beam)

        void Instrument::setBeam(const Beam &beam)

        """
        return _libBornAgainCore.Instrument_setBeam(self, beam)


    def setBeamParameters(self, wavelength, alpha_i, phi_i):
        """
        setBeamParameters(Instrument self, double wavelength, double alpha_i, double phi_i)

        void Instrument::setBeamParameters(double wavelength, double alpha_i, double phi_i)

        Sets the beam wavelength and incoming angles. 

        """
        return _libBornAgainCore.Instrument_setBeamParameters(self, wavelength, alpha_i, phi_i)


    def setBeamIntensity(self, intensity):
        """
        setBeamIntensity(Instrument self, double intensity)

        void Instrument::setBeamIntensity(double intensity)

        Sets the beam's intensity. 

        """
        return _libBornAgainCore.Instrument_setBeamIntensity(self, intensity)


    def setBeamPolarization(self, bloch_vector):
        """
        setBeamPolarization(Instrument self, kvector_t bloch_vector)

        void Instrument::setBeamPolarization(const kvector_t bloch_vector)

        Sets the beam's polarization according to the given Bloch vector. 

        """
        return _libBornAgainCore.Instrument_setBeamPolarization(self, bloch_vector)


    def getBeamIntensity(self):
        """
        getBeamIntensity(Instrument self) -> double

        double Instrument::getBeamIntensity() const

        Returns the beam's intensity. 

        """
        return _libBornAgainCore.Instrument_getBeamIntensity(self)


    def getDetector(self, *args):
        """
        getDetector(Instrument self) -> IDetector
        getDetector(Instrument self) -> IDetector

        IDetector * Instrument::getDetector()

        """
        return _libBornAgainCore.Instrument_getDetector(self, *args)


    def getDetectorMask(self):
        """
        getDetectorMask(Instrument self) -> DetectorMask

        const DetectorMask * Instrument::getDetectorMask() const 

        """
        return _libBornAgainCore.Instrument_getDetectorMask(self)


    def getDetectorAxis(self, index):
        """
        getDetectorAxis(Instrument self, size_t index) -> IAxis

        const IAxis & Instrument::getDetectorAxis(size_t index) const

        Returns a detector axis. 

        """
        return _libBornAgainCore.Instrument_getDetectorAxis(self, index)


    def getDetectorDimension(self):
        """
        getDetectorDimension(Instrument self) -> size_t

        size_t Instrument::getDetectorDimension() const

        Returns the detector's dimension. 

        """
        return _libBornAgainCore.Instrument_getDetectorDimension(self)


    def setDetector(self, detector):
        """
        setDetector(Instrument self, IDetector detector)

        void Instrument::setDetector(const IDetector &detector)

        Sets the detector (axes can be overwritten later) 

        """
        return _libBornAgainCore.Instrument_setDetector(self, detector)


    def setDetectorResolutionFunction(self, p_resolution_function):
        """
        setDetectorResolutionFunction(Instrument self, IResolutionFunction2D p_resolution_function)

        void Instrument::setDetectorResolutionFunction(const IResolutionFunction2D &p_resolution_function)

        Sets detector resolution function. 

        """
        return _libBornAgainCore.Instrument_setDetectorResolutionFunction(self, p_resolution_function)


    def removeDetectorResolution(self):
        """
        removeDetectorResolution(Instrument self)

        void Instrument::removeDetectorResolution()

        Removes detector resolution function. 

        """
        return _libBornAgainCore.Instrument_removeDetectorResolution(self)


    def setAnalyzerProperties(self, direction, efficiency, total_transmission):
        """
        setAnalyzerProperties(Instrument self, kvector_t direction, double efficiency, double total_transmission)

        void Instrument::setAnalyzerProperties(const kvector_t direction, double efficiency, double total_transmission)

        Sets the polarization analyzer characteristics of the detector. 

        """
        return _libBornAgainCore.Instrument_setAnalyzerProperties(self, direction, efficiency, total_transmission)


    def applyDetectorResolution(self, p_intensity_map):
        """
        applyDetectorResolution(Instrument self, IntensityData p_intensity_map)

        void Instrument::applyDetectorResolution(OutputData< double > *p_intensity_map) const

        apply the detector resolution to the given intensity map 

        """
        return _libBornAgainCore.Instrument_applyDetectorResolution(self, p_intensity_map)


    def createDetectorIntensity(self, *args):
        """
        createDetectorIntensity(Instrument self, std::vector< SimulationElement,std::allocator< SimulationElement > > const & elements, AxesUnits units) -> IntensityData
        createDetectorIntensity(Instrument self, std::vector< SimulationElement,std::allocator< SimulationElement > > const & elements) -> IntensityData

        OutputData< double > * Instrument::createDetectorIntensity(const std::vector< SimulationElement > &elements, AxesUnits units=AxesUnits::DEFAULT) const

        Returns new intensity map with detector resolution applied and axes in requested units. 

        """
        return _libBornAgainCore.Instrument_createDetectorIntensity(self, *args)


    def createDetectorMap(self, *args):
        """
        createDetectorMap(Instrument self, AxesUnits units) -> IntensityData
        createDetectorMap(Instrument self) -> IntensityData

        OutputData< double > * Instrument::createDetectorMap(AxesUnits units=AxesUnits::DEFAULT) const

        Returns empty detector map in given axes units. 

        """
        return _libBornAgainCore.Instrument_createDetectorMap(self, *args)


    def initDetector(self):
        """
        initDetector(Instrument self)

        void Instrument::initDetector()

        init detector with beam settings 

        """
        return _libBornAgainCore.Instrument_initDetector(self)


    def getChildren(self):
        """
        getChildren(Instrument self) -> swig_dummy_type_const_inode_vector

        std::vector< const INode * > Instrument::getChildren() const

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.Instrument_getChildren(self)

Instrument_swigregister = _libBornAgainCore.Instrument_swigregister
Instrument_swigregister(Instrument)


def RelativeDifference(dat, ref):
    """
    RelativeDifference(SimulationResult dat, SimulationResult ref) -> double

    double IntensityDataFunctions::RelativeDifference(const SimulationResult &dat, const SimulationResult &ref)

    Returns sum of relative differences between each pair of elements: (a, b) -> 2*abs(a - b)/(a + b) ( and zero if a-b=0 )

    Returns sum of relative differences between each pair of elements: (a, b) -> 2*abs(a - b)/(|a| + |b|) ( and zero if a=b=0 within epsilon ) 

    """
    return _libBornAgainCore.RelativeDifference(dat, ref)

def getRelativeDifference(*args):
    """
    getRelativeDifference(IntensityData dat, IntensityData ref) -> double
    getRelativeDifference(IHistogram dat, IHistogram ref) -> double

    double IntensityDataFunctions::getRelativeDifference(const IHistogram &dat, const IHistogram &ref)

    """
    return _libBornAgainCore.getRelativeDifference(*args)

def coordinateToBinf(*args):
    """
    coordinateToBinf(double coordinate, IAxis axis) -> double
    coordinateToBinf(double & x, double & y, IntensityData data)

    void IntensityDataFunctions::coordinateToBinf(double &x, double &y, const OutputData< double > &data)

    Transforms x,y coordinate from  OutputData axes coordinates to bin-fraction-coordinates. 

    """
    return _libBornAgainCore.coordinateToBinf(*args)

def coordinateFromBinf(*args):
    """
    coordinateFromBinf(double value, IAxis axis) -> double
    coordinateFromBinf(double & x, double & y, IntensityData data)

    void IntensityDataFunctions::coordinateFromBinf(double &x, double &y, const OutputData< double > &data)

    Transforms x,y coordinate from bin-fraction-coordinates to  OutputData's axes coordinates. 

    """
    return _libBornAgainCore.coordinateFromBinf(*args)

def create2DArrayfromOutputData(data):
    """
    create2DArrayfromOutputData(IntensityData data) -> vdouble2d_t

    std::vector< std::vector< double > > IntensityDataFunctions::create2DArrayfromOutputData(const OutputData< double > &data)

    Creates a vector of vectors of double (2D Array) from  OutputData. 

    """
    return _libBornAgainCore.create2DArrayfromOutputData(data)

def FT2DArray(signal):
    """
    FT2DArray(vdouble2d_t signal) -> vdouble2d_t

    std::vector< std::vector< double > > IntensityDataFunctions::FT2DArray(const std::vector< std::vector< double >> &signal)

    Creates a Fourier Transform of a 2D Array (vector of vectors). 

    """
    return _libBornAgainCore.FT2DArray(signal)
class IntensityDataIOFactory(_object):
    """


    Provides users with possibility to read and write IntensityData from/to files in different format. Type of the file will be deduced from file name. *.txt - ASCII file with 2D array [nrow][ncol], layout as in numpy. *.int -  BornAgain internal ASCII format. *.tif - 32-bits tiff file. If file name ends woth "*.gz" or "*.bz2" the file will be zipped on the fly using appropriate algorithm. Usage:

    C++ includes: IntensityDataIOFactory.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntensityDataIOFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntensityDataIOFactory, name)
    __repr__ = _swig_repr

    def readOutputData(file_name):
        """readOutputData(std::string const & file_name) -> IntensityData"""
        return _libBornAgainCore.IntensityDataIOFactory_readOutputData(file_name)

    readOutputData = staticmethod(readOutputData)

    def readIntensityData(file_name):
        """readIntensityData(std::string const & file_name) -> IHistogram"""
        return _libBornAgainCore.IntensityDataIOFactory_readIntensityData(file_name)

    readIntensityData = staticmethod(readIntensityData)

    def writeOutputData(data, file_name):
        """writeOutputData(IntensityData data, std::string const & file_name)"""
        return _libBornAgainCore.IntensityDataIOFactory_writeOutputData(data, file_name)

    writeOutputData = staticmethod(writeOutputData)

    def writeIntensityData(histogram, file_name):
        """writeIntensityData(IHistogram histogram, std::string const & file_name)"""
        return _libBornAgainCore.IntensityDataIOFactory_writeIntensityData(histogram, file_name)

    writeIntensityData = staticmethod(writeIntensityData)

    def writeSimulationResult(result, file_name):
        """writeSimulationResult(SimulationResult result, std::string const & file_name)"""
        return _libBornAgainCore.IntensityDataIOFactory_writeSimulationResult(result, file_name)

    writeSimulationResult = staticmethod(writeSimulationResult)

    def __init__(self):
        """
        __init__(IntensityDataIOFactory self) -> IntensityDataIOFactory



        Provides users with possibility to read and write IntensityData from/to files in different format. Type of the file will be deduced from file name. *.txt - ASCII file with 2D array [nrow][ncol], layout as in numpy. *.int -  BornAgain internal ASCII format. *.tif - 32-bits tiff file. If file name ends woth "*.gz" or "*.bz2" the file will be zipped on the fly using appropriate algorithm. Usage:

        C++ includes: IntensityDataIOFactory.h

        """
        this = _libBornAgainCore.new_IntensityDataIOFactory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_IntensityDataIOFactory
    __del__ = lambda self: None
IntensityDataIOFactory_swigregister = _libBornAgainCore.IntensityDataIOFactory_swigregister
IntensityDataIOFactory_swigregister(IntensityDataIOFactory)

def IntensityDataIOFactory_readOutputData(file_name):
    """IntensityDataIOFactory_readOutputData(std::string const & file_name) -> IntensityData"""
    return _libBornAgainCore.IntensityDataIOFactory_readOutputData(file_name)

def IntensityDataIOFactory_readIntensityData(file_name):
    """IntensityDataIOFactory_readIntensityData(std::string const & file_name) -> IHistogram"""
    return _libBornAgainCore.IntensityDataIOFactory_readIntensityData(file_name)

def IntensityDataIOFactory_writeOutputData(data, file_name):
    """IntensityDataIOFactory_writeOutputData(IntensityData data, std::string const & file_name)"""
    return _libBornAgainCore.IntensityDataIOFactory_writeOutputData(data, file_name)

def IntensityDataIOFactory_writeIntensityData(histogram, file_name):
    """IntensityDataIOFactory_writeIntensityData(IHistogram histogram, std::string const & file_name)"""
    return _libBornAgainCore.IntensityDataIOFactory_writeIntensityData(histogram, file_name)

def IntensityDataIOFactory_writeSimulationResult(result, file_name):
    """IntensityDataIOFactory_writeSimulationResult(SimulationResult result, std::string const & file_name)"""
    return _libBornAgainCore.IntensityDataIOFactory_writeSimulationResult(result, file_name)

class InterferenceFunction1DLattice(IInterferenceFunction):
    """


    Interference function of 1D lattice.

    C++ includes: InterferenceFunction1DLattice.h

    """

    __swig_setmethods__ = {}
    for _s in [IInterferenceFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterferenceFunction1DLattice, name, value)
    __swig_getmethods__ = {}
    for _s in [IInterferenceFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InterferenceFunction1DLattice, name)
    __repr__ = _swig_repr

    def __init__(self, length, xi):
        """
        __init__(InterferenceFunction1DLattice self, double length, double xi) -> InterferenceFunction1DLattice

        InterferenceFunction1DLattice::InterferenceFunction1DLattice(double length, double xi)

        Constructor of interference function of one-dimensional lattice.

        Parameters:
        -----------

        length: 
        lattice length in nanometers

        xi: 
        rotation of lattice with respect to x-axis in radians 

        """
        this = _libBornAgainCore.new_InterferenceFunction1DLattice(length, xi)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_InterferenceFunction1DLattice
    __del__ = lambda self: None

    def clone(self):
        """
        clone(InterferenceFunction1DLattice self) -> InterferenceFunction1DLattice

        InterferenceFunction1DLattice * InterferenceFunction1DLattice::clone() const final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.InterferenceFunction1DLattice_clone(self)


    def accept(self, visitor):
        """
        accept(InterferenceFunction1DLattice self, INodeVisitor visitor)

        void InterferenceFunction1DLattice::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.InterferenceFunction1DLattice_accept(self, visitor)


    def setDecayFunction(self, decay):
        """
        setDecayFunction(InterferenceFunction1DLattice self, IFTDecayFunction1D decay)

        void InterferenceFunction1DLattice::setDecayFunction(const IFTDecayFunction1D &decay)

        Sets one-dimensional decay function.

        Parameters:
        -----------

        decay: 
        one-dimensional decay function in reciprocal space 

        """
        return _libBornAgainCore.InterferenceFunction1DLattice_setDecayFunction(self, decay)


    def getLatticeParameters(self):
        """
        getLatticeParameters(InterferenceFunction1DLattice self) -> Lattice1DParameters

        Lattice1DParameters InterferenceFunction1DLattice::getLatticeParameters() const 

        """
        return _libBornAgainCore.InterferenceFunction1DLattice_getLatticeParameters(self)


    def evaluate(self, q):
        """
        evaluate(InterferenceFunction1DLattice self, kvector_t q) -> double

        double InterferenceFunction1DLattice::evaluate(const kvector_t q) const final

        Evaluates the interference function for a given wavevector transfer (only the real x and y components are relevant) 

        """
        return _libBornAgainCore.InterferenceFunction1DLattice_evaluate(self, q)


    def getChildren(self):
        """
        getChildren(InterferenceFunction1DLattice self) -> swig_dummy_type_const_inode_vector

        std::vector< const INode * > InterferenceFunction1DLattice::getChildren() const override

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.InterferenceFunction1DLattice_getChildren(self)

InterferenceFunction1DLattice_swigregister = _libBornAgainCore.InterferenceFunction1DLattice_swigregister
InterferenceFunction1DLattice_swigregister(InterferenceFunction1DLattice)

class InterferenceFunctionRadialParaCrystal(IInterferenceFunction):
    """


    Interference function of radial paracrystal.

    C++ includes: InterferenceFunctionRadialParaCrystal.h

    """

    __swig_setmethods__ = {}
    for _s in [IInterferenceFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterferenceFunctionRadialParaCrystal, name, value)
    __swig_getmethods__ = {}
    for _s in [IInterferenceFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InterferenceFunctionRadialParaCrystal, name)
    __repr__ = _swig_repr

    def __init__(self, peak_distance, damping_length=0.0):
        """
        __init__(InterferenceFunctionRadialParaCrystal self, double peak_distance, double damping_length=0.0) -> InterferenceFunctionRadialParaCrystal
        __init__(InterferenceFunctionRadialParaCrystal self, double peak_distance) -> InterferenceFunctionRadialParaCrystal

        InterferenceFunctionRadialParaCrystal::InterferenceFunctionRadialParaCrystal(double peak_distance, double damping_length=0.0)

        Constructor of interference function of radial paracrystal.

        Parameters:
        -----------

        peak_distance: 
        average distance to the next neighbor in nanometers

        damping_length: 
        the damping (coherence) length of the paracrystal in nanometers 

        """
        this = _libBornAgainCore.new_InterferenceFunctionRadialParaCrystal(peak_distance, damping_length)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(InterferenceFunctionRadialParaCrystal self) -> InterferenceFunctionRadialParaCrystal

        InterferenceFunctionRadialParaCrystal * InterferenceFunctionRadialParaCrystal::clone() const final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_clone(self)


    def accept(self, visitor):
        """
        accept(InterferenceFunctionRadialParaCrystal self, INodeVisitor visitor)

        void InterferenceFunctionRadialParaCrystal::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_accept(self, visitor)


    def setKappa(self, kappa):
        """
        setKappa(InterferenceFunctionRadialParaCrystal self, double kappa)

        void InterferenceFunctionRadialParaCrystal::setKappa(double kappa)

        Sets size spacing coupling parameter of the Size Spacing Correlation Approximation.

        Parameters:
        -----------

        size: 
        spacing coupling parameter 

        """
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_setKappa(self, kappa)


    def kappa(self):
        """
        kappa(InterferenceFunctionRadialParaCrystal self) -> double

        double InterferenceFunctionRadialParaCrystal::kappa() const final

        Retrieves the size-distance coupling constant (default 0.0) 

        """
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_kappa(self)


    def setDomainSize(self, size):
        """
        setDomainSize(InterferenceFunctionRadialParaCrystal self, double size)

        void InterferenceFunctionRadialParaCrystal::setDomainSize(double size)

        Sets domain size (finite size corrections).

        Parameters:
        -----------

        size: 
        size of coherence domain along the lattice main axis in nanometers 

        """
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_setDomainSize(self, size)


    def domainSize(self):
        """
        domainSize(InterferenceFunctionRadialParaCrystal self) -> double

        double InterferenceFunctionRadialParaCrystal::domainSize() const 

        """
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_domainSize(self)


    def evaluate(self, q):
        """
        evaluate(InterferenceFunctionRadialParaCrystal self, kvector_t q) -> double

        double InterferenceFunctionRadialParaCrystal::evaluate(const kvector_t q) const final

        Evaluates the interference function for a given wavevector transfer (only the real x and y components are relevant) 

        """
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_evaluate(self, q)


    def FTPDF(self, qpar):
        """
        FTPDF(InterferenceFunctionRadialParaCrystal self, double qpar) -> complex_t

        complex_t InterferenceFunctionRadialParaCrystal::FTPDF(double qpar) const 

        """
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_FTPDF(self, qpar)


    def setProbabilityDistribution(self, pdf):
        """
        setProbabilityDistribution(InterferenceFunctionRadialParaCrystal self, IFTDistribution1D pdf)

        void InterferenceFunctionRadialParaCrystal::setProbabilityDistribution(const IFTDistribution1D &pdf)

        Sets one-dimensional probability distribution.

        Parameters:
        -----------

        pdf: 
        probability distribution (Fourier transform of probability density) 

        """
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_setProbabilityDistribution(self, pdf)


    def peakDistance(self):
        """
        peakDistance(InterferenceFunctionRadialParaCrystal self) -> double

        double InterferenceFunctionRadialParaCrystal::peakDistance() const 

        """
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_peakDistance(self)


    def dampingLength(self):
        """
        dampingLength(InterferenceFunctionRadialParaCrystal self) -> double

        double InterferenceFunctionRadialParaCrystal::dampingLength() const 

        """
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_dampingLength(self)


    def getChildren(self):
        """
        getChildren(InterferenceFunctionRadialParaCrystal self) -> swig_dummy_type_const_inode_vector

        std::vector< const INode * > InterferenceFunctionRadialParaCrystal::getChildren() const override

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_getChildren(self)

    __swig_destroy__ = _libBornAgainCore.delete_InterferenceFunctionRadialParaCrystal
    __del__ = lambda self: None
InterferenceFunctionRadialParaCrystal_swigregister = _libBornAgainCore.InterferenceFunctionRadialParaCrystal_swigregister
InterferenceFunctionRadialParaCrystal_swigregister(InterferenceFunctionRadialParaCrystal)

class InterferenceFunction2DLattice(IInterferenceFunction):
    """


    Interference function of 2D lattice.

    C++ includes: InterferenceFunction2DLattice.h

    """

    __swig_setmethods__ = {}
    for _s in [IInterferenceFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterferenceFunction2DLattice, name, value)
    __swig_getmethods__ = {}
    for _s in [IInterferenceFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InterferenceFunction2DLattice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(InterferenceFunction2DLattice self, Lattice2D lattice) -> InterferenceFunction2DLattice
        __init__(InterferenceFunction2DLattice self, double length_1, double length_2, double alpha, double xi=0.0) -> InterferenceFunction2DLattice
        __init__(InterferenceFunction2DLattice self, double length_1, double length_2, double alpha) -> InterferenceFunction2DLattice

        InterferenceFunction2DLattice::InterferenceFunction2DLattice(double length_1, double length_2, double alpha, double xi=0.0)

        Constructor of two-dimensional interference function.

        Parameters:
        -----------

        length_1: 
        length of first lattice vector in nanometers

        length_2: 
        length of second lattice vector in nanometers

        alpha: 
        angle between lattice vectors in radians

        xi: 
        rotation of lattice with respect to x-axis (beam direction) in radians 

        """
        this = _libBornAgainCore.new_InterferenceFunction2DLattice(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_InterferenceFunction2DLattice
    __del__ = lambda self: None

    def clone(self):
        """
        clone(InterferenceFunction2DLattice self) -> InterferenceFunction2DLattice

        InterferenceFunction2DLattice * InterferenceFunction2DLattice::clone() const final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.InterferenceFunction2DLattice_clone(self)


    def accept(self, visitor):
        """
        accept(InterferenceFunction2DLattice self, INodeVisitor visitor)

        void InterferenceFunction2DLattice::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.InterferenceFunction2DLattice_accept(self, visitor)


    def createSquare(lattice_length, xi=0.0):
        """
        createSquare(double lattice_length, double xi=0.0) -> InterferenceFunction2DLattice
        createSquare(double lattice_length) -> InterferenceFunction2DLattice
        """
        return _libBornAgainCore.InterferenceFunction2DLattice_createSquare(lattice_length, xi)

    createSquare = staticmethod(createSquare)

    def createHexagonal(lattice_length, xi=0.0):
        """
        createHexagonal(double lattice_length, double xi=0.0) -> InterferenceFunction2DLattice
        createHexagonal(double lattice_length) -> InterferenceFunction2DLattice
        """
        return _libBornAgainCore.InterferenceFunction2DLattice_createHexagonal(lattice_length, xi)

    createHexagonal = staticmethod(createHexagonal)

    def setDecayFunction(self, decay):
        """
        setDecayFunction(InterferenceFunction2DLattice self, IFTDecayFunction2D decay)

        void InterferenceFunction2DLattice::setDecayFunction(const IFTDecayFunction2D &decay)

        Sets two-dimensional decay function.

        Parameters:
        -----------

        decay: 
        two-dimensional decay function in reciprocal space 

        """
        return _libBornAgainCore.InterferenceFunction2DLattice_setDecayFunction(self, decay)


    def evaluate(self, q):
        """
        evaluate(InterferenceFunction2DLattice self, kvector_t q) -> double

        double InterferenceFunction2DLattice::evaluate(const kvector_t q) const final

        Evaluates the interference function for a given wavevector transfer (only the real x and y components are relevant) 

        """
        return _libBornAgainCore.InterferenceFunction2DLattice_evaluate(self, q)


    def setIntegrationOverXi(self, integrate_xi):
        """
        setIntegrationOverXi(InterferenceFunction2DLattice self, bool integrate_xi)

        void InterferenceFunction2DLattice::setIntegrationOverXi(bool integrate_xi)

        """
        return _libBornAgainCore.InterferenceFunction2DLattice_setIntegrationOverXi(self, integrate_xi)


    def integrationOverXi(self):
        """
        integrationOverXi(InterferenceFunction2DLattice self) -> bool

        bool InterferenceFunction2DLattice::integrationOverXi() const 

        """
        return _libBornAgainCore.InterferenceFunction2DLattice_integrationOverXi(self)


    def lattice(self):
        """
        lattice(InterferenceFunction2DLattice self) -> Lattice2D

        const Lattice2D & InterferenceFunction2DLattice::lattice() const 

        """
        return _libBornAgainCore.InterferenceFunction2DLattice_lattice(self)


    def getParticleDensity(self):
        """
        getParticleDensity(InterferenceFunction2DLattice self) -> double

        double InterferenceFunction2DLattice::getParticleDensity() const final

        Returns the particle density associated with this 2d lattice. 

        """
        return _libBornAgainCore.InterferenceFunction2DLattice_getParticleDensity(self)


    def getChildren(self):
        """
        getChildren(InterferenceFunction2DLattice self) -> swig_dummy_type_const_inode_vector

        std::vector< const INode * > InterferenceFunction2DLattice::getChildren() const override

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.InterferenceFunction2DLattice_getChildren(self)


    def onChange(self):
        """
        onChange(InterferenceFunction2DLattice self)

        void InterferenceFunction2DLattice::onChange() overridefinal

        Action to be taken in inherited class when a parameter has changed. 

        """
        return _libBornAgainCore.InterferenceFunction2DLattice_onChange(self)

InterferenceFunction2DLattice_swigregister = _libBornAgainCore.InterferenceFunction2DLattice_swigregister
InterferenceFunction2DLattice_swigregister(InterferenceFunction2DLattice)

def InterferenceFunction2DLattice_createSquare(lattice_length, xi=0.0):
    """
    createSquare(double lattice_length, double xi=0.0) -> InterferenceFunction2DLattice
    InterferenceFunction2DLattice_createSquare(double lattice_length) -> InterferenceFunction2DLattice
    """
    return _libBornAgainCore.InterferenceFunction2DLattice_createSquare(lattice_length, xi)

def InterferenceFunction2DLattice_createHexagonal(lattice_length, xi=0.0):
    """
    createHexagonal(double lattice_length, double xi=0.0) -> InterferenceFunction2DLattice
    InterferenceFunction2DLattice_createHexagonal(double lattice_length) -> InterferenceFunction2DLattice
    """
    return _libBornAgainCore.InterferenceFunction2DLattice_createHexagonal(lattice_length, xi)

class InterferenceFunctionFinite2DLattice(IInterferenceFunction):
    """


    Interference function of 2D lattice.

    C++ includes: InterferenceFunctionFinite2DLattice.h

    """

    __swig_setmethods__ = {}
    for _s in [IInterferenceFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterferenceFunctionFinite2DLattice, name, value)
    __swig_getmethods__ = {}
    for _s in [IInterferenceFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InterferenceFunctionFinite2DLattice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(InterferenceFunctionFinite2DLattice self, Lattice2D lattice, unsigned int size_1, unsigned int size_2) -> InterferenceFunctionFinite2DLattice
        __init__(InterferenceFunctionFinite2DLattice self, double length_1, double length_2, double alpha, double xi, unsigned int size_1, unsigned int size_2) -> InterferenceFunctionFinite2DLattice

        InterferenceFunctionFinite2DLattice::InterferenceFunctionFinite2DLattice(double length_1, double length_2, double alpha, double xi, unsigned size_1, unsigned size_2)

        Constructor of two-dimensional interference function.

        Parameters:
        -----------

        length_1: 
        length of first lattice vector in nanometers

        length_2: 
        length of second lattice vector in nanometers

        alpha: 
        angle between lattice vectors in radians

        xi: 
        rotation of lattice with respect to x-axis (beam direction) in radians 

        """
        this = _libBornAgainCore.new_InterferenceFunctionFinite2DLattice(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_InterferenceFunctionFinite2DLattice
    __del__ = lambda self: None

    def clone(self):
        """
        clone(InterferenceFunctionFinite2DLattice self) -> InterferenceFunctionFinite2DLattice

        InterferenceFunctionFinite2DLattice * InterferenceFunctionFinite2DLattice::clone() const final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.InterferenceFunctionFinite2DLattice_clone(self)


    def accept(self, visitor):
        """
        accept(InterferenceFunctionFinite2DLattice self, INodeVisitor visitor)

        void InterferenceFunctionFinite2DLattice::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.InterferenceFunctionFinite2DLattice_accept(self, visitor)


    def createSquare(lattice_length, xi, size_1, size_2):
        """createSquare(double lattice_length, double xi, unsigned int size_1, unsigned int size_2) -> InterferenceFunctionFinite2DLattice"""
        return _libBornAgainCore.InterferenceFunctionFinite2DLattice_createSquare(lattice_length, xi, size_1, size_2)

    createSquare = staticmethod(createSquare)

    def createHexagonal(lattice_length, xi, size_1, size_2):
        """createHexagonal(double lattice_length, double xi, unsigned int size_1, unsigned int size_2) -> InterferenceFunctionFinite2DLattice"""
        return _libBornAgainCore.InterferenceFunctionFinite2DLattice_createHexagonal(lattice_length, xi, size_1, size_2)

    createHexagonal = staticmethod(createHexagonal)

    def evaluate(self, q):
        """
        evaluate(InterferenceFunctionFinite2DLattice self, kvector_t q) -> double

        double InterferenceFunctionFinite2DLattice::evaluate(const kvector_t q) const final

        Evaluates the interference function for a given wavevector transfer (only the real x and y components are relevant) 

        """
        return _libBornAgainCore.InterferenceFunctionFinite2DLattice_evaluate(self, q)


    def domainSize1(self):
        """domainSize1(InterferenceFunctionFinite2DLattice self) -> unsigned int"""
        return _libBornAgainCore.InterferenceFunctionFinite2DLattice_domainSize1(self)


    def domainSize2(self):
        """domainSize2(InterferenceFunctionFinite2DLattice self) -> unsigned int"""
        return _libBornAgainCore.InterferenceFunctionFinite2DLattice_domainSize2(self)


    def setPositionVariance(self, sigma2):
        """
        setPositionVariance(InterferenceFunctionFinite2DLattice self, double sigma2)

        void InterferenceFunctionFinite2DLattice::setPositionVariance(double sigma2)

        """
        return _libBornAgainCore.InterferenceFunctionFinite2DLattice_setPositionVariance(self, sigma2)


    def positionVariance(self):
        """
        positionVariance(InterferenceFunctionFinite2DLattice self) -> double

        double InterferenceFunctionFinite2DLattice::positionVariance() const 

        """
        return _libBornAgainCore.InterferenceFunctionFinite2DLattice_positionVariance(self)


    def setIntegrationOverXi(self, integrate_xi):
        """
        setIntegrationOverXi(InterferenceFunctionFinite2DLattice self, bool integrate_xi)

        void InterferenceFunctionFinite2DLattice::setIntegrationOverXi(bool integrate_xi)

        """
        return _libBornAgainCore.InterferenceFunctionFinite2DLattice_setIntegrationOverXi(self, integrate_xi)


    def integrationOverXi(self):
        """
        integrationOverXi(InterferenceFunctionFinite2DLattice self) -> bool

        bool InterferenceFunctionFinite2DLattice::integrationOverXi() const 

        """
        return _libBornAgainCore.InterferenceFunctionFinite2DLattice_integrationOverXi(self)


    def lattice(self):
        """
        lattice(InterferenceFunctionFinite2DLattice self) -> Lattice2D

        const Lattice2D & InterferenceFunctionFinite2DLattice::lattice() const 

        """
        return _libBornAgainCore.InterferenceFunctionFinite2DLattice_lattice(self)


    def getParticleDensity(self):
        """
        getParticleDensity(InterferenceFunctionFinite2DLattice self) -> double

        double InterferenceFunctionFinite2DLattice::getParticleDensity() const final

        Returns the particle density associated with this 2d lattice. 

        """
        return _libBornAgainCore.InterferenceFunctionFinite2DLattice_getParticleDensity(self)


    def getChildren(self):
        """
        getChildren(InterferenceFunctionFinite2DLattice self) -> swig_dummy_type_const_inode_vector

        std::vector< const INode * > InterferenceFunctionFinite2DLattice::getChildren() const override

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.InterferenceFunctionFinite2DLattice_getChildren(self)

InterferenceFunctionFinite2DLattice_swigregister = _libBornAgainCore.InterferenceFunctionFinite2DLattice_swigregister
InterferenceFunctionFinite2DLattice_swigregister(InterferenceFunctionFinite2DLattice)

def InterferenceFunctionFinite2DLattice_createSquare(lattice_length, xi, size_1, size_2):
    """InterferenceFunctionFinite2DLattice_createSquare(double lattice_length, double xi, unsigned int size_1, unsigned int size_2) -> InterferenceFunctionFinite2DLattice"""
    return _libBornAgainCore.InterferenceFunctionFinite2DLattice_createSquare(lattice_length, xi, size_1, size_2)

def InterferenceFunctionFinite2DLattice_createHexagonal(lattice_length, xi, size_1, size_2):
    """InterferenceFunctionFinite2DLattice_createHexagonal(double lattice_length, double xi, unsigned int size_1, unsigned int size_2) -> InterferenceFunctionFinite2DLattice"""
    return _libBornAgainCore.InterferenceFunctionFinite2DLattice_createHexagonal(lattice_length, xi, size_1, size_2)

class InterferenceFunction2DParaCrystal(IInterferenceFunction):
    """


    Interference function of 2D paracrystal.

    C++ includes: InterferenceFunction2DParaCrystal.h

    """

    __swig_setmethods__ = {}
    for _s in [IInterferenceFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterferenceFunction2DParaCrystal, name, value)
    __swig_getmethods__ = {}
    for _s in [IInterferenceFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InterferenceFunction2DParaCrystal, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(InterferenceFunction2DParaCrystal self, Lattice2D lattice, double damping_length=0.0, double domain_size_1=0.0, double domain_size_2=0.0) -> InterferenceFunction2DParaCrystal
        __init__(InterferenceFunction2DParaCrystal self, Lattice2D lattice, double damping_length=0.0, double domain_size_1=0.0) -> InterferenceFunction2DParaCrystal
        __init__(InterferenceFunction2DParaCrystal self, Lattice2D lattice, double damping_length=0.0) -> InterferenceFunction2DParaCrystal
        __init__(InterferenceFunction2DParaCrystal self, Lattice2D lattice) -> InterferenceFunction2DParaCrystal
        __init__(InterferenceFunction2DParaCrystal self, double length_1, double length_2, double alpha, double xi=0.0, double damping_length=0.0) -> InterferenceFunction2DParaCrystal
        __init__(InterferenceFunction2DParaCrystal self, double length_1, double length_2, double alpha, double xi=0.0) -> InterferenceFunction2DParaCrystal
        __init__(InterferenceFunction2DParaCrystal self, double length_1, double length_2, double alpha) -> InterferenceFunction2DParaCrystal

        InterferenceFunction2DParaCrystal::InterferenceFunction2DParaCrystal(double length_1, double length_2, double alpha, double xi=0.0, double damping_length=0.0)

        Constructor of interference function of two-dimensional paracrystal.

        Parameters:
        -----------

        length_1: 
        length of first lattice vector in nanometers

        length_2: 
        length of second lattice vector in nanometers

        alpha: 
        angle between lattice vectors in radians

        xi: 
        rotation of lattice with respect to x-axis (beam direction) in radians

        damping_length: 
        the damping (coherence) length of the paracrystal in nanometers 

        """
        this = _libBornAgainCore.new_InterferenceFunction2DParaCrystal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_InterferenceFunction2DParaCrystal
    __del__ = lambda self: None

    def clone(self):
        """
        clone(InterferenceFunction2DParaCrystal self) -> InterferenceFunction2DParaCrystal

        InterferenceFunction2DParaCrystal * InterferenceFunction2DParaCrystal::clone() const final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_clone(self)


    def accept(self, visitor):
        """
        accept(InterferenceFunction2DParaCrystal self, INodeVisitor visitor)

        void InterferenceFunction2DParaCrystal::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_accept(self, visitor)


    def createSquare(lattice_length, damping_length=0.0, domain_size_1=0.0, domain_size_2=0.0):
        """
        createSquare(double lattice_length, double damping_length=0.0, double domain_size_1=0.0, double domain_size_2=0.0) -> InterferenceFunction2DParaCrystal
        createSquare(double lattice_length, double damping_length=0.0, double domain_size_1=0.0) -> InterferenceFunction2DParaCrystal
        createSquare(double lattice_length, double damping_length=0.0) -> InterferenceFunction2DParaCrystal
        createSquare(double lattice_length) -> InterferenceFunction2DParaCrystal
        """
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_createSquare(lattice_length, damping_length, domain_size_1, domain_size_2)

    createSquare = staticmethod(createSquare)

    def createHexagonal(lattice_length, damping_length=0.0, domain_size_1=0.0, domain_size_2=0.0):
        """
        createHexagonal(double lattice_length, double damping_length=0.0, double domain_size_1=0.0, double domain_size_2=0.0) -> InterferenceFunction2DParaCrystal
        createHexagonal(double lattice_length, double damping_length=0.0, double domain_size_1=0.0) -> InterferenceFunction2DParaCrystal
        createHexagonal(double lattice_length, double damping_length=0.0) -> InterferenceFunction2DParaCrystal
        createHexagonal(double lattice_length) -> InterferenceFunction2DParaCrystal
        """
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_createHexagonal(lattice_length, damping_length, domain_size_1, domain_size_2)

    createHexagonal = staticmethod(createHexagonal)

    def setDomainSizes(self, size_1, size_2):
        """
        setDomainSizes(InterferenceFunction2DParaCrystal self, double size_1, double size_2)

        void InterferenceFunction2DParaCrystal::setDomainSizes(double size_1, double size_2)

        Sets the sizes of coherence domains.

        Parameters:
        -----------

        size_1: 
        coherence domain size along the first basis vector in nanometers

        size_2: 
        coherence domain size along the second basis vector in nanometers 

        """
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_setDomainSizes(self, size_1, size_2)


    def setProbabilityDistributions(self, pdf_1, pdf_2):
        """
        setProbabilityDistributions(InterferenceFunction2DParaCrystal self, IFTDistribution2D pdf_1, IFTDistribution2D pdf_2)

        void InterferenceFunction2DParaCrystal::setProbabilityDistributions(const IFTDistribution2D &pdf_1, const IFTDistribution2D &pdf_2)

        Sets the probability distributions (Fourier transformed) for the two lattice directions.

        Parameters:
        -----------

        pdf_1: 
        probability distribution in first lattice direction

        pdf_2: 
        probability distribution in second lattice direction 

        """
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_setProbabilityDistributions(self, pdf_1, pdf_2)


    def setDampingLength(self, damping_length):
        """
        setDampingLength(InterferenceFunction2DParaCrystal self, double damping_length)

        void InterferenceFunction2DParaCrystal::setDampingLength(double damping_length)

        Sets the damping length.

        Parameters:
        -----------

        damping_length: 
        the damping (coherence) length of the paracrystal in nanometers 

        """
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_setDampingLength(self, damping_length)


    def evaluate(self, q):
        """
        evaluate(InterferenceFunction2DParaCrystal self, kvector_t q) -> double

        double InterferenceFunction2DParaCrystal::evaluate(const kvector_t q) const final

        Evaluates the interference function for a given wavevector transfer (only the real x and y components are relevant) 

        """
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_evaluate(self, q)


    def domainSizes(self):
        """
        domainSizes(InterferenceFunction2DParaCrystal self) -> vdouble1d_t

        std::vector< double > InterferenceFunction2DParaCrystal::domainSizes() const 

        """
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_domainSizes(self)


    def setIntegrationOverXi(self, integrate_xi):
        """
        setIntegrationOverXi(InterferenceFunction2DParaCrystal self, bool integrate_xi)

        void InterferenceFunction2DParaCrystal::setIntegrationOverXi(bool integrate_xi)

        Enables/disables averaging over the lattice rotation angle.

        Parameters:
        -----------

        integrate_xi: 
        integration flag 

        """
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_setIntegrationOverXi(self, integrate_xi)


    def integrationOverXi(self):
        """
        integrationOverXi(InterferenceFunction2DParaCrystal self) -> bool

        bool InterferenceFunction2DParaCrystal::integrationOverXi() const 

        """
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_integrationOverXi(self)


    def dampingLength(self):
        """
        dampingLength(InterferenceFunction2DParaCrystal self) -> double

        double InterferenceFunction2DParaCrystal::dampingLength() const 

        """
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_dampingLength(self)


    def lattice(self):
        """
        lattice(InterferenceFunction2DParaCrystal self) -> Lattice2D

        const Lattice2D & InterferenceFunction2DParaCrystal::lattice() const 

        """
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_lattice(self)


    def getParticleDensity(self):
        """
        getParticleDensity(InterferenceFunction2DParaCrystal self) -> double

        double InterferenceFunction2DParaCrystal::getParticleDensity() const final

        If defined by this interference function's parameters, returns the particle density (per area). Otherwise, returns zero or a user-defined value 

        """
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_getParticleDensity(self)


    def getChildren(self):
        """
        getChildren(InterferenceFunction2DParaCrystal self) -> swig_dummy_type_const_inode_vector

        std::vector< const INode * > InterferenceFunction2DParaCrystal::getChildren() const

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_getChildren(self)

InterferenceFunction2DParaCrystal_swigregister = _libBornAgainCore.InterferenceFunction2DParaCrystal_swigregister
InterferenceFunction2DParaCrystal_swigregister(InterferenceFunction2DParaCrystal)

def InterferenceFunction2DParaCrystal_createSquare(lattice_length, damping_length=0.0, domain_size_1=0.0, domain_size_2=0.0):
    """
    createSquare(double lattice_length, double damping_length=0.0, double domain_size_1=0.0, double domain_size_2=0.0) -> InterferenceFunction2DParaCrystal
    createSquare(double lattice_length, double damping_length=0.0, double domain_size_1=0.0) -> InterferenceFunction2DParaCrystal
    createSquare(double lattice_length, double damping_length=0.0) -> InterferenceFunction2DParaCrystal
    InterferenceFunction2DParaCrystal_createSquare(double lattice_length) -> InterferenceFunction2DParaCrystal
    """
    return _libBornAgainCore.InterferenceFunction2DParaCrystal_createSquare(lattice_length, damping_length, domain_size_1, domain_size_2)

def InterferenceFunction2DParaCrystal_createHexagonal(lattice_length, damping_length=0.0, domain_size_1=0.0, domain_size_2=0.0):
    """
    createHexagonal(double lattice_length, double damping_length=0.0, double domain_size_1=0.0, double domain_size_2=0.0) -> InterferenceFunction2DParaCrystal
    createHexagonal(double lattice_length, double damping_length=0.0, double domain_size_1=0.0) -> InterferenceFunction2DParaCrystal
    createHexagonal(double lattice_length, double damping_length=0.0) -> InterferenceFunction2DParaCrystal
    InterferenceFunction2DParaCrystal_createHexagonal(double lattice_length) -> InterferenceFunction2DParaCrystal
    """
    return _libBornAgainCore.InterferenceFunction2DParaCrystal_createHexagonal(lattice_length, damping_length, domain_size_1, domain_size_2)

class InterferenceFunctionNone(IInterferenceFunction):
    """


    Default interference function (i.e. absence of any interference).

    C++ includes: InterferenceFunctionNone.h

    """

    __swig_setmethods__ = {}
    for _s in [IInterferenceFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterferenceFunctionNone, name, value)
    __swig_getmethods__ = {}
    for _s in [IInterferenceFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InterferenceFunctionNone, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(InterferenceFunctionNone self) -> InterferenceFunctionNone

        InterferenceFunctionNone::InterferenceFunctionNone()

        """
        this = _libBornAgainCore.new_InterferenceFunctionNone()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(InterferenceFunctionNone self) -> InterferenceFunctionNone

        InterferenceFunctionNone* InterferenceFunctionNone::clone() const final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.InterferenceFunctionNone_clone(self)


    def accept(self, visitor):
        """
        accept(InterferenceFunctionNone self, INodeVisitor visitor)

        void InterferenceFunctionNone::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.InterferenceFunctionNone_accept(self, visitor)


    def evaluate(self, arg2):
        """
        evaluate(InterferenceFunctionNone self, kvector_t arg2) -> double

        double InterferenceFunctionNone::evaluate(const kvector_t) const final

        Evaluates the interference function for a given wavevector transfer (only the real x and y components are relevant) 

        """
        return _libBornAgainCore.InterferenceFunctionNone_evaluate(self, arg2)

    __swig_destroy__ = _libBornAgainCore.delete_InterferenceFunctionNone
    __del__ = lambda self: None
InterferenceFunctionNone_swigregister = _libBornAgainCore.InterferenceFunctionNone_swigregister
InterferenceFunctionNone_swigregister(InterferenceFunctionNone)

class IPixel(_object):
    """


    Interface for a function that maps [0,1]x[0,1] to the kvectors in a pixel.

    C++ includes: IPixel.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPixel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPixel, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IPixel
    __del__ = lambda self: None

    def clone(self):
        """
        clone(IPixel self) -> IPixel

        virtual IPixel* IPixel::clone() const =0

        """
        return _libBornAgainCore.IPixel_clone(self)


    def createZeroSizePixel(self, x, y):
        """
        createZeroSizePixel(IPixel self, double x, double y) -> IPixel

        virtual IPixel* IPixel::createZeroSizePixel(double x, double y) const =0

        """
        return _libBornAgainCore.IPixel_createZeroSizePixel(self, x, y)


    def getK(self, x, y, wavelength):
        """
        getK(IPixel self, double x, double y, double wavelength) -> kvector_t

        virtual kvector_t IPixel::getK(double x, double y, double wavelength) const =0

        """
        return _libBornAgainCore.IPixel_getK(self, x, y, wavelength)


    def getIntegrationFactor(self, x, y):
        """
        getIntegrationFactor(IPixel self, double x, double y) -> double

        virtual double IPixel::getIntegrationFactor(double x, double y) const =0

        """
        return _libBornAgainCore.IPixel_getIntegrationFactor(self, x, y)


    def getSolidAngle(self):
        """
        getSolidAngle(IPixel self) -> double

        virtual double IPixel::getSolidAngle() const =0

        """
        return _libBornAgainCore.IPixel_getSolidAngle(self)

IPixel_swigregister = _libBornAgainCore.IPixel_swigregister
IPixel_swigregister(IPixel)

class SphericalDetector(IDetector2D):
    """


    A spherical detector with axes and resolution function.  SphericalDetector

    C++ includes: SphericalDetector.h

    """

    __swig_setmethods__ = {}
    for _s in [IDetector2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SphericalDetector, name, value)
    __swig_getmethods__ = {}
    for _s in [IDetector2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SphericalDetector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SphericalDetector self) -> SphericalDetector
        __init__(SphericalDetector self, size_t n_phi, double phi_min, double phi_max, size_t n_alpha, double alpha_min, double alpha_max) -> SphericalDetector
        __init__(SphericalDetector self, SphericalDetector other) -> SphericalDetector

        SphericalDetector::SphericalDetector(const SphericalDetector &other)

        """
        this = _libBornAgainCore.new_SphericalDetector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(SphericalDetector self) -> SphericalDetector

        SphericalDetector * SphericalDetector::clone() const override

        """
        return _libBornAgainCore.SphericalDetector_clone(self)


    def accept(self, visitor):
        """
        accept(SphericalDetector self, INodeVisitor visitor)

        void SphericalDetector::accept(INodeVisitor *visitor) const override

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.SphericalDetector_accept(self, visitor)

    __swig_destroy__ = _libBornAgainCore.delete_SphericalDetector
    __del__ = lambda self: None

    def validAxesUnits(self):
        """
        validAxesUnits(SphericalDetector self) -> std::vector< AxesUnits,std::allocator< AxesUnits > >

        std::vector< AxesUnits > SphericalDetector::validAxesUnits() const override

        returns vector of valid axes units 

        """
        return _libBornAgainCore.SphericalDetector_validAxesUnits(self)


    def defaultAxesUnits(self):
        """
        defaultAxesUnits(SphericalDetector self) -> AxesUnits

        AxesUnits SphericalDetector::defaultAxesUnits() const override

        return default axes units 

        """
        return _libBornAgainCore.SphericalDetector_defaultAxesUnits(self)

SphericalDetector_swigregister = _libBornAgainCore.SphericalDetector_swigregister
SphericalDetector_swigregister(SphericalDetector)

class SphericalPixel(IPixel):
    """Proxy of C++ SphericalPixel class."""

    __swig_setmethods__ = {}
    for _s in [IPixel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SphericalPixel, name, value)
    __swig_getmethods__ = {}
    for _s in [IPixel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SphericalPixel, name)
    __repr__ = _swig_repr

    def __init__(self, alpha_bin, phi_bin):
        """
        __init__(SphericalPixel self, Bin1D alpha_bin, Bin1D phi_bin) -> SphericalPixel

        SphericalPixel::SphericalPixel(Bin1D alpha_bin, Bin1D phi_bin)

        """
        this = _libBornAgainCore.new_SphericalPixel(alpha_bin, phi_bin)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_SphericalPixel
    __del__ = lambda self: None

    def clone(self):
        """
        clone(SphericalPixel self) -> SphericalPixel

        SphericalPixel * SphericalPixel::clone() const override

        """
        return _libBornAgainCore.SphericalPixel_clone(self)


    def createZeroSizePixel(self, x, y):
        """
        createZeroSizePixel(SphericalPixel self, double x, double y) -> SphericalPixel

        SphericalPixel * SphericalPixel::createZeroSizePixel(double x, double y) const override

        """
        return _libBornAgainCore.SphericalPixel_createZeroSizePixel(self, x, y)


    def getK(self, x, y, wavelength):
        """
        getK(SphericalPixel self, double x, double y, double wavelength) -> kvector_t

        kvector_t SphericalPixel::getK(double x, double y, double wavelength) const override

        """
        return _libBornAgainCore.SphericalPixel_getK(self, x, y, wavelength)


    def getIntegrationFactor(self, x, y):
        """
        getIntegrationFactor(SphericalPixel self, double x, double y) -> double

        double SphericalPixel::getIntegrationFactor(double x, double y) const override

        """
        return _libBornAgainCore.SphericalPixel_getIntegrationFactor(self, x, y)


    def getSolidAngle(self):
        """
        getSolidAngle(SphericalPixel self) -> double

        double SphericalPixel::getSolidAngle() const override

        """
        return _libBornAgainCore.SphericalPixel_getSolidAngle(self)

SphericalPixel_swigregister = _libBornAgainCore.SphericalPixel_swigregister
SphericalPixel_swigregister(SphericalPixel)

class IsGISAXSDetector(SphericalDetector):
    """


    A spherical detector used for validation with IsGISAXS results.

    C++ includes: IsGISAXSDetector.h

    """

    __swig_setmethods__ = {}
    for _s in [SphericalDetector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsGISAXSDetector, name, value)
    __swig_getmethods__ = {}
    for _s in [SphericalDetector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IsGISAXSDetector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IsGISAXSDetector self) -> IsGISAXSDetector
        __init__(IsGISAXSDetector self, size_t n_phi, double phi_min, double phi_max, size_t n_alpha, double alpha_min, double alpha_max) -> IsGISAXSDetector
        __init__(IsGISAXSDetector self, IsGISAXSDetector other) -> IsGISAXSDetector

        IsGISAXSDetector::IsGISAXSDetector(const IsGISAXSDetector &other)

        """
        this = _libBornAgainCore.new_IsGISAXSDetector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(IsGISAXSDetector self) -> IsGISAXSDetector

        IsGISAXSDetector * IsGISAXSDetector::clone() const override

        """
        return _libBornAgainCore.IsGISAXSDetector_clone(self)


    def accept(self, visitor):
        """
        accept(IsGISAXSDetector self, INodeVisitor visitor)

        void IsGISAXSDetector::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.IsGISAXSDetector_accept(self, visitor)

    __swig_destroy__ = _libBornAgainCore.delete_IsGISAXSDetector
    __del__ = lambda self: None
IsGISAXSDetector_swigregister = _libBornAgainCore.IsGISAXSDetector_swigregister
IsGISAXSDetector_swigregister(IsGISAXSDetector)

class Lattice(INode):
    """


    A lattice with three basis vectors.

    C++ includes: Lattice.h

    """

    __swig_setmethods__ = {}
    for _s in [INode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Lattice, name, value)
    __swig_getmethods__ = {}
    for _s in [INode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Lattice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Lattice self, kvector_t a1, kvector_t a2, kvector_t a3) -> Lattice
        __init__(Lattice self, Lattice lattice) -> Lattice

        Lattice::Lattice(const Lattice &lattice)

        """
        this = _libBornAgainCore.new_Lattice(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_Lattice
    __del__ = lambda self: None

    def accept(self, visitor):
        """
        accept(Lattice self, INodeVisitor visitor)

        void Lattice::accept(INodeVisitor *visitor) const override

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.Lattice_accept(self, visitor)


    def createTransformedLattice(self, transform):
        """
        createTransformedLattice(Lattice self, Transform3D const & transform) -> Lattice

        Lattice Lattice::createTransformedLattice(const Transform3D &transform) const

        Create transformed lattice. 

        """
        return _libBornAgainCore.Lattice_createTransformedLattice(self, transform)


    def initialize(self):
        """
        initialize(Lattice self)

        void Lattice::initialize() const

        Initializes cached data. 

        """
        return _libBornAgainCore.Lattice_initialize(self)


    def getBasisVectorA(self):
        """
        getBasisVectorA(Lattice self) -> kvector_t

        kvector_t Lattice::getBasisVectorA() const

        Returns basis vector a. 

        """
        return _libBornAgainCore.Lattice_getBasisVectorA(self)


    def getBasisVectorB(self):
        """
        getBasisVectorB(Lattice self) -> kvector_t

        kvector_t Lattice::getBasisVectorB() const

        Returns basis vector b. 

        """
        return _libBornAgainCore.Lattice_getBasisVectorB(self)


    def getBasisVectorC(self):
        """
        getBasisVectorC(Lattice self) -> kvector_t

        kvector_t Lattice::getBasisVectorC() const

        Returns basis vector c. 

        """
        return _libBornAgainCore.Lattice_getBasisVectorC(self)


    def volume(self):
        """
        volume(Lattice self) -> double

        double Lattice::volume() const

        Returns the volume of the unit cell. 

        """
        return _libBornAgainCore.Lattice_volume(self)


    def getReciprocalLatticeBasis(self, b1, b2, b3):
        """
        getReciprocalLatticeBasis(Lattice self, kvector_t b1, kvector_t b2, kvector_t b3)

        void Lattice::getReciprocalLatticeBasis(kvector_t &b1, kvector_t &b2, kvector_t &b3) const

        Returns the reciprocal basis vectors. 

        """
        return _libBornAgainCore.Lattice_getReciprocalLatticeBasis(self, b1, b2, b3)


    def getNearestLatticeVectorCoordinates(self, vector_in):
        """
        getNearestLatticeVectorCoordinates(Lattice self, kvector_t vector_in) -> ivector_t

        ivector_t Lattice::getNearestLatticeVectorCoordinates(const kvector_t vector_in) const

        Returns the nearest lattice point from a given vector. 

        """
        return _libBornAgainCore.Lattice_getNearestLatticeVectorCoordinates(self, vector_in)


    def getNearestReciprocalLatticeVectorCoordinates(self, vector_in):
        """
        getNearestReciprocalLatticeVectorCoordinates(Lattice self, kvector_t vector_in) -> ivector_t

        ivector_t Lattice::getNearestReciprocalLatticeVectorCoordinates(const kvector_t vector_in) const

        Returns the nearest reciprocal lattice point from a given vector. 

        """
        return _libBornAgainCore.Lattice_getNearestReciprocalLatticeVectorCoordinates(self, vector_in)


    def reciprocalLatticeVectorsWithinRadius(self, input_vector, radius):
        """
        reciprocalLatticeVectorsWithinRadius(Lattice self, kvector_t input_vector, double radius) -> vector_kvector_t

        std::vector< kvector_t > Lattice::reciprocalLatticeVectorsWithinRadius(const kvector_t input_vector, double radius) const

        Computes a list of reciprocal lattice vectors within a specified distance of a given vector. 

        """
        return _libBornAgainCore.Lattice_reciprocalLatticeVectorsWithinRadius(self, input_vector, radius)


    def setSelectionRule(self, p_selection_rule):
        """
        setSelectionRule(Lattice self, ISelectionRule p_selection_rule)

        void Lattice::setSelectionRule(const ISelectionRule &p_selection_rule)

        Sets a selection rule for the reciprocal vectors. 

        """
        return _libBornAgainCore.Lattice_setSelectionRule(self, p_selection_rule)


    def createFCCLattice(a):
        """createFCCLattice(double a) -> Lattice"""
        return _libBornAgainCore.Lattice_createFCCLattice(a)

    createFCCLattice = staticmethod(createFCCLattice)

    def createTrigonalLattice(a, c):
        """createTrigonalLattice(double a, double c) -> Lattice"""
        return _libBornAgainCore.Lattice_createTrigonalLattice(a, c)

    createTrigonalLattice = staticmethod(createTrigonalLattice)

    def onChange(self):
        """
        onChange(Lattice self)

        void Lattice::onChange() override

        Action to be taken in inherited class when a parameter has changed. 

        """
        return _libBornAgainCore.Lattice_onChange(self)

Lattice_swigregister = _libBornAgainCore.Lattice_swigregister
Lattice_swigregister(Lattice)

def Lattice_createFCCLattice(a):
    """Lattice_createFCCLattice(double a) -> Lattice"""
    return _libBornAgainCore.Lattice_createFCCLattice(a)

def Lattice_createTrigonalLattice(a, c):
    """Lattice_createTrigonalLattice(double a, double c) -> Lattice"""
    return _libBornAgainCore.Lattice_createTrigonalLattice(a, c)

class Lattice1DParameters(_object):
    """


    Basic parameters of a one-dimensional lattice.

    C++ includes: Lattice1DParameters.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Lattice1DParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Lattice1DParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Lattice1DParameters self) -> Lattice1DParameters
        __init__(Lattice1DParameters self, double length, double xi) -> Lattice1DParameters

        Lattice1DParameters::Lattice1DParameters(double length, double xi)

        Parameters:
        -----------

        length: 
         Lattice constant.

        xi: 
         Lattice rotation angle. 

        """
        this = _libBornAgainCore.new_Lattice1DParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_length"] = _libBornAgainCore.Lattice1DParameters_m_length_set
    __swig_getmethods__["m_length"] = _libBornAgainCore.Lattice1DParameters_m_length_get
    if _newclass:
        m_length = _swig_property(_libBornAgainCore.Lattice1DParameters_m_length_get, _libBornAgainCore.Lattice1DParameters_m_length_set)
    __swig_setmethods__["m_xi"] = _libBornAgainCore.Lattice1DParameters_m_xi_set
    __swig_getmethods__["m_xi"] = _libBornAgainCore.Lattice1DParameters_m_xi_get
    if _newclass:
        m_xi = _swig_property(_libBornAgainCore.Lattice1DParameters_m_xi_get, _libBornAgainCore.Lattice1DParameters_m_xi_set)
    __swig_destroy__ = _libBornAgainCore.delete_Lattice1DParameters
    __del__ = lambda self: None
Lattice1DParameters_swigregister = _libBornAgainCore.Lattice1DParameters_swigregister
Lattice1DParameters_swigregister(Lattice1DParameters)

class Lattice2D(ICloneable, INode):
    """Proxy of C++ Lattice2D class."""

    __swig_setmethods__ = {}
    for _s in [ICloneable, INode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Lattice2D, name, value)
    __swig_getmethods__ = {}
    for _s in [ICloneable, INode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Lattice2D, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        """
        clone(Lattice2D self) -> Lattice2D

        Lattice2D* Lattice2D::clone() const =0

        """
        return _libBornAgainCore.Lattice2D_clone(self)


    def length1(self):
        """
        length1(Lattice2D self) -> double

        virtual double Lattice2D::length1() const =0

        """
        return _libBornAgainCore.Lattice2D_length1(self)


    def length2(self):
        """
        length2(Lattice2D self) -> double

        virtual double Lattice2D::length2() const =0

        """
        return _libBornAgainCore.Lattice2D_length2(self)


    def latticeAngle(self):
        """
        latticeAngle(Lattice2D self) -> double

        virtual double Lattice2D::latticeAngle() const =0

        """
        return _libBornAgainCore.Lattice2D_latticeAngle(self)


    def unitCellArea(self):
        """
        unitCellArea(Lattice2D self) -> double

        virtual double Lattice2D::unitCellArea() const =0

        """
        return _libBornAgainCore.Lattice2D_unitCellArea(self)


    def rotationAngle(self):
        """
        rotationAngle(Lattice2D self) -> double

        double Lattice2D::rotationAngle() const 

        """
        return _libBornAgainCore.Lattice2D_rotationAngle(self)


    def reciprocalBases(self):
        """
        reciprocalBases(Lattice2D self) -> Lattice2D::ReciprocalBases

        Lattice2D::ReciprocalBases Lattice2D::reciprocalBases() const 

        """
        return _libBornAgainCore.Lattice2D_reciprocalBases(self)


    def setRotationEnabled(self, enabled):
        """
        setRotationEnabled(Lattice2D self, bool enabled)

        void Lattice2D::setRotationEnabled(bool enabled)

        """
        return _libBornAgainCore.Lattice2D_setRotationEnabled(self, enabled)

    __swig_destroy__ = _libBornAgainCore.delete_Lattice2D
    __del__ = lambda self: None
Lattice2D_swigregister = _libBornAgainCore.Lattice2D_swigregister
Lattice2D_swigregister(Lattice2D)

class BasicLattice(Lattice2D):
    """Proxy of C++ BasicLattice class."""

    __swig_setmethods__ = {}
    for _s in [Lattice2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasicLattice, name, value)
    __swig_getmethods__ = {}
    for _s in [Lattice2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BasicLattice, name)
    __repr__ = _swig_repr

    def __init__(self, length1, length2, angle, rotation_angle=0.0):
        """
        __init__(BasicLattice self, double length1, double length2, double angle, double rotation_angle=0.0) -> BasicLattice
        __init__(BasicLattice self, double length1, double length2, double angle) -> BasicLattice

        BasicLattice::BasicLattice(double length1, double length2, double angle, double rotation_angle=0.0)

        """
        this = _libBornAgainCore.new_BasicLattice(length1, length2, angle, rotation_angle)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(BasicLattice self) -> BasicLattice

        BasicLattice * BasicLattice::clone() const 

        """
        return _libBornAgainCore.BasicLattice_clone(self)


    def accept(self, visitor):
        """
        accept(BasicLattice self, INodeVisitor visitor)

        void BasicLattice::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.BasicLattice_accept(self, visitor)


    def length1(self):
        """
        length1(BasicLattice self) -> double

        virtual double BasicLattice::length1() const 

        """
        return _libBornAgainCore.BasicLattice_length1(self)


    def length2(self):
        """
        length2(BasicLattice self) -> double

        virtual double BasicLattice::length2() const 

        """
        return _libBornAgainCore.BasicLattice_length2(self)


    def latticeAngle(self):
        """
        latticeAngle(BasicLattice self) -> double

        virtual double BasicLattice::latticeAngle() const 

        """
        return _libBornAgainCore.BasicLattice_latticeAngle(self)


    def unitCellArea(self):
        """
        unitCellArea(BasicLattice self) -> double

        double BasicLattice::unitCellArea() const 

        """
        return _libBornAgainCore.BasicLattice_unitCellArea(self)

    __swig_destroy__ = _libBornAgainCore.delete_BasicLattice
    __del__ = lambda self: None
BasicLattice_swigregister = _libBornAgainCore.BasicLattice_swigregister
BasicLattice_swigregister(BasicLattice)

class SquareLattice(Lattice2D):
    """Proxy of C++ SquareLattice class."""

    __swig_setmethods__ = {}
    for _s in [Lattice2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SquareLattice, name, value)
    __swig_getmethods__ = {}
    for _s in [Lattice2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SquareLattice, name)
    __repr__ = _swig_repr

    def __init__(self, length, rotation_angle=0.0):
        """
        __init__(SquareLattice self, double length, double rotation_angle=0.0) -> SquareLattice
        __init__(SquareLattice self, double length) -> SquareLattice

        SquareLattice::SquareLattice(double length, double rotation_angle=0.0)

        """
        this = _libBornAgainCore.new_SquareLattice(length, rotation_angle)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(SquareLattice self) -> SquareLattice

        SquareLattice * SquareLattice::clone() const 

        """
        return _libBornAgainCore.SquareLattice_clone(self)


    def accept(self, visitor):
        """
        accept(SquareLattice self, INodeVisitor visitor)

        void SquareLattice::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.SquareLattice_accept(self, visitor)


    def length1(self):
        """
        length1(SquareLattice self) -> double

        virtual double SquareLattice::length1() const 

        """
        return _libBornAgainCore.SquareLattice_length1(self)


    def length2(self):
        """
        length2(SquareLattice self) -> double

        virtual double SquareLattice::length2() const 

        """
        return _libBornAgainCore.SquareLattice_length2(self)


    def latticeAngle(self):
        """
        latticeAngle(SquareLattice self) -> double

        double SquareLattice::latticeAngle() const 

        """
        return _libBornAgainCore.SquareLattice_latticeAngle(self)


    def unitCellArea(self):
        """
        unitCellArea(SquareLattice self) -> double

        double SquareLattice::unitCellArea() const 

        """
        return _libBornAgainCore.SquareLattice_unitCellArea(self)

    __swig_destroy__ = _libBornAgainCore.delete_SquareLattice
    __del__ = lambda self: None
SquareLattice_swigregister = _libBornAgainCore.SquareLattice_swigregister
SquareLattice_swigregister(SquareLattice)

class HexagonalLattice(Lattice2D):
    """Proxy of C++ HexagonalLattice class."""

    __swig_setmethods__ = {}
    for _s in [Lattice2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HexagonalLattice, name, value)
    __swig_getmethods__ = {}
    for _s in [Lattice2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HexagonalLattice, name)
    __repr__ = _swig_repr

    def __init__(self, length, rotation_angle=0.0):
        """
        __init__(HexagonalLattice self, double length, double rotation_angle=0.0) -> HexagonalLattice
        __init__(HexagonalLattice self, double length) -> HexagonalLattice

        HexagonalLattice::HexagonalLattice(double length, double rotation_angle=0.0)

        """
        this = _libBornAgainCore.new_HexagonalLattice(length, rotation_angle)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(HexagonalLattice self) -> HexagonalLattice

        HexagonalLattice * HexagonalLattice::clone() const 

        """
        return _libBornAgainCore.HexagonalLattice_clone(self)


    def accept(self, visitor):
        """
        accept(HexagonalLattice self, INodeVisitor visitor)

        void HexagonalLattice::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.HexagonalLattice_accept(self, visitor)


    def length1(self):
        """
        length1(HexagonalLattice self) -> double

        virtual double HexagonalLattice::length1() const 

        """
        return _libBornAgainCore.HexagonalLattice_length1(self)


    def length2(self):
        """
        length2(HexagonalLattice self) -> double

        virtual double HexagonalLattice::length2() const 

        """
        return _libBornAgainCore.HexagonalLattice_length2(self)


    def latticeAngle(self):
        """
        latticeAngle(HexagonalLattice self) -> double

        double HexagonalLattice::latticeAngle() const 

        """
        return _libBornAgainCore.HexagonalLattice_latticeAngle(self)


    def unitCellArea(self):
        """
        unitCellArea(HexagonalLattice self) -> double

        double HexagonalLattice::unitCellArea() const 

        """
        return _libBornAgainCore.HexagonalLattice_unitCellArea(self)

    __swig_destroy__ = _libBornAgainCore.delete_HexagonalLattice
    __del__ = lambda self: None
HexagonalLattice_swigregister = _libBornAgainCore.HexagonalLattice_swigregister
HexagonalLattice_swigregister(HexagonalLattice)

class Layer(ISample):
    """


    A layer, with thickness (in nanometer) and material.

    C++ includes: Layer.h

    """

    __swig_setmethods__ = {}
    for _s in [ISample]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Layer, name, value)
    __swig_getmethods__ = {}
    for _s in [ISample]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Layer, name)
    __repr__ = _swig_repr
    TOPLAYER = _libBornAgainCore.Layer_TOPLAYER
    INTERMEDIATELAYER = _libBornAgainCore.Layer_INTERMEDIATELAYER
    BOTTOMLAYER = _libBornAgainCore.Layer_BOTTOMLAYER
    ONLYLAYER = _libBornAgainCore.Layer_ONLYLAYER

    def __init__(self, material, thickness=0):
        """
        __init__(Layer self, Material material, double thickness=0) -> Layer
        __init__(Layer self, Material material) -> Layer

        Layer::Layer(Material material, double thickness=0)

        Constructor of a layer with thickness and material

        Parameters:
        -----------

        material: 
        material the layer is made of

        thickness: 
        thickness of a layer in nanometers 

        """
        this = _libBornAgainCore.new_Layer(material, thickness)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_Layer
    __del__ = lambda self: None

    def clone(self):
        """
        clone(Layer self) -> Layer

        Layer * Layer::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.Layer_clone(self)


    def cloneInvertB(self):
        """
        cloneInvertB(Layer self) -> Layer

        Layer * Layer::cloneInvertB() const 

        """
        return _libBornAgainCore.Layer_cloneInvertB(self)


    def accept(self, visitor):
        """
        accept(Layer self, INodeVisitor visitor)

        void Layer::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.Layer_accept(self, visitor)


    def setThickness(self, thickness):
        """
        setThickness(Layer self, double thickness)

        void Layer::setThickness(double thickness)

        Sets layer thickness in nanometers. 

        """
        return _libBornAgainCore.Layer_setThickness(self, thickness)


    def thickness(self):
        """
        thickness(Layer self) -> double

        double Layer::thickness() const 

        """
        return _libBornAgainCore.Layer_thickness(self)


    def material(self):
        """
        material(Layer self) -> Material

        const Material* Layer::material() const overridefinal

        Returns nullptr, unless overwritten to return a specific material. 

        """
        return _libBornAgainCore.Layer_material(self)


    def setMaterial(self, material):
        """
        setMaterial(Layer self, Material material)

        void Layer::setMaterial(Material material)

        """
        return _libBornAgainCore.Layer_setMaterial(self, material)


    def addLayout(self, decoration):
        """
        addLayout(Layer self, ILayout decoration)

        void Layer::addLayout(const ILayout &decoration)

        """
        return _libBornAgainCore.Layer_addLayout(self, decoration)


    def numberOfLayouts(self):
        """
        numberOfLayouts(Layer self) -> size_t

        size_t Layer::numberOfLayouts() const 

        """
        return _libBornAgainCore.Layer_numberOfLayouts(self)


    def layouts(self):
        """
        layouts(Layer self) -> std::vector< ILayout const *,std::allocator< ILayout const * > >

        std::vector< const ILayout * > Layer::layouts() const 

        """
        return _libBornAgainCore.Layer_layouts(self)


    def getChildren(self):
        """
        getChildren(Layer self) -> swig_dummy_type_const_inode_vector

        std::vector< const INode * > Layer::getChildren() const overridefinal

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.Layer_getChildren(self)


    def registerThickness(self, make_registered=True):
        """
        registerThickness(Layer self, bool make_registered=True)
        registerThickness(Layer self)

        void Layer::registerThickness(bool make_registered=true)

        """
        return _libBornAgainCore.Layer_registerThickness(self, make_registered)


    def setNumberOfSlices(self, n_slices):
        """
        setNumberOfSlices(Layer self, unsigned int n_slices)

        void Layer::setNumberOfSlices(unsigned int n_slices)

        """
        return _libBornAgainCore.Layer_setNumberOfSlices(self, n_slices)


    def numberOfSlices(self):
        """
        numberOfSlices(Layer self) -> unsigned int

        unsigned int Layer::numberOfSlices() const 

        """
        return _libBornAgainCore.Layer_numberOfSlices(self)


    def slice(self, limits, layer_type):
        """
        slice(Layer self, ZLimits limits, Layer::ELayerType layer_type) -> SafePointerVector< Layer >

        SafePointerVector< Layer > Layer::slice(ZLimits limits, ELayerType layer_type) const 

        """
        return _libBornAgainCore.Layer_slice(self, limits, layer_type)


    def scalarReducedPotential(self, k, n_ref):
        """
        scalarReducedPotential(Layer self, kvector_t k, double n_ref) -> complex_t

        complex_t Layer::scalarReducedPotential(kvector_t k, double n_ref) const

        Return the potential term that is used in the one-dimensional Fresnel calculations. 

        """
        return _libBornAgainCore.Layer_scalarReducedPotential(self, k, n_ref)


    def initBField(self, h_field, b_z):
        """
        initBField(Layer self, kvector_t h_field, double b_z)

        void Layer::initBField(kvector_t h_field, double b_z)

        Initializes the magnetic B field from a given ambient field strength H. 

        """
        return _libBornAgainCore.Layer_initBField(self, h_field, b_z)

    Magnetic_Permeability = _libBornAgainCore.Layer_Magnetic_Permeability
Layer_swigregister = _libBornAgainCore.Layer_swigregister
Layer_swigregister(Layer)

class LayerRoughness(ISample):
    """


    A roughness of interface between two layers.

    Based on the article D.K.G. de Boer, Physical review B, Volume 51, Number 8, 15 February 1995 "X-ray reflection and transmission by rough surfaces"

    C++ includes: LayerRoughness.h

    """

    __swig_setmethods__ = {}
    for _s in [ISample]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayerRoughness, name, value)
    __swig_getmethods__ = {}
    for _s in [ISample]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LayerRoughness, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(LayerRoughness self) -> LayerRoughness
        __init__(LayerRoughness self, double sigma, double hurstParameter, double lateralCorrLength) -> LayerRoughness

        LayerRoughness::LayerRoughness(double sigma, double hurstParameter, double lateralCorrLength)

        Constructor of layer roughness.

        Parameters:
        -----------

        sigma: 
        rms of the roughness in nanometers

        hurstParameter: 
        hurst parameter which describes how jagged the interface, dimensionless [0.0, 1.0], where 0.0 gives more spikes, 1.0 more smoothness

        lateralCorrLength: 
        lateral correlation length of the roughness in nanometers 

        """
        this = _libBornAgainCore.new_LayerRoughness(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(LayerRoughness self) -> LayerRoughness

        LayerRoughness* LayerRoughness::clone() const

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.LayerRoughness_clone(self)


    def accept(self, visitor):
        """
        accept(LayerRoughness self, INodeVisitor visitor)

        virtual void LayerRoughness::accept(INodeVisitor *visitor) const

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.LayerRoughness_accept(self, visitor)


    def getSpectralFun(self, kvec):
        """
        getSpectralFun(LayerRoughness self, kvector_t kvec) -> double

        double LayerRoughness::getSpectralFun(const kvector_t kvec) const

        Returns power spectral density of the surface roughness.

        Power spectral density of the surface roughness is a result of two-dimensional Fourier transform of the correlation function of the roughness profile.

        Based on the article D.K.G. de Boer, Physical review B, Volume 51, Number 8, 15 February 1995 "X-ray reflection and transmission by rough surfaces" 

        """
        return _libBornAgainCore.LayerRoughness_getSpectralFun(self, kvec)


    def getCorrFun(self, k):
        """
        getCorrFun(LayerRoughness self, kvector_t k) -> double

        double LayerRoughness::getCorrFun(const kvector_t k) const

        Correlation function of the roughness profile. 

        """
        return _libBornAgainCore.LayerRoughness_getCorrFun(self, k)


    def setSigma(self, sigma):
        """
        setSigma(LayerRoughness self, double sigma)

        void LayerRoughness::setSigma(double sigma)

        Sets rms of roughness. 

        """
        return _libBornAgainCore.LayerRoughness_setSigma(self, sigma)


    def getSigma(self):
        """
        getSigma(LayerRoughness self) -> double

        double LayerRoughness::getSigma() const

        Returns rms of roughness. 

        """
        return _libBornAgainCore.LayerRoughness_getSigma(self)


    def setHurstParameter(self, hurstParameter):
        """
        setHurstParameter(LayerRoughness self, double hurstParameter)

        void LayerRoughness::setHurstParameter(double hurstParameter)

        Sets hurst parameter. It describes how jagged the surface is. 

        """
        return _libBornAgainCore.LayerRoughness_setHurstParameter(self, hurstParameter)


    def getHurstParameter(self):
        """
        getHurstParameter(LayerRoughness self) -> double

        double LayerRoughness::getHurstParameter() const

        Returns hurst parameter. 

        """
        return _libBornAgainCore.LayerRoughness_getHurstParameter(self)


    def setLatteralCorrLength(self, lateralCorrLength):
        """
        setLatteralCorrLength(LayerRoughness self, double lateralCorrLength)

        void LayerRoughness::setLatteralCorrLength(double lateralCorrLength)

        Sets lateral correlation length. 

        """
        return _libBornAgainCore.LayerRoughness_setLatteralCorrLength(self, lateralCorrLength)


    def getLatteralCorrLength(self):
        """
        getLatteralCorrLength(LayerRoughness self) -> double

        double LayerRoughness::getLatteralCorrLength() const

        Returns lateral correlation length. 

        """
        return _libBornAgainCore.LayerRoughness_getLatteralCorrLength(self)

    __swig_destroy__ = _libBornAgainCore.delete_LayerRoughness
    __del__ = lambda self: None
LayerRoughness_swigregister = _libBornAgainCore.LayerRoughness_swigregister
LayerRoughness_swigregister(LayerRoughness)

class Line(IShape2D):
    """


    A line segment.

    C++ includes: Line.h

    """

    __swig_setmethods__ = {}
    for _s in [IShape2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Line, name, value)
    __swig_getmethods__ = {}
    for _s in [IShape2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Line, name)
    __repr__ = _swig_repr

    def __init__(self, x1, y1, x2, y2):
        """
        __init__(Line self, double x1, double y1, double x2, double y2) -> Line

        Line::Line(double x1, double y1, double x2, double y2)

        """
        this = _libBornAgainCore.new_Line(x1, y1, x2, y2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(Line self) -> Line

        Line* Line::clone() const 

        """
        return _libBornAgainCore.Line_clone(self)


    def contains(self, *args):
        """
        contains(Line self, double x, double y) -> bool
        contains(Line self, Bin1D binx, Bin1D biny) -> bool

        bool Line::contains(const Bin1D &binx, const Bin1D &biny) const

        Returns true if area defined by two bins is inside or on border of polygon (more precisely, if mid point of two bins satisfy this condition). 

        """
        return _libBornAgainCore.Line_contains(self, *args)

    __swig_destroy__ = _libBornAgainCore.delete_Line
    __del__ = lambda self: None
Line_swigregister = _libBornAgainCore.Line_swigregister
Line_swigregister(Line)

class VerticalLine(IShape2D):
    """


    An infinite vertical line.

    C++ includes: Line.h

    """

    __swig_setmethods__ = {}
    for _s in [IShape2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VerticalLine, name, value)
    __swig_getmethods__ = {}
    for _s in [IShape2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VerticalLine, name)
    __repr__ = _swig_repr

    def __init__(self, x):
        """
        __init__(VerticalLine self, double x) -> VerticalLine

        VerticalLine::VerticalLine(double x)

        Parameters:
        -----------

        x: 
        The value at which it crosses x-axes 

        """
        this = _libBornAgainCore.new_VerticalLine(x)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(VerticalLine self) -> VerticalLine

        VerticalLine* VerticalLine::clone() const 

        """
        return _libBornAgainCore.VerticalLine_clone(self)


    def contains(self, *args):
        """
        contains(VerticalLine self, double x, double y) -> bool
        contains(VerticalLine self, Bin1D binx, Bin1D biny) -> bool

        bool VerticalLine::contains(const Bin1D &binx, const Bin1D &biny) const

        Returns true if area defined by two bins is inside or on border of polygon (more precisely, if mid point of two bins satisfy this condition). 

        """
        return _libBornAgainCore.VerticalLine_contains(self, *args)


    def getXpos(self):
        """
        getXpos(VerticalLine self) -> double

        double VerticalLine::getXpos() const 

        """
        return _libBornAgainCore.VerticalLine_getXpos(self)

    __swig_destroy__ = _libBornAgainCore.delete_VerticalLine
    __del__ = lambda self: None
VerticalLine_swigregister = _libBornAgainCore.VerticalLine_swigregister
VerticalLine_swigregister(VerticalLine)

class HorizontalLine(IShape2D):
    """


    An infinite horizontal line.

    C++ includes: Line.h

    """

    __swig_setmethods__ = {}
    for _s in [IShape2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HorizontalLine, name, value)
    __swig_getmethods__ = {}
    for _s in [IShape2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HorizontalLine, name)
    __repr__ = _swig_repr

    def __init__(self, y):
        """
        __init__(HorizontalLine self, double y) -> HorizontalLine

        HorizontalLine::HorizontalLine(double y)

        Parameters:
        -----------

        y: 
        The value at which it crosses y-axes 

        """
        this = _libBornAgainCore.new_HorizontalLine(y)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(HorizontalLine self) -> HorizontalLine

        HorizontalLine* HorizontalLine::clone() const 

        """
        return _libBornAgainCore.HorizontalLine_clone(self)


    def contains(self, *args):
        """
        contains(HorizontalLine self, double x, double y) -> bool
        contains(HorizontalLine self, Bin1D binx, Bin1D biny) -> bool

        bool HorizontalLine::contains(const Bin1D &binx, const Bin1D &biny) const

        Returns true if area defined by two bins is inside or on border of polygon (more precisely, if mid point of two bins satisfy this condition). 

        """
        return _libBornAgainCore.HorizontalLine_contains(self, *args)


    def getYpos(self):
        """
        getYpos(HorizontalLine self) -> double

        double HorizontalLine::getYpos() const 

        """
        return _libBornAgainCore.HorizontalLine_getYpos(self)

    __swig_destroy__ = _libBornAgainCore.delete_HorizontalLine
    __del__ = lambda self: None
HorizontalLine_swigregister = _libBornAgainCore.HorizontalLine_swigregister
HorizontalLine_swigregister(HorizontalLine)

class Material(_object):
    """


    A wrapper for underlying material implementation

    C++ includes: Material.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Material, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Material, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Material self, Material material) -> Material
        __init__(Material self, Material material) -> Material

        Material::Material(std::unique_ptr< BaseMaterialImpl > material_impl)

        Creates material with particular material implementation. 

        """
        this = _libBornAgainCore.new_Material(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def inverted(self):
        """
        inverted(Material self) -> Material

        Material Material::inverted() const

        Constructs a material with inverted magnetization. 

        """
        return _libBornAgainCore.Material_inverted(self)


    def refractiveIndex(self, wavelength):
        """
        refractiveIndex(Material self, double wavelength) -> complex_t

        complex_t Material::refractiveIndex(double wavelength) const

        Returns refractive index. 

        """
        return _libBornAgainCore.Material_refractiveIndex(self, wavelength)


    def refractiveIndex2(self, wavelength):
        """
        refractiveIndex2(Material self, double wavelength) -> complex_t

        complex_t Material::refractiveIndex2(double wavelength) const

        Returns squared refractive index. 

        """
        return _libBornAgainCore.Material_refractiveIndex2(self, wavelength)


    def isScalarMaterial(self):
        """
        isScalarMaterial(Material self) -> bool

        bool Material::isScalarMaterial() const

        Indicates whether the interaction with the material is scalar. This means that different polarization states will be diffracted equally 

        """
        return _libBornAgainCore.Material_isScalarMaterial(self)


    def isMagneticMaterial(self):
        """
        isMagneticMaterial(Material self) -> bool

        bool Material::isMagneticMaterial() const 

        """
        return _libBornAgainCore.Material_isMagneticMaterial(self)


    def getName(self):
        """
        getName(Material self) -> std::string

        std::string Material::getName() const

        Returns the name of material. 

        """
        return _libBornAgainCore.Material_getName(self)


    def magnetization(self):
        """
        magnetization(Material self) -> kvector_t

        kvector_t Material::magnetization() const

        Get the magnetization (in A/m) 

        """
        return _libBornAgainCore.Material_magnetization(self)


    def materialData(self):
        """
        materialData(Material self) -> complex_t

        complex_t Material::materialData() const

        Returns underlying material data. The units of returned values are the same as the ones passed to material factory functions 

        """
        return _libBornAgainCore.Material_materialData(self)


    def isEmpty(self):
        """
        isEmpty(Material self) -> bool

        bool Material::isEmpty() const

        Returns true if material underlying data is nullptr. 

        """
        return _libBornAgainCore.Material_isEmpty(self)


    def isDefaultMaterial(self):
        """
        isDefaultMaterial(Material self) -> bool

        bool Material::isDefaultMaterial() const

        Returns true if material has refractive index of (1.0, 0.0) and zero magnetization. 

        """
        return _libBornAgainCore.Material_isDefaultMaterial(self)


    def scalarSubtrSLD(self, wavevectors):
        """
        scalarSubtrSLD(Material self, WavevectorInfo wavevectors) -> complex_t

        complex_t Material::scalarSubtrSLD(const WavevectorInfo &wavevectors) const

        Returns (  $ \\pi/\\lambda^2 $ - sld), sld (in  $nm^{-2}$) being the scattering length density. 

        """
        return _libBornAgainCore.Material_scalarSubtrSLD(self, wavevectors)


    def transformedMaterial(self, transform):
        """
        transformedMaterial(Material self, Transform3D const & transform) -> Material

        Material Material::transformedMaterial(const Transform3D &transform) const 

        """
        return _libBornAgainCore.Material_transformedMaterial(self, transform)

    __swig_destroy__ = _libBornAgainCore.delete_Material
    __del__ = lambda self: None
Material_swigregister = _libBornAgainCore.Material_swigregister
Material_swigregister(Material)


def HomogeneousMaterial(*args):
    """
    HomogeneousMaterial() -> Material
    HomogeneousMaterial(std::string const & name, double delta, double beta, kvector_t magnetization) -> Material
    HomogeneousMaterial(std::string const & name, double delta, double beta) -> Material
    HomogeneousMaterial(std::string const & name, complex_t refractive_index, kvector_t magnetization) -> Material
    HomogeneousMaterial(std::string const & name, complex_t refractive_index) -> Material

    BA_CORE_API_ Material HomogeneousMaterial(const std::string &name, complex_t refractive_index, kvector_t magnetization=kvector_t())

    Constructs a material with  name,  refractive_index and  magnetization (in A/m). Alternatively,  $\\delta$ and  $\\beta$ for refractive index  $n = 1 - \\delta + i \\beta$ can be passed directly. With no parameters given, constructs default (vacuum) material with  $n = 1$ and zero magnetization. 

    """
    return _libBornAgainCore.HomogeneousMaterial(*args)

def MaterialBySLD(*args):
    """
    MaterialBySLD() -> Material
    MaterialBySLD(std::string const & name, double sld_real, double sld_imag, kvector_t magnetization) -> Material
    MaterialBySLD(std::string const & name, double sld_real, double sld_imag) -> Material

    BA_CORE_API_ Material MaterialBySLD(const std::string &name, double sld_real, double sld_imag, kvector_t magnetization=kvector_t())

    Constructs a wavelength-independent material with a given complex-valued scattering lenght density (SLD). SLD values for a wide variety of materials can be found on https://sld-calculator.appspot.com/ and https://www.ncnr.nist.gov/resources/activation/ By convention, SLD imaginary part is treated as negative by default, which corresponds to attenuation of the signal. With no parameters given, MaterialBySLD constructs default (vacuum) material with zero sld and zero magnetization.

    Parameters:
    -----------

    name: 
    material name

    sld_real: 
    real part of the scattering length density, inverse square angstroms

    sld_imag: 
    imaginary part of the scattering length density, inverse square angstroms

    magnetization: 
    magnetization (in A/m) 

    """
    return _libBornAgainCore.MaterialBySLD(*args)
class MesoCrystal(IParticle):
    """


    A particle with an internal structure of smaller particles.

    C++ includes: MesoCrystal.h

    """

    __swig_setmethods__ = {}
    for _s in [IParticle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MesoCrystal, name, value)
    __swig_getmethods__ = {}
    for _s in [IParticle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MesoCrystal, name)
    __repr__ = _swig_repr

    def __init__(self, particle_structure, form_factor):
        """
        __init__(MesoCrystal self, IClusteredParticles particle_structure, IFormFactor form_factor) -> MesoCrystal

        MesoCrystal::MesoCrystal(const IClusteredParticles &particle_structure, const IFormFactor &form_factor)

        """
        this = _libBornAgainCore.new_MesoCrystal(particle_structure, form_factor)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_MesoCrystal
    __del__ = lambda self: None

    def clone(self):
        """
        clone(MesoCrystal self) -> MesoCrystal

        MesoCrystal * MesoCrystal::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.MesoCrystal_clone(self)


    def accept(self, visitor):
        """
        accept(MesoCrystal self, INodeVisitor visitor)

        void MesoCrystal::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.MesoCrystal_accept(self, visitor)


    def createSlicedParticle(self, limits):
        """
        createSlicedParticle(MesoCrystal self, ZLimits limits) -> SlicedParticle

        SlicedParticle MesoCrystal::createSlicedParticle(ZLimits limits) const overridefinal

        Create a sliced form factor for this particle. 

        """
        return _libBornAgainCore.MesoCrystal_createSlicedParticle(self, limits)


    def getChildren(self):
        """
        getChildren(MesoCrystal self) -> swig_dummy_type_const_inode_vector

        std::vector< const INode * > MesoCrystal::getChildren() const overridefinal

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.MesoCrystal_getChildren(self)

MesoCrystal_swigregister = _libBornAgainCore.MesoCrystal_swigregister
MesoCrystal_swigregister(MesoCrystal)

class MultiLayer(ISample):
    """


    Our sample model: a stack of layers one below the other.Example of system of 4 layers (3 interfaces):

    ambience layer #0 z=getLayerBottomZ(0)=0.0 ------ interface #0 Fe, 20A layer #1 z=getLayerBottomZ(1)=-20.0 ------ interface #1 Cr, 40A layer #2 z=getLayerBottomZ(2)=-60.0 ------ interface #2 substrate layer #3 z=getLayerBottomZ(3)=-60.0

    C++ includes: MultiLayer.h

    """

    __swig_setmethods__ = {}
    for _s in [ISample]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [ISample]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiLayer, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(MultiLayer self) -> MultiLayer

        MultiLayer::MultiLayer()

        """
        this = _libBornAgainCore.new_MultiLayer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_MultiLayer
    __del__ = lambda self: None

    def accept(self, visitor):
        """
        accept(MultiLayer self, INodeVisitor visitor)

        void MultiLayer::accept(INodeVisitor *visitor) const finaloverride

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.MultiLayer_accept(self, visitor)


    def numberOfLayers(self):
        """
        numberOfLayers(MultiLayer self) -> size_t

        size_t MultiLayer::numberOfLayers() const 

        """
        return _libBornAgainCore.MultiLayer_numberOfLayers(self)


    def numberOfInterfaces(self):
        """
        numberOfInterfaces(MultiLayer self) -> size_t

        size_t MultiLayer::numberOfInterfaces() const 

        """
        return _libBornAgainCore.MultiLayer_numberOfInterfaces(self)


    def addLayer(self, layer):
        """
        addLayer(MultiLayer self, Layer layer)

        void MultiLayer::addLayer(const Layer &layer)

        Adds object to multilayer.

        Adds layer with default (zero) roughness. 

        """
        return _libBornAgainCore.MultiLayer_addLayer(self, layer)


    def addLayerWithTopRoughness(self, layer, roughness):
        """
        addLayerWithTopRoughness(MultiLayer self, Layer layer, LayerRoughness roughness)

        void MultiLayer::addLayerWithTopRoughness(const Layer &layer, const LayerRoughness &roughness)

        Adds layer with top roughness. 

        """
        return _libBornAgainCore.MultiLayer_addLayerWithTopRoughness(self, layer, roughness)


    def layer(self, i_layer):
        """
        layer(MultiLayer self, size_t i_layer) -> Layer

        const Layer* MultiLayer::layer(size_t i_layer) const

        Returns layer with given index. 

        """
        return _libBornAgainCore.MultiLayer_layer(self, i_layer)


    def layerInterface(self, i_interface):
        """
        layerInterface(MultiLayer self, size_t i_interface) -> LayerInterface const *

        const LayerInterface* MultiLayer::layerInterface(size_t i_interface) const

        Returns layer with given index. 

        """
        return _libBornAgainCore.MultiLayer_layerInterface(self, i_interface)


    def layerTopZ(self, i_layer):
        """
        layerTopZ(MultiLayer self, size_t i_layer) -> double

        double MultiLayer::layerTopZ(size_t i_layer) const

        Returns z-coordinate of the layer's bottom. 

        """
        return _libBornAgainCore.MultiLayer_layerTopZ(self, i_layer)


    def layerBottomZ(self, i_layer):
        """
        layerBottomZ(MultiLayer self, size_t i_layer) -> double

        double MultiLayer::layerBottomZ(size_t i_layer) const

        Returns z-coordinate of the layer's bottom. 

        """
        return _libBornAgainCore.MultiLayer_layerBottomZ(self, i_layer)


    def layerThickness(self, i_layer):
        """
        layerThickness(MultiLayer self, size_t i_layer) -> double

        double MultiLayer::layerThickness(size_t i_layer) const

        Returns thickness of layer. 

        """
        return _libBornAgainCore.MultiLayer_layerThickness(self, i_layer)


    def layerTopInterface(self, i_layer):
        """
        layerTopInterface(MultiLayer self, size_t i_layer) -> LayerInterface const *

        const LayerInterface * MultiLayer::layerTopInterface(size_t i_layer) const

        Returns top interface of layer.

        Returns pointer to the top interface of the layer. nInterfaces = nLayers-1, first layer in multilayer doesn't have interface. 

        """
        return _libBornAgainCore.MultiLayer_layerTopInterface(self, i_layer)


    def layerBottomInterface(self, i_layer):
        """
        layerBottomInterface(MultiLayer self, size_t i_layer) -> LayerInterface const *

        const LayerInterface * MultiLayer::layerBottomInterface(size_t i_layer) const

        Returns bottom interface of layer.

        Returns pointer to the bottom interface of the layer. 

        """
        return _libBornAgainCore.MultiLayer_layerBottomInterface(self, i_layer)


    def layerMaterial(self, i_layer):
        """
        layerMaterial(MultiLayer self, size_t i_layer) -> Material

        Material MultiLayer::layerMaterial(size_t i_layer) const

        Returns layer material. 

        """
        return _libBornAgainCore.MultiLayer_layerMaterial(self, i_layer)


    def setLayerMaterial(self, i_layer, material):
        """
        setLayerMaterial(MultiLayer self, size_t i_layer, Material material)

        void MultiLayer::setLayerMaterial(size_t i_layer, Material material)

        Changes a layer's material. 

        """
        return _libBornAgainCore.MultiLayer_setLayerMaterial(self, i_layer, material)


    def clone(self):
        """
        clone(MultiLayer self) -> MultiLayer

        MultiLayer * MultiLayer::clone() const finaloverride

        Returns a clone of multilayer with clones of all layers and recreated interfaces between layers 

        """
        return _libBornAgainCore.MultiLayer_clone(self)


    def cloneInvertB(self):
        """
        cloneInvertB(MultiLayer self) -> MultiLayer

        MultiLayer * MultiLayer::cloneInvertB() const

        Returns a clone with inverted magnetic fields. 

        """
        return _libBornAgainCore.MultiLayer_cloneInvertB(self)


    def setCrossCorrLength(self, crossCorrLength):
        """
        setCrossCorrLength(MultiLayer self, double crossCorrLength)

        void MultiLayer::setCrossCorrLength(double crossCorrLength)

        Sets cross correlation length of roughnesses between interfaces. 

        """
        return _libBornAgainCore.MultiLayer_setCrossCorrLength(self, crossCorrLength)


    def crossCorrLength(self):
        """
        crossCorrLength(MultiLayer self) -> double

        double MultiLayer::crossCorrLength() const

        Returns cross correlation length of roughnesses between interfaces. 

        """
        return _libBornAgainCore.MultiLayer_crossCorrLength(self)


    def setExternalField(self, ext_field):
        """
        setExternalField(MultiLayer self, kvector_t ext_field)

        void MultiLayer::setExternalField(kvector_t ext_field)

        Sets the external field applied to the multilayer (units: A/m) 

        """
        return _libBornAgainCore.MultiLayer_setExternalField(self, ext_field)


    def externalField(self):
        """
        externalField(MultiLayer self) -> kvector_t

        kvector_t MultiLayer::externalField() const

        Returns the external field applied to the multilayer (units: A/m) 

        """
        return _libBornAgainCore.MultiLayer_externalField(self)


    def crossCorrSpectralFun(self, kvec, j, k):
        """
        crossCorrSpectralFun(MultiLayer self, kvector_t kvec, size_t j, size_t k) -> double

        double MultiLayer::crossCorrSpectralFun(const kvector_t kvec, size_t j, size_t k) const

        Fourier transform of the correlation function of roughnesses between the interfaces

        Fourier transform of the correlation function of roughnesses between the interfaces j,k - indexes of layers in multilayer whose bottom interfaces we are considering 

        """
        return _libBornAgainCore.MultiLayer_crossCorrSpectralFun(self, kvec, j, k)


    def indexOfLayer(self, p_layer):
        """
        indexOfLayer(MultiLayer self, Layer p_layer) -> size_t

        size_t MultiLayer::indexOfLayer(const Layer *p_layer) const

        returns layer index 

        """
        return _libBornAgainCore.MultiLayer_indexOfLayer(self, p_layer)


    def requiresMatrixRTCoefficients(self):
        """
        requiresMatrixRTCoefficients(MultiLayer self) -> bool

        bool MultiLayer::requiresMatrixRTCoefficients() const

        returns true if contains magnetic materials and matrix calculations are required 

        """
        return _libBornAgainCore.MultiLayer_requiresMatrixRTCoefficients(self)


    def bottomZToLayerIndex(self, z_value):
        """
        bottomZToLayerIndex(MultiLayer self, double z_value) -> size_t

        size_t MultiLayer::bottomZToLayerIndex(double z_value) const

        returns layer index corresponding to given global z coordinate The top interface position of a layer is considered to belong to the layer above 

        """
        return _libBornAgainCore.MultiLayer_bottomZToLayerIndex(self, z_value)


    def topZToLayerIndex(self, z_value):
        """
        topZToLayerIndex(MultiLayer self, double z_value) -> size_t

        size_t MultiLayer::topZToLayerIndex(double z_value) const

        returns layer index corresponding to given global z coordinate The top interface position of a layer is considered to belong to the layer beneath 

        """
        return _libBornAgainCore.MultiLayer_topZToLayerIndex(self, z_value)


    def containsMagneticMaterial(self):
        """
        containsMagneticMaterial(MultiLayer self) -> bool

        bool MultiLayer::containsMagneticMaterial() const 

        """
        return _libBornAgainCore.MultiLayer_containsMagneticMaterial(self)


    def containsCompatibleMaterials(self):
        """
        containsCompatibleMaterials(MultiLayer self) -> bool

        bool MultiLayer::containsCompatibleMaterials() const

        Returns true if the multilayer contains non-default materials of one type only. 

        """
        return _libBornAgainCore.MultiLayer_containsCompatibleMaterials(self)


    def initBFields(self):
        """
        initBFields(MultiLayer self)

        void MultiLayer::initBFields()

        precalculate the magnetic B fields in each layer 

        """
        return _libBornAgainCore.MultiLayer_initBFields(self)


    def hasRoughness(self):
        """
        hasRoughness(MultiLayer self) -> bool

        bool MultiLayer::hasRoughness() const 

        """
        return _libBornAgainCore.MultiLayer_hasRoughness(self)


    def totalNofLayouts(self):
        """
        totalNofLayouts(MultiLayer self) -> size_t

        size_t MultiLayer::totalNofLayouts() const 

        """
        return _libBornAgainCore.MultiLayer_totalNofLayouts(self)


    def getChildren(self):
        """
        getChildren(MultiLayer self) -> swig_dummy_type_const_inode_vector

        std::vector< const INode * > MultiLayer::getChildren() const finaloverride

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.MultiLayer_getChildren(self)

MultiLayer_swigregister = _libBornAgainCore.MultiLayer_swigregister
MultiLayer_swigregister(MultiLayer)

class OffSpecSimulation(Simulation2D):
    """


    Main class to run an off-specular simulation.

    C++ includes: OffSpecSimulation.h

    """

    __swig_setmethods__ = {}
    for _s in [Simulation2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OffSpecSimulation, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OffSpecSimulation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OffSpecSimulation self) -> OffSpecSimulation
        __init__(OffSpecSimulation self, MultiLayer p_sample) -> OffSpecSimulation
        __init__(OffSpecSimulation self, std::shared_ptr< IMultiLayerBuilder > const p_sample_builder) -> OffSpecSimulation

        OffSpecSimulation::OffSpecSimulation(const std::shared_ptr< class IMultiLayerBuilder > p_sample_builder)

        """
        this = _libBornAgainCore.new_OffSpecSimulation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_OffSpecSimulation
    __del__ = lambda self: None

    def clone(self):
        """
        clone(OffSpecSimulation self) -> OffSpecSimulation

        OffSpecSimulation* OffSpecSimulation::clone() const override

        """
        return _libBornAgainCore.OffSpecSimulation_clone(self)


    def accept(self, visitor):
        """
        accept(OffSpecSimulation self, INodeVisitor visitor)

        void OffSpecSimulation::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.OffSpecSimulation_accept(self, visitor)


    def prepareSimulation(self):
        """
        prepareSimulation(OffSpecSimulation self)

        void OffSpecSimulation::prepareSimulation() final

        Put into a clean state for running a simulation. 

        """
        return _libBornAgainCore.OffSpecSimulation_prepareSimulation(self)


    def numberOfSimulationElements(self):
        """
        numberOfSimulationElements(OffSpecSimulation self) -> size_t

        size_t OffSpecSimulation::numberOfSimulationElements() const final

        Gets the number of elements this simulation needs to calculate. 

        """
        return _libBornAgainCore.OffSpecSimulation_numberOfSimulationElements(self)


    def result(self):
        """
        result(OffSpecSimulation self) -> SimulationResult

        SimulationResult OffSpecSimulation::result() const override

        Returns the results of the simulation in a format that supports unit conversion and export to numpy arrays 

        """
        return _libBornAgainCore.OffSpecSimulation_result(self)


    def setBeamParameters(self, wavelength, alpha_axis, phi_i):
        """
        setBeamParameters(OffSpecSimulation self, double wavelength, IAxis alpha_axis, double phi_i)

        void OffSpecSimulation::setBeamParameters(double wavelength, const IAxis &alpha_axis, double phi_i)

        Sets beam parameters from here (forwarded to  Instrument) 

        """
        return _libBornAgainCore.OffSpecSimulation_setBeamParameters(self, wavelength, alpha_axis, phi_i)


    def beamAxis(self):
        """
        beamAxis(OffSpecSimulation self) -> IAxis

        const IAxis * OffSpecSimulation::beamAxis() const

        Returns axis of the beam. 

        """
        return _libBornAgainCore.OffSpecSimulation_beamAxis(self)

OffSpecSimulation_swigregister = _libBornAgainCore.OffSpecSimulation_swigregister
OffSpecSimulation_swigregister(OffSpecSimulation)

class IntensityData(_object):
    """


    Template class to store data of any type in multi-dimensional space.

    C++ includes: OutputData.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntensityData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntensityData, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(OutputData<(double)> self) -> IntensityData

        OutputData< T >::OutputData(const OutputData &)=delete

        """
        this = _libBornAgainCore.new_IntensityData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_IntensityData
    __del__ = lambda self: None

    def clone(self):
        """
        clone(IntensityData self) -> IntensityData

        OutputData< T > * OutputData< T >::clone() const 

        """
        return _libBornAgainCore.IntensityData_clone(self)


    def copyFrom(self, x):
        """
        copyFrom(IntensityData self, IntensityData x)

        void OutputData< T >::copyFrom(const OutputData< T > &x)

        """
        return _libBornAgainCore.IntensityData_copyFrom(self, x)


    def meanValues(self):
        """
        meanValues(IntensityData self) -> IntensityData

        OutputData< double > * OutputData< T >::meanValues() const 

        """
        return _libBornAgainCore.IntensityData_meanValues(self)


    def addAxis(self, *args):
        """
        addAxis(IntensityData self, IAxis new_axis)
        addAxis(IntensityData self, std::string const & name, size_t size, double start, double end)

        void OutputData< T >::addAxis(const std::string &name, size_t size, double start, double end)

        """
        return _libBornAgainCore.IntensityData_addAxis(self, *args)


    def getAxis(self, *args):
        """
        getAxis(IntensityData self, size_t serial_number) -> IAxis
        getAxis(IntensityData self, std::string const & axis_name) -> IAxis

        const IAxis & OutputData< T >::getAxis(const std::string &axis_name) const

        returns axis with given name 

        """
        return _libBornAgainCore.IntensityData_getAxis(self, *args)


    def getRank(self):
        """
        getRank(IntensityData self) -> size_t

        size_t OutputData< T >::getRank() const

        Returns number of dimensions. 

        """
        return _libBornAgainCore.IntensityData_getRank(self)


    def getAllocatedSize(self):
        """
        getAllocatedSize(IntensityData self) -> size_t

        size_t OutputData< T >::getAllocatedSize() const

        Returns total size of data buffer (product of bin number in every dimension). 

        """
        return _libBornAgainCore.IntensityData_getAllocatedSize(self)


    def getAllSizes(self):
        """
        getAllSizes(IntensityData self) -> std::vector< size_t,std::allocator< size_t > >

        std::vector< size_t > OutputData< T >::getAllSizes() const

        Returns all sizes of its axes. 

        """
        return _libBornAgainCore.IntensityData_getAllSizes(self)


    def getRawDataVector(self):
        """
        getRawDataVector(IntensityData self) -> vdouble1d_t

        std::vector< T > OutputData< T >::getRawDataVector() const

        Returns copy of raw data vector. 

        """
        return _libBornAgainCore.IntensityData_getRawDataVector(self)


    def totalSum(self):
        """
        totalSum(IntensityData self) -> double

        T OutputData< T >::totalSum() const

        Returns sum of all values in the data structure. 

        """
        return _libBornAgainCore.IntensityData_totalSum(self)


    def begin(self, *args):
        """
        begin(IntensityData self) -> OutputData< double >::iterator
        begin(IntensityData self) -> OutputData< double >::const_iterator

        OutputData< T >::const_iterator OutputData< T >::begin() const

        Returns read-only iterator that points to the first element. 

        """
        return _libBornAgainCore.IntensityData_begin(self, *args)


    def end(self, *args):
        """
        end(IntensityData self) -> OutputData< double >::iterator
        end(IntensityData self) -> OutputData< double >::const_iterator

        const_iterator OutputData< T >::end() const

        Returns read-only iterator that points to the one past last element. 

        """
        return _libBornAgainCore.IntensityData_end(self, *args)


    def getAxesBinIndices(self, global_index):
        """
        getAxesBinIndices(IntensityData self, size_t global_index) -> vector_integer_t

        std::vector< int > OutputData< T >::getAxesBinIndices(size_t global_index) const

        Returns vector of axes indices for given global index

        Parameters:
        -----------

        global_index: 
        The global index of this data structure.

        Vector of bin indices for all axes defined 

        """
        return _libBornAgainCore.IntensityData_getAxesBinIndices(self, global_index)


    def getAxisBinIndex(self, *args):
        """
        getAxisBinIndex(IntensityData self, size_t global_index, size_t i_selected_axis) -> size_t
        getAxisBinIndex(IntensityData self, size_t global_index, std::string const & axis_name) -> size_t

        size_t OutputData< T >::getAxisBinIndex(size_t global_index, const std::string &axis_name) const

        Returns axis bin index for given global index

        Parameters:
        -----------

        global_index: 
        The global index of this data structure.

        axis_name: 
        The name of selected axis.

        Corresponding bin index for selected axis 

        """
        return _libBornAgainCore.IntensityData_getAxisBinIndex(self, *args)


    def toGlobalIndex(self, axes_indices):
        """
        toGlobalIndex(IntensityData self, std::vector< unsigned int,std::allocator< unsigned int > > const & axes_indices) -> size_t

        size_t OutputData< T >::toGlobalIndex(const std::vector< unsigned > &axes_indices) const

        Returns global index for specified indices of axes

        Parameters:
        -----------

        axes_indices: 
        Vector of axes indices for all specified axes in this dataset

        Corresponding global index 

        """
        return _libBornAgainCore.IntensityData_toGlobalIndex(self, axes_indices)


    def findGlobalIndex(self, coordinates):
        """
        findGlobalIndex(IntensityData self, vdouble1d_t coordinates) -> size_t

        size_t OutputData< T >::findGlobalIndex(const std::vector< double > &coordinates) const

        Returns global index for specified axes values

        Parameters:
        -----------

        coordinates: 
        Vector of axes coordinates for all specified axes in this dataset

        Closest global index 

        """
        return _libBornAgainCore.IntensityData_findGlobalIndex(self, coordinates)


    def getAxisValue(self, *args):
        """
        getAxisValue(IntensityData self, size_t global_index, size_t i_selected_axis) -> double
        getAxisValue(IntensityData self, size_t global_index, std::string const & axis_name) -> double

        double OutputData< T >::getAxisValue(size_t global_index, const std::string &axis_name) const

        Returns the value of selected axis for given global_index.

        Parameters:
        -----------

        global_index: 
        The global index of this data structure.

        axis_name: 
        The name of selected axis.

        corresponding bin center of selected axis 

        """
        return _libBornAgainCore.IntensityData_getAxisValue(self, *args)


    def getAxesValues(self, global_index):
        """
        getAxesValues(IntensityData self, size_t global_index) -> vdouble1d_t

        std::vector< double > OutputData< T >::getAxesValues(size_t global_index) const

        Returns values on all defined axes for given globalbin number

        Parameters:
        -----------

        global_index: 
        The global index of this data structure.

        Vector of corresponding bin centers 

        """
        return _libBornAgainCore.IntensityData_getAxesValues(self, global_index)


    def getAxisBin(self, *args):
        """
        getAxisBin(IntensityData self, size_t global_index, size_t i_selected_axis) -> Bin1D
        getAxisBin(IntensityData self, size_t global_index, std::string const & axis_name) -> Bin1D

        Bin1D OutputData< T >::getAxisBin(size_t global_index, const std::string &axis_name) const

        Returns bin of selected axis for given global_index.

        Parameters:
        -----------

        global_index: 
        The global index of this data structure.

        axis_name: 
        The name of selected axis.

        Corresponding  Bin1D object 

        """
        return _libBornAgainCore.IntensityData_getAxisBin(self, *args)


    def clear(self):
        """
        clear(IntensityData self)

        void OutputData< T >::clear()

        Sets object into initial state (no dimensions, data) 

        """
        return _libBornAgainCore.IntensityData_clear(self)


    def setAllTo(self, value):
        """
        setAllTo(IntensityData self, double const & value)

        void OutputData< T >::setAllTo(const T &value)

        Sets content of output data to specific value. 

        """
        return _libBornAgainCore.IntensityData_setAllTo(self, value)


    def scaleAll(self, factor):
        """
        scaleAll(IntensityData self, double const & factor)

        void OutputData< T >::scaleAll(const T &factor)

        multiply every item of this output data by value 

        """
        return _libBornAgainCore.IntensityData_scaleAll(self, factor)


    def setAxisSizes(self, rank, n_dims):
        """
        setAxisSizes(IntensityData self, size_t rank, int * n_dims)

        void OutputData< T >::setAxisSizes(size_t rank, int *n_dims)

        Adds 'rank' axes with indicated sizes. 

        """
        return _libBornAgainCore.IntensityData_setAxisSizes(self, rank, n_dims)


    def setRawDataVector(self, data_vector):
        """
        setRawDataVector(IntensityData self, vdouble1d_t data_vector)

        void OutputData< T >::setRawDataVector(const std::vector< T > &data_vector)

        Sets new values to raw data vector. 

        """
        return _libBornAgainCore.IntensityData_setRawDataVector(self, data_vector)


    def setRawDataArray(self, source):
        """
        setRawDataArray(IntensityData self, double const * source)

        void OutputData< T >::setRawDataArray(const T *source)

        Sets new values to raw data array. 

        """
        return _libBornAgainCore.IntensityData_setRawDataArray(self, source)


    def __iadd__(self, right):
        """__iadd__(IntensityData self, IntensityData right) -> IntensityData"""
        return _libBornAgainCore.IntensityData___iadd__(self, right)


    def __isub__(self, right):
        """__isub__(IntensityData self, IntensityData right) -> IntensityData"""
        return _libBornAgainCore.IntensityData___isub__(self, right)


    def __itruediv__(self, *args):
        return _libBornAgainCore.IntensityData___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __imul__(self, right):
        """__imul__(IntensityData self, IntensityData right) -> IntensityData"""
        return _libBornAgainCore.IntensityData___imul__(self, right)


    def getValue(self, index):
        """
        getValue(IntensityData self, size_t index) -> double

        double OutputData< T >::getValue(size_t index) const

        Returns value or summed value, depending on T. 

        """
        return _libBornAgainCore.IntensityData_getValue(self, index)


    def getArray(self):
        """
        getArray(IntensityData self) -> PyObject *

        PyObject* OutputData< T >::getArray() const

        returns data as Python numpy array 

        """
        return _libBornAgainCore.IntensityData_getArray(self)


    def isInitialized(self):
        """
        isInitialized(IntensityData self) -> bool

        bool OutputData< T >::isInitialized() const

        returns true if object is correctly initialized 

        """
        return _libBornAgainCore.IntensityData_isInitialized(self)


    def allocate(self):
        """
        allocate(IntensityData self)

        void OutputData< T >::allocate()

        memory allocation for current dimensions configuration 

        """
        return _libBornAgainCore.IntensityData_allocate(self)


    def __getitem__(self, i):
        """__getitem__(IntensityData self, unsigned int i) -> double"""
        return _libBornAgainCore.IntensityData___getitem__(self, i)


    def __setitem__(self, i, value):
        """__setitem__(IntensityData self, unsigned int i, double value) -> double"""
        return _libBornAgainCore.IntensityData___setitem__(self, i, value)

IntensityData_swigregister = _libBornAgainCore.IntensityData_swigregister
IntensityData_swigregister(IntensityData)

class ParameterDistribution(IParameterized):
    """Proxy of C++ ParameterDistribution class."""

    __swig_setmethods__ = {}
    for _s in [IParameterized]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterDistribution, name, value)
    __swig_getmethods__ = {}
    for _s in [IParameterized]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterDistribution, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ParameterDistribution self, std::string const & par_name, IDistribution1D distribution, size_t nbr_samples, double sigma_factor=0.0, RealLimits limits) -> ParameterDistribution
        __init__(ParameterDistribution self, std::string const & par_name, IDistribution1D distribution, size_t nbr_samples, double sigma_factor=0.0) -> ParameterDistribution
        __init__(ParameterDistribution self, std::string const & par_name, IDistribution1D distribution, size_t nbr_samples) -> ParameterDistribution
        __init__(ParameterDistribution self, std::string const & par_name, IDistribution1D distribution, size_t nbr_samples, double xmin, double xmax) -> ParameterDistribution
        __init__(ParameterDistribution self, ParameterDistribution other) -> ParameterDistribution

        ParameterDistribution::ParameterDistribution(const ParameterDistribution &other)

        """
        this = _libBornAgainCore.new_ParameterDistribution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_ParameterDistribution
    __del__ = lambda self: None

    def linkParameter(self, par_name):
        """
        linkParameter(ParameterDistribution self, std::string par_name) -> ParameterDistribution

        ParameterDistribution & ParameterDistribution::linkParameter(std::string par_name)

        """
        return _libBornAgainCore.ParameterDistribution_linkParameter(self, par_name)


    def getMainParameterName(self):
        """
        getMainParameterName(ParameterDistribution self) -> std::string

        std::string ParameterDistribution::getMainParameterName() const

        get the main parameter's name 

        """
        return _libBornAgainCore.ParameterDistribution_getMainParameterName(self)


    def getNbrSamples(self):
        """
        getNbrSamples(ParameterDistribution self) -> size_t

        size_t ParameterDistribution::getNbrSamples() const

        get number of samples for this distribution 

        """
        return _libBornAgainCore.ParameterDistribution_getNbrSamples(self)


    def getSigmaFactor(self):
        """
        getSigmaFactor(ParameterDistribution self) -> double

        double ParameterDistribution::getSigmaFactor() const

        get the sigma factor 

        """
        return _libBornAgainCore.ParameterDistribution_getSigmaFactor(self)


    def getDistribution(self, *args):
        """
        getDistribution(ParameterDistribution self) -> IDistribution1D
        getDistribution(ParameterDistribution self) -> IDistribution1D

        IDistribution1D * ParameterDistribution::getDistribution()

        """
        return _libBornAgainCore.ParameterDistribution_getDistribution(self, *args)


    def generateSamples(self):
        """
        generateSamples(ParameterDistribution self) -> ParameterSampleVector

        std::vector< ParameterSample > ParameterDistribution::generateSamples() const

        generate list of sampled values with their weight 

        """
        return _libBornAgainCore.ParameterDistribution_generateSamples(self)


    def getLinkedParameterNames(self):
        """
        getLinkedParameterNames(ParameterDistribution self) -> vector_string_t

        std::vector<std::string> ParameterDistribution::getLinkedParameterNames() const

        get list of linked parameter names 

        """
        return _libBornAgainCore.ParameterDistribution_getLinkedParameterNames(self)


    def getLimits(self):
        """
        getLimits(ParameterDistribution self) -> RealLimits

        RealLimits ParameterDistribution::getLimits() const 

        """
        return _libBornAgainCore.ParameterDistribution_getLimits(self)


    def getMinValue(self):
        """
        getMinValue(ParameterDistribution self) -> double

        double ParameterDistribution::getMinValue() const 

        """
        return _libBornAgainCore.ParameterDistribution_getMinValue(self)


    def getMaxValue(self):
        """
        getMaxValue(ParameterDistribution self) -> double

        double ParameterDistribution::getMaxValue() const 

        """
        return _libBornAgainCore.ParameterDistribution_getMaxValue(self)

ParameterDistribution_swigregister = _libBornAgainCore.ParameterDistribution_swigregister
ParameterDistribution_swigregister(ParameterDistribution)

class ParameterPool(ICloneable):
    """


    Container with parameters for  IParameterized object.

    C++ includes: ParameterPool.h

    """

    __swig_setmethods__ = {}
    for _s in [ICloneable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterPool, name, value)
    __swig_getmethods__ = {}
    for _s in [ICloneable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterPool, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(ParameterPool self) -> ParameterPool

        ParameterPool::ParameterPool()

        Constructs an empty parameter pool. 

        """
        this = _libBornAgainCore.new_ParameterPool()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_ParameterPool
    __del__ = lambda self: None

    def clone(self):
        """
        clone(ParameterPool self) -> ParameterPool

        ParameterPool * ParameterPool::clone() const

        Returns a literal clone. 

        """
        return _libBornAgainCore.ParameterPool_clone(self)


    def copyToExternalPool(self, prefix, other_pool):
        """
        copyToExternalPool(ParameterPool self, std::string const & prefix, ParameterPool other_pool)

        void ParameterPool::copyToExternalPool(const std::string &prefix, ParameterPool *other_pool) const

        Copies parameters of given pool to  other pool, prepeding  prefix to the parameter names. 

        """
        return _libBornAgainCore.ParameterPool_copyToExternalPool(self, prefix, other_pool)


    def clear(self):
        """
        clear(ParameterPool self)

        void ParameterPool::clear()

        Clears the parameter map. 

        """
        return _libBornAgainCore.ParameterPool_clear(self)


    def size(self):
        """
        size(ParameterPool self) -> size_t

        size_t ParameterPool::size() const

        Returns number of parameters in the pool. 

        """
        return _libBornAgainCore.ParameterPool_size(self)


    def addParameter(self, newPar):
        """
        addParameter(ParameterPool self, RealParameter newPar) -> RealParameter

        RealParameter & ParameterPool::addParameter(RealParameter *newPar)

        Adds parameter to the pool, and returns reference to the input pointer.

        Returning the input pointer allows us to concatenate function calls like pool->addParameter( new  RealParameter(...) ).setLimits(-1,+1).setFixed().setUnit("nm") 

        """
        return _libBornAgainCore.ParameterPool_addParameter(self, newPar)


    def parameter(self, *args):
        """
        parameter(ParameterPool self, std::string const & name) -> RealParameter
        parameter(ParameterPool self, std::string const & name) -> RealParameter

        const RealParameter * ParameterPool::parameter(const std::string &name) const

        Returns parameter with given  name. 

        """
        return _libBornAgainCore.ParameterPool_parameter(self, *args)


    def parameters(self):
        """
        parameters(ParameterPool self) -> std::vector< RealParameter *,std::allocator< RealParameter * > > const

        const std::vector<RealParameter*> ParameterPool::parameters() const

        Returns full vector of parameters. 

        """
        return _libBornAgainCore.ParameterPool_parameters(self)


    def getMatchedParameters(self, pattern):
        """
        getMatchedParameters(ParameterPool self, std::string const & pattern) -> std::vector< RealParameter *,std::allocator< RealParameter * > >

        std::vector< RealParameter * > ParameterPool::getMatchedParameters(const std::string &pattern) const

        Returns nonempty vector of parameters that match the  pattern ('*' allowed), or throws. 

        """
        return _libBornAgainCore.ParameterPool_getMatchedParameters(self, pattern)


    def getUniqueMatch(self, pattern):
        """
        getUniqueMatch(ParameterPool self, std::string const & pattern) -> RealParameter

        RealParameter * ParameterPool::getUniqueMatch(const std::string &pattern) const

        Returns the one parameter that matches the  pattern (wildcards '*' allowed), or throws. 

        """
        return _libBornAgainCore.ParameterPool_getUniqueMatch(self, pattern)


    def setParameterValue(self, name, value):
        """
        setParameterValue(ParameterPool self, std::string const & name, double value)

        void ParameterPool::setParameterValue(const std::string &name, double value)

        Sets parameter value. 

        """
        return _libBornAgainCore.ParameterPool_setParameterValue(self, name, value)


    def setMatchedParametersValue(self, wildcards, value):
        """
        setMatchedParametersValue(ParameterPool self, std::string const & wildcards, double value) -> int

        int ParameterPool::setMatchedParametersValue(const std::string &wildcards, double value)

        Sets value of the nonzero parameters that match  pattern ('*' allowed), or throws. 

        """
        return _libBornAgainCore.ParameterPool_setMatchedParametersValue(self, wildcards, value)


    def setUniqueMatchValue(self, pattern, value):
        """
        setUniqueMatchValue(ParameterPool self, std::string const & pattern, double value)

        void ParameterPool::setUniqueMatchValue(const std::string &pattern, double value)

        Sets value of the one parameter that matches  pattern ('*' allowed), or throws. 

        """
        return _libBornAgainCore.ParameterPool_setUniqueMatchValue(self, pattern, value)


    def parameterNames(self):
        """
        parameterNames(ParameterPool self) -> vector_string_t

        std::vector< std::string > ParameterPool::parameterNames() const 

        """
        return _libBornAgainCore.ParameterPool_parameterNames(self)


    def removeParameter(self, name):
        """
        removeParameter(ParameterPool self, std::string const & name)

        void ParameterPool::removeParameter(const std::string &name)

        Removes parameter with given name from the pool. 

        """
        return _libBornAgainCore.ParameterPool_removeParameter(self, name)


    def __getitem__(self, index):
        """__getitem__(ParameterPool self, size_t index) -> RealParameter"""
        return _libBornAgainCore.ParameterPool___getitem__(self, index)


    def __iter__(self):
        return ParameterPoolIterator(self)

ParameterPool_swigregister = _libBornAgainCore.ParameterPool_swigregister
ParameterPool_swigregister(ParameterPool)

class ParameterSample(_object):
    """


    A parameter value with a weight, as obtained when sampling from a distribution.

    C++ includes: ParameterSample.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterSample, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterSample, name)
    __repr__ = _swig_repr

    def __init__(self, _value=0., _weight=1.):
        """
        __init__(ParameterSample self, double _value=0., double _weight=1.) -> ParameterSample
        __init__(ParameterSample self, double _value=0.) -> ParameterSample
        __init__(ParameterSample self) -> ParameterSample

        ParameterSample::ParameterSample(double _value=0., double _weight=1.)

        """
        this = _libBornAgainCore.new_ParameterSample(_value, _weight)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["value"] = _libBornAgainCore.ParameterSample_value_set
    __swig_getmethods__["value"] = _libBornAgainCore.ParameterSample_value_get
    if _newclass:
        value = _swig_property(_libBornAgainCore.ParameterSample_value_get, _libBornAgainCore.ParameterSample_value_set)
    __swig_setmethods__["weight"] = _libBornAgainCore.ParameterSample_weight_set
    __swig_getmethods__["weight"] = _libBornAgainCore.ParameterSample_weight_get
    if _newclass:
        weight = _swig_property(_libBornAgainCore.ParameterSample_weight_get, _libBornAgainCore.ParameterSample_weight_set)
    __swig_destroy__ = _libBornAgainCore.delete_ParameterSample
    __del__ = lambda self: None
ParameterSample_swigregister = _libBornAgainCore.ParameterSample_swigregister
ParameterSample_swigregister(ParameterSample)

class ParameterSampleVector(_object):
    """Proxy of C++ std::vector<(ParameterSample)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterSampleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterSampleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(ParameterSampleVector self) -> SwigPyIterator"""
        return _libBornAgainCore.ParameterSampleVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(ParameterSampleVector self) -> bool"""
        return _libBornAgainCore.ParameterSampleVector___nonzero__(self)


    def __bool__(self):
        """__bool__(ParameterSampleVector self) -> bool"""
        return _libBornAgainCore.ParameterSampleVector___bool__(self)


    def __len__(self):
        """__len__(ParameterSampleVector self) -> std::vector< ParameterSample >::size_type"""
        return _libBornAgainCore.ParameterSampleVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(ParameterSampleVector self, std::vector< ParameterSample >::difference_type i, std::vector< ParameterSample >::difference_type j) -> ParameterSampleVector"""
        return _libBornAgainCore.ParameterSampleVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(ParameterSampleVector self, std::vector< ParameterSample >::difference_type i, std::vector< ParameterSample >::difference_type j)
        __setslice__(ParameterSampleVector self, std::vector< ParameterSample >::difference_type i, std::vector< ParameterSample >::difference_type j, ParameterSampleVector v)
        """
        return _libBornAgainCore.ParameterSampleVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(ParameterSampleVector self, std::vector< ParameterSample >::difference_type i, std::vector< ParameterSample >::difference_type j)"""
        return _libBornAgainCore.ParameterSampleVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(ParameterSampleVector self, std::vector< ParameterSample >::difference_type i)
        __delitem__(ParameterSampleVector self, PySliceObject * slice)
        """
        return _libBornAgainCore.ParameterSampleVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(ParameterSampleVector self, PySliceObject * slice) -> ParameterSampleVector
        __getitem__(ParameterSampleVector self, std::vector< ParameterSample >::difference_type i) -> ParameterSample
        """
        return _libBornAgainCore.ParameterSampleVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(ParameterSampleVector self, PySliceObject * slice, ParameterSampleVector v)
        __setitem__(ParameterSampleVector self, PySliceObject * slice)
        __setitem__(ParameterSampleVector self, std::vector< ParameterSample >::difference_type i, ParameterSample x)
        """
        return _libBornAgainCore.ParameterSampleVector___setitem__(self, *args)


    def pop(self):
        """pop(ParameterSampleVector self) -> ParameterSample"""
        return _libBornAgainCore.ParameterSampleVector_pop(self)


    def append(self, x):
        """append(ParameterSampleVector self, ParameterSample x)"""
        return _libBornAgainCore.ParameterSampleVector_append(self, x)


    def empty(self):
        """empty(ParameterSampleVector self) -> bool"""
        return _libBornAgainCore.ParameterSampleVector_empty(self)


    def size(self):
        """size(ParameterSampleVector self) -> std::vector< ParameterSample >::size_type"""
        return _libBornAgainCore.ParameterSampleVector_size(self)


    def swap(self, v):
        """
        swap(ParameterSampleVector self, ParameterSampleVector v)

        void swap(OutputDataIterator< TValue, TContainer > &left, OutputDataIterator< TValue, TContainer > &right)

        make Swappable 

        """
        return _libBornAgainCore.ParameterSampleVector_swap(self, v)


    def begin(self):
        """begin(ParameterSampleVector self) -> std::vector< ParameterSample >::iterator"""
        return _libBornAgainCore.ParameterSampleVector_begin(self)


    def end(self):
        """end(ParameterSampleVector self) -> std::vector< ParameterSample >::iterator"""
        return _libBornAgainCore.ParameterSampleVector_end(self)


    def rbegin(self):
        """rbegin(ParameterSampleVector self) -> std::vector< ParameterSample >::reverse_iterator"""
        return _libBornAgainCore.ParameterSampleVector_rbegin(self)


    def rend(self):
        """rend(ParameterSampleVector self) -> std::vector< ParameterSample >::reverse_iterator"""
        return _libBornAgainCore.ParameterSampleVector_rend(self)


    def clear(self):
        """clear(ParameterSampleVector self)"""
        return _libBornAgainCore.ParameterSampleVector_clear(self)


    def get_allocator(self):
        """get_allocator(ParameterSampleVector self) -> std::vector< ParameterSample >::allocator_type"""
        return _libBornAgainCore.ParameterSampleVector_get_allocator(self)


    def pop_back(self):
        """pop_back(ParameterSampleVector self)"""
        return _libBornAgainCore.ParameterSampleVector_pop_back(self)


    def erase(self, *args):
        """
        erase(ParameterSampleVector self, std::vector< ParameterSample >::iterator pos) -> std::vector< ParameterSample >::iterator
        erase(ParameterSampleVector self, std::vector< ParameterSample >::iterator first, std::vector< ParameterSample >::iterator last) -> std::vector< ParameterSample >::iterator
        """
        return _libBornAgainCore.ParameterSampleVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(ParameterSample)> self) -> ParameterSampleVector
        __init__(std::vector<(ParameterSample)> self, ParameterSampleVector arg2) -> ParameterSampleVector
        __init__(std::vector<(ParameterSample)> self, std::vector< ParameterSample >::size_type size) -> ParameterSampleVector
        __init__(std::vector<(ParameterSample)> self, std::vector< ParameterSample >::size_type size, ParameterSample value) -> ParameterSampleVector
        """
        this = _libBornAgainCore.new_ParameterSampleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(ParameterSampleVector self, ParameterSample x)"""
        return _libBornAgainCore.ParameterSampleVector_push_back(self, x)


    def front(self):
        """front(ParameterSampleVector self) -> ParameterSample"""
        return _libBornAgainCore.ParameterSampleVector_front(self)


    def back(self):
        """back(ParameterSampleVector self) -> ParameterSample"""
        return _libBornAgainCore.ParameterSampleVector_back(self)


    def assign(self, n, x):
        """assign(ParameterSampleVector self, std::vector< ParameterSample >::size_type n, ParameterSample x)"""
        return _libBornAgainCore.ParameterSampleVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(ParameterSampleVector self, std::vector< ParameterSample >::size_type new_size)
        resize(ParameterSampleVector self, std::vector< ParameterSample >::size_type new_size, ParameterSample x)
        """
        return _libBornAgainCore.ParameterSampleVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(ParameterSampleVector self, std::vector< ParameterSample >::iterator pos, ParameterSample x) -> std::vector< ParameterSample >::iterator
        insert(ParameterSampleVector self, std::vector< ParameterSample >::iterator pos, std::vector< ParameterSample >::size_type n, ParameterSample x)
        """
        return _libBornAgainCore.ParameterSampleVector_insert(self, *args)


    def reserve(self, n):
        """reserve(ParameterSampleVector self, std::vector< ParameterSample >::size_type n)"""
        return _libBornAgainCore.ParameterSampleVector_reserve(self, n)


    def capacity(self):
        """capacity(ParameterSampleVector self) -> std::vector< ParameterSample >::size_type"""
        return _libBornAgainCore.ParameterSampleVector_capacity(self)

    __swig_destroy__ = _libBornAgainCore.delete_ParameterSampleVector
    __del__ = lambda self: None
ParameterSampleVector_swigregister = _libBornAgainCore.ParameterSampleVector_swigregister
ParameterSampleVector_swigregister(ParameterSampleVector)

class Particle(IParticle):
    """


    A particle with a form factor and refractive index.

    C++ includes: Particle.h

    """

    __swig_setmethods__ = {}
    for _s in [IParticle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Particle, name, value)
    __swig_getmethods__ = {}
    for _s in [IParticle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Particle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Particle self) -> Particle
        __init__(Particle self, Material material) -> Particle
        __init__(Particle self, Material material, IFormFactor form_factor) -> Particle
        __init__(Particle self, Material material, IFormFactor form_factor, IRotation rotation) -> Particle

        Particle::Particle(Material material, const IFormFactor &form_factor, const IRotation &rotation)

        """
        this = _libBornAgainCore.new_Particle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(Particle self) -> Particle

        Particle * Particle::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.Particle_clone(self)


    def accept(self, visitor):
        """
        accept(Particle self, INodeVisitor visitor)

        void Particle::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.Particle_accept(self, visitor)


    def createSlicedParticle(self, limits):
        """
        createSlicedParticle(Particle self, ZLimits limits) -> SlicedParticle

        SlicedParticle Particle::createSlicedParticle(ZLimits limits) const overridefinal

        Create a sliced form factor for this particle. 

        """
        return _libBornAgainCore.Particle_createSlicedParticle(self, limits)


    def setMaterial(self, material):
        """
        setMaterial(Particle self, Material material)

        void Particle::setMaterial(Material material)

        """
        return _libBornAgainCore.Particle_setMaterial(self, material)


    def material(self):
        """
        material(Particle self) -> Material

        const Material* Particle::material() const overridefinal

        Returns nullptr, unless overwritten to return a specific material. 

        """
        return _libBornAgainCore.Particle_material(self)


    def setFormFactor(self, form_factor):
        """
        setFormFactor(Particle self, IFormFactor form_factor)

        void Particle::setFormFactor(const IFormFactor &form_factor)

        """
        return _libBornAgainCore.Particle_setFormFactor(self, form_factor)


    def getChildren(self):
        """
        getChildren(Particle self) -> swig_dummy_type_const_inode_vector

        std::vector< const INode * > Particle::getChildren() const overridefinal

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.Particle_getChildren(self)

    __swig_destroy__ = _libBornAgainCore.delete_Particle
    __del__ = lambda self: None
Particle_swigregister = _libBornAgainCore.Particle_swigregister
Particle_swigregister(Particle)

class ParticleComposition(IParticle):
    """


    A composition of particles at fixed positions

    C++ includes: ParticleComposition.h

    """

    __swig_setmethods__ = {}
    for _s in [IParticle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleComposition, name, value)
    __swig_getmethods__ = {}
    for _s in [IParticle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleComposition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ParticleComposition self) -> ParticleComposition
        __init__(ParticleComposition self, IParticle particle, vector_kvector_t positions) -> ParticleComposition

        ParticleComposition::ParticleComposition(const IParticle &particle, std::vector< kvector_t > positions)

        """
        this = _libBornAgainCore.new_ParticleComposition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_ParticleComposition
    __del__ = lambda self: None

    def clone(self):
        """
        clone(ParticleComposition self) -> ParticleComposition

        ParticleComposition * ParticleComposition::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.ParticleComposition_clone(self)


    def accept(self, visitor):
        """
        accept(ParticleComposition self, INodeVisitor visitor)

        void ParticleComposition::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.ParticleComposition_accept(self, visitor)


    def createFormFactor(self):
        """
        createFormFactor(ParticleComposition self) -> IFormFactor

        IFormFactor * ParticleComposition::createFormFactor() const overridefinal

        Create a form factor for this particle. 

        """
        return _libBornAgainCore.ParticleComposition_createFormFactor(self)


    def addParticle(self, *args):
        """
        addParticle(ParticleComposition self, IParticle particle)
        addParticle(ParticleComposition self, IParticle particle, kvector_t position)

        void ParticleComposition::addParticle(const IParticle &particle, kvector_t position)

        """
        return _libBornAgainCore.ParticleComposition_addParticle(self, *args)


    def addParticles(self, particle, positions):
        """
        addParticles(ParticleComposition self, IParticle particle, vector_kvector_t positions)

        void ParticleComposition::addParticles(const IParticle &particle, std::vector< kvector_t > positions)

        """
        return _libBornAgainCore.ParticleComposition_addParticles(self, particle, positions)


    def nbrParticles(self):
        """
        nbrParticles(ParticleComposition self) -> size_t

        size_t ParticleComposition::nbrParticles() const

        Returns number of different particles. 

        """
        return _libBornAgainCore.ParticleComposition_nbrParticles(self)


    def getChildren(self):
        """
        getChildren(ParticleComposition self) -> swig_dummy_type_const_inode_vector

        std::vector< const INode * > ParticleComposition::getChildren() const overridefinal

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.ParticleComposition_getChildren(self)


    def decompose(self):
        """
        decompose(ParticleComposition self) -> SafePointerVector< IParticle >

        SafePointerVector< IParticle > ParticleComposition::decompose() const overridefinal

        Decompose in constituent  IParticle objects. 

        """
        return _libBornAgainCore.ParticleComposition_decompose(self)


    def bottomTopZ(self):
        """
        bottomTopZ(ParticleComposition self) -> ParticleLimits

        ParticleLimits ParticleComposition::bottomTopZ() const overridefinal

        Top and bottom z-coordinate. 

        """
        return _libBornAgainCore.ParticleComposition_bottomTopZ(self)

ParticleComposition_swigregister = _libBornAgainCore.ParticleComposition_swigregister
ParticleComposition_swigregister(ParticleComposition)

class ParticleCoreShell(IParticle):
    """


    A particle with a core/shell geometry.

    C++ includes: ParticleCoreShell.h

    """

    __swig_setmethods__ = {}
    for _s in [IParticle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleCoreShell, name, value)
    __swig_getmethods__ = {}
    for _s in [IParticle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleCoreShell, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ParticleCoreShell self, Particle shell, Particle core, kvector_t relative_core_position) -> ParticleCoreShell
        __init__(ParticleCoreShell self, Particle shell, Particle core) -> ParticleCoreShell

        ParticleCoreShell::ParticleCoreShell(const Particle &shell, const Particle &core, kvector_t relative_core_position=kvector_t(0.0, 0.0, 0.0))

        """
        this = _libBornAgainCore.new_ParticleCoreShell(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_ParticleCoreShell
    __del__ = lambda self: None

    def clone(self):
        """
        clone(ParticleCoreShell self) -> ParticleCoreShell

        ParticleCoreShell * ParticleCoreShell::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.ParticleCoreShell_clone(self)


    def accept(self, visitor):
        """
        accept(ParticleCoreShell self, INodeVisitor visitor)

        void ParticleCoreShell::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.ParticleCoreShell_accept(self, visitor)


    def createSlicedParticle(self, limits):
        """
        createSlicedParticle(ParticleCoreShell self, ZLimits limits) -> SlicedParticle

        SlicedParticle ParticleCoreShell::createSlicedParticle(ZLimits limits) const overridefinal

        Create a sliced form factor for this particle. 

        """
        return _libBornAgainCore.ParticleCoreShell_createSlicedParticle(self, limits)


    def coreParticle(self):
        """
        coreParticle(ParticleCoreShell self) -> Particle

        const Particle * ParticleCoreShell::coreParticle() const 

        """
        return _libBornAgainCore.ParticleCoreShell_coreParticle(self)


    def shellParticle(self):
        """
        shellParticle(ParticleCoreShell self) -> Particle

        const Particle * ParticleCoreShell::shellParticle() const 

        """
        return _libBornAgainCore.ParticleCoreShell_shellParticle(self)


    def getChildren(self):
        """
        getChildren(ParticleCoreShell self) -> swig_dummy_type_const_inode_vector

        std::vector< const INode * > ParticleCoreShell::getChildren() const overridefinal

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.ParticleCoreShell_getChildren(self)

ParticleCoreShell_swigregister = _libBornAgainCore.ParticleCoreShell_swigregister
ParticleCoreShell_swigregister(ParticleCoreShell)

class ParticleDistribution(IAbstractParticle):
    """


    A particle type that is a parametric distribution of  IParticle's.

    C++ includes: ParticleDistribution.h

    """

    __swig_setmethods__ = {}
    for _s in [IAbstractParticle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleDistribution, name, value)
    __swig_getmethods__ = {}
    for _s in [IAbstractParticle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleDistribution, name)
    __repr__ = _swig_repr

    def __init__(self, prototype, par_distr):
        """
        __init__(ParticleDistribution self, IParticle prototype, ParameterDistribution par_distr) -> ParticleDistribution

        ParticleDistribution::ParticleDistribution(const IParticle &prototype, const ParameterDistribution &par_distr)

        """
        this = _libBornAgainCore.new_ParticleDistribution(prototype, par_distr)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(ParticleDistribution self) -> ParticleDistribution

        ParticleDistribution * ParticleDistribution::clone() const overridefinal

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.ParticleDistribution_clone(self)


    def accept(self, visitor):
        """
        accept(ParticleDistribution self, INodeVisitor visitor)

        void ParticleDistribution::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.ParticleDistribution_accept(self, visitor)


    def translate(self, translation):
        """
        translate(ParticleDistribution self, kvector_t translation)

        void ParticleDistribution::translate(kvector_t translation) overridefinal

        Translates the particle with the given vector. 

        """
        return _libBornAgainCore.ParticleDistribution_translate(self, translation)


    def rotate(self, rotation):
        """
        rotate(ParticleDistribution self, IRotation rotation)

        void ParticleDistribution::rotate(const IRotation &rotation) overridefinal

        Applies the given rotation to the particle. 

        """
        return _libBornAgainCore.ParticleDistribution_rotate(self, rotation)


    def generateParticles(self):
        """
        generateParticles(ParticleDistribution self) -> std::vector< IParticle const *,std::allocator< IParticle const * > >

        std::vector< const IParticle * > ParticleDistribution::generateParticles() const

        Returns list of new particles generated according to a distribution.

        Returns particle clones with parameter values drawn from distribution. 

        """
        return _libBornAgainCore.ParticleDistribution_generateParticles(self)


    def prototype(self):
        """
        prototype(ParticleDistribution self) -> IParticle

        const IParticle& ParticleDistribution::prototype() const

        Returns the prototype particle, used for generating multiple ones. 

        """
        return _libBornAgainCore.ParticleDistribution_prototype(self)


    def parameterDistribution(self):
        """
        parameterDistribution(ParticleDistribution self) -> ParameterDistribution

        ParameterDistribution ParticleDistribution::parameterDistribution() const

        Returns the distributed parameter data. 

        """
        return _libBornAgainCore.ParticleDistribution_parameterDistribution(self)


    def getChildren(self):
        """
        getChildren(ParticleDistribution self) -> swig_dummy_type_const_inode_vector

        std::vector< const INode * > ParticleDistribution::getChildren() const overridefinal

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.ParticleDistribution_getChildren(self)

    __swig_destroy__ = _libBornAgainCore.delete_ParticleDistribution
    __del__ = lambda self: None
ParticleDistribution_swigregister = _libBornAgainCore.ParticleDistribution_swigregister
ParticleDistribution_swigregister(ParticleDistribution)

class ParticleLayout(ILayout):
    """


    Decorator class that adds particles to  ISample objects.

    C++ includes: ParticleLayout.h

    """

    __swig_setmethods__ = {}
    for _s in [ILayout]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleLayout, name, value)
    __swig_getmethods__ = {}
    for _s in [ILayout]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleLayout, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ParticleLayout self) -> ParticleLayout
        __init__(ParticleLayout self, IAbstractParticle particle, double abundance=-1.0) -> ParticleLayout
        __init__(ParticleLayout self, IAbstractParticle particle) -> ParticleLayout

        ParticleLayout::ParticleLayout(const IAbstractParticle &particle, double abundance=-1.0)

        """
        this = _libBornAgainCore.new_ParticleLayout(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_ParticleLayout
    __del__ = lambda self: None

    def clone(self):
        """
        clone(ParticleLayout self) -> ParticleLayout

        ParticleLayout * ParticleLayout::clone() const finaloverride

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.ParticleLayout_clone(self)


    def cloneWithOffset(self, offset):
        """
        cloneWithOffset(ParticleLayout self, double offset) -> ParticleLayout

        ParticleLayout * ParticleLayout::cloneWithOffset(double offset) const finaloverride

        """
        return _libBornAgainCore.ParticleLayout_cloneWithOffset(self, offset)


    def accept(self, visitor):
        """
        accept(ParticleLayout self, INodeVisitor visitor)

        void ParticleLayout::accept(INodeVisitor *visitor) const finaloverride

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.ParticleLayout_accept(self, visitor)


    def addParticle(self, *args):
        """
        addParticle(ParticleLayout self, IAbstractParticle particle, double abundance=-1.0, kvector_t position, IRotation rotation)
        addParticle(ParticleLayout self, IAbstractParticle particle, double abundance=-1.0, kvector_t position)
        addParticle(ParticleLayout self, IAbstractParticle particle, double abundance=-1.0)
        addParticle(ParticleLayout self, IAbstractParticle particle)

        void ParticleLayout::addParticle(const IAbstractParticle &particle, double abundance=-1.0, const kvector_t position=kvector_t(), const IRotation &rotation=IdentityRotation())

        Adds particle to the layout with abundance, position and the rotation defined.

        Parameters:
        -----------

        particle: 
        to be added

        abundance: 
         Particle abundance

        position: 
         Particle position

        rotation: 
         Particle rotation 

        """
        return _libBornAgainCore.ParticleLayout_addParticle(self, *args)


    def particles(self):
        """
        particles(ParticleLayout self) -> SafePointerVector< IParticle const >

        SafePointerVector< const IParticle > ParticleLayout::particles() const finaloverride

        Returns information on all particles (type and abundance) and generates new particles if an  IAbstractParticle denotes a collection 

        """
        return _libBornAgainCore.ParticleLayout_particles(self)


    def getTotalAbundance(self):
        """
        getTotalAbundance(ParticleLayout self) -> double

        double ParticleLayout::getTotalAbundance() const finaloverride

        Get total abundance of all particles. 

        """
        return _libBornAgainCore.ParticleLayout_getTotalAbundance(self)


    def setInterferenceFunction(self, interference_function):
        """
        setInterferenceFunction(ParticleLayout self, IInterferenceFunction interference_function)

        void ParticleLayout::setInterferenceFunction(const IInterferenceFunction &interference_function)

        Adds interference functions. 

        """
        return _libBornAgainCore.ParticleLayout_setInterferenceFunction(self, interference_function)


    def totalParticleSurfaceDensity(self):
        """
        totalParticleSurfaceDensity(ParticleLayout self) -> double

        double ParticleLayout::totalParticleSurfaceDensity() const finaloverride

        Returns surface density of all particles. 

        """
        return _libBornAgainCore.ParticleLayout_totalParticleSurfaceDensity(self)


    def setTotalParticleSurfaceDensity(self, particle_density):
        """
        setTotalParticleSurfaceDensity(ParticleLayout self, double particle_density)

        void ParticleLayout::setTotalParticleSurfaceDensity(double particle_density) finaloverride

        Sets total particle surface density.

        Parameters:
        -----------

        particle_density: 
        number of particles per square nanometer 

        """
        return _libBornAgainCore.ParticleLayout_setTotalParticleSurfaceDensity(self, particle_density)


    def getChildren(self):
        """
        getChildren(ParticleLayout self) -> swig_dummy_type_const_inode_vector

        std::vector< const INode * > ParticleLayout::getChildren() const finaloverride

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.ParticleLayout_getChildren(self)

ParticleLayout_swigregister = _libBornAgainCore.ParticleLayout_swigregister
ParticleLayout_swigregister(ParticleLayout)

class PoissonNoiseBackground(IBackground):
    """


    Class representing Poisson noise on top of the scattered intensity

    C++ includes: PoissonNoiseBackground.h

    """

    __swig_setmethods__ = {}
    for _s in [IBackground]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoissonNoiseBackground, name, value)
    __swig_getmethods__ = {}
    for _s in [IBackground]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PoissonNoiseBackground, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(PoissonNoiseBackground self) -> PoissonNoiseBackground

        PoissonNoiseBackground::PoissonNoiseBackground()

        """
        this = _libBornAgainCore.new_PoissonNoiseBackground()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_PoissonNoiseBackground
    __del__ = lambda self: None

    def clone(self):
        """
        clone(PoissonNoiseBackground self) -> PoissonNoiseBackground

        PoissonNoiseBackground * PoissonNoiseBackground::clone() const overridefinal

        """
        return _libBornAgainCore.PoissonNoiseBackground_clone(self)


    def accept(self, visitor):
        """
        accept(PoissonNoiseBackground self, INodeVisitor visitor)

        void PoissonNoiseBackground::accept(INodeVisitor *visitor) const override

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.PoissonNoiseBackground_accept(self, visitor)


    def addBackGround(self, intensity):
        """
        addBackGround(PoissonNoiseBackground self, double intensity) -> double

        double PoissonNoiseBackground::addBackGround(double intensity) const overridefinal

        """
        return _libBornAgainCore.PoissonNoiseBackground_addBackGround(self, intensity)

PoissonNoiseBackground_swigregister = _libBornAgainCore.PoissonNoiseBackground_swigregister
PoissonNoiseBackground_swigregister(PoissonNoiseBackground)

class Polygon(IShape2D):
    """


    A polygon in 2D space.Polygon defined by two arrays with x and y coordinates of points. Sizes of arrays should coincide. If polygon is unclosed (the last point doesn't repeat the first one), it will be closed automatically.

    C++ includes: Polygon.h

    """

    __swig_setmethods__ = {}
    for _s in [IShape2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Polygon, name, value)
    __swig_getmethods__ = {}
    for _s in [IShape2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Polygon, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Polygon self, vdouble1d_t x, vdouble1d_t y) -> Polygon
        __init__(Polygon self, vdouble2d_t points) -> Polygon
        __init__(Polygon self, PolygonPrivate const * d) -> Polygon

        Polygon::Polygon(const PolygonPrivate *d)

        """
        this = _libBornAgainCore.new_Polygon(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_Polygon
    __del__ = lambda self: None

    def clone(self):
        """
        clone(Polygon self) -> Polygon

        virtual Polygon* Polygon::clone() const 

        """
        return _libBornAgainCore.Polygon_clone(self)


    def contains(self, *args):
        """
        contains(Polygon self, double x, double y) -> bool
        contains(Polygon self, Bin1D binx, Bin1D biny) -> bool

        bool Polygon::contains(const Bin1D &binx, const Bin1D &biny) const

        Returns true if area defined by two bins is inside or on border of polygon (more precisely, if mid point of two bins satisfy this condition). 

        """
        return _libBornAgainCore.Polygon_contains(self, *args)


    def getArea(self):
        """
        getArea(Polygon self) -> double

        double Polygon::getArea() const 

        """
        return _libBornAgainCore.Polygon_getArea(self)


    def getPoints(self, xpos, ypos):
        """
        getPoints(Polygon self, vdouble1d_t xpos, vdouble1d_t ypos)

        void Polygon::getPoints(std::vector< double > &xpos, std::vector< double > &ypos) const 

        """
        return _libBornAgainCore.Polygon_getPoints(self, xpos, ypos)

Polygon_swigregister = _libBornAgainCore.Polygon_swigregister
Polygon_swigregister(Polygon)

class RealParameter(IParameterReal):
    """


    Wraps a parameter of type double. In addition to name and on-change callback held by the parent class  IParameter, this class holds Limits, Attributes (currently only fixed or not), and a  Unit.

    C++ includes: RealParameter.h

    """

    __swig_setmethods__ = {}
    for _s in [IParameterReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [IParameterReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RealParameter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RealParameter self, std::string const & name, double * par, std::string const & parent_name, std::function< void () > const & onChange, RealLimits limits, Attributes attr) -> RealParameter
        __init__(RealParameter self, std::string const & name, double * par, std::string const & parent_name, std::function< void () > const & onChange, RealLimits limits) -> RealParameter
        __init__(RealParameter self, std::string const & name, double * par, std::string const & parent_name, std::function< void () > const & onChange) -> RealParameter
        __init__(RealParameter self, std::string const & name, double * par, std::string const & parent_name) -> RealParameter
        __init__(RealParameter self, std::string const & name, double * par) -> RealParameter

        RealParameter::RealParameter(const std::string &name, double *par, const std::string &parent_name=std::string(), const std::function< void()> &onChange=std::function< void()>(), const RealLimits &limits=RealLimits::limitless(), const Attributes &attr=Attributes::free())

        """
        this = _libBornAgainCore.new_RealParameter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self, *args):
        """
        clone(RealParameter self, std::string const & new_name) -> RealParameter
        clone(RealParameter self) -> RealParameter

        RealParameter * RealParameter::clone(const std::string &new_name="") const 

        """
        return _libBornAgainCore.RealParameter_clone(self, *args)


    def setValue(self, value):
        """
        setValue(RealParameter self, double value)

        void RealParameter::setValue(double value)

        Sets value of wrapped parameter and emit signal. 

        """
        return _libBornAgainCore.RealParameter_setValue(self, value)


    def value(self):
        """
        value(RealParameter self) -> double

        double RealParameter::value() const

        Returns value of wrapped parameter. 

        """
        return _libBornAgainCore.RealParameter_value(self)


    def setLimits(self, limits):
        """
        setLimits(RealParameter self, RealLimits limits) -> RealParameter

        RealParameter & RealParameter::setLimits(const RealLimits &limits)

        """
        return _libBornAgainCore.RealParameter_setLimits(self, limits)


    def limits(self):
        """
        limits(RealParameter self) -> RealLimits

        RealLimits RealParameter::limits() const 

        """
        return _libBornAgainCore.RealParameter_limits(self)


    def setLimited(self, lower, upper):
        """
        setLimited(RealParameter self, double lower, double upper) -> RealParameter

        RealParameter & RealParameter::setLimited(double lower, double upper)

        """
        return _libBornAgainCore.RealParameter_setLimited(self, lower, upper)


    def setPositive(self):
        """
        setPositive(RealParameter self) -> RealParameter

        RealParameter & RealParameter::setPositive()

        """
        return _libBornAgainCore.RealParameter_setPositive(self)


    def setNonnegative(self):
        """
        setNonnegative(RealParameter self) -> RealParameter

        RealParameter & RealParameter::setNonnegative()

        """
        return _libBornAgainCore.RealParameter_setNonnegative(self)


    def setUnit(self, name):
        """
        setUnit(RealParameter self, std::string const & name) -> RealParameter

        RealParameter & RealParameter::setUnit(const std::string &name)

        """
        return _libBornAgainCore.RealParameter_setUnit(self, name)


    def unit(self):
        """
        unit(RealParameter self) -> std::string

        std::string RealParameter::unit() const 

        """
        return _libBornAgainCore.RealParameter_unit(self)

    __swig_destroy__ = _libBornAgainCore.delete_RealParameter
    __del__ = lambda self: None
RealParameter_swigregister = _libBornAgainCore.RealParameter_swigregister
RealParameter_swigregister(RealParameter)

class Rectangle(IShape2D):
    """


    The rectangle shape having its axis aligned to the (non-rotated) coordinate system.

    C++ includes: Rectangle.h

    """

    __swig_setmethods__ = {}
    for _s in [IShape2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rectangle, name, value)
    __swig_getmethods__ = {}
    for _s in [IShape2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rectangle, name)
    __repr__ = _swig_repr

    def __init__(self, xlow, ylow, xup, yup):
        """
        __init__(Rectangle self, double xlow, double ylow, double xup, double yup) -> Rectangle

        Rectangle::Rectangle(double xlow, double ylow, double xup, double yup)

        Parameters:
        -----------

        xlow: 
        x-coordinate of lower left corner

        ylow: 
        y-coordinate of lower left corner

        xup: 
        x-coordinate of upper right corner

        yup: 
        y-coordinate of upper right corner 

        """
        this = _libBornAgainCore.new_Rectangle(xlow, ylow, xup, yup)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(Rectangle self) -> Rectangle

        Rectangle* Rectangle::clone() const 

        """
        return _libBornAgainCore.Rectangle_clone(self)


    def contains(self, *args):
        """
        contains(Rectangle self, double x, double y) -> bool
        contains(Rectangle self, Bin1D binx, Bin1D biny) -> bool

        bool Rectangle::contains(const Bin1D &binx, const Bin1D &biny) const

        Returns true if area defined by two bins is inside or on border of polygon (more precisely, if mid point of two bins satisfy this condition). 

        """
        return _libBornAgainCore.Rectangle_contains(self, *args)


    def getArea(self):
        """
        getArea(Rectangle self) -> double

        double Rectangle::getArea() const 

        """
        return _libBornAgainCore.Rectangle_getArea(self)


    def getXlow(self):
        """
        getXlow(Rectangle self) -> double

        double Rectangle::getXlow() const 

        """
        return _libBornAgainCore.Rectangle_getXlow(self)


    def getYlow(self):
        """
        getYlow(Rectangle self) -> double

        double Rectangle::getYlow() const 

        """
        return _libBornAgainCore.Rectangle_getYlow(self)


    def getXup(self):
        """
        getXup(Rectangle self) -> double

        double Rectangle::getXup() const 

        """
        return _libBornAgainCore.Rectangle_getXup(self)


    def getYup(self):
        """
        getYup(Rectangle self) -> double

        double Rectangle::getYup() const 

        """
        return _libBornAgainCore.Rectangle_getYup(self)

    __swig_destroy__ = _libBornAgainCore.delete_Rectangle
    __del__ = lambda self: None
Rectangle_swigregister = _libBornAgainCore.Rectangle_swigregister
Rectangle_swigregister(Rectangle)

class RectangularDetector(IDetector2D):
    """


    A flat rectangular detector with axes and resolution function.

    C++ includes: RectangularDetector.h

    """

    __swig_setmethods__ = {}
    for _s in [IDetector2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RectangularDetector, name, value)
    __swig_getmethods__ = {}
    for _s in [IDetector2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RectangularDetector, name)
    __repr__ = _swig_repr
    GENERIC = _libBornAgainCore.RectangularDetector_GENERIC
    PERPENDICULAR_TO_SAMPLE = _libBornAgainCore.RectangularDetector_PERPENDICULAR_TO_SAMPLE
    PERPENDICULAR_TO_DIRECT_BEAM = _libBornAgainCore.RectangularDetector_PERPENDICULAR_TO_DIRECT_BEAM
    PERPENDICULAR_TO_REFLECTED_BEAM = _libBornAgainCore.RectangularDetector_PERPENDICULAR_TO_REFLECTED_BEAM
    PERPENDICULAR_TO_REFLECTED_BEAM_DPOS = _libBornAgainCore.RectangularDetector_PERPENDICULAR_TO_REFLECTED_BEAM_DPOS

    def __init__(self, *args):
        """
        __init__(RectangularDetector self, size_t nxbins, double width, size_t nybins, double height) -> RectangularDetector
        __init__(RectangularDetector self, RectangularDetector other) -> RectangularDetector

        RectangularDetector::RectangularDetector(const RectangularDetector &other)

        """
        this = _libBornAgainCore.new_RectangularDetector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """
        clone(RectangularDetector self) -> RectangularDetector

        RectangularDetector * RectangularDetector::clone() const override

        """
        return _libBornAgainCore.RectangularDetector_clone(self)


    def accept(self, visitor):
        """
        accept(RectangularDetector self, INodeVisitor visitor)

        void RectangularDetector::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.RectangularDetector_accept(self, visitor)

    __swig_destroy__ = _libBornAgainCore.delete_RectangularDetector
    __del__ = lambda self: None

    def init(self, beam):
        """
        init(RectangularDetector self, Beam beam)

        void RectangularDetector::init(const Beam &beam) override

        Inits detector with the beam settings. 

        """
        return _libBornAgainCore.RectangularDetector_init(self, beam)


    def setPosition(self, *args):
        """
        setPosition(RectangularDetector self, kvector_t normal_to_detector, double u0, double v0, kvector_t direction)
        setPosition(RectangularDetector self, kvector_t normal_to_detector, double u0, double v0)

        void RectangularDetector::setPosition(const kvector_t normal_to_detector, double u0, double v0, const kvector_t direction=kvector_t(0.0,-1.0, 0.0))

        """
        return _libBornAgainCore.RectangularDetector_setPosition(self, *args)


    def setPerpendicularToSampleX(self, distance, u0, v0):
        """
        setPerpendicularToSampleX(RectangularDetector self, double distance, double u0, double v0)

        void RectangularDetector::setPerpendicularToSampleX(double distance, double u0, double v0)

        """
        return _libBornAgainCore.RectangularDetector_setPerpendicularToSampleX(self, distance, u0, v0)


    def setPerpendicularToDirectBeam(self, distance, u0, v0):
        """
        setPerpendicularToDirectBeam(RectangularDetector self, double distance, double u0, double v0)

        void RectangularDetector::setPerpendicularToDirectBeam(double distance, double u0, double v0)

        """
        return _libBornAgainCore.RectangularDetector_setPerpendicularToDirectBeam(self, distance, u0, v0)


    def setPerpendicularToReflectedBeam(self, distance, u0=0.0, v0=0.0):
        """
        setPerpendicularToReflectedBeam(RectangularDetector self, double distance, double u0=0.0, double v0=0.0)
        setPerpendicularToReflectedBeam(RectangularDetector self, double distance, double u0=0.0)
        setPerpendicularToReflectedBeam(RectangularDetector self, double distance)

        void RectangularDetector::setPerpendicularToReflectedBeam(double distance, double u0=0.0, double v0=0.0)

        """
        return _libBornAgainCore.RectangularDetector_setPerpendicularToReflectedBeam(self, distance, u0, v0)


    def setDirectBeamPosition(self, u0, v0):
        """
        setDirectBeamPosition(RectangularDetector self, double u0, double v0)

        void RectangularDetector::setDirectBeamPosition(double u0, double v0)

        """
        return _libBornAgainCore.RectangularDetector_setDirectBeamPosition(self, u0, v0)


    def getWidth(self):
        """
        getWidth(RectangularDetector self) -> double

        double RectangularDetector::getWidth() const 

        """
        return _libBornAgainCore.RectangularDetector_getWidth(self)


    def getHeight(self):
        """
        getHeight(RectangularDetector self) -> double

        double RectangularDetector::getHeight() const 

        """
        return _libBornAgainCore.RectangularDetector_getHeight(self)


    def getNbinsX(self):
        """
        getNbinsX(RectangularDetector self) -> size_t

        size_t RectangularDetector::getNbinsX() const 

        """
        return _libBornAgainCore.RectangularDetector_getNbinsX(self)


    def getNbinsY(self):
        """
        getNbinsY(RectangularDetector self) -> size_t

        size_t RectangularDetector::getNbinsY() const 

        """
        return _libBornAgainCore.RectangularDetector_getNbinsY(self)


    def getNormalVector(self):
        """
        getNormalVector(RectangularDetector self) -> kvector_t

        kvector_t RectangularDetector::getNormalVector() const 

        """
        return _libBornAgainCore.RectangularDetector_getNormalVector(self)


    def getU0(self):
        """
        getU0(RectangularDetector self) -> double

        double RectangularDetector::getU0() const 

        """
        return _libBornAgainCore.RectangularDetector_getU0(self)


    def getV0(self):
        """
        getV0(RectangularDetector self) -> double

        double RectangularDetector::getV0() const 

        """
        return _libBornAgainCore.RectangularDetector_getV0(self)


    def getDirectionVector(self):
        """
        getDirectionVector(RectangularDetector self) -> kvector_t

        kvector_t RectangularDetector::getDirectionVector() const 

        """
        return _libBornAgainCore.RectangularDetector_getDirectionVector(self)


    def getDistance(self):
        """
        getDistance(RectangularDetector self) -> double

        double RectangularDetector::getDistance() const 

        """
        return _libBornAgainCore.RectangularDetector_getDistance(self)


    def getDirectBeamU0(self):
        """
        getDirectBeamU0(RectangularDetector self) -> double

        double RectangularDetector::getDirectBeamU0() const 

        """
        return _libBornAgainCore.RectangularDetector_getDirectBeamU0(self)


    def getDirectBeamV0(self):
        """
        getDirectBeamV0(RectangularDetector self) -> double

        double RectangularDetector::getDirectBeamV0() const 

        """
        return _libBornAgainCore.RectangularDetector_getDirectBeamV0(self)


    def getDetectorArrangment(self):
        """
        getDetectorArrangment(RectangularDetector self) -> RectangularDetector::EDetectorArrangement

        RectangularDetector::EDetectorArrangement RectangularDetector::getDetectorArrangment() const 

        """
        return _libBornAgainCore.RectangularDetector_getDetectorArrangment(self)


    def validAxesUnits(self):
        """
        validAxesUnits(RectangularDetector self) -> std::vector< AxesUnits,std::allocator< AxesUnits > >

        std::vector< AxesUnits > RectangularDetector::validAxesUnits() const override

        returns vector of valid axes units 

        """
        return _libBornAgainCore.RectangularDetector_validAxesUnits(self)


    def defaultAxesUnits(self):
        """
        defaultAxesUnits(RectangularDetector self) -> AxesUnits

        AxesUnits RectangularDetector::defaultAxesUnits() const override

        return default axes units 

        """
        return _libBornAgainCore.RectangularDetector_defaultAxesUnits(self)


    def regionOfInterestPixel(self):
        """
        regionOfInterestPixel(RectangularDetector self) -> RectangularPixel

        RectangularPixel * RectangularDetector::regionOfInterestPixel() const 

        """
        return _libBornAgainCore.RectangularDetector_regionOfInterestPixel(self)

RectangularDetector_swigregister = _libBornAgainCore.RectangularDetector_swigregister
RectangularDetector_swigregister(RectangularDetector)

class RectangularPixel(IPixel):
    """Proxy of C++ RectangularPixel class."""

    __swig_setmethods__ = {}
    for _s in [IPixel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RectangularPixel, name, value)
    __swig_getmethods__ = {}
    for _s in [IPixel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RectangularPixel, name)
    __repr__ = _swig_repr

    def __init__(self, corner_pos, width, height):
        """
        __init__(RectangularPixel self, kvector_t corner_pos, kvector_t width, kvector_t height) -> RectangularPixel

        RectangularPixel::RectangularPixel(kvector_t corner_pos, kvector_t width, kvector_t height)

        """
        this = _libBornAgainCore.new_RectangularPixel(corner_pos, width, height)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_RectangularPixel
    __del__ = lambda self: None

    def clone(self):
        """
        clone(RectangularPixel self) -> RectangularPixel

        RectangularPixel * RectangularPixel::clone() const override

        """
        return _libBornAgainCore.RectangularPixel_clone(self)


    def createZeroSizePixel(self, x, y):
        """
        createZeroSizePixel(RectangularPixel self, double x, double y) -> RectangularPixel

        RectangularPixel * RectangularPixel::createZeroSizePixel(double x, double y) const override

        """
        return _libBornAgainCore.RectangularPixel_createZeroSizePixel(self, x, y)


    def getK(self, x, y, wavelength):
        """
        getK(RectangularPixel self, double x, double y, double wavelength) -> kvector_t

        kvector_t RectangularPixel::getK(double x, double y, double wavelength) const override

        """
        return _libBornAgainCore.RectangularPixel_getK(self, x, y, wavelength)


    def getPosition(self, x, y):
        """
        getPosition(RectangularPixel self, double x, double y) -> kvector_t

        kvector_t RectangularPixel::getPosition(double x, double y) const 

        """
        return _libBornAgainCore.RectangularPixel_getPosition(self, x, y)


    def getIntegrationFactor(self, x, y):
        """
        getIntegrationFactor(RectangularPixel self, double x, double y) -> double

        double RectangularPixel::getIntegrationFactor(double x, double y) const override

        """
        return _libBornAgainCore.RectangularPixel_getIntegrationFactor(self, x, y)


    def getSolidAngle(self):
        """
        getSolidAngle(RectangularPixel self) -> double

        double RectangularPixel::getSolidAngle() const override

        """
        return _libBornAgainCore.RectangularPixel_getSolidAngle(self)

RectangularPixel_swigregister = _libBornAgainCore.RectangularPixel_swigregister
RectangularPixel_swigregister(RectangularPixel)

class ResolutionFunction2DGaussian(IResolutionFunction2D):
    """


    Simple gaussian two-dimensional resolution function.

    C++ includes: ResolutionFunction2DGaussian.h

    """

    __swig_setmethods__ = {}
    for _s in [IResolutionFunction2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResolutionFunction2DGaussian, name, value)
    __swig_getmethods__ = {}
    for _s in [IResolutionFunction2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResolutionFunction2DGaussian, name)
    __repr__ = _swig_repr

    def __init__(self, sigma_x, sigma_y):
        """
        __init__(ResolutionFunction2DGaussian self, double sigma_x, double sigma_y) -> ResolutionFunction2DGaussian

        ResolutionFunction2DGaussian::ResolutionFunction2DGaussian(double sigma_x, double sigma_y)

        """
        this = _libBornAgainCore.new_ResolutionFunction2DGaussian(sigma_x, sigma_y)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def evaluateCDF(self, x, y):
        """
        evaluateCDF(ResolutionFunction2DGaussian self, double x, double y) -> double

        double ResolutionFunction2DGaussian::evaluateCDF(double x, double y) const 

        """
        return _libBornAgainCore.ResolutionFunction2DGaussian_evaluateCDF(self, x, y)


    def clone(self):
        """
        clone(ResolutionFunction2DGaussian self) -> ResolutionFunction2DGaussian

        ResolutionFunction2DGaussian* ResolutionFunction2DGaussian::clone() const 

        """
        return _libBornAgainCore.ResolutionFunction2DGaussian_clone(self)


    def accept(self, visitor):
        """
        accept(ResolutionFunction2DGaussian self, INodeVisitor visitor)

        void ResolutionFunction2DGaussian::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.ResolutionFunction2DGaussian_accept(self, visitor)


    def getSigmaX(self):
        """
        getSigmaX(ResolutionFunction2DGaussian self) -> double

        double ResolutionFunction2DGaussian::getSigmaX() const 

        """
        return _libBornAgainCore.ResolutionFunction2DGaussian_getSigmaX(self)


    def getSigmaY(self):
        """
        getSigmaY(ResolutionFunction2DGaussian self) -> double

        double ResolutionFunction2DGaussian::getSigmaY() const 

        """
        return _libBornAgainCore.ResolutionFunction2DGaussian_getSigmaY(self)

    __swig_destroy__ = _libBornAgainCore.delete_ResolutionFunction2DGaussian
    __del__ = lambda self: None
ResolutionFunction2DGaussian_swigregister = _libBornAgainCore.ResolutionFunction2DGaussian_swigregister
ResolutionFunction2DGaussian_swigregister(ResolutionFunction2DGaussian)

class DepthProbeSimulation(Simulation):
    """Proxy of C++ DepthProbeSimulation class."""

    __swig_setmethods__ = {}
    for _s in [Simulation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DepthProbeSimulation, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DepthProbeSimulation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(DepthProbeSimulation self) -> DepthProbeSimulation
        __init__(DepthProbeSimulation self, MultiLayer sample) -> DepthProbeSimulation
        __init__(DepthProbeSimulation self, std::shared_ptr< IMultiLayerBuilder > const sample_builder) -> DepthProbeSimulation

        DepthProbeSimulation::DepthProbeSimulation(const std::shared_ptr< IMultiLayerBuilder > sample_builder)

        """
        this = _libBornAgainCore.new_DepthProbeSimulation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_DepthProbeSimulation
    __del__ = lambda self: None

    def clone(self):
        """
        clone(DepthProbeSimulation self) -> DepthProbeSimulation

        DepthProbeSimulation * DepthProbeSimulation::clone() const override

        """
        return _libBornAgainCore.DepthProbeSimulation_clone(self)


    def accept(self, visitor):
        """
        accept(DepthProbeSimulation self, INodeVisitor visitor)

        void DepthProbeSimulation::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.DepthProbeSimulation_accept(self, visitor)


    def numberOfSimulationElements(self):
        """
        numberOfSimulationElements(DepthProbeSimulation self) -> size_t

        size_t DepthProbeSimulation::numberOfSimulationElements() const override

        """
        return _libBornAgainCore.DepthProbeSimulation_numberOfSimulationElements(self)


    def result(self):
        """
        result(DepthProbeSimulation self) -> SimulationResult

        SimulationResult DepthProbeSimulation::result() const override

        Returns the results of the simulation in a format that supports unit conversion and export to numpy arrays 

        """
        return _libBornAgainCore.DepthProbeSimulation_result(self)


    def setBeamParameters(self, arg2, nbins, alpha_i_min, alpha_i_max, beam_shape=None):
        """
        setBeamParameters(DepthProbeSimulation self, double arg2, int nbins, double alpha_i_min, double alpha_i_max, IFootprintFactor beam_shape=None)
        setBeamParameters(DepthProbeSimulation self, double arg2, int nbins, double alpha_i_min, double alpha_i_max)

        void DepthProbeSimulation::setBeamParameters(double lambda, int nbins, double alpha_i_min, double alpha_i_max, const IFootprintFactor *beam_shape=nullptr)

        Sets beam parameters with alpha_i of the beam defined in the range. 

        """
        return _libBornAgainCore.DepthProbeSimulation_setBeamParameters(self, arg2, nbins, alpha_i_min, alpha_i_max, beam_shape)


    def setZSpan(self, n_bins, z_min, z_max):
        """
        setZSpan(DepthProbeSimulation self, size_t n_bins, double z_min, double z_max)

        void DepthProbeSimulation::setZSpan(size_t n_bins, double z_min, double z_max)

        Set z positions for intensity calculations. Negative z's correspond to the area under sample surface. The more negative z is, the deeper layer corresponds to it. 

        """
        return _libBornAgainCore.DepthProbeSimulation_setZSpan(self, n_bins, z_min, z_max)


    def getAlphaAxis(self):
        """
        getAlphaAxis(DepthProbeSimulation self) -> IAxis

        const IAxis * DepthProbeSimulation::getAlphaAxis() const

        Returns a pointer to incident angle axis. 

        """
        return _libBornAgainCore.DepthProbeSimulation_getAlphaAxis(self)


    def getZAxis(self):
        """
        getZAxis(DepthProbeSimulation self) -> IAxis

        const IAxis * DepthProbeSimulation::getZAxis() const

        Returns a pointer to z-position axis. 

        """
        return _libBornAgainCore.DepthProbeSimulation_getZAxis(self)

DepthProbeSimulation_swigregister = _libBornAgainCore.DepthProbeSimulation_swigregister
DepthProbeSimulation_swigregister(DepthProbeSimulation)

class SpecularSimulation(Simulation):
    """


    Main class to run a specular simulation.

    C++ includes: SpecularSimulation.h

    """

    __swig_setmethods__ = {}
    for _s in [Simulation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpecularSimulation, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpecularSimulation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SpecularSimulation self) -> SpecularSimulation
        __init__(SpecularSimulation self, MultiLayer sample) -> SpecularSimulation
        __init__(SpecularSimulation self, std::shared_ptr< IMultiLayerBuilder > const sample_builder) -> SpecularSimulation

        SpecularSimulation::SpecularSimulation(const std::shared_ptr< IMultiLayerBuilder > sample_builder)

        """
        this = _libBornAgainCore.new_SpecularSimulation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_SpecularSimulation
    __del__ = lambda self: None

    def clone(self):
        """
        clone(SpecularSimulation self) -> SpecularSimulation

        SpecularSimulation * SpecularSimulation::clone() const override

        """
        return _libBornAgainCore.SpecularSimulation_clone(self)


    def prepareSimulation(self):
        """
        prepareSimulation(SpecularSimulation self)

        void SpecularSimulation::prepareSimulation() override

        Put into a clean state for running a simulation. 

        """
        return _libBornAgainCore.SpecularSimulation_prepareSimulation(self)


    def accept(self, visitor):
        """
        accept(SpecularSimulation self, INodeVisitor visitor)

        void SpecularSimulation::accept(INodeVisitor *visitor) const overridefinal

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.SpecularSimulation_accept(self, visitor)


    def numberOfSimulationElements(self):
        """
        numberOfSimulationElements(SpecularSimulation self) -> size_t

        size_t SpecularSimulation::numberOfSimulationElements() const override

        """
        return _libBornAgainCore.SpecularSimulation_numberOfSimulationElements(self)


    def result(self):
        """
        result(SpecularSimulation self) -> SimulationResult

        SimulationResult SpecularSimulation::result() const override

        Returns the results of the simulation in a format that supports unit conversion and export to numpy arrays 

        """
        return _libBornAgainCore.SpecularSimulation_result(self)


    def setBeamParameters(self, *args):
        """
        setBeamParameters(SpecularSimulation self, double arg2, IAxis alpha_axis, IFootprintFactor beam_shape=None)
        setBeamParameters(SpecularSimulation self, double arg2, IAxis alpha_axis)
        setBeamParameters(SpecularSimulation self, double arg2, int nbins, double alpha_i_min, double alpha_i_max, IFootprintFactor beam_shape=None)
        setBeamParameters(SpecularSimulation self, double arg2, int nbins, double alpha_i_min, double alpha_i_max)

        void SpecularSimulation::setBeamParameters(double lambda, int nbins, double alpha_i_min, double alpha_i_max, const IFootprintFactor *beam_shape=nullptr)

        """
        return _libBornAgainCore.SpecularSimulation_setBeamParameters(self, *args)


    def getAlphaAxis(self):
        """
        getAlphaAxis(SpecularSimulation self) -> IAxis

        const IAxis * SpecularSimulation::getAlphaAxis() const

        Returns a pointer to incident angle axis. 

        """
        return _libBornAgainCore.SpecularSimulation_getAlphaAxis(self)


    def setSampleBuilder(self, ptr):
        self.samplebuilder = ptr
        self.setSampleBuilderCpp(ptr)

SpecularSimulation_swigregister = _libBornAgainCore.SpecularSimulation_swigregister
SpecularSimulation_swigregister(SpecularSimulation)

class ThreadInfo(_object):
    """


    Information to run simulation with dedicated number of threads.

    C++ includes: ThreadInfo.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreadInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThreadInfo, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(ThreadInfo self) -> ThreadInfo

        ThreadInfo::ThreadInfo()

        """
        this = _libBornAgainCore.new_ThreadInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["n_threads"] = _libBornAgainCore.ThreadInfo_n_threads_set
    __swig_getmethods__["n_threads"] = _libBornAgainCore.ThreadInfo_n_threads_get
    if _newclass:
        n_threads = _swig_property(_libBornAgainCore.ThreadInfo_n_threads_get, _libBornAgainCore.ThreadInfo_n_threads_set)
    __swig_setmethods__["n_batches"] = _libBornAgainCore.ThreadInfo_n_batches_set
    __swig_getmethods__["n_batches"] = _libBornAgainCore.ThreadInfo_n_batches_get
    if _newclass:
        n_batches = _swig_property(_libBornAgainCore.ThreadInfo_n_batches_get, _libBornAgainCore.ThreadInfo_n_batches_set)
    __swig_setmethods__["current_batch"] = _libBornAgainCore.ThreadInfo_current_batch_set
    __swig_getmethods__["current_batch"] = _libBornAgainCore.ThreadInfo_current_batch_get
    if _newclass:
        current_batch = _swig_property(_libBornAgainCore.ThreadInfo_current_batch_get, _libBornAgainCore.ThreadInfo_current_batch_set)
    __swig_destroy__ = _libBornAgainCore.delete_ThreadInfo
    __del__ = lambda self: None
ThreadInfo_swigregister = _libBornAgainCore.ThreadInfo_swigregister
ThreadInfo_swigregister(ThreadInfo)

class SampleBuilderFactoryTemp(_object):
    """


    Base class for all factories.

    C++ includes: IFactory.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleBuilderFactoryTemp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SampleBuilderFactoryTemp, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(IFactory<(std::string,IMultiLayerBuilder)> self) -> SampleBuilderFactoryTemp

        IFactory< Key, AbstractProduct >::IFactory()

        """
        this = _libBornAgainCore.new_SampleBuilderFactoryTemp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def createItem(self, item_key):
        """
        createItem(SampleBuilderFactoryTemp self, std::string const & item_key) -> IMultiLayerBuilder

        AbstractProduct* IFactory< Key, AbstractProduct >::createItem(const Key &item_key)

        Creates object by calling creation function corresponded to given identifier. 

        """
        return _libBornAgainCore.SampleBuilderFactoryTemp_createItem(self, item_key)


    def registerItem(self, *args):
        """
        registerItem(SampleBuilderFactoryTemp self, std::string const & item_key, IFactory< std::string,IMultiLayerBuilder >::CreateItemCallback CreateFn, std::string const & itemDescription) -> bool
        registerItem(SampleBuilderFactoryTemp self, std::string const & item_key, IFactory< std::string,IMultiLayerBuilder >::CreateItemCallback CreateFn) -> bool

        bool IFactory< Key, AbstractProduct >::registerItem(const Key &item_key, CreateItemCallback CreateFn, const std::string &itemDescription="")

        Registers object's creation function and store object description. 

        """
        return _libBornAgainCore.SampleBuilderFactoryTemp_registerItem(self, *args)


    def contains(self, item_key):
        """
        contains(SampleBuilderFactoryTemp self, std::string const & item_key) -> bool

        bool IFactory< Key, AbstractProduct >::contains(const Key &item_key) const 

        """
        return _libBornAgainCore.SampleBuilderFactoryTemp_contains(self, item_key)

    __swig_destroy__ = _libBornAgainCore.delete_SampleBuilderFactoryTemp
    __del__ = lambda self: None

    def size(self):
        """
        size(SampleBuilderFactoryTemp self) -> size_t

        size_t IFactory< Key, AbstractProduct >::size() const

        Returns number of registered objects. 

        """
        return _libBornAgainCore.SampleBuilderFactoryTemp_size(self)


    def begin(self):
        """
        begin(SampleBuilderFactoryTemp self) -> IFactory< std::string,IMultiLayerBuilder >::const_iterator

        const_iterator IFactory< Key, AbstractProduct >::begin() const 

        """
        return _libBornAgainCore.SampleBuilderFactoryTemp_begin(self)


    def end(self):
        """
        end(SampleBuilderFactoryTemp self) -> IFactory< std::string,IMultiLayerBuilder >::const_iterator

        const_iterator IFactory< Key, AbstractProduct >::end() const 

        """
        return _libBornAgainCore.SampleBuilderFactoryTemp_end(self)

SampleBuilderFactoryTemp_swigregister = _libBornAgainCore.SampleBuilderFactoryTemp_swigregister
SampleBuilderFactoryTemp_swigregister(SampleBuilderFactoryTemp)

class SampleBuilderFactory(SampleBuilderFactoryTemp):
    """


    Factory to create standard pre-defined samples

    C++ includes: SampleBuilderFactory.h

    """

    __swig_setmethods__ = {}
    for _s in [SampleBuilderFactoryTemp]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleBuilderFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [SampleBuilderFactoryTemp]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SampleBuilderFactory, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(SampleBuilderFactory self) -> SampleBuilderFactory

        SampleBuilderFactory::SampleBuilderFactory()

        """
        this = _libBornAgainCore.new_SampleBuilderFactory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def createSample(self, name):
        """
        createSample(SampleBuilderFactory self, std::string const & name) -> MultiLayer

        MultiLayer * SampleBuilderFactory::createSample(const std::string &name)

        Retrieves a SampleBuilder from the registry, does the build, and returns the result. 

        """
        return _libBornAgainCore.SampleBuilderFactory_createSample(self, name)

    __swig_destroy__ = _libBornAgainCore.delete_SampleBuilderFactory
    __del__ = lambda self: None
SampleBuilderFactory_swigregister = _libBornAgainCore.SampleBuilderFactory_swigregister
SampleBuilderFactory_swigregister(SampleBuilderFactory)

class SimulationFactoryTemp(_object):
    """


    Base class for all factories.

    C++ includes: IFactory.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimulationFactoryTemp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimulationFactoryTemp, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(IFactory<(std::string,Simulation)> self) -> SimulationFactoryTemp

        IFactory< Key, AbstractProduct >::IFactory()

        """
        this = _libBornAgainCore.new_SimulationFactoryTemp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def createItem(self, item_key):
        """
        createItem(SimulationFactoryTemp self, std::string const & item_key) -> Simulation

        AbstractProduct* IFactory< Key, AbstractProduct >::createItem(const Key &item_key)

        Creates object by calling creation function corresponded to given identifier. 

        """
        return _libBornAgainCore.SimulationFactoryTemp_createItem(self, item_key)


    def registerItem(self, *args):
        """
        registerItem(SimulationFactoryTemp self, std::string const & item_key, IFactory< std::string,Simulation >::CreateItemCallback CreateFn, std::string const & itemDescription) -> bool
        registerItem(SimulationFactoryTemp self, std::string const & item_key, IFactory< std::string,Simulation >::CreateItemCallback CreateFn) -> bool

        bool IFactory< Key, AbstractProduct >::registerItem(const Key &item_key, CreateItemCallback CreateFn, const std::string &itemDescription="")

        Registers object's creation function and store object description. 

        """
        return _libBornAgainCore.SimulationFactoryTemp_registerItem(self, *args)


    def contains(self, item_key):
        """
        contains(SimulationFactoryTemp self, std::string const & item_key) -> bool

        bool IFactory< Key, AbstractProduct >::contains(const Key &item_key) const 

        """
        return _libBornAgainCore.SimulationFactoryTemp_contains(self, item_key)

    __swig_destroy__ = _libBornAgainCore.delete_SimulationFactoryTemp
    __del__ = lambda self: None

    def size(self):
        """
        size(SimulationFactoryTemp self) -> size_t

        size_t IFactory< Key, AbstractProduct >::size() const

        Returns number of registered objects. 

        """
        return _libBornAgainCore.SimulationFactoryTemp_size(self)


    def begin(self):
        """
        begin(SimulationFactoryTemp self) -> IFactory< std::string,Simulation >::const_iterator

        const_iterator IFactory< Key, AbstractProduct >::begin() const 

        """
        return _libBornAgainCore.SimulationFactoryTemp_begin(self)


    def end(self):
        """
        end(SimulationFactoryTemp self) -> IFactory< std::string,Simulation >::const_iterator

        const_iterator IFactory< Key, AbstractProduct >::end() const 

        """
        return _libBornAgainCore.SimulationFactoryTemp_end(self)

SimulationFactoryTemp_swigregister = _libBornAgainCore.SimulationFactoryTemp_swigregister
SimulationFactoryTemp_swigregister(SimulationFactoryTemp)

class SimulationFactory(SimulationFactoryTemp):
    """


    Registry to create standard pre-defined simulations. Used in functional tests, performance measurements, etc.

    C++ includes: SimulationFactory.h

    """

    __swig_setmethods__ = {}
    for _s in [SimulationFactoryTemp]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimulationFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [SimulationFactoryTemp]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimulationFactory, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(SimulationFactory self) -> SimulationFactory

        SimulationFactory::SimulationFactory()

        """
        this = _libBornAgainCore.new_SimulationFactory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_SimulationFactory
    __del__ = lambda self: None
SimulationFactory_swigregister = _libBornAgainCore.SimulationFactory_swigregister
SimulationFactory_swigregister(SimulationFactory)

class AxesUnits(_object):
    """


    Wrapper for detector axes units, required for a better representation of detector axes units in python

    C++ includes: IUnitConverter.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AxesUnits, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AxesUnits, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    DEFAULT = _libBornAgainCore.AxesUnits_DEFAULT
    NBINS = _libBornAgainCore.AxesUnits_NBINS
    RADIANS = _libBornAgainCore.AxesUnits_RADIANS
    DEGREES = _libBornAgainCore.AxesUnits_DEGREES
    MM = _libBornAgainCore.AxesUnits_MM
    NM = _libBornAgainCore.AxesUnits_NM
    QSPACE = _libBornAgainCore.AxesUnits_QSPACE
    __swig_destroy__ = _libBornAgainCore.delete_AxesUnits
    __del__ = lambda self: None
AxesUnits_swigregister = _libBornAgainCore.AxesUnits_swigregister
AxesUnits_swigregister(AxesUnits)

class IUnitConverter(ICloneable):
    """


    Interface to provide axis translations to different units for simulation output

    C++ includes: IUnitConverter.h

    """

    __swig_setmethods__ = {}
    for _s in [ICloneable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IUnitConverter, name, value)
    __swig_getmethods__ = {}
    for _s in [ICloneable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IUnitConverter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IUnitConverter
    __del__ = lambda self: None

    def clone(self):
        """
        clone(IUnitConverter self) -> IUnitConverter

        virtual IUnitConverter* IUnitConverter::clone() const =0

        """
        return _libBornAgainCore.IUnitConverter_clone(self)


    def dimension(self):
        """
        dimension(IUnitConverter self) -> size_t

        virtual size_t IUnitConverter::dimension() const =0

        """
        return _libBornAgainCore.IUnitConverter_dimension(self)


    def calculateMin(self, i_axis, units_type):
        """
        calculateMin(IUnitConverter self, size_t i_axis, AxesUnits units_type) -> double

        virtual double IUnitConverter::calculateMin(size_t i_axis, AxesUnits units_type) const =0

        """
        return _libBornAgainCore.IUnitConverter_calculateMin(self, i_axis, units_type)


    def calculateMax(self, i_axis, units_type):
        """
        calculateMax(IUnitConverter self, size_t i_axis, AxesUnits units_type) -> double

        virtual double IUnitConverter::calculateMax(size_t i_axis, AxesUnits units_type) const =0

        """
        return _libBornAgainCore.IUnitConverter_calculateMax(self, i_axis, units_type)


    def axisSize(self, i_axis):
        """
        axisSize(IUnitConverter self, size_t i_axis) -> size_t

        virtual size_t IUnitConverter::axisSize(size_t i_axis) const =0

        """
        return _libBornAgainCore.IUnitConverter_axisSize(self, i_axis)


    def axisName(self, *args):
        """
        axisName(IUnitConverter self, size_t i_axis, AxesUnits units_type) -> std::string
        axisName(IUnitConverter self, size_t i_axis) -> std::string

        std::string IUnitConverter::axisName(size_t i_axis, AxesUnits units_type=AxesUnits::DEFAULT) const 

        """
        return _libBornAgainCore.IUnitConverter_axisName(self, *args)


    def availableUnits(self):
        """
        availableUnits(IUnitConverter self) -> std::vector< AxesUnits,std::allocator< AxesUnits > >

        virtual std::vector<AxesUnits> IUnitConverter::availableUnits() const =0

        """
        return _libBornAgainCore.IUnitConverter_availableUnits(self)


    def defaultUnits(self):
        """
        defaultUnits(IUnitConverter self) -> AxesUnits

        virtual AxesUnits IUnitConverter::defaultUnits() const =0

        """
        return _libBornAgainCore.IUnitConverter_defaultUnits(self)

IUnitConverter_swigregister = _libBornAgainCore.IUnitConverter_swigregister
IUnitConverter_swigregister(IUnitConverter)

# This file is compatible with both classic and new-style classes.

