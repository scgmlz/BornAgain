# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

import _libBornAgainCore

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _libBornAgainCore.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _libBornAgainCore.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _libBornAgainCore.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _libBornAgainCore.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _libBornAgainCore.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _libBornAgainCore.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _libBornAgainCore.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _libBornAgainCore.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _libBornAgainCore.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _libBornAgainCore.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _libBornAgainCore.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _libBornAgainCore.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _libBornAgainCore.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _libBornAgainCore.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _libBornAgainCore.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _libBornAgainCore.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _libBornAgainCore:
_libBornAgainCore.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _libBornAgainCore.SHARED_PTR_DISOWN


import warnings
def deprecated(message):
  def deprecated_decorator(func):
      def deprecated_func(*args, **kwargs):
          warnings.simplefilter('always', DeprecationWarning)  # turn off filter
          warnings.warn("{} is a deprecated function. {}".format(func.__name__, message),
                        category=DeprecationWarning,
                        stacklevel=2)
          warnings.simplefilter('default', DeprecationWarning)  # reset filter
          return func(*args, **kwargs)
      return deprecated_func
  return deprecated_decorator

class vdouble1d_t(object):
    r"""Proxy of C++ std::vector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vdouble1d_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vdouble1d_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vdouble1d_t self) -> bool"""
        return _libBornAgainCore.vdouble1d_t___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vdouble1d_t self) -> bool"""
        return _libBornAgainCore.vdouble1d_t___bool__(self)

    def __len__(self):
        r"""__len__(vdouble1d_t self) -> std::vector< double >::size_type"""
        return _libBornAgainCore.vdouble1d_t___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vdouble1d_t self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> vdouble1d_t"""
        return _libBornAgainCore.vdouble1d_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vdouble1d_t self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        __setslice__(vdouble1d_t self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, vdouble1d_t v)
        """
        return _libBornAgainCore.vdouble1d_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vdouble1d_t self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _libBornAgainCore.vdouble1d_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vdouble1d_t self, std::vector< double >::difference_type i)
        __delitem__(vdouble1d_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vdouble1d_t___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vdouble1d_t self, PySliceObject * slice) -> vdouble1d_t
        __getitem__(vdouble1d_t self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _libBornAgainCore.vdouble1d_t___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vdouble1d_t self, PySliceObject * slice, vdouble1d_t v)
        __setitem__(vdouble1d_t self, PySliceObject * slice)
        __setitem__(vdouble1d_t self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _libBornAgainCore.vdouble1d_t___setitem__(self, *args)

    def pop(self):
        r"""pop(vdouble1d_t self) -> std::vector< double >::value_type"""
        return _libBornAgainCore.vdouble1d_t_pop(self)

    def append(self, x):
        r"""append(vdouble1d_t self, std::vector< double >::value_type const & x)"""
        return _libBornAgainCore.vdouble1d_t_append(self, x)

    def empty(self):
        r"""empty(vdouble1d_t self) -> bool"""
        return _libBornAgainCore.vdouble1d_t_empty(self)

    def size(self):
        r"""size(vdouble1d_t self) -> std::vector< double >::size_type"""
        return _libBornAgainCore.vdouble1d_t_size(self)

    def swap(self, v):
        r"""
        swap(vdouble1d_t self, vdouble1d_t v)
        void swap(OutputDataIterator< TValue, TContainer > &left, OutputDataIterator< TValue, TContainer > &right)

        make Swappable 

        """
        return _libBornAgainCore.vdouble1d_t_swap(self, v)

    def begin(self):
        r"""begin(vdouble1d_t self) -> std::vector< double >::iterator"""
        return _libBornAgainCore.vdouble1d_t_begin(self)

    def end(self):
        r"""end(vdouble1d_t self) -> std::vector< double >::iterator"""
        return _libBornAgainCore.vdouble1d_t_end(self)

    def rbegin(self):
        r"""rbegin(vdouble1d_t self) -> std::vector< double >::reverse_iterator"""
        return _libBornAgainCore.vdouble1d_t_rbegin(self)

    def rend(self):
        r"""rend(vdouble1d_t self) -> std::vector< double >::reverse_iterator"""
        return _libBornAgainCore.vdouble1d_t_rend(self)

    def clear(self):
        r"""clear(vdouble1d_t self)"""
        return _libBornAgainCore.vdouble1d_t_clear(self)

    def get_allocator(self):
        r"""get_allocator(vdouble1d_t self) -> std::vector< double >::allocator_type"""
        return _libBornAgainCore.vdouble1d_t_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vdouble1d_t self)"""
        return _libBornAgainCore.vdouble1d_t_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vdouble1d_t self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(vdouble1d_t self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _libBornAgainCore.vdouble1d_t_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vdouble1d_t self) -> vdouble1d_t
        __init__(vdouble1d_t self, vdouble1d_t other) -> vdouble1d_t
        __init__(vdouble1d_t self, std::vector< double >::size_type size) -> vdouble1d_t
        __init__(vdouble1d_t self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> vdouble1d_t
        """
        _libBornAgainCore.vdouble1d_t_swiginit(self, _libBornAgainCore.new_vdouble1d_t(*args))

    def push_back(self, x):
        r"""push_back(vdouble1d_t self, std::vector< double >::value_type const & x)"""
        return _libBornAgainCore.vdouble1d_t_push_back(self, x)

    def front(self):
        r"""front(vdouble1d_t self) -> std::vector< double >::value_type const &"""
        return _libBornAgainCore.vdouble1d_t_front(self)

    def back(self):
        r"""back(vdouble1d_t self) -> std::vector< double >::value_type const &"""
        return _libBornAgainCore.vdouble1d_t_back(self)

    def assign(self, n, x):
        r"""assign(vdouble1d_t self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _libBornAgainCore.vdouble1d_t_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vdouble1d_t self, std::vector< double >::size_type new_size)
        resize(vdouble1d_t self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _libBornAgainCore.vdouble1d_t_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vdouble1d_t self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(vdouble1d_t self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _libBornAgainCore.vdouble1d_t_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vdouble1d_t self, std::vector< double >::size_type n)"""
        return _libBornAgainCore.vdouble1d_t_reserve(self, n)

    def capacity(self):
        r"""capacity(vdouble1d_t self) -> std::vector< double >::size_type"""
        return _libBornAgainCore.vdouble1d_t_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_vdouble1d_t

# Register vdouble1d_t in _libBornAgainCore:
_libBornAgainCore.vdouble1d_t_swigregister(vdouble1d_t)

class vdouble2d_t(object):
    r"""Proxy of C++ std::vector< std::vector< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vdouble2d_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vdouble2d_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vdouble2d_t self) -> bool"""
        return _libBornAgainCore.vdouble2d_t___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vdouble2d_t self) -> bool"""
        return _libBornAgainCore.vdouble2d_t___bool__(self)

    def __len__(self):
        r"""__len__(vdouble2d_t self) -> std::vector< std::vector< double > >::size_type"""
        return _libBornAgainCore.vdouble2d_t___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j) -> vdouble2d_t"""
        return _libBornAgainCore.vdouble2d_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)
        __setslice__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j, vdouble2d_t v)
        """
        return _libBornAgainCore.vdouble2d_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)"""
        return _libBornAgainCore.vdouble2d_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i)
        __delitem__(vdouble2d_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vdouble2d_t___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vdouble2d_t self, PySliceObject * slice) -> vdouble2d_t
        __getitem__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i) -> vdouble1d_t
        """
        return _libBornAgainCore.vdouble2d_t___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vdouble2d_t self, PySliceObject * slice, vdouble2d_t v)
        __setitem__(vdouble2d_t self, PySliceObject * slice)
        __setitem__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i, vdouble1d_t x)
        """
        return _libBornAgainCore.vdouble2d_t___setitem__(self, *args)

    def pop(self):
        r"""pop(vdouble2d_t self) -> vdouble1d_t"""
        return _libBornAgainCore.vdouble2d_t_pop(self)

    def append(self, x):
        r"""append(vdouble2d_t self, vdouble1d_t x)"""
        return _libBornAgainCore.vdouble2d_t_append(self, x)

    def empty(self):
        r"""empty(vdouble2d_t self) -> bool"""
        return _libBornAgainCore.vdouble2d_t_empty(self)

    def size(self):
        r"""size(vdouble2d_t self) -> std::vector< std::vector< double > >::size_type"""
        return _libBornAgainCore.vdouble2d_t_size(self)

    def swap(self, v):
        r"""
        swap(vdouble2d_t self, vdouble2d_t v)
        void swap(OutputDataIterator< TValue, TContainer > &left, OutputDataIterator< TValue, TContainer > &right)

        make Swappable 

        """
        return _libBornAgainCore.vdouble2d_t_swap(self, v)

    def begin(self):
        r"""begin(vdouble2d_t self) -> std::vector< std::vector< double > >::iterator"""
        return _libBornAgainCore.vdouble2d_t_begin(self)

    def end(self):
        r"""end(vdouble2d_t self) -> std::vector< std::vector< double > >::iterator"""
        return _libBornAgainCore.vdouble2d_t_end(self)

    def rbegin(self):
        r"""rbegin(vdouble2d_t self) -> std::vector< std::vector< double > >::reverse_iterator"""
        return _libBornAgainCore.vdouble2d_t_rbegin(self)

    def rend(self):
        r"""rend(vdouble2d_t self) -> std::vector< std::vector< double > >::reverse_iterator"""
        return _libBornAgainCore.vdouble2d_t_rend(self)

    def clear(self):
        r"""clear(vdouble2d_t self)"""
        return _libBornAgainCore.vdouble2d_t_clear(self)

    def get_allocator(self):
        r"""get_allocator(vdouble2d_t self) -> std::vector< std::vector< double > >::allocator_type"""
        return _libBornAgainCore.vdouble2d_t_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vdouble2d_t self)"""
        return _libBornAgainCore.vdouble2d_t_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vdouble2d_t self, std::vector< std::vector< double > >::iterator pos) -> std::vector< std::vector< double > >::iterator
        erase(vdouble2d_t self, std::vector< std::vector< double > >::iterator first, std::vector< std::vector< double > >::iterator last) -> std::vector< std::vector< double > >::iterator
        """
        return _libBornAgainCore.vdouble2d_t_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vdouble2d_t self) -> vdouble2d_t
        __init__(vdouble2d_t self, vdouble2d_t other) -> vdouble2d_t
        __init__(vdouble2d_t self, std::vector< std::vector< double > >::size_type size) -> vdouble2d_t
        __init__(vdouble2d_t self, std::vector< std::vector< double > >::size_type size, vdouble1d_t value) -> vdouble2d_t
        """
        _libBornAgainCore.vdouble2d_t_swiginit(self, _libBornAgainCore.new_vdouble2d_t(*args))

    def push_back(self, x):
        r"""push_back(vdouble2d_t self, vdouble1d_t x)"""
        return _libBornAgainCore.vdouble2d_t_push_back(self, x)

    def front(self):
        r"""front(vdouble2d_t self) -> vdouble1d_t"""
        return _libBornAgainCore.vdouble2d_t_front(self)

    def back(self):
        r"""back(vdouble2d_t self) -> vdouble1d_t"""
        return _libBornAgainCore.vdouble2d_t_back(self)

    def assign(self, n, x):
        r"""assign(vdouble2d_t self, std::vector< std::vector< double > >::size_type n, vdouble1d_t x)"""
        return _libBornAgainCore.vdouble2d_t_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vdouble2d_t self, std::vector< std::vector< double > >::size_type new_size)
        resize(vdouble2d_t self, std::vector< std::vector< double > >::size_type new_size, vdouble1d_t x)
        """
        return _libBornAgainCore.vdouble2d_t_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vdouble2d_t self, std::vector< std::vector< double > >::iterator pos, vdouble1d_t x) -> std::vector< std::vector< double > >::iterator
        insert(vdouble2d_t self, std::vector< std::vector< double > >::iterator pos, std::vector< std::vector< double > >::size_type n, vdouble1d_t x)
        """
        return _libBornAgainCore.vdouble2d_t_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vdouble2d_t self, std::vector< std::vector< double > >::size_type n)"""
        return _libBornAgainCore.vdouble2d_t_reserve(self, n)

    def capacity(self):
        r"""capacity(vdouble2d_t self) -> std::vector< std::vector< double > >::size_type"""
        return _libBornAgainCore.vdouble2d_t_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_vdouble2d_t

# Register vdouble2d_t in _libBornAgainCore:
_libBornAgainCore.vdouble2d_t_swigregister(vdouble2d_t)

class vector_integer_t(object):
    r"""Proxy of C++ std::vector< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_integer_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vector_integer_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_integer_t self) -> bool"""
        return _libBornAgainCore.vector_integer_t___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_integer_t self) -> bool"""
        return _libBornAgainCore.vector_integer_t___bool__(self)

    def __len__(self):
        r"""__len__(vector_integer_t self) -> std::vector< int >::size_type"""
        return _libBornAgainCore.vector_integer_t___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_integer_t self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> vector_integer_t"""
        return _libBornAgainCore.vector_integer_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_integer_t self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        __setslice__(vector_integer_t self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, vector_integer_t v)
        """
        return _libBornAgainCore.vector_integer_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_integer_t self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _libBornAgainCore.vector_integer_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_integer_t self, std::vector< int >::difference_type i)
        __delitem__(vector_integer_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vector_integer_t___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_integer_t self, PySliceObject * slice) -> vector_integer_t
        __getitem__(vector_integer_t self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _libBornAgainCore.vector_integer_t___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_integer_t self, PySliceObject * slice, vector_integer_t v)
        __setitem__(vector_integer_t self, PySliceObject * slice)
        __setitem__(vector_integer_t self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _libBornAgainCore.vector_integer_t___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_integer_t self) -> std::vector< int >::value_type"""
        return _libBornAgainCore.vector_integer_t_pop(self)

    def append(self, x):
        r"""append(vector_integer_t self, std::vector< int >::value_type const & x)"""
        return _libBornAgainCore.vector_integer_t_append(self, x)

    def empty(self):
        r"""empty(vector_integer_t self) -> bool"""
        return _libBornAgainCore.vector_integer_t_empty(self)

    def size(self):
        r"""size(vector_integer_t self) -> std::vector< int >::size_type"""
        return _libBornAgainCore.vector_integer_t_size(self)

    def swap(self, v):
        r"""
        swap(vector_integer_t self, vector_integer_t v)
        void swap(OutputDataIterator< TValue, TContainer > &left, OutputDataIterator< TValue, TContainer > &right)

        make Swappable 

        """
        return _libBornAgainCore.vector_integer_t_swap(self, v)

    def begin(self):
        r"""begin(vector_integer_t self) -> std::vector< int >::iterator"""
        return _libBornAgainCore.vector_integer_t_begin(self)

    def end(self):
        r"""end(vector_integer_t self) -> std::vector< int >::iterator"""
        return _libBornAgainCore.vector_integer_t_end(self)

    def rbegin(self):
        r"""rbegin(vector_integer_t self) -> std::vector< int >::reverse_iterator"""
        return _libBornAgainCore.vector_integer_t_rbegin(self)

    def rend(self):
        r"""rend(vector_integer_t self) -> std::vector< int >::reverse_iterator"""
        return _libBornAgainCore.vector_integer_t_rend(self)

    def clear(self):
        r"""clear(vector_integer_t self)"""
        return _libBornAgainCore.vector_integer_t_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_integer_t self) -> std::vector< int >::allocator_type"""
        return _libBornAgainCore.vector_integer_t_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_integer_t self)"""
        return _libBornAgainCore.vector_integer_t_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_integer_t self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(vector_integer_t self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _libBornAgainCore.vector_integer_t_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_integer_t self) -> vector_integer_t
        __init__(vector_integer_t self, vector_integer_t other) -> vector_integer_t
        __init__(vector_integer_t self, std::vector< int >::size_type size) -> vector_integer_t
        __init__(vector_integer_t self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> vector_integer_t
        """
        _libBornAgainCore.vector_integer_t_swiginit(self, _libBornAgainCore.new_vector_integer_t(*args))

    def push_back(self, x):
        r"""push_back(vector_integer_t self, std::vector< int >::value_type const & x)"""
        return _libBornAgainCore.vector_integer_t_push_back(self, x)

    def front(self):
        r"""front(vector_integer_t self) -> std::vector< int >::value_type const &"""
        return _libBornAgainCore.vector_integer_t_front(self)

    def back(self):
        r"""back(vector_integer_t self) -> std::vector< int >::value_type const &"""
        return _libBornAgainCore.vector_integer_t_back(self)

    def assign(self, n, x):
        r"""assign(vector_integer_t self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _libBornAgainCore.vector_integer_t_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_integer_t self, std::vector< int >::size_type new_size)
        resize(vector_integer_t self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _libBornAgainCore.vector_integer_t_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_integer_t self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(vector_integer_t self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _libBornAgainCore.vector_integer_t_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_integer_t self, std::vector< int >::size_type n)"""
        return _libBornAgainCore.vector_integer_t_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_integer_t self) -> std::vector< int >::size_type"""
        return _libBornAgainCore.vector_integer_t_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_vector_integer_t

# Register vector_integer_t in _libBornAgainCore:
_libBornAgainCore.vector_integer_t_swigregister(vector_integer_t)

class vinteger2d_t(object):
    r"""Proxy of C++ std::vector< std::vector< int > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vinteger2d_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vinteger2d_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vinteger2d_t self) -> bool"""
        return _libBornAgainCore.vinteger2d_t___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vinteger2d_t self) -> bool"""
        return _libBornAgainCore.vinteger2d_t___bool__(self)

    def __len__(self):
        r"""__len__(vinteger2d_t self) -> std::vector< std::vector< int > >::size_type"""
        return _libBornAgainCore.vinteger2d_t___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vinteger2d_t self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j) -> vinteger2d_t"""
        return _libBornAgainCore.vinteger2d_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vinteger2d_t self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j)
        __setslice__(vinteger2d_t self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j, vinteger2d_t v)
        """
        return _libBornAgainCore.vinteger2d_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vinteger2d_t self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j)"""
        return _libBornAgainCore.vinteger2d_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vinteger2d_t self, std::vector< std::vector< int > >::difference_type i)
        __delitem__(vinteger2d_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vinteger2d_t___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vinteger2d_t self, PySliceObject * slice) -> vinteger2d_t
        __getitem__(vinteger2d_t self, std::vector< std::vector< int > >::difference_type i) -> vector_integer_t
        """
        return _libBornAgainCore.vinteger2d_t___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vinteger2d_t self, PySliceObject * slice, vinteger2d_t v)
        __setitem__(vinteger2d_t self, PySliceObject * slice)
        __setitem__(vinteger2d_t self, std::vector< std::vector< int > >::difference_type i, vector_integer_t x)
        """
        return _libBornAgainCore.vinteger2d_t___setitem__(self, *args)

    def pop(self):
        r"""pop(vinteger2d_t self) -> vector_integer_t"""
        return _libBornAgainCore.vinteger2d_t_pop(self)

    def append(self, x):
        r"""append(vinteger2d_t self, vector_integer_t x)"""
        return _libBornAgainCore.vinteger2d_t_append(self, x)

    def empty(self):
        r"""empty(vinteger2d_t self) -> bool"""
        return _libBornAgainCore.vinteger2d_t_empty(self)

    def size(self):
        r"""size(vinteger2d_t self) -> std::vector< std::vector< int > >::size_type"""
        return _libBornAgainCore.vinteger2d_t_size(self)

    def swap(self, v):
        r"""
        swap(vinteger2d_t self, vinteger2d_t v)
        void swap(OutputDataIterator< TValue, TContainer > &left, OutputDataIterator< TValue, TContainer > &right)

        make Swappable 

        """
        return _libBornAgainCore.vinteger2d_t_swap(self, v)

    def begin(self):
        r"""begin(vinteger2d_t self) -> std::vector< std::vector< int > >::iterator"""
        return _libBornAgainCore.vinteger2d_t_begin(self)

    def end(self):
        r"""end(vinteger2d_t self) -> std::vector< std::vector< int > >::iterator"""
        return _libBornAgainCore.vinteger2d_t_end(self)

    def rbegin(self):
        r"""rbegin(vinteger2d_t self) -> std::vector< std::vector< int > >::reverse_iterator"""
        return _libBornAgainCore.vinteger2d_t_rbegin(self)

    def rend(self):
        r"""rend(vinteger2d_t self) -> std::vector< std::vector< int > >::reverse_iterator"""
        return _libBornAgainCore.vinteger2d_t_rend(self)

    def clear(self):
        r"""clear(vinteger2d_t self)"""
        return _libBornAgainCore.vinteger2d_t_clear(self)

    def get_allocator(self):
        r"""get_allocator(vinteger2d_t self) -> std::vector< std::vector< int > >::allocator_type"""
        return _libBornAgainCore.vinteger2d_t_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vinteger2d_t self)"""
        return _libBornAgainCore.vinteger2d_t_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vinteger2d_t self, std::vector< std::vector< int > >::iterator pos) -> std::vector< std::vector< int > >::iterator
        erase(vinteger2d_t self, std::vector< std::vector< int > >::iterator first, std::vector< std::vector< int > >::iterator last) -> std::vector< std::vector< int > >::iterator
        """
        return _libBornAgainCore.vinteger2d_t_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vinteger2d_t self) -> vinteger2d_t
        __init__(vinteger2d_t self, vinteger2d_t other) -> vinteger2d_t
        __init__(vinteger2d_t self, std::vector< std::vector< int > >::size_type size) -> vinteger2d_t
        __init__(vinteger2d_t self, std::vector< std::vector< int > >::size_type size, vector_integer_t value) -> vinteger2d_t
        """
        _libBornAgainCore.vinteger2d_t_swiginit(self, _libBornAgainCore.new_vinteger2d_t(*args))

    def push_back(self, x):
        r"""push_back(vinteger2d_t self, vector_integer_t x)"""
        return _libBornAgainCore.vinteger2d_t_push_back(self, x)

    def front(self):
        r"""front(vinteger2d_t self) -> vector_integer_t"""
        return _libBornAgainCore.vinteger2d_t_front(self)

    def back(self):
        r"""back(vinteger2d_t self) -> vector_integer_t"""
        return _libBornAgainCore.vinteger2d_t_back(self)

    def assign(self, n, x):
        r"""assign(vinteger2d_t self, std::vector< std::vector< int > >::size_type n, vector_integer_t x)"""
        return _libBornAgainCore.vinteger2d_t_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vinteger2d_t self, std::vector< std::vector< int > >::size_type new_size)
        resize(vinteger2d_t self, std::vector< std::vector< int > >::size_type new_size, vector_integer_t x)
        """
        return _libBornAgainCore.vinteger2d_t_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vinteger2d_t self, std::vector< std::vector< int > >::iterator pos, vector_integer_t x) -> std::vector< std::vector< int > >::iterator
        insert(vinteger2d_t self, std::vector< std::vector< int > >::iterator pos, std::vector< std::vector< int > >::size_type n, vector_integer_t x)
        """
        return _libBornAgainCore.vinteger2d_t_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vinteger2d_t self, std::vector< std::vector< int > >::size_type n)"""
        return _libBornAgainCore.vinteger2d_t_reserve(self, n)

    def capacity(self):
        r"""capacity(vinteger2d_t self) -> std::vector< std::vector< int > >::size_type"""
        return _libBornAgainCore.vinteger2d_t_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_vinteger2d_t

# Register vinteger2d_t in _libBornAgainCore:
_libBornAgainCore.vinteger2d_t_swigregister(vinteger2d_t)

class vector_longinteger_t(object):
    r"""Proxy of C++ std::vector< unsigned long > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_longinteger_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vector_longinteger_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_longinteger_t self) -> bool"""
        return _libBornAgainCore.vector_longinteger_t___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_longinteger_t self) -> bool"""
        return _libBornAgainCore.vector_longinteger_t___bool__(self)

    def __len__(self):
        r"""__len__(vector_longinteger_t self) -> std::vector< unsigned long >::size_type"""
        return _libBornAgainCore.vector_longinteger_t___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::difference_type j) -> vector_longinteger_t"""
        return _libBornAgainCore.vector_longinteger_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::difference_type j)
        __setslice__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::difference_type j, vector_longinteger_t v)
        """
        return _libBornAgainCore.vector_longinteger_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::difference_type j)"""
        return _libBornAgainCore.vector_longinteger_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i)
        __delitem__(vector_longinteger_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vector_longinteger_t___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_longinteger_t self, PySliceObject * slice) -> vector_longinteger_t
        __getitem__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i) -> std::vector< unsigned long >::value_type const &
        """
        return _libBornAgainCore.vector_longinteger_t___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_longinteger_t self, PySliceObject * slice, vector_longinteger_t v)
        __setitem__(vector_longinteger_t self, PySliceObject * slice)
        __setitem__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::value_type const & x)
        """
        return _libBornAgainCore.vector_longinteger_t___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_longinteger_t self) -> std::vector< unsigned long >::value_type"""
        return _libBornAgainCore.vector_longinteger_t_pop(self)

    def append(self, x):
        r"""append(vector_longinteger_t self, std::vector< unsigned long >::value_type const & x)"""
        return _libBornAgainCore.vector_longinteger_t_append(self, x)

    def empty(self):
        r"""empty(vector_longinteger_t self) -> bool"""
        return _libBornAgainCore.vector_longinteger_t_empty(self)

    def size(self):
        r"""size(vector_longinteger_t self) -> std::vector< unsigned long >::size_type"""
        return _libBornAgainCore.vector_longinteger_t_size(self)

    def swap(self, v):
        r"""
        swap(vector_longinteger_t self, vector_longinteger_t v)
        void swap(OutputDataIterator< TValue, TContainer > &left, OutputDataIterator< TValue, TContainer > &right)

        make Swappable 

        """
        return _libBornAgainCore.vector_longinteger_t_swap(self, v)

    def begin(self):
        r"""begin(vector_longinteger_t self) -> std::vector< unsigned long >::iterator"""
        return _libBornAgainCore.vector_longinteger_t_begin(self)

    def end(self):
        r"""end(vector_longinteger_t self) -> std::vector< unsigned long >::iterator"""
        return _libBornAgainCore.vector_longinteger_t_end(self)

    def rbegin(self):
        r"""rbegin(vector_longinteger_t self) -> std::vector< unsigned long >::reverse_iterator"""
        return _libBornAgainCore.vector_longinteger_t_rbegin(self)

    def rend(self):
        r"""rend(vector_longinteger_t self) -> std::vector< unsigned long >::reverse_iterator"""
        return _libBornAgainCore.vector_longinteger_t_rend(self)

    def clear(self):
        r"""clear(vector_longinteger_t self)"""
        return _libBornAgainCore.vector_longinteger_t_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_longinteger_t self) -> std::vector< unsigned long >::allocator_type"""
        return _libBornAgainCore.vector_longinteger_t_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_longinteger_t self)"""
        return _libBornAgainCore.vector_longinteger_t_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_longinteger_t self, std::vector< unsigned long >::iterator pos) -> std::vector< unsigned long >::iterator
        erase(vector_longinteger_t self, std::vector< unsigned long >::iterator first, std::vector< unsigned long >::iterator last) -> std::vector< unsigned long >::iterator
        """
        return _libBornAgainCore.vector_longinteger_t_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_longinteger_t self) -> vector_longinteger_t
        __init__(vector_longinteger_t self, vector_longinteger_t other) -> vector_longinteger_t
        __init__(vector_longinteger_t self, std::vector< unsigned long >::size_type size) -> vector_longinteger_t
        __init__(vector_longinteger_t self, std::vector< unsigned long >::size_type size, std::vector< unsigned long >::value_type const & value) -> vector_longinteger_t
        """
        _libBornAgainCore.vector_longinteger_t_swiginit(self, _libBornAgainCore.new_vector_longinteger_t(*args))

    def push_back(self, x):
        r"""push_back(vector_longinteger_t self, std::vector< unsigned long >::value_type const & x)"""
        return _libBornAgainCore.vector_longinteger_t_push_back(self, x)

    def front(self):
        r"""front(vector_longinteger_t self) -> std::vector< unsigned long >::value_type const &"""
        return _libBornAgainCore.vector_longinteger_t_front(self)

    def back(self):
        r"""back(vector_longinteger_t self) -> std::vector< unsigned long >::value_type const &"""
        return _libBornAgainCore.vector_longinteger_t_back(self)

    def assign(self, n, x):
        r"""assign(vector_longinteger_t self, std::vector< unsigned long >::size_type n, std::vector< unsigned long >::value_type const & x)"""
        return _libBornAgainCore.vector_longinteger_t_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_longinteger_t self, std::vector< unsigned long >::size_type new_size)
        resize(vector_longinteger_t self, std::vector< unsigned long >::size_type new_size, std::vector< unsigned long >::value_type const & x)
        """
        return _libBornAgainCore.vector_longinteger_t_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_longinteger_t self, std::vector< unsigned long >::iterator pos, std::vector< unsigned long >::value_type const & x) -> std::vector< unsigned long >::iterator
        insert(vector_longinteger_t self, std::vector< unsigned long >::iterator pos, std::vector< unsigned long >::size_type n, std::vector< unsigned long >::value_type const & x)
        """
        return _libBornAgainCore.vector_longinteger_t_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_longinteger_t self, std::vector< unsigned long >::size_type n)"""
        return _libBornAgainCore.vector_longinteger_t_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_longinteger_t self) -> std::vector< unsigned long >::size_type"""
        return _libBornAgainCore.vector_longinteger_t_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_vector_longinteger_t

# Register vector_longinteger_t in _libBornAgainCore:
_libBornAgainCore.vector_longinteger_t_swigregister(vector_longinteger_t)

class vector_complex_t(object):
    r"""Proxy of C++ std::vector< std::complex< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_complex_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vector_complex_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_complex_t self) -> bool"""
        return _libBornAgainCore.vector_complex_t___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_complex_t self) -> bool"""
        return _libBornAgainCore.vector_complex_t___bool__(self)

    def __len__(self):
        r"""__len__(vector_complex_t self) -> std::vector< std::complex< double > >::size_type"""
        return _libBornAgainCore.vector_complex_t___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i, std::vector< std::complex< double > >::difference_type j) -> vector_complex_t"""
        return _libBornAgainCore.vector_complex_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i, std::vector< std::complex< double > >::difference_type j)
        __setslice__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i, std::vector< std::complex< double > >::difference_type j, vector_complex_t v)
        """
        return _libBornAgainCore.vector_complex_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i, std::vector< std::complex< double > >::difference_type j)"""
        return _libBornAgainCore.vector_complex_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i)
        __delitem__(vector_complex_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vector_complex_t___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_complex_t self, PySliceObject * slice) -> vector_complex_t
        __getitem__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i) -> std::vector< std::complex< double > >::value_type const &
        """
        return _libBornAgainCore.vector_complex_t___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_complex_t self, PySliceObject * slice, vector_complex_t v)
        __setitem__(vector_complex_t self, PySliceObject * slice)
        __setitem__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i, std::vector< std::complex< double > >::value_type const & x)
        """
        return _libBornAgainCore.vector_complex_t___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_complex_t self) -> std::vector< std::complex< double > >::value_type"""
        return _libBornAgainCore.vector_complex_t_pop(self)

    def append(self, x):
        r"""append(vector_complex_t self, std::vector< std::complex< double > >::value_type const & x)"""
        return _libBornAgainCore.vector_complex_t_append(self, x)

    def empty(self):
        r"""empty(vector_complex_t self) -> bool"""
        return _libBornAgainCore.vector_complex_t_empty(self)

    def size(self):
        r"""size(vector_complex_t self) -> std::vector< std::complex< double > >::size_type"""
        return _libBornAgainCore.vector_complex_t_size(self)

    def swap(self, v):
        r"""
        swap(vector_complex_t self, vector_complex_t v)
        void swap(OutputDataIterator< TValue, TContainer > &left, OutputDataIterator< TValue, TContainer > &right)

        make Swappable 

        """
        return _libBornAgainCore.vector_complex_t_swap(self, v)

    def begin(self):
        r"""begin(vector_complex_t self) -> std::vector< std::complex< double > >::iterator"""
        return _libBornAgainCore.vector_complex_t_begin(self)

    def end(self):
        r"""end(vector_complex_t self) -> std::vector< std::complex< double > >::iterator"""
        return _libBornAgainCore.vector_complex_t_end(self)

    def rbegin(self):
        r"""rbegin(vector_complex_t self) -> std::vector< std::complex< double > >::reverse_iterator"""
        return _libBornAgainCore.vector_complex_t_rbegin(self)

    def rend(self):
        r"""rend(vector_complex_t self) -> std::vector< std::complex< double > >::reverse_iterator"""
        return _libBornAgainCore.vector_complex_t_rend(self)

    def clear(self):
        r"""clear(vector_complex_t self)"""
        return _libBornAgainCore.vector_complex_t_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_complex_t self) -> std::vector< std::complex< double > >::allocator_type"""
        return _libBornAgainCore.vector_complex_t_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_complex_t self)"""
        return _libBornAgainCore.vector_complex_t_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_complex_t self, std::vector< std::complex< double > >::iterator pos) -> std::vector< std::complex< double > >::iterator
        erase(vector_complex_t self, std::vector< std::complex< double > >::iterator first, std::vector< std::complex< double > >::iterator last) -> std::vector< std::complex< double > >::iterator
        """
        return _libBornAgainCore.vector_complex_t_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_complex_t self) -> vector_complex_t
        __init__(vector_complex_t self, vector_complex_t other) -> vector_complex_t
        __init__(vector_complex_t self, std::vector< std::complex< double > >::size_type size) -> vector_complex_t
        __init__(vector_complex_t self, std::vector< std::complex< double > >::size_type size, std::vector< std::complex< double > >::value_type const & value) -> vector_complex_t
        """
        _libBornAgainCore.vector_complex_t_swiginit(self, _libBornAgainCore.new_vector_complex_t(*args))

    def push_back(self, x):
        r"""push_back(vector_complex_t self, std::vector< std::complex< double > >::value_type const & x)"""
        return _libBornAgainCore.vector_complex_t_push_back(self, x)

    def front(self):
        r"""front(vector_complex_t self) -> std::vector< std::complex< double > >::value_type const &"""
        return _libBornAgainCore.vector_complex_t_front(self)

    def back(self):
        r"""back(vector_complex_t self) -> std::vector< std::complex< double > >::value_type const &"""
        return _libBornAgainCore.vector_complex_t_back(self)

    def assign(self, n, x):
        r"""assign(vector_complex_t self, std::vector< std::complex< double > >::size_type n, std::vector< std::complex< double > >::value_type const & x)"""
        return _libBornAgainCore.vector_complex_t_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_complex_t self, std::vector< std::complex< double > >::size_type new_size)
        resize(vector_complex_t self, std::vector< std::complex< double > >::size_type new_size, std::vector< std::complex< double > >::value_type const & x)
        """
        return _libBornAgainCore.vector_complex_t_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_complex_t self, std::vector< std::complex< double > >::iterator pos, std::vector< std::complex< double > >::value_type const & x) -> std::vector< std::complex< double > >::iterator
        insert(vector_complex_t self, std::vector< std::complex< double > >::iterator pos, std::vector< std::complex< double > >::size_type n, std::vector< std::complex< double > >::value_type const & x)
        """
        return _libBornAgainCore.vector_complex_t_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_complex_t self, std::vector< std::complex< double > >::size_type n)"""
        return _libBornAgainCore.vector_complex_t_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_complex_t self) -> std::vector< std::complex< double > >::size_type"""
        return _libBornAgainCore.vector_complex_t_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_vector_complex_t

# Register vector_complex_t in _libBornAgainCore:
_libBornAgainCore.vector_complex_t_swigregister(vector_complex_t)

class vector_string_t(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_string_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vector_string_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_string_t self) -> bool"""
        return _libBornAgainCore.vector_string_t___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_string_t self) -> bool"""
        return _libBornAgainCore.vector_string_t___bool__(self)

    def __len__(self):
        r"""__len__(vector_string_t self) -> std::vector< std::string >::size_type"""
        return _libBornAgainCore.vector_string_t___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_string_t self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> vector_string_t"""
        return _libBornAgainCore.vector_string_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_string_t self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        __setslice__(vector_string_t self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, vector_string_t v)
        """
        return _libBornAgainCore.vector_string_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_string_t self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _libBornAgainCore.vector_string_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_string_t self, std::vector< std::string >::difference_type i)
        __delitem__(vector_string_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vector_string_t___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_string_t self, PySliceObject * slice) -> vector_string_t
        __getitem__(vector_string_t self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _libBornAgainCore.vector_string_t___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_string_t self, PySliceObject * slice, vector_string_t v)
        __setitem__(vector_string_t self, PySliceObject * slice)
        __setitem__(vector_string_t self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _libBornAgainCore.vector_string_t___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_string_t self) -> std::vector< std::string >::value_type"""
        return _libBornAgainCore.vector_string_t_pop(self)

    def append(self, x):
        r"""append(vector_string_t self, std::vector< std::string >::value_type const & x)"""
        return _libBornAgainCore.vector_string_t_append(self, x)

    def empty(self):
        r"""empty(vector_string_t self) -> bool"""
        return _libBornAgainCore.vector_string_t_empty(self)

    def size(self):
        r"""size(vector_string_t self) -> std::vector< std::string >::size_type"""
        return _libBornAgainCore.vector_string_t_size(self)

    def swap(self, v):
        r"""
        swap(vector_string_t self, vector_string_t v)
        void swap(OutputDataIterator< TValue, TContainer > &left, OutputDataIterator< TValue, TContainer > &right)

        make Swappable 

        """
        return _libBornAgainCore.vector_string_t_swap(self, v)

    def begin(self):
        r"""begin(vector_string_t self) -> std::vector< std::string >::iterator"""
        return _libBornAgainCore.vector_string_t_begin(self)

    def end(self):
        r"""end(vector_string_t self) -> std::vector< std::string >::iterator"""
        return _libBornAgainCore.vector_string_t_end(self)

    def rbegin(self):
        r"""rbegin(vector_string_t self) -> std::vector< std::string >::reverse_iterator"""
        return _libBornAgainCore.vector_string_t_rbegin(self)

    def rend(self):
        r"""rend(vector_string_t self) -> std::vector< std::string >::reverse_iterator"""
        return _libBornAgainCore.vector_string_t_rend(self)

    def clear(self):
        r"""clear(vector_string_t self)"""
        return _libBornAgainCore.vector_string_t_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_string_t self) -> std::vector< std::string >::allocator_type"""
        return _libBornAgainCore.vector_string_t_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_string_t self)"""
        return _libBornAgainCore.vector_string_t_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_string_t self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(vector_string_t self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _libBornAgainCore.vector_string_t_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_string_t self) -> vector_string_t
        __init__(vector_string_t self, vector_string_t other) -> vector_string_t
        __init__(vector_string_t self, std::vector< std::string >::size_type size) -> vector_string_t
        __init__(vector_string_t self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> vector_string_t
        """
        _libBornAgainCore.vector_string_t_swiginit(self, _libBornAgainCore.new_vector_string_t(*args))

    def push_back(self, x):
        r"""push_back(vector_string_t self, std::vector< std::string >::value_type const & x)"""
        return _libBornAgainCore.vector_string_t_push_back(self, x)

    def front(self):
        r"""front(vector_string_t self) -> std::vector< std::string >::value_type const &"""
        return _libBornAgainCore.vector_string_t_front(self)

    def back(self):
        r"""back(vector_string_t self) -> std::vector< std::string >::value_type const &"""
        return _libBornAgainCore.vector_string_t_back(self)

    def assign(self, n, x):
        r"""assign(vector_string_t self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _libBornAgainCore.vector_string_t_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_string_t self, std::vector< std::string >::size_type new_size)
        resize(vector_string_t self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _libBornAgainCore.vector_string_t_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_string_t self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(vector_string_t self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)
        """
        return _libBornAgainCore.vector_string_t_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_string_t self, std::vector< std::string >::size_type n)"""
        return _libBornAgainCore.vector_string_t_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_string_t self) -> std::vector< std::string >::size_type"""
        return _libBornAgainCore.vector_string_t_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_vector_string_t

# Register vector_string_t in _libBornAgainCore:
_libBornAgainCore.vector_string_t_swigregister(vector_string_t)

class map_string_double_t(object):
    r"""Proxy of C++ std::map< std::string,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(map_string_double_t self) -> SwigPyIterator"""
        return _libBornAgainCore.map_string_double_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(map_string_double_t self) -> bool"""
        return _libBornAgainCore.map_string_double_t___nonzero__(self)

    def __bool__(self):
        r"""__bool__(map_string_double_t self) -> bool"""
        return _libBornAgainCore.map_string_double_t___bool__(self)

    def __len__(self):
        r"""__len__(map_string_double_t self) -> std::map< std::string,double >::size_type"""
        return _libBornAgainCore.map_string_double_t___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""__getitem__(map_string_double_t self, std::map< std::string,double >::key_type const & key) -> std::map< std::string,double >::mapped_type const &"""
        return _libBornAgainCore.map_string_double_t___getitem__(self, key)

    def __delitem__(self, key):
        r"""__delitem__(map_string_double_t self, std::map< std::string,double >::key_type const & key)"""
        return _libBornAgainCore.map_string_double_t___delitem__(self, key)

    def has_key(self, key):
        r"""has_key(map_string_double_t self, std::map< std::string,double >::key_type const & key) -> bool"""
        return _libBornAgainCore.map_string_double_t_has_key(self, key)

    def keys(self):
        r"""keys(map_string_double_t self) -> PyObject *"""
        return _libBornAgainCore.map_string_double_t_keys(self)

    def values(self):
        r"""values(map_string_double_t self) -> PyObject *"""
        return _libBornAgainCore.map_string_double_t_values(self)

    def items(self):
        r"""items(map_string_double_t self) -> PyObject *"""
        return _libBornAgainCore.map_string_double_t_items(self)

    def __contains__(self, key):
        r"""__contains__(map_string_double_t self, std::map< std::string,double >::key_type const & key) -> bool"""
        return _libBornAgainCore.map_string_double_t___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(map_string_double_t self) -> SwigPyIterator"""
        return _libBornAgainCore.map_string_double_t_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(map_string_double_t self) -> SwigPyIterator"""
        return _libBornAgainCore.map_string_double_t_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(map_string_double_t self, std::map< std::string,double >::key_type const & key)
        __setitem__(map_string_double_t self, std::map< std::string,double >::key_type const & key, std::map< std::string,double >::mapped_type const & x)
        """
        return _libBornAgainCore.map_string_double_t___setitem__(self, *args)

    def asdict(self):
        r"""asdict(map_string_double_t self) -> PyObject *"""
        return _libBornAgainCore.map_string_double_t_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(map_string_double_t self, std::less< std::string > const & other) -> map_string_double_t
        __init__(map_string_double_t self) -> map_string_double_t
        __init__(map_string_double_t self, map_string_double_t other) -> map_string_double_t
        """
        _libBornAgainCore.map_string_double_t_swiginit(self, _libBornAgainCore.new_map_string_double_t(*args))

    def empty(self):
        r"""empty(map_string_double_t self) -> bool"""
        return _libBornAgainCore.map_string_double_t_empty(self)

    def size(self):
        r"""size(map_string_double_t self) -> std::map< std::string,double >::size_type"""
        return _libBornAgainCore.map_string_double_t_size(self)

    def swap(self, v):
        r"""
        swap(map_string_double_t self, map_string_double_t v)
        void swap(OutputDataIterator< TValue, TContainer > &left, OutputDataIterator< TValue, TContainer > &right)

        make Swappable 

        """
        return _libBornAgainCore.map_string_double_t_swap(self, v)

    def begin(self):
        r"""begin(map_string_double_t self) -> std::map< std::string,double >::iterator"""
        return _libBornAgainCore.map_string_double_t_begin(self)

    def end(self):
        r"""end(map_string_double_t self) -> std::map< std::string,double >::iterator"""
        return _libBornAgainCore.map_string_double_t_end(self)

    def rbegin(self):
        r"""rbegin(map_string_double_t self) -> std::map< std::string,double >::reverse_iterator"""
        return _libBornAgainCore.map_string_double_t_rbegin(self)

    def rend(self):
        r"""rend(map_string_double_t self) -> std::map< std::string,double >::reverse_iterator"""
        return _libBornAgainCore.map_string_double_t_rend(self)

    def clear(self):
        r"""clear(map_string_double_t self)"""
        return _libBornAgainCore.map_string_double_t_clear(self)

    def get_allocator(self):
        r"""get_allocator(map_string_double_t self) -> std::map< std::string,double >::allocator_type"""
        return _libBornAgainCore.map_string_double_t_get_allocator(self)

    def count(self, x):
        r"""count(map_string_double_t self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::size_type"""
        return _libBornAgainCore.map_string_double_t_count(self, x)

    def erase(self, *args):
        r"""
        erase(map_string_double_t self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::size_type
        erase(map_string_double_t self, std::map< std::string,double >::iterator position)
        erase(map_string_double_t self, std::map< std::string,double >::iterator first, std::map< std::string,double >::iterator last)
        """
        return _libBornAgainCore.map_string_double_t_erase(self, *args)

    def find(self, x):
        r"""find(map_string_double_t self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::iterator"""
        return _libBornAgainCore.map_string_double_t_find(self, x)

    def lower_bound(self, x):
        r"""lower_bound(map_string_double_t self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::iterator"""
        return _libBornAgainCore.map_string_double_t_lower_bound(self, x)

    def upper_bound(self, x):
        r"""upper_bound(map_string_double_t self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::iterator"""
        return _libBornAgainCore.map_string_double_t_upper_bound(self, x)
    __swig_destroy__ = _libBornAgainCore.delete_map_string_double_t

# Register map_string_double_t in _libBornAgainCore:
_libBornAgainCore.map_string_double_t_swigregister(map_string_double_t)

class pair_double_t(object):
    r"""Proxy of C++ std::pair< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(pair_double_t self) -> pair_double_t
        __init__(pair_double_t self, double first, double second) -> pair_double_t
        __init__(pair_double_t self, pair_double_t other) -> pair_double_t
        """
        _libBornAgainCore.pair_double_t_swiginit(self, _libBornAgainCore.new_pair_double_t(*args))
    first = property(_libBornAgainCore.pair_double_t_first_get, _libBornAgainCore.pair_double_t_first_set, doc=r"""first : double""")
    second = property(_libBornAgainCore.pair_double_t_second_get, _libBornAgainCore.pair_double_t_second_set, doc=r"""second : double""")
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _libBornAgainCore.delete_pair_double_t

# Register pair_double_t in _libBornAgainCore:
_libBornAgainCore.pair_double_t_swigregister(pair_double_t)

class vector_pair_double_t(object):
    r"""Proxy of C++ std::vector< std::pair< double,double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_pair_double_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vector_pair_double_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_pair_double_t self) -> bool"""
        return _libBornAgainCore.vector_pair_double_t___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_pair_double_t self) -> bool"""
        return _libBornAgainCore.vector_pair_double_t___bool__(self)

    def __len__(self):
        r"""__len__(vector_pair_double_t self) -> std::vector< std::pair< double,double > >::size_type"""
        return _libBornAgainCore.vector_pair_double_t___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_pair_double_t self, std::vector< std::pair< double,double > >::difference_type i, std::vector< std::pair< double,double > >::difference_type j) -> vector_pair_double_t"""
        return _libBornAgainCore.vector_pair_double_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_pair_double_t self, std::vector< std::pair< double,double > >::difference_type i, std::vector< std::pair< double,double > >::difference_type j)
        __setslice__(vector_pair_double_t self, std::vector< std::pair< double,double > >::difference_type i, std::vector< std::pair< double,double > >::difference_type j, vector_pair_double_t v)
        """
        return _libBornAgainCore.vector_pair_double_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_pair_double_t self, std::vector< std::pair< double,double > >::difference_type i, std::vector< std::pair< double,double > >::difference_type j)"""
        return _libBornAgainCore.vector_pair_double_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_pair_double_t self, std::vector< std::pair< double,double > >::difference_type i)
        __delitem__(vector_pair_double_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vector_pair_double_t___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_pair_double_t self, PySliceObject * slice) -> vector_pair_double_t
        __getitem__(vector_pair_double_t self, std::vector< std::pair< double,double > >::difference_type i) -> pair_double_t
        """
        return _libBornAgainCore.vector_pair_double_t___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_pair_double_t self, PySliceObject * slice, vector_pair_double_t v)
        __setitem__(vector_pair_double_t self, PySliceObject * slice)
        __setitem__(vector_pair_double_t self, std::vector< std::pair< double,double > >::difference_type i, pair_double_t x)
        """
        return _libBornAgainCore.vector_pair_double_t___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_pair_double_t self) -> pair_double_t"""
        return _libBornAgainCore.vector_pair_double_t_pop(self)

    def append(self, x):
        r"""append(vector_pair_double_t self, pair_double_t x)"""
        return _libBornAgainCore.vector_pair_double_t_append(self, x)

    def empty(self):
        r"""empty(vector_pair_double_t self) -> bool"""
        return _libBornAgainCore.vector_pair_double_t_empty(self)

    def size(self):
        r"""size(vector_pair_double_t self) -> std::vector< std::pair< double,double > >::size_type"""
        return _libBornAgainCore.vector_pair_double_t_size(self)

    def swap(self, v):
        r"""
        swap(vector_pair_double_t self, vector_pair_double_t v)
        void swap(OutputDataIterator< TValue, TContainer > &left, OutputDataIterator< TValue, TContainer > &right)

        make Swappable 

        """
        return _libBornAgainCore.vector_pair_double_t_swap(self, v)

    def begin(self):
        r"""begin(vector_pair_double_t self) -> std::vector< std::pair< double,double > >::iterator"""
        return _libBornAgainCore.vector_pair_double_t_begin(self)

    def end(self):
        r"""end(vector_pair_double_t self) -> std::vector< std::pair< double,double > >::iterator"""
        return _libBornAgainCore.vector_pair_double_t_end(self)

    def rbegin(self):
        r"""rbegin(vector_pair_double_t self) -> std::vector< std::pair< double,double > >::reverse_iterator"""
        return _libBornAgainCore.vector_pair_double_t_rbegin(self)

    def rend(self):
        r"""rend(vector_pair_double_t self) -> std::vector< std::pair< double,double > >::reverse_iterator"""
        return _libBornAgainCore.vector_pair_double_t_rend(self)

    def clear(self):
        r"""clear(vector_pair_double_t self)"""
        return _libBornAgainCore.vector_pair_double_t_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_pair_double_t self) -> std::vector< std::pair< double,double > >::allocator_type"""
        return _libBornAgainCore.vector_pair_double_t_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_pair_double_t self)"""
        return _libBornAgainCore.vector_pair_double_t_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_pair_double_t self, std::vector< std::pair< double,double > >::iterator pos) -> std::vector< std::pair< double,double > >::iterator
        erase(vector_pair_double_t self, std::vector< std::pair< double,double > >::iterator first, std::vector< std::pair< double,double > >::iterator last) -> std::vector< std::pair< double,double > >::iterator
        """
        return _libBornAgainCore.vector_pair_double_t_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_pair_double_t self) -> vector_pair_double_t
        __init__(vector_pair_double_t self, vector_pair_double_t other) -> vector_pair_double_t
        __init__(vector_pair_double_t self, std::vector< std::pair< double,double > >::size_type size) -> vector_pair_double_t
        __init__(vector_pair_double_t self, std::vector< std::pair< double,double > >::size_type size, pair_double_t value) -> vector_pair_double_t
        """
        _libBornAgainCore.vector_pair_double_t_swiginit(self, _libBornAgainCore.new_vector_pair_double_t(*args))

    def push_back(self, x):
        r"""push_back(vector_pair_double_t self, pair_double_t x)"""
        return _libBornAgainCore.vector_pair_double_t_push_back(self, x)

    def front(self):
        r"""front(vector_pair_double_t self) -> pair_double_t"""
        return _libBornAgainCore.vector_pair_double_t_front(self)

    def back(self):
        r"""back(vector_pair_double_t self) -> pair_double_t"""
        return _libBornAgainCore.vector_pair_double_t_back(self)

    def assign(self, n, x):
        r"""assign(vector_pair_double_t self, std::vector< std::pair< double,double > >::size_type n, pair_double_t x)"""
        return _libBornAgainCore.vector_pair_double_t_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_pair_double_t self, std::vector< std::pair< double,double > >::size_type new_size)
        resize(vector_pair_double_t self, std::vector< std::pair< double,double > >::size_type new_size, pair_double_t x)
        """
        return _libBornAgainCore.vector_pair_double_t_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_pair_double_t self, std::vector< std::pair< double,double > >::iterator pos, pair_double_t x) -> std::vector< std::pair< double,double > >::iterator
        insert(vector_pair_double_t self, std::vector< std::pair< double,double > >::iterator pos, std::vector< std::pair< double,double > >::size_type n, pair_double_t x)
        """
        return _libBornAgainCore.vector_pair_double_t_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_pair_double_t self, std::vector< std::pair< double,double > >::size_type n)"""
        return _libBornAgainCore.vector_pair_double_t_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_pair_double_t self) -> std::vector< std::pair< double,double > >::size_type"""
        return _libBornAgainCore.vector_pair_double_t_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_vector_pair_double_t

# Register vector_pair_double_t in _libBornAgainCore:
_libBornAgainCore.vector_pair_double_t_swigregister(vector_pair_double_t)

import libBornAgainFit
class swig_dummy_type_axisinfo_vector(object):
    r"""Proxy of C++ std::vector< AxisInfo > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(swig_dummy_type_axisinfo_vector self) -> SwigPyIterator"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(swig_dummy_type_axisinfo_vector self) -> bool"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(swig_dummy_type_axisinfo_vector self) -> bool"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector___bool__(self)

    def __len__(self):
        r"""__len__(swig_dummy_type_axisinfo_vector self) -> std::vector< AxisInfo >::size_type"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::difference_type i, std::vector< AxisInfo >::difference_type j) -> swig_dummy_type_axisinfo_vector"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::difference_type i, std::vector< AxisInfo >::difference_type j)
        __setslice__(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::difference_type i, std::vector< AxisInfo >::difference_type j, swig_dummy_type_axisinfo_vector v)
        """
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::difference_type i, std::vector< AxisInfo >::difference_type j)"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::difference_type i)
        __delitem__(swig_dummy_type_axisinfo_vector self, PySliceObject * slice)
        """
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(swig_dummy_type_axisinfo_vector self, PySliceObject * slice) -> swig_dummy_type_axisinfo_vector
        __getitem__(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::difference_type i) -> AxisInfo
        """
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(swig_dummy_type_axisinfo_vector self, PySliceObject * slice, swig_dummy_type_axisinfo_vector v)
        __setitem__(swig_dummy_type_axisinfo_vector self, PySliceObject * slice)
        __setitem__(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::difference_type i, AxisInfo x)
        """
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector___setitem__(self, *args)

    def pop(self):
        r"""pop(swig_dummy_type_axisinfo_vector self) -> AxisInfo"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_pop(self)

    def append(self, x):
        r"""append(swig_dummy_type_axisinfo_vector self, AxisInfo x)"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_append(self, x)

    def empty(self):
        r"""empty(swig_dummy_type_axisinfo_vector self) -> bool"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_empty(self)

    def size(self):
        r"""size(swig_dummy_type_axisinfo_vector self) -> std::vector< AxisInfo >::size_type"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_size(self)

    def swap(self, v):
        r"""
        swap(swig_dummy_type_axisinfo_vector self, swig_dummy_type_axisinfo_vector v)
        void swap(OutputDataIterator< TValue, TContainer > &left, OutputDataIterator< TValue, TContainer > &right)

        make Swappable 

        """
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_swap(self, v)

    def begin(self):
        r"""begin(swig_dummy_type_axisinfo_vector self) -> std::vector< AxisInfo >::iterator"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_begin(self)

    def end(self):
        r"""end(swig_dummy_type_axisinfo_vector self) -> std::vector< AxisInfo >::iterator"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_end(self)

    def rbegin(self):
        r"""rbegin(swig_dummy_type_axisinfo_vector self) -> std::vector< AxisInfo >::reverse_iterator"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_rbegin(self)

    def rend(self):
        r"""rend(swig_dummy_type_axisinfo_vector self) -> std::vector< AxisInfo >::reverse_iterator"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_rend(self)

    def clear(self):
        r"""clear(swig_dummy_type_axisinfo_vector self)"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(swig_dummy_type_axisinfo_vector self) -> std::vector< AxisInfo >::allocator_type"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(swig_dummy_type_axisinfo_vector self)"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::iterator pos) -> std::vector< AxisInfo >::iterator
        erase(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::iterator first, std::vector< AxisInfo >::iterator last) -> std::vector< AxisInfo >::iterator
        """
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(swig_dummy_type_axisinfo_vector self) -> swig_dummy_type_axisinfo_vector
        __init__(swig_dummy_type_axisinfo_vector self, swig_dummy_type_axisinfo_vector other) -> swig_dummy_type_axisinfo_vector
        __init__(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::size_type size) -> swig_dummy_type_axisinfo_vector
        __init__(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::size_type size, AxisInfo value) -> swig_dummy_type_axisinfo_vector
        """
        _libBornAgainCore.swig_dummy_type_axisinfo_vector_swiginit(self, _libBornAgainCore.new_swig_dummy_type_axisinfo_vector(*args))

    def push_back(self, x):
        r"""push_back(swig_dummy_type_axisinfo_vector self, AxisInfo x)"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_push_back(self, x)

    def front(self):
        r"""front(swig_dummy_type_axisinfo_vector self) -> AxisInfo"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_front(self)

    def back(self):
        r"""back(swig_dummy_type_axisinfo_vector self) -> AxisInfo"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_back(self)

    def assign(self, n, x):
        r"""assign(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::size_type n, AxisInfo x)"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::size_type new_size)
        resize(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::size_type new_size, AxisInfo x)
        """
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::iterator pos, AxisInfo x) -> std::vector< AxisInfo >::iterator
        insert(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::iterator pos, std::vector< AxisInfo >::size_type n, AxisInfo x)
        """
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::size_type n)"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_reserve(self, n)

    def capacity(self):
        r"""capacity(swig_dummy_type_axisinfo_vector self) -> std::vector< AxisInfo >::size_type"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_swig_dummy_type_axisinfo_vector

# Register swig_dummy_type_axisinfo_vector in _libBornAgainCore:
_libBornAgainCore.swig_dummy_type_axisinfo_vector_swigregister(swig_dummy_type_axisinfo_vector)

class swig_dummy_type_inode_vector(object):
    r"""Proxy of C++ std::vector< INode * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(swig_dummy_type_inode_vector self) -> SwigPyIterator"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(swig_dummy_type_inode_vector self) -> bool"""
        return _libBornAgainCore.swig_dummy_type_inode_vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(swig_dummy_type_inode_vector self) -> bool"""
        return _libBornAgainCore.swig_dummy_type_inode_vector___bool__(self)

    def __len__(self):
        r"""__len__(swig_dummy_type_inode_vector self) -> std::vector< INode * >::size_type"""
        return _libBornAgainCore.swig_dummy_type_inode_vector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(swig_dummy_type_inode_vector self, std::vector< INode * >::difference_type i, std::vector< INode * >::difference_type j) -> swig_dummy_type_inode_vector"""
        return _libBornAgainCore.swig_dummy_type_inode_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(swig_dummy_type_inode_vector self, std::vector< INode * >::difference_type i, std::vector< INode * >::difference_type j)
        __setslice__(swig_dummy_type_inode_vector self, std::vector< INode * >::difference_type i, std::vector< INode * >::difference_type j, swig_dummy_type_inode_vector v)
        """
        return _libBornAgainCore.swig_dummy_type_inode_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(swig_dummy_type_inode_vector self, std::vector< INode * >::difference_type i, std::vector< INode * >::difference_type j)"""
        return _libBornAgainCore.swig_dummy_type_inode_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(swig_dummy_type_inode_vector self, std::vector< INode * >::difference_type i)
        __delitem__(swig_dummy_type_inode_vector self, PySliceObject * slice)
        """
        return _libBornAgainCore.swig_dummy_type_inode_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(swig_dummy_type_inode_vector self, PySliceObject * slice) -> swig_dummy_type_inode_vector
        __getitem__(swig_dummy_type_inode_vector self, std::vector< INode * >::difference_type i) -> INode
        """
        return _libBornAgainCore.swig_dummy_type_inode_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(swig_dummy_type_inode_vector self, PySliceObject * slice, swig_dummy_type_inode_vector v)
        __setitem__(swig_dummy_type_inode_vector self, PySliceObject * slice)
        __setitem__(swig_dummy_type_inode_vector self, std::vector< INode * >::difference_type i, INode x)
        """
        return _libBornAgainCore.swig_dummy_type_inode_vector___setitem__(self, *args)

    def pop(self):
        r"""pop(swig_dummy_type_inode_vector self) -> INode"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_pop(self)

    def append(self, x):
        r"""append(swig_dummy_type_inode_vector self, INode x)"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_append(self, x)

    def empty(self):
        r"""empty(swig_dummy_type_inode_vector self) -> bool"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_empty(self)

    def size(self):
        r"""size(swig_dummy_type_inode_vector self) -> std::vector< INode * >::size_type"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_size(self)

    def swap(self, v):
        r"""
        swap(swig_dummy_type_inode_vector self, swig_dummy_type_inode_vector v)
        void swap(OutputDataIterator< TValue, TContainer > &left, OutputDataIterator< TValue, TContainer > &right)

        make Swappable 

        """
        return _libBornAgainCore.swig_dummy_type_inode_vector_swap(self, v)

    def begin(self):
        r"""begin(swig_dummy_type_inode_vector self) -> std::vector< INode * >::iterator"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_begin(self)

    def end(self):
        r"""end(swig_dummy_type_inode_vector self) -> std::vector< INode * >::iterator"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_end(self)

    def rbegin(self):
        r"""rbegin(swig_dummy_type_inode_vector self) -> std::vector< INode * >::reverse_iterator"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_rbegin(self)

    def rend(self):
        r"""rend(swig_dummy_type_inode_vector self) -> std::vector< INode * >::reverse_iterator"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_rend(self)

    def clear(self):
        r"""clear(swig_dummy_type_inode_vector self)"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(swig_dummy_type_inode_vector self) -> std::vector< INode * >::allocator_type"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(swig_dummy_type_inode_vector self)"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(swig_dummy_type_inode_vector self, std::vector< INode * >::iterator pos) -> std::vector< INode * >::iterator
        erase(swig_dummy_type_inode_vector self, std::vector< INode * >::iterator first, std::vector< INode * >::iterator last) -> std::vector< INode * >::iterator
        """
        return _libBornAgainCore.swig_dummy_type_inode_vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(swig_dummy_type_inode_vector self) -> swig_dummy_type_inode_vector
        __init__(swig_dummy_type_inode_vector self, swig_dummy_type_inode_vector other) -> swig_dummy_type_inode_vector
        __init__(swig_dummy_type_inode_vector self, std::vector< INode * >::size_type size) -> swig_dummy_type_inode_vector
        __init__(swig_dummy_type_inode_vector self, std::vector< INode * >::size_type size, INode value) -> swig_dummy_type_inode_vector
        """
        _libBornAgainCore.swig_dummy_type_inode_vector_swiginit(self, _libBornAgainCore.new_swig_dummy_type_inode_vector(*args))

    def push_back(self, x):
        r"""push_back(swig_dummy_type_inode_vector self, INode x)"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_push_back(self, x)

    def front(self):
        r"""front(swig_dummy_type_inode_vector self) -> INode"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_front(self)

    def back(self):
        r"""back(swig_dummy_type_inode_vector self) -> INode"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_back(self)

    def assign(self, n, x):
        r"""assign(swig_dummy_type_inode_vector self, std::vector< INode * >::size_type n, INode x)"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(swig_dummy_type_inode_vector self, std::vector< INode * >::size_type new_size)
        resize(swig_dummy_type_inode_vector self, std::vector< INode * >::size_type new_size, INode x)
        """
        return _libBornAgainCore.swig_dummy_type_inode_vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(swig_dummy_type_inode_vector self, std::vector< INode * >::iterator pos, INode x) -> std::vector< INode * >::iterator
        insert(swig_dummy_type_inode_vector self, std::vector< INode * >::iterator pos, std::vector< INode * >::size_type n, INode x)
        """
        return _libBornAgainCore.swig_dummy_type_inode_vector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(swig_dummy_type_inode_vector self, std::vector< INode * >::size_type n)"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_reserve(self, n)

    def capacity(self):
        r"""capacity(swig_dummy_type_inode_vector self) -> std::vector< INode * >::size_type"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_swig_dummy_type_inode_vector

# Register swig_dummy_type_inode_vector in _libBornAgainCore:
_libBornAgainCore.swig_dummy_type_inode_vector_swigregister(swig_dummy_type_inode_vector)

class swig_dummy_type_const_inode_vector(object):
    r"""Proxy of C++ std::vector< INode const * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(swig_dummy_type_const_inode_vector self) -> SwigPyIterator"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(swig_dummy_type_const_inode_vector self) -> bool"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(swig_dummy_type_const_inode_vector self) -> bool"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector___bool__(self)

    def __len__(self):
        r"""__len__(swig_dummy_type_const_inode_vector self) -> std::vector< INode const * >::size_type"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::difference_type i, std::vector< INode const * >::difference_type j) -> swig_dummy_type_const_inode_vector"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::difference_type i, std::vector< INode const * >::difference_type j)
        __setslice__(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::difference_type i, std::vector< INode const * >::difference_type j, swig_dummy_type_const_inode_vector v)
        """
        return _libBornAgainCore.swig_dummy_type_const_inode_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::difference_type i, std::vector< INode const * >::difference_type j)"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::difference_type i)
        __delitem__(swig_dummy_type_const_inode_vector self, PySliceObject * slice)
        """
        return _libBornAgainCore.swig_dummy_type_const_inode_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(swig_dummy_type_const_inode_vector self, PySliceObject * slice) -> swig_dummy_type_const_inode_vector
        __getitem__(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::difference_type i) -> INode
        """
        return _libBornAgainCore.swig_dummy_type_const_inode_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(swig_dummy_type_const_inode_vector self, PySliceObject * slice, swig_dummy_type_const_inode_vector v)
        __setitem__(swig_dummy_type_const_inode_vector self, PySliceObject * slice)
        __setitem__(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::difference_type i, INode x)
        """
        return _libBornAgainCore.swig_dummy_type_const_inode_vector___setitem__(self, *args)

    def pop(self):
        r"""pop(swig_dummy_type_const_inode_vector self) -> INode"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_pop(self)

    def append(self, x):
        r"""append(swig_dummy_type_const_inode_vector self, INode x)"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_append(self, x)

    def empty(self):
        r"""empty(swig_dummy_type_const_inode_vector self) -> bool"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_empty(self)

    def size(self):
        r"""size(swig_dummy_type_const_inode_vector self) -> std::vector< INode const * >::size_type"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_size(self)

    def swap(self, v):
        r"""
        swap(swig_dummy_type_const_inode_vector self, swig_dummy_type_const_inode_vector v)
        void swap(OutputDataIterator< TValue, TContainer > &left, OutputDataIterator< TValue, TContainer > &right)

        make Swappable 

        """
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_swap(self, v)

    def begin(self):
        r"""begin(swig_dummy_type_const_inode_vector self) -> std::vector< INode const * >::iterator"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_begin(self)

    def end(self):
        r"""end(swig_dummy_type_const_inode_vector self) -> std::vector< INode const * >::iterator"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_end(self)

    def rbegin(self):
        r"""rbegin(swig_dummy_type_const_inode_vector self) -> std::vector< INode const * >::reverse_iterator"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_rbegin(self)

    def rend(self):
        r"""rend(swig_dummy_type_const_inode_vector self) -> std::vector< INode const * >::reverse_iterator"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_rend(self)

    def clear(self):
        r"""clear(swig_dummy_type_const_inode_vector self)"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(swig_dummy_type_const_inode_vector self) -> std::vector< INode const * >::allocator_type"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(swig_dummy_type_const_inode_vector self)"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::iterator pos) -> std::vector< INode const * >::iterator
        erase(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::iterator first, std::vector< INode const * >::iterator last) -> std::vector< INode const * >::iterator
        """
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(swig_dummy_type_const_inode_vector self) -> swig_dummy_type_const_inode_vector
        __init__(swig_dummy_type_const_inode_vector self, swig_dummy_type_const_inode_vector other) -> swig_dummy_type_const_inode_vector
        __init__(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::size_type size) -> swig_dummy_type_const_inode_vector
        __init__(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::size_type size, INode value) -> swig_dummy_type_const_inode_vector
        """
        _libBornAgainCore.swig_dummy_type_const_inode_vector_swiginit(self, _libBornAgainCore.new_swig_dummy_type_const_inode_vector(*args))

    def push_back(self, x):
        r"""push_back(swig_dummy_type_const_inode_vector self, INode x)"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_push_back(self, x)

    def front(self):
        r"""front(swig_dummy_type_const_inode_vector self) -> INode"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_front(self)

    def back(self):
        r"""back(swig_dummy_type_const_inode_vector self) -> INode"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_back(self)

    def assign(self, n, x):
        r"""assign(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::size_type n, INode x)"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::size_type new_size)
        resize(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::size_type new_size, INode x)
        """
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::iterator pos, INode x) -> std::vector< INode const * >::iterator
        insert(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::iterator pos, std::vector< INode const * >::size_type n, INode x)
        """
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::size_type n)"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_reserve(self, n)

    def capacity(self):
        r"""capacity(swig_dummy_type_const_inode_vector self) -> std::vector< INode const * >::size_type"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_swig_dummy_type_const_inode_vector

# Register swig_dummy_type_const_inode_vector in _libBornAgainCore:
_libBornAgainCore.swig_dummy_type_const_inode_vector_swigregister(swig_dummy_type_const_inode_vector)

class vector_IFormFactorPtr_t(object):
    r"""Proxy of C++ std::vector< IFormFactor * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_IFormFactorPtr_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_IFormFactorPtr_t self) -> bool"""
        return _libBornAgainCore.vector_IFormFactorPtr_t___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_IFormFactorPtr_t self) -> bool"""
        return _libBornAgainCore.vector_IFormFactorPtr_t___bool__(self)

    def __len__(self):
        r"""__len__(vector_IFormFactorPtr_t self) -> std::vector< IFormFactor * >::size_type"""
        return _libBornAgainCore.vector_IFormFactorPtr_t___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::difference_type i, std::vector< IFormFactor * >::difference_type j) -> vector_IFormFactorPtr_t"""
        return _libBornAgainCore.vector_IFormFactorPtr_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::difference_type i, std::vector< IFormFactor * >::difference_type j)
        __setslice__(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::difference_type i, std::vector< IFormFactor * >::difference_type j, vector_IFormFactorPtr_t v)
        """
        return _libBornAgainCore.vector_IFormFactorPtr_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::difference_type i, std::vector< IFormFactor * >::difference_type j)"""
        return _libBornAgainCore.vector_IFormFactorPtr_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::difference_type i)
        __delitem__(vector_IFormFactorPtr_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vector_IFormFactorPtr_t___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_IFormFactorPtr_t self, PySliceObject * slice) -> vector_IFormFactorPtr_t
        __getitem__(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::difference_type i) -> IFormFactor
        """
        return _libBornAgainCore.vector_IFormFactorPtr_t___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_IFormFactorPtr_t self, PySliceObject * slice, vector_IFormFactorPtr_t v)
        __setitem__(vector_IFormFactorPtr_t self, PySliceObject * slice)
        __setitem__(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::difference_type i, IFormFactor x)
        """
        return _libBornAgainCore.vector_IFormFactorPtr_t___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_IFormFactorPtr_t self) -> IFormFactor"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_pop(self)

    def append(self, x):
        r"""append(vector_IFormFactorPtr_t self, IFormFactor x)"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_append(self, x)

    def empty(self):
        r"""empty(vector_IFormFactorPtr_t self) -> bool"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_empty(self)

    def size(self):
        r"""size(vector_IFormFactorPtr_t self) -> std::vector< IFormFactor * >::size_type"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_size(self)

    def swap(self, v):
        r"""
        swap(vector_IFormFactorPtr_t self, vector_IFormFactorPtr_t v)
        void swap(OutputDataIterator< TValue, TContainer > &left, OutputDataIterator< TValue, TContainer > &right)

        make Swappable 

        """
        return _libBornAgainCore.vector_IFormFactorPtr_t_swap(self, v)

    def begin(self):
        r"""begin(vector_IFormFactorPtr_t self) -> std::vector< IFormFactor * >::iterator"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_begin(self)

    def end(self):
        r"""end(vector_IFormFactorPtr_t self) -> std::vector< IFormFactor * >::iterator"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_end(self)

    def rbegin(self):
        r"""rbegin(vector_IFormFactorPtr_t self) -> std::vector< IFormFactor * >::reverse_iterator"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_rbegin(self)

    def rend(self):
        r"""rend(vector_IFormFactorPtr_t self) -> std::vector< IFormFactor * >::reverse_iterator"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_rend(self)

    def clear(self):
        r"""clear(vector_IFormFactorPtr_t self)"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_IFormFactorPtr_t self) -> std::vector< IFormFactor * >::allocator_type"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_IFormFactorPtr_t self)"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::iterator pos) -> std::vector< IFormFactor * >::iterator
        erase(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::iterator first, std::vector< IFormFactor * >::iterator last) -> std::vector< IFormFactor * >::iterator
        """
        return _libBornAgainCore.vector_IFormFactorPtr_t_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_IFormFactorPtr_t self) -> vector_IFormFactorPtr_t
        __init__(vector_IFormFactorPtr_t self, vector_IFormFactorPtr_t other) -> vector_IFormFactorPtr_t
        __init__(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::size_type size) -> vector_IFormFactorPtr_t
        __init__(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::size_type size, IFormFactor value) -> vector_IFormFactorPtr_t
        """
        _libBornAgainCore.vector_IFormFactorPtr_t_swiginit(self, _libBornAgainCore.new_vector_IFormFactorPtr_t(*args))

    def push_back(self, x):
        r"""push_back(vector_IFormFactorPtr_t self, IFormFactor x)"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_push_back(self, x)

    def front(self):
        r"""front(vector_IFormFactorPtr_t self) -> IFormFactor"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_front(self)

    def back(self):
        r"""back(vector_IFormFactorPtr_t self) -> IFormFactor"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_back(self)

    def assign(self, n, x):
        r"""assign(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::size_type n, IFormFactor x)"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::size_type new_size)
        resize(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::size_type new_size, IFormFactor x)
        """
        return _libBornAgainCore.vector_IFormFactorPtr_t_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::iterator pos, IFormFactor x) -> std::vector< IFormFactor * >::iterator
        insert(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::iterator pos, std::vector< IFormFactor * >::size_type n, IFormFactor x)
        """
        return _libBornAgainCore.vector_IFormFactorPtr_t_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_IFormFactorPtr_t self, std::vector< IFormFactor * >::size_type n)"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_IFormFactorPtr_t self) -> std::vector< IFormFactor * >::size_type"""
        return _libBornAgainCore.vector_IFormFactorPtr_t_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_vector_IFormFactorPtr_t

# Register vector_IFormFactorPtr_t in _libBornAgainCore:
_libBornAgainCore.vector_IFormFactorPtr_t_swigregister(vector_IFormFactorPtr_t)

class SampleBuilderFactoryTemp(object):
    r"""Proxy of C++ IFactory< std::string,IMultiLayerBuilder > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def createItem(self, item_key):
        r"""createItem(SampleBuilderFactoryTemp self, std::string const & item_key) -> IMultiLayerBuilder"""
        return _libBornAgainCore.SampleBuilderFactoryTemp_createItem(self, item_key)

    def registerItem(self, item_key, CreateFn):
        r"""registerItem(SampleBuilderFactoryTemp self, std::string const & item_key, IFactory< std::string,IMultiLayerBuilder >::CreateItemCallback CreateFn) -> bool"""
        return _libBornAgainCore.SampleBuilderFactoryTemp_registerItem(self, item_key, CreateFn)

    def contains(self, item_key):
        r"""contains(SampleBuilderFactoryTemp self, std::string const & item_key) -> bool"""
        return _libBornAgainCore.SampleBuilderFactoryTemp_contains(self, item_key)

    def size(self):
        r"""size(SampleBuilderFactoryTemp self) -> size_t"""
        return _libBornAgainCore.SampleBuilderFactoryTemp_size(self)

    def __init__(self):
        r"""__init__(SampleBuilderFactoryTemp self) -> SampleBuilderFactoryTemp"""
        _libBornAgainCore.SampleBuilderFactoryTemp_swiginit(self, _libBornAgainCore.new_SampleBuilderFactoryTemp())
    __swig_destroy__ = _libBornAgainCore.delete_SampleBuilderFactoryTemp

# Register SampleBuilderFactoryTemp in _libBornAgainCore:
_libBornAgainCore.SampleBuilderFactoryTemp_swigregister(SampleBuilderFactoryTemp)

class SimulationFactoryTemp(object):
    r"""Proxy of C++ IFactory< std::string,Simulation > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def createItem(self, item_key):
        r"""createItem(SimulationFactoryTemp self, std::string const & item_key) -> Simulation"""
        return _libBornAgainCore.SimulationFactoryTemp_createItem(self, item_key)

    def registerItem(self, item_key, CreateFn):
        r"""registerItem(SimulationFactoryTemp self, std::string const & item_key, IFactory< std::string,Simulation >::CreateItemCallback CreateFn) -> bool"""
        return _libBornAgainCore.SimulationFactoryTemp_registerItem(self, item_key, CreateFn)

    def contains(self, item_key):
        r"""contains(SimulationFactoryTemp self, std::string const & item_key) -> bool"""
        return _libBornAgainCore.SimulationFactoryTemp_contains(self, item_key)

    def size(self):
        r"""size(SimulationFactoryTemp self) -> size_t"""
        return _libBornAgainCore.SimulationFactoryTemp_size(self)

    def __init__(self):
        r"""__init__(SimulationFactoryTemp self) -> SimulationFactoryTemp"""
        _libBornAgainCore.SimulationFactoryTemp_swiginit(self, _libBornAgainCore.new_SimulationFactoryTemp())
    __swig_destroy__ = _libBornAgainCore.delete_SimulationFactoryTemp

# Register SimulationFactoryTemp in _libBornAgainCore:
_libBornAgainCore.SimulationFactoryTemp_swigregister(SimulationFactoryTemp)


def vecOfLambdaAlphaPhi(_lambda, _alpha, _phi):
    r"""
    vecOfLambdaAlphaPhi(double _lambda, double _alpha, double _phi) -> kvector_t
    BA_CORE_API_ BasicVector3D<double> vecOfLambdaAlphaPhi(double _lambda, double _alpha, double _phi)

    Creates a vector<double> as a wavevector with given wavelength and angles. Specifically needed for grazing-incidence scattering. 

    """
    return _libBornAgainCore.vecOfLambdaAlphaPhi(_lambda, _alpha, _phi)
class kvector_t(object):
    r"""


    Forked from CLHEP/Geometry by E. Chernyaev Evgueni.Tcherniaev@cern.ch, then reworked beyond recognition. Removed split of point and vector semantics. Transforms are relegated to a separate class  Transform3D. Three-dimensional vector template, for use with integer, double, or complex components.

    C++ includes: BasicVector3D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(kvector_t self) -> kvector_t
        __init__(kvector_t self, double const x1, double const y1, double const z1) -> kvector_t
        BasicVector3D< T >::BasicVector3D(const T x1, const T y1, const T z1)

        Constructor from cartesian components. 

        """
        _libBornAgainCore.kvector_t_swiginit(self, _libBornAgainCore.new_kvector_t(*args))

    def x(self):
        r"""
        x(kvector_t self) -> double
        T BasicVector3D< T >::x() const

        Returns x-component in cartesian coordinate system. 

        """
        return _libBornAgainCore.kvector_t_x(self)

    def y(self):
        r"""
        y(kvector_t self) -> double
        T BasicVector3D< T >::y() const

        Returns y-component in cartesian coordinate system. 

        """
        return _libBornAgainCore.kvector_t_y(self)

    def z(self):
        r"""
        z(kvector_t self) -> double
        T BasicVector3D< T >::z() const

        Returns z-component in cartesian coordinate system. 

        """
        return _libBornAgainCore.kvector_t_z(self)

    def setX(self, a):
        r"""
        setX(kvector_t self, double const & a)
        void BasicVector3D< T >::setX(const T &a)

        Sets x-component in cartesian coordinate system. 

        """
        return _libBornAgainCore.kvector_t_setX(self, a)

    def setY(self, a):
        r"""
        setY(kvector_t self, double const & a)
        void BasicVector3D< T >::setY(const T &a)

        Sets y-component in cartesian coordinate system. 

        """
        return _libBornAgainCore.kvector_t_setY(self, a)

    def setZ(self, a):
        r"""
        setZ(kvector_t self, double const & a)
        void BasicVector3D< T >::setZ(const T &a)

        Sets z-component in cartesian coordinate system. 

        """
        return _libBornAgainCore.kvector_t_setZ(self, a)

    def __iadd__(self, v):
        r"""__iadd__(kvector_t self, kvector_t v) -> kvector_t"""
        return _libBornAgainCore.kvector_t___iadd__(self, v)

    def __isub__(self, v):
        r"""__isub__(kvector_t self, kvector_t v) -> kvector_t"""
        return _libBornAgainCore.kvector_t___isub__(self, v)

    def conj(self):
        r"""
        conj(kvector_t self) -> kvector_t
        BasicVector3D< complex_t > BasicVector3D< complex_t >::conj() const

        """
        return _libBornAgainCore.kvector_t_conj(self)

    def mag2(self):
        r"""
        mag2(kvector_t self) -> double
        double BasicVector3D< T >::mag2() const

        Returns magnitude squared of the vector. 

        """
        return _libBornAgainCore.kvector_t_mag2(self)

    def mag(self):
        r"""
        mag(kvector_t self) -> double
        double BasicVector3D< T >::mag() const

        Returns magnitude of the vector. 

        """
        return _libBornAgainCore.kvector_t_mag(self)

    def magxy2(self):
        r"""
        magxy2(kvector_t self) -> double
        double BasicVector3D< T >::magxy2() const

        Returns squared distance from z axis. 

        """
        return _libBornAgainCore.kvector_t_magxy2(self)

    def magxy(self):
        r"""
        magxy(kvector_t self) -> double
        double BasicVector3D< T >::magxy() const

        Returns distance from z axis. 

        """
        return _libBornAgainCore.kvector_t_magxy(self)

    def phi(self):
        r"""
        phi(kvector_t self) -> double
        double BasicVector3D< T >::phi() const

        Returns azimuth angle. 

        """
        return _libBornAgainCore.kvector_t_phi(self)

    def theta(self):
        r"""
        theta(kvector_t self) -> double
        double BasicVector3D< T >::theta() const

        Returns polar angle. 

        """
        return _libBornAgainCore.kvector_t_theta(self)

    def cosTheta(self):
        r"""
        cosTheta(kvector_t self) -> double
        double BasicVector3D< T >::cosTheta() const

        Returns cosine of polar angle. 

        """
        return _libBornAgainCore.kvector_t_cosTheta(self)

    def sin2Theta(self):
        r"""
        sin2Theta(kvector_t self) -> double
        double BasicVector3D< T >::sin2Theta() const

        Returns squared sine of polar angle. 

        """
        return _libBornAgainCore.kvector_t_sin2Theta(self)

    def unit(self):
        r"""
        unit(kvector_t self) -> kvector_t
        BasicVector3D< complex_t > BasicVector3D< complex_t >::unit() const

        """
        return _libBornAgainCore.kvector_t_unit(self)

    def complex(self):
        r"""
        complex(kvector_t self) -> cvector_t
        BasicVector3D<std::complex<double> > BasicVector3D< T >::complex() const

        Returns this, trivially converted to complex type. 

        """
        return _libBornAgainCore.kvector_t_complex(self)

    def real(self):
        r"""
        real(kvector_t self) -> kvector_t
        BasicVector3D< double > BasicVector3D< complex_t >::real() const

        """
        return _libBornAgainCore.kvector_t_real(self)

    def angle(self, v):
        r"""
        angle(kvector_t self, kvector_t v) -> double
        double BasicVector3D< T >::angle(const BasicVector3D< T > &v) const

        Returns angle with respect to another vector. 

        """
        return _libBornAgainCore.kvector_t_angle(self, v)

    def project(self, v):
        r"""
        project(kvector_t self, kvector_t v) -> kvector_t
        BasicVector3D<T> BasicVector3D< T >::project(const BasicVector3D< T > &v) const

        Returns projection of this onto other vector: (this*v)*v/|v|^2. 

        """
        return _libBornAgainCore.kvector_t_project(self, v)

    def __add__(self, rhs):
        r"""__add__(kvector_t self, kvector_t rhs) -> kvector_t"""
        return _libBornAgainCore.kvector_t___add__(self, rhs)

    def __mul__(self, c):
        r"""__mul__(kvector_t self, double c) -> kvector_t"""
        return _libBornAgainCore.kvector_t___mul__(self, c)

    def __rmul__(self, c):
        r"""__rmul__(kvector_t self, double c) -> kvector_t"""
        return _libBornAgainCore.kvector_t___rmul__(self, c)

    def __neg__(self):
        r"""__neg__(kvector_t self) -> kvector_t"""
        return _libBornAgainCore.kvector_t___neg__(self)
    __swig_destroy__ = _libBornAgainCore.delete_kvector_t

# Register kvector_t in _libBornAgainCore:
_libBornAgainCore.kvector_t_swigregister(kvector_t)

class vector_kvector_t(object):
    r"""Proxy of C++ std::vector< BasicVector3D< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_kvector_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vector_kvector_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_kvector_t self) -> bool"""
        return _libBornAgainCore.vector_kvector_t___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_kvector_t self) -> bool"""
        return _libBornAgainCore.vector_kvector_t___bool__(self)

    def __len__(self):
        r"""__len__(vector_kvector_t self) -> std::vector< BasicVector3D< double > >::size_type"""
        return _libBornAgainCore.vector_kvector_t___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_kvector_t self, std::vector< BasicVector3D< double > >::difference_type i, std::vector< BasicVector3D< double > >::difference_type j) -> vector_kvector_t"""
        return _libBornAgainCore.vector_kvector_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_kvector_t self, std::vector< BasicVector3D< double > >::difference_type i, std::vector< BasicVector3D< double > >::difference_type j)
        __setslice__(vector_kvector_t self, std::vector< BasicVector3D< double > >::difference_type i, std::vector< BasicVector3D< double > >::difference_type j, vector_kvector_t v)
        """
        return _libBornAgainCore.vector_kvector_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_kvector_t self, std::vector< BasicVector3D< double > >::difference_type i, std::vector< BasicVector3D< double > >::difference_type j)"""
        return _libBornAgainCore.vector_kvector_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_kvector_t self, std::vector< BasicVector3D< double > >::difference_type i)
        __delitem__(vector_kvector_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vector_kvector_t___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_kvector_t self, PySliceObject * slice) -> vector_kvector_t
        __getitem__(vector_kvector_t self, std::vector< BasicVector3D< double > >::difference_type i) -> kvector_t
        """
        return _libBornAgainCore.vector_kvector_t___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_kvector_t self, PySliceObject * slice, vector_kvector_t v)
        __setitem__(vector_kvector_t self, PySliceObject * slice)
        __setitem__(vector_kvector_t self, std::vector< BasicVector3D< double > >::difference_type i, kvector_t x)
        """
        return _libBornAgainCore.vector_kvector_t___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_kvector_t self) -> kvector_t"""
        return _libBornAgainCore.vector_kvector_t_pop(self)

    def append(self, x):
        r"""append(vector_kvector_t self, kvector_t x)"""
        return _libBornAgainCore.vector_kvector_t_append(self, x)

    def empty(self):
        r"""empty(vector_kvector_t self) -> bool"""
        return _libBornAgainCore.vector_kvector_t_empty(self)

    def size(self):
        r"""size(vector_kvector_t self) -> std::vector< BasicVector3D< double > >::size_type"""
        return _libBornAgainCore.vector_kvector_t_size(self)

    def swap(self, v):
        r"""
        swap(vector_kvector_t self, vector_kvector_t v)
        void swap(OutputDataIterator< TValue, TContainer > &left, OutputDataIterator< TValue, TContainer > &right)

        make Swappable 

        """
        return _libBornAgainCore.vector_kvector_t_swap(self, v)

    def begin(self):
        r"""begin(vector_kvector_t self) -> std::vector< BasicVector3D< double > >::iterator"""
        return _libBornAgainCore.vector_kvector_t_begin(self)

    def end(self):
        r"""end(vector_kvector_t self) -> std::vector< BasicVector3D< double > >::iterator"""
        return _libBornAgainCore.vector_kvector_t_end(self)

    def rbegin(self):
        r"""rbegin(vector_kvector_t self) -> std::vector< BasicVector3D< double > >::reverse_iterator"""
        return _libBornAgainCore.vector_kvector_t_rbegin(self)

    def rend(self):
        r"""rend(vector_kvector_t self) -> std::vector< BasicVector3D< double > >::reverse_iterator"""
        return _libBornAgainCore.vector_kvector_t_rend(self)

    def clear(self):
        r"""clear(vector_kvector_t self)"""
        return _libBornAgainCore.vector_kvector_t_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_kvector_t self) -> std::vector< BasicVector3D< double > >::allocator_type"""
        return _libBornAgainCore.vector_kvector_t_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_kvector_t self)"""
        return _libBornAgainCore.vector_kvector_t_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_kvector_t self, std::vector< BasicVector3D< double > >::iterator pos) -> std::vector< BasicVector3D< double > >::iterator
        erase(vector_kvector_t self, std::vector< BasicVector3D< double > >::iterator first, std::vector< BasicVector3D< double > >::iterator last) -> std::vector< BasicVector3D< double > >::iterator
        """
        return _libBornAgainCore.vector_kvector_t_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_kvector_t self) -> vector_kvector_t
        __init__(vector_kvector_t self, vector_kvector_t other) -> vector_kvector_t
        __init__(vector_kvector_t self, std::vector< BasicVector3D< double > >::size_type size) -> vector_kvector_t
        __init__(vector_kvector_t self, std::vector< BasicVector3D< double > >::size_type size, kvector_t value) -> vector_kvector_t
        """
        _libBornAgainCore.vector_kvector_t_swiginit(self, _libBornAgainCore.new_vector_kvector_t(*args))

    def push_back(self, x):
        r"""push_back(vector_kvector_t self, kvector_t x)"""
        return _libBornAgainCore.vector_kvector_t_push_back(self, x)

    def front(self):
        r"""front(vector_kvector_t self) -> kvector_t"""
        return _libBornAgainCore.vector_kvector_t_front(self)

    def back(self):
        r"""back(vector_kvector_t self) -> kvector_t"""
        return _libBornAgainCore.vector_kvector_t_back(self)

    def assign(self, n, x):
        r"""assign(vector_kvector_t self, std::vector< BasicVector3D< double > >::size_type n, kvector_t x)"""
        return _libBornAgainCore.vector_kvector_t_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_kvector_t self, std::vector< BasicVector3D< double > >::size_type new_size)
        resize(vector_kvector_t self, std::vector< BasicVector3D< double > >::size_type new_size, kvector_t x)
        """
        return _libBornAgainCore.vector_kvector_t_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_kvector_t self, std::vector< BasicVector3D< double > >::iterator pos, kvector_t x) -> std::vector< BasicVector3D< double > >::iterator
        insert(vector_kvector_t self, std::vector< BasicVector3D< double > >::iterator pos, std::vector< BasicVector3D< double > >::size_type n, kvector_t x)
        """
        return _libBornAgainCore.vector_kvector_t_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_kvector_t self, std::vector< BasicVector3D< double > >::size_type n)"""
        return _libBornAgainCore.vector_kvector_t_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_kvector_t self) -> std::vector< BasicVector3D< double > >::size_type"""
        return _libBornAgainCore.vector_kvector_t_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_vector_kvector_t

# Register vector_kvector_t in _libBornAgainCore:
_libBornAgainCore.vector_kvector_t_swigregister(vector_kvector_t)

class cvector_t(object):
    r"""


    Forked from CLHEP/Geometry by E. Chernyaev Evgueni.Tcherniaev@cern.ch, then reworked beyond recognition. Removed split of point and vector semantics. Transforms are relegated to a separate class  Transform3D. Three-dimensional vector template, for use with integer, double, or complex components.

    C++ includes: BasicVector3D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(cvector_t self) -> cvector_t
        __init__(cvector_t self, std::complex< double > const x1, std::complex< double > const y1, std::complex< double > const z1) -> cvector_t
        BasicVector3D< T >::BasicVector3D(const T x1, const T y1, const T z1)

        Constructor from cartesian components. 

        """
        _libBornAgainCore.cvector_t_swiginit(self, _libBornAgainCore.new_cvector_t(*args))

    def x(self):
        r"""
        x(cvector_t self) -> std::complex< double >
        T BasicVector3D< T >::x() const

        Returns x-component in cartesian coordinate system. 

        """
        return _libBornAgainCore.cvector_t_x(self)

    def y(self):
        r"""
        y(cvector_t self) -> std::complex< double >
        T BasicVector3D< T >::y() const

        Returns y-component in cartesian coordinate system. 

        """
        return _libBornAgainCore.cvector_t_y(self)

    def z(self):
        r"""
        z(cvector_t self) -> std::complex< double >
        T BasicVector3D< T >::z() const

        Returns z-component in cartesian coordinate system. 

        """
        return _libBornAgainCore.cvector_t_z(self)

    def setX(self, a):
        r"""
        setX(cvector_t self, std::complex< double > const & a)
        void BasicVector3D< T >::setX(const T &a)

        Sets x-component in cartesian coordinate system. 

        """
        return _libBornAgainCore.cvector_t_setX(self, a)

    def setY(self, a):
        r"""
        setY(cvector_t self, std::complex< double > const & a)
        void BasicVector3D< T >::setY(const T &a)

        Sets y-component in cartesian coordinate system. 

        """
        return _libBornAgainCore.cvector_t_setY(self, a)

    def setZ(self, a):
        r"""
        setZ(cvector_t self, std::complex< double > const & a)
        void BasicVector3D< T >::setZ(const T &a)

        Sets z-component in cartesian coordinate system. 

        """
        return _libBornAgainCore.cvector_t_setZ(self, a)

    def __iadd__(self, v):
        r"""__iadd__(cvector_t self, cvector_t v) -> cvector_t"""
        return _libBornAgainCore.cvector_t___iadd__(self, v)

    def __isub__(self, v):
        r"""__isub__(cvector_t self, cvector_t v) -> cvector_t"""
        return _libBornAgainCore.cvector_t___isub__(self, v)

    def conj(self):
        r"""
        conj(cvector_t self) -> cvector_t
        BasicVector3D< complex_t > BasicVector3D< complex_t >::conj() const

        """
        return _libBornAgainCore.cvector_t_conj(self)

    def mag2(self):
        r"""
        mag2(cvector_t self) -> double
        double BasicVector3D< T >::mag2() const

        Returns magnitude squared of the vector. 

        """
        return _libBornAgainCore.cvector_t_mag2(self)

    def mag(self):
        r"""
        mag(cvector_t self) -> double
        double BasicVector3D< T >::mag() const

        Returns magnitude of the vector. 

        """
        return _libBornAgainCore.cvector_t_mag(self)

    def magxy2(self):
        r"""
        magxy2(cvector_t self) -> double
        double BasicVector3D< T >::magxy2() const

        Returns squared distance from z axis. 

        """
        return _libBornAgainCore.cvector_t_magxy2(self)

    def magxy(self):
        r"""
        magxy(cvector_t self) -> double
        double BasicVector3D< T >::magxy() const

        Returns distance from z axis. 

        """
        return _libBornAgainCore.cvector_t_magxy(self)

    def unit(self):
        r"""
        unit(cvector_t self) -> cvector_t
        BasicVector3D< complex_t > BasicVector3D< complex_t >::unit() const

        """
        return _libBornAgainCore.cvector_t_unit(self)

    def real(self):
        r"""
        real(cvector_t self) -> kvector_t
        BasicVector3D< double > BasicVector3D< complex_t >::real() const

        """
        return _libBornAgainCore.cvector_t_real(self)

    def project(self, v):
        r"""
        project(cvector_t self, cvector_t v) -> cvector_t
        BasicVector3D<T> BasicVector3D< T >::project(const BasicVector3D< T > &v) const

        Returns projection of this onto other vector: (this*v)*v/|v|^2. 

        """
        return _libBornAgainCore.cvector_t_project(self, v)
    __swig_destroy__ = _libBornAgainCore.delete_cvector_t

# Register cvector_t in _libBornAgainCore:
_libBornAgainCore.cvector_t_swigregister(cvector_t)

class vector_cvector_t(object):
    r"""Proxy of C++ std::vector< BasicVector3D< std::complex< double > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_cvector_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vector_cvector_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_cvector_t self) -> bool"""
        return _libBornAgainCore.vector_cvector_t___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_cvector_t self) -> bool"""
        return _libBornAgainCore.vector_cvector_t___bool__(self)

    def __len__(self):
        r"""__len__(vector_cvector_t self) -> std::vector< BasicVector3D< std::complex< double > > >::size_type"""
        return _libBornAgainCore.vector_cvector_t___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::difference_type i, std::vector< BasicVector3D< std::complex< double > > >::difference_type j) -> vector_cvector_t"""
        return _libBornAgainCore.vector_cvector_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::difference_type i, std::vector< BasicVector3D< std::complex< double > > >::difference_type j)
        __setslice__(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::difference_type i, std::vector< BasicVector3D< std::complex< double > > >::difference_type j, vector_cvector_t v)
        """
        return _libBornAgainCore.vector_cvector_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::difference_type i, std::vector< BasicVector3D< std::complex< double > > >::difference_type j)"""
        return _libBornAgainCore.vector_cvector_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::difference_type i)
        __delitem__(vector_cvector_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vector_cvector_t___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_cvector_t self, PySliceObject * slice) -> vector_cvector_t
        __getitem__(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::difference_type i) -> cvector_t
        """
        return _libBornAgainCore.vector_cvector_t___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_cvector_t self, PySliceObject * slice, vector_cvector_t v)
        __setitem__(vector_cvector_t self, PySliceObject * slice)
        __setitem__(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::difference_type i, cvector_t x)
        """
        return _libBornAgainCore.vector_cvector_t___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_cvector_t self) -> cvector_t"""
        return _libBornAgainCore.vector_cvector_t_pop(self)

    def append(self, x):
        r"""append(vector_cvector_t self, cvector_t x)"""
        return _libBornAgainCore.vector_cvector_t_append(self, x)

    def empty(self):
        r"""empty(vector_cvector_t self) -> bool"""
        return _libBornAgainCore.vector_cvector_t_empty(self)

    def size(self):
        r"""size(vector_cvector_t self) -> std::vector< BasicVector3D< std::complex< double > > >::size_type"""
        return _libBornAgainCore.vector_cvector_t_size(self)

    def swap(self, v):
        r"""
        swap(vector_cvector_t self, vector_cvector_t v)
        void swap(OutputDataIterator< TValue, TContainer > &left, OutputDataIterator< TValue, TContainer > &right)

        make Swappable 

        """
        return _libBornAgainCore.vector_cvector_t_swap(self, v)

    def begin(self):
        r"""begin(vector_cvector_t self) -> std::vector< BasicVector3D< std::complex< double > > >::iterator"""
        return _libBornAgainCore.vector_cvector_t_begin(self)

    def end(self):
        r"""end(vector_cvector_t self) -> std::vector< BasicVector3D< std::complex< double > > >::iterator"""
        return _libBornAgainCore.vector_cvector_t_end(self)

    def rbegin(self):
        r"""rbegin(vector_cvector_t self) -> std::vector< BasicVector3D< std::complex< double > > >::reverse_iterator"""
        return _libBornAgainCore.vector_cvector_t_rbegin(self)

    def rend(self):
        r"""rend(vector_cvector_t self) -> std::vector< BasicVector3D< std::complex< double > > >::reverse_iterator"""
        return _libBornAgainCore.vector_cvector_t_rend(self)

    def clear(self):
        r"""clear(vector_cvector_t self)"""
        return _libBornAgainCore.vector_cvector_t_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_cvector_t self) -> std::vector< BasicVector3D< std::complex< double > > >::allocator_type"""
        return _libBornAgainCore.vector_cvector_t_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_cvector_t self)"""
        return _libBornAgainCore.vector_cvector_t_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::iterator pos) -> std::vector< BasicVector3D< std::complex< double > > >::iterator
        erase(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::iterator first, std::vector< BasicVector3D< std::complex< double > > >::iterator last) -> std::vector< BasicVector3D< std::complex< double > > >::iterator
        """
        return _libBornAgainCore.vector_cvector_t_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_cvector_t self) -> vector_cvector_t
        __init__(vector_cvector_t self, vector_cvector_t other) -> vector_cvector_t
        __init__(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::size_type size) -> vector_cvector_t
        __init__(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::size_type size, cvector_t value) -> vector_cvector_t
        """
        _libBornAgainCore.vector_cvector_t_swiginit(self, _libBornAgainCore.new_vector_cvector_t(*args))

    def push_back(self, x):
        r"""push_back(vector_cvector_t self, cvector_t x)"""
        return _libBornAgainCore.vector_cvector_t_push_back(self, x)

    def front(self):
        r"""front(vector_cvector_t self) -> cvector_t"""
        return _libBornAgainCore.vector_cvector_t_front(self)

    def back(self):
        r"""back(vector_cvector_t self) -> cvector_t"""
        return _libBornAgainCore.vector_cvector_t_back(self)

    def assign(self, n, x):
        r"""assign(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::size_type n, cvector_t x)"""
        return _libBornAgainCore.vector_cvector_t_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::size_type new_size)
        resize(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::size_type new_size, cvector_t x)
        """
        return _libBornAgainCore.vector_cvector_t_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::iterator pos, cvector_t x) -> std::vector< BasicVector3D< std::complex< double > > >::iterator
        insert(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::iterator pos, std::vector< BasicVector3D< std::complex< double > > >::size_type n, cvector_t x)
        """
        return _libBornAgainCore.vector_cvector_t_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::size_type n)"""
        return _libBornAgainCore.vector_cvector_t_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_cvector_t self) -> std::vector< BasicVector3D< std::complex< double > > >::size_type"""
        return _libBornAgainCore.vector_cvector_t_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_vector_cvector_t

# Register vector_cvector_t in _libBornAgainCore:
_libBornAgainCore.vector_cvector_t_swigregister(vector_cvector_t)

class IParameterReal(object):
    r"""


    Pure virtual base class for parameter wrapper classes  RealParameter, ComponentParameter. Holds a pointer to the wrapped parameter, a name, and a callback function to be called when the parameter is changed. This class is templated on the data type of the wrapped parameter.

    C++ includes: IParameter.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IParameterReal

    def clone(self, *args):
        r"""
        clone(IParameterReal self, std::string const & new_name="") -> IParameterReal
        virtual IParameter* IParameter< T >::clone(const std::string &new_name="") const =0

        """
        return _libBornAgainCore.IParameterReal_clone(self, *args)

    def isNull(self):
        r"""
        isNull(IParameterReal self) -> bool
        virtual bool IParameter< T >::isNull() const

        Returns true if wrapped parameter was not initialized with proper real value. 

        """
        return _libBornAgainCore.IParameterReal_isNull(self)

    def getData(self):
        r"""
        getData(IParameterReal self) -> double &
        T& IParameter< T >::getData() const

        """
        return _libBornAgainCore.IParameterReal_getData(self)

    def setData(self, data):
        r"""
        setData(IParameterReal self, double & data)
        void IParameter< T >::setData(T &data)

        """
        return _libBornAgainCore.IParameterReal_setData(self, data)

    def hasSameData(self, other):
        r"""
        hasSameData(IParameterReal self, IParameterReal other) -> bool
        bool IParameter< T >::hasSameData(const IParameter &other)

        Returns true if two parameters are pointing to the same raw data. 

        """
        return _libBornAgainCore.IParameterReal_hasSameData(self, other)

    def getName(self):
        r"""
        getName(IParameterReal self) -> std::string const &
        const std::string& IParameter< T >::getName() const

        """
        return _libBornAgainCore.IParameterReal_getName(self)

# Register IParameterReal in _libBornAgainCore:
_libBornAgainCore.IParameterReal_swigregister(IParameterReal)

class ParameterSample(object):
    r"""


    A parameter value with a weight, as obtained when sampling from a distribution.

    C++ includes: ParameterSample.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _value=0., _weight=1.):
        r"""
        __init__(ParameterSample self, double _value=0., double _weight=1.) -> ParameterSample
        ParameterSample::ParameterSample(double _value=0., double _weight=1.)

        """
        _libBornAgainCore.ParameterSample_swiginit(self, _libBornAgainCore.new_ParameterSample(_value, _weight))
    value = property(_libBornAgainCore.ParameterSample_value_get, _libBornAgainCore.ParameterSample_value_set, doc=r"""value : double""")
    weight = property(_libBornAgainCore.ParameterSample_weight_get, _libBornAgainCore.ParameterSample_weight_set, doc=r"""weight : double""")
    __swig_destroy__ = _libBornAgainCore.delete_ParameterSample

# Register ParameterSample in _libBornAgainCore:
_libBornAgainCore.ParameterSample_swigregister(ParameterSample)

class ParameterSampleVector(object):
    r"""Proxy of C++ std::vector< ParameterSample > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(ParameterSampleVector self) -> SwigPyIterator"""
        return _libBornAgainCore.ParameterSampleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(ParameterSampleVector self) -> bool"""
        return _libBornAgainCore.ParameterSampleVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(ParameterSampleVector self) -> bool"""
        return _libBornAgainCore.ParameterSampleVector___bool__(self)

    def __len__(self):
        r"""__len__(ParameterSampleVector self) -> std::vector< ParameterSample >::size_type"""
        return _libBornAgainCore.ParameterSampleVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(ParameterSampleVector self, std::vector< ParameterSample >::difference_type i, std::vector< ParameterSample >::difference_type j) -> ParameterSampleVector"""
        return _libBornAgainCore.ParameterSampleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(ParameterSampleVector self, std::vector< ParameterSample >::difference_type i, std::vector< ParameterSample >::difference_type j)
        __setslice__(ParameterSampleVector self, std::vector< ParameterSample >::difference_type i, std::vector< ParameterSample >::difference_type j, ParameterSampleVector v)
        """
        return _libBornAgainCore.ParameterSampleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(ParameterSampleVector self, std::vector< ParameterSample >::difference_type i, std::vector< ParameterSample >::difference_type j)"""
        return _libBornAgainCore.ParameterSampleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(ParameterSampleVector self, std::vector< ParameterSample >::difference_type i)
        __delitem__(ParameterSampleVector self, PySliceObject * slice)
        """
        return _libBornAgainCore.ParameterSampleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(ParameterSampleVector self, PySliceObject * slice) -> ParameterSampleVector
        __getitem__(ParameterSampleVector self, std::vector< ParameterSample >::difference_type i) -> ParameterSample
        """
        return _libBornAgainCore.ParameterSampleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(ParameterSampleVector self, PySliceObject * slice, ParameterSampleVector v)
        __setitem__(ParameterSampleVector self, PySliceObject * slice)
        __setitem__(ParameterSampleVector self, std::vector< ParameterSample >::difference_type i, ParameterSample x)
        """
        return _libBornAgainCore.ParameterSampleVector___setitem__(self, *args)

    def pop(self):
        r"""pop(ParameterSampleVector self) -> ParameterSample"""
        return _libBornAgainCore.ParameterSampleVector_pop(self)

    def append(self, x):
        r"""append(ParameterSampleVector self, ParameterSample x)"""
        return _libBornAgainCore.ParameterSampleVector_append(self, x)

    def empty(self):
        r"""empty(ParameterSampleVector self) -> bool"""
        return _libBornAgainCore.ParameterSampleVector_empty(self)

    def size(self):
        r"""size(ParameterSampleVector self) -> std::vector< ParameterSample >::size_type"""
        return _libBornAgainCore.ParameterSampleVector_size(self)

    def swap(self, v):
        r"""
        swap(ParameterSampleVector self, ParameterSampleVector v)
        void swap(OutputDataIterator< TValue, TContainer > &left, OutputDataIterator< TValue, TContainer > &right)

        make Swappable 

        """
        return _libBornAgainCore.ParameterSampleVector_swap(self, v)

    def begin(self):
        r"""begin(ParameterSampleVector self) -> std::vector< ParameterSample >::iterator"""
        return _libBornAgainCore.ParameterSampleVector_begin(self)

    def end(self):
        r"""end(ParameterSampleVector self) -> std::vector< ParameterSample >::iterator"""
        return _libBornAgainCore.ParameterSampleVector_end(self)

    def rbegin(self):
        r"""rbegin(ParameterSampleVector self) -> std::vector< ParameterSample >::reverse_iterator"""
        return _libBornAgainCore.ParameterSampleVector_rbegin(self)

    def rend(self):
        r"""rend(ParameterSampleVector self) -> std::vector< ParameterSample >::reverse_iterator"""
        return _libBornAgainCore.ParameterSampleVector_rend(self)

    def clear(self):
        r"""clear(ParameterSampleVector self)"""
        return _libBornAgainCore.ParameterSampleVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(ParameterSampleVector self) -> std::vector< ParameterSample >::allocator_type"""
        return _libBornAgainCore.ParameterSampleVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(ParameterSampleVector self)"""
        return _libBornAgainCore.ParameterSampleVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(ParameterSampleVector self, std::vector< ParameterSample >::iterator pos) -> std::vector< ParameterSample >::iterator
        erase(ParameterSampleVector self, std::vector< ParameterSample >::iterator first, std::vector< ParameterSample >::iterator last) -> std::vector< ParameterSample >::iterator
        """
        return _libBornAgainCore.ParameterSampleVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ParameterSampleVector self) -> ParameterSampleVector
        __init__(ParameterSampleVector self, ParameterSampleVector other) -> ParameterSampleVector
        __init__(ParameterSampleVector self, std::vector< ParameterSample >::size_type size) -> ParameterSampleVector
        __init__(ParameterSampleVector self, std::vector< ParameterSample >::size_type size, ParameterSample value) -> ParameterSampleVector
        """
        _libBornAgainCore.ParameterSampleVector_swiginit(self, _libBornAgainCore.new_ParameterSampleVector(*args))

    def push_back(self, x):
        r"""push_back(ParameterSampleVector self, ParameterSample x)"""
        return _libBornAgainCore.ParameterSampleVector_push_back(self, x)

    def front(self):
        r"""front(ParameterSampleVector self) -> ParameterSample"""
        return _libBornAgainCore.ParameterSampleVector_front(self)

    def back(self):
        r"""back(ParameterSampleVector self) -> ParameterSample"""
        return _libBornAgainCore.ParameterSampleVector_back(self)

    def assign(self, n, x):
        r"""assign(ParameterSampleVector self, std::vector< ParameterSample >::size_type n, ParameterSample x)"""
        return _libBornAgainCore.ParameterSampleVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(ParameterSampleVector self, std::vector< ParameterSample >::size_type new_size)
        resize(ParameterSampleVector self, std::vector< ParameterSample >::size_type new_size, ParameterSample x)
        """
        return _libBornAgainCore.ParameterSampleVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(ParameterSampleVector self, std::vector< ParameterSample >::iterator pos, ParameterSample x) -> std::vector< ParameterSample >::iterator
        insert(ParameterSampleVector self, std::vector< ParameterSample >::iterator pos, std::vector< ParameterSample >::size_type n, ParameterSample x)
        """
        return _libBornAgainCore.ParameterSampleVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(ParameterSampleVector self, std::vector< ParameterSample >::size_type n)"""
        return _libBornAgainCore.ParameterSampleVector_reserve(self, n)

    def capacity(self):
        r"""capacity(ParameterSampleVector self) -> std::vector< ParameterSample >::size_type"""
        return _libBornAgainCore.ParameterSampleVector_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_ParameterSampleVector

# Register ParameterSampleVector in _libBornAgainCore:
_libBornAgainCore.ParameterSampleVector_swigregister(ParameterSampleVector)

class IntensityData(object):
    r"""


    Template class to store data of any type in multi-dimensional space.

    C++ includes: OutputData.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(IntensityData self) -> IntensityData
        OutputData< T >::OutputData(const OutputData &)=delete

        """
        _libBornAgainCore.IntensityData_swiginit(self, _libBornAgainCore.new_IntensityData())
    __swig_destroy__ = _libBornAgainCore.delete_IntensityData

    def clone(self):
        r"""
        clone(IntensityData self) -> IntensityData
        OutputData< T > * OutputData< T >::clone() const

        """
        return _libBornAgainCore.IntensityData_clone(self)

    def copyFrom(self, x):
        r"""
        copyFrom(IntensityData self, IntensityData x)
        void OutputData< T >::copyFrom(const OutputData< T > &x)

        """
        return _libBornAgainCore.IntensityData_copyFrom(self, x)

    def meanValues(self):
        r"""
        meanValues(IntensityData self) -> IntensityData
        OutputData< double > * OutputData< T >::meanValues() const

        """
        return _libBornAgainCore.IntensityData_meanValues(self)

    def addAxis(self, *args):
        r"""
        addAxis(IntensityData self, IAxis new_axis)
        addAxis(IntensityData self, std::string const & name, size_t size, double start, double end)
        void OutputData< T >::addAxis(const std::string &name, size_t size, double start, double end)

        """
        return _libBornAgainCore.IntensityData_addAxis(self, *args)

    def getAxis(self, *args):
        r"""
        getAxis(IntensityData self, size_t serial_number) -> IAxis
        getAxis(IntensityData self, std::string const & axis_name) -> IAxis
        const IAxis & OutputData< T >::getAxis(const std::string &axis_name) const

        returns axis with given name 

        """
        return _libBornAgainCore.IntensityData_getAxis(self, *args)

    def getRank(self):
        r"""
        getRank(IntensityData self) -> size_t
        size_t OutputData< T >::getRank() const

        Returns number of dimensions. 

        """
        return _libBornAgainCore.IntensityData_getRank(self)

    def getAllocatedSize(self):
        r"""
        getAllocatedSize(IntensityData self) -> size_t
        size_t OutputData< T >::getAllocatedSize() const

        Returns total size of data buffer (product of bin number in every dimension). 

        """
        return _libBornAgainCore.IntensityData_getAllocatedSize(self)

    def getAllSizes(self):
        r"""
        getAllSizes(IntensityData self) -> std::vector< size_t,std::allocator< size_t > >
        std::vector< size_t > OutputData< T >::getAllSizes() const

        Returns all sizes of its axes. 

        """
        return _libBornAgainCore.IntensityData_getAllSizes(self)

    def getRawDataVector(self):
        r"""
        getRawDataVector(IntensityData self) -> vdouble1d_t
        std::vector< T > OutputData< T >::getRawDataVector() const

        Returns copy of raw data vector. 

        """
        return _libBornAgainCore.IntensityData_getRawDataVector(self)

    def totalSum(self):
        r"""
        totalSum(IntensityData self) -> double
        T OutputData< T >::totalSum() const

        Returns sum of all values in the data structure. 

        """
        return _libBornAgainCore.IntensityData_totalSum(self)

    def begin(self, *args):
        r"""
        begin(IntensityData self) -> OutputData< double >::iterator
        begin(IntensityData self) -> OutputData< double >::const_iterator
        OutputData< T >::const_iterator OutputData< T >::begin() const

        Returns read-only iterator that points to the first element. 

        """
        return _libBornAgainCore.IntensityData_begin(self, *args)

    def end(self, *args):
        r"""
        end(IntensityData self) -> OutputData< double >::iterator
        end(IntensityData self) -> OutputData< double >::const_iterator
        const_iterator OutputData< T >::end() const

        Returns read-only iterator that points to the one past last element. 

        """
        return _libBornAgainCore.IntensityData_end(self, *args)

    def getAxesBinIndices(self, global_index):
        r"""
        getAxesBinIndices(IntensityData self, size_t global_index) -> vector_integer_t
        std::vector< int > OutputData< T >::getAxesBinIndices(size_t global_index) const

        Returns vector of axes indices for given global index

        Parameters:
        -----------

        global_index: 
        The global index of this data structure.

        Vector of bin indices for all axes defined 

        """
        return _libBornAgainCore.IntensityData_getAxesBinIndices(self, global_index)

    def getAxisBinIndex(self, *args):
        r"""
        getAxisBinIndex(IntensityData self, size_t global_index, size_t i_selected_axis) -> size_t
        getAxisBinIndex(IntensityData self, size_t global_index, std::string const & axis_name) -> size_t
        size_t OutputData< T >::getAxisBinIndex(size_t global_index, const std::string &axis_name) const

        Returns axis bin index for given global index

        Parameters:
        -----------

        global_index: 
        The global index of this data structure.

        axis_name: 
        The name of selected axis.

        Corresponding bin index for selected axis 

        """
        return _libBornAgainCore.IntensityData_getAxisBinIndex(self, *args)

    def toGlobalIndex(self, axes_indices):
        r"""
        toGlobalIndex(IntensityData self, std::vector< unsigned int,std::allocator< unsigned int > > const & axes_indices) -> size_t
        size_t OutputData< T >::toGlobalIndex(const std::vector< unsigned > &axes_indices) const

        Returns global index for specified indices of axes

        Parameters:
        -----------

        axes_indices: 
        Vector of axes indices for all specified axes in this dataset

        Corresponding global index 

        """
        return _libBornAgainCore.IntensityData_toGlobalIndex(self, axes_indices)

    def findGlobalIndex(self, coordinates):
        r"""
        findGlobalIndex(IntensityData self, vdouble1d_t coordinates) -> size_t
        size_t OutputData< T >::findGlobalIndex(const std::vector< double > &coordinates) const

        Returns global index for specified axes values

        Parameters:
        -----------

        coordinates: 
        Vector of axes coordinates for all specified axes in this dataset

        Closest global index 

        """
        return _libBornAgainCore.IntensityData_findGlobalIndex(self, coordinates)

    def getAxisValue(self, *args):
        r"""
        getAxisValue(IntensityData self, size_t global_index, size_t i_selected_axis) -> double
        getAxisValue(IntensityData self, size_t global_index, std::string const & axis_name) -> double
        double OutputData< T >::getAxisValue(size_t global_index, const std::string &axis_name) const

        Returns the value of selected axis for given global_index.

        Parameters:
        -----------

        global_index: 
        The global index of this data structure.

        axis_name: 
        The name of selected axis.

        corresponding bin center of selected axis 

        """
        return _libBornAgainCore.IntensityData_getAxisValue(self, *args)

    def getAxesValues(self, global_index):
        r"""
        getAxesValues(IntensityData self, size_t global_index) -> vdouble1d_t
        std::vector< double > OutputData< T >::getAxesValues(size_t global_index) const

        Returns values on all defined axes for given globalbin number

        Parameters:
        -----------

        global_index: 
        The global index of this data structure.

        Vector of corresponding bin centers 

        """
        return _libBornAgainCore.IntensityData_getAxesValues(self, global_index)

    def getAxisBin(self, *args):
        r"""
        getAxisBin(IntensityData self, size_t global_index, size_t i_selected_axis) -> Bin1D
        getAxisBin(IntensityData self, size_t global_index, std::string const & axis_name) -> Bin1D
        Bin1D OutputData< T >::getAxisBin(size_t global_index, const std::string &axis_name) const

        Returns bin of selected axis for given global_index.

        Parameters:
        -----------

        global_index: 
        The global index of this data structure.

        axis_name: 
        The name of selected axis.

        Corresponding  Bin1D object 

        """
        return _libBornAgainCore.IntensityData_getAxisBin(self, *args)

    def clear(self):
        r"""
        clear(IntensityData self)
        void OutputData< T >::clear()

        Sets object into initial state (no dimensions, data) 

        """
        return _libBornAgainCore.IntensityData_clear(self)

    def setAllTo(self, value):
        r"""
        setAllTo(IntensityData self, double const & value)
        void OutputData< T >::setAllTo(const T &value)

        Sets content of output data to specific value. 

        """
        return _libBornAgainCore.IntensityData_setAllTo(self, value)

    def scaleAll(self, factor):
        r"""
        scaleAll(IntensityData self, double const & factor)
        void OutputData< T >::scaleAll(const T &factor)

        multiply every item of this output data by value 

        """
        return _libBornAgainCore.IntensityData_scaleAll(self, factor)

    def setAxisSizes(self, rank, n_dims):
        r"""
        setAxisSizes(IntensityData self, size_t rank, int * n_dims)
        void OutputData< T >::setAxisSizes(size_t rank, int *n_dims)

        Adds 'rank' axes with indicated sizes. 

        """
        return _libBornAgainCore.IntensityData_setAxisSizes(self, rank, n_dims)

    def setRawDataVector(self, data_vector):
        r"""
        setRawDataVector(IntensityData self, vdouble1d_t data_vector)
        void OutputData< T >::setRawDataVector(const std::vector< T > &data_vector)

        Sets new values to raw data vector. 

        """
        return _libBornAgainCore.IntensityData_setRawDataVector(self, data_vector)

    def setRawDataArray(self, source):
        r"""
        setRawDataArray(IntensityData self, double const * source)
        void OutputData< T >::setRawDataArray(const T *source)

        Sets new values to raw data array. 

        """
        return _libBornAgainCore.IntensityData_setRawDataArray(self, source)

    def __iadd__(self, right):
        r"""__iadd__(IntensityData self, IntensityData right) -> IntensityData"""
        return _libBornAgainCore.IntensityData___iadd__(self, right)

    def __isub__(self, right):
        r"""__isub__(IntensityData self, IntensityData right) -> IntensityData"""
        return _libBornAgainCore.IntensityData___isub__(self, right)

    def __itruediv__(self, *args):
        return _libBornAgainCore.IntensityData___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __imul__(self, right):
        r"""__imul__(IntensityData self, IntensityData right) -> IntensityData"""
        return _libBornAgainCore.IntensityData___imul__(self, right)

    def getValue(self, index):
        r"""
        getValue(IntensityData self, size_t index) -> double
        double OutputData< T >::getValue(size_t index) const

        Returns value or summed value, depending on T. 

        """
        return _libBornAgainCore.IntensityData_getValue(self, index)

    def getArray(self):
        r"""
        getArray(IntensityData self) -> PyObject *
        PyObject* OutputData< T >::getArray() const

        returns data as Python numpy array 

        """
        return _libBornAgainCore.IntensityData_getArray(self)

    def isInitialized(self):
        r"""
        isInitialized(IntensityData self) -> bool
        bool OutputData< T >::isInitialized() const

        returns true if object is correctly initialized 

        """
        return _libBornAgainCore.IntensityData_isInitialized(self)

    def allocate(self):
        r"""
        allocate(IntensityData self)
        void OutputData< T >::allocate()

        memory allocation for current dimensions configuration 

        """
        return _libBornAgainCore.IntensityData_allocate(self)

    def __getitem__(self, i):
        r"""__getitem__(IntensityData self, unsigned int i) -> double"""
        return _libBornAgainCore.IntensityData___getitem__(self, i)

    def __setitem__(self, i, value):
        r"""__setitem__(IntensityData self, unsigned int i, double value) -> double"""
        return _libBornAgainCore.IntensityData___setitem__(self, i, value)

# Register IntensityData in _libBornAgainCore:
_libBornAgainCore.IntensityData_swigregister(IntensityData)

class FitObjective(object):
    r"""


    Holds vector of   SimDataPairs (experimental data and simulation results) for use in fitting.

    C++ includes: FitObjective.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(FitObjective self) -> FitObjective
        FitObjective::FitObjective()

        """
        if self.__class__ == FitObjective:
            _self = None
        else:
            _self = self
        _libBornAgainCore.FitObjective_swiginit(self, _libBornAgainCore.new_FitObjective(_self, ))
    __swig_destroy__ = _libBornAgainCore.delete_FitObjective

    def evaluate_cpp(self, params):
        r"""
        evaluate_cpp(FitObjective self, Parameters params) -> double
        double FitObjective::evaluate(const Fit::Parameters &params)

        """
        return _libBornAgainCore.FitObjective_evaluate_cpp(self, params)

    def evaluate_residuals_cpp(self, params):
        r"""
        evaluate_residuals_cpp(FitObjective self, Parameters params) -> vdouble1d_t
        std::vector< double > FitObjective::evaluate_residuals(const Fit::Parameters &params)

        """
        return _libBornAgainCore.FitObjective_evaluate_residuals_cpp(self, params)

    def numberOfFitElements(self):
        r"""
        numberOfFitElements(FitObjective self) -> size_t
        size_t FitObjective::numberOfFitElements() const

        """
        return _libBornAgainCore.FitObjective_numberOfFitElements(self)

    def simulationResult(self, i_item=0):
        r"""
        simulationResult(FitObjective self, size_t i_item=0) -> SimulationResult
        SimulationResult FitObjective::simulationResult(size_t i_item=0) const

        Returns simulation result in the form of  SimulationResult. 

        """
        return _libBornAgainCore.FitObjective_simulationResult(self, i_item)

    def experimentalData(self, i_item=0):
        r"""
        experimentalData(FitObjective self, size_t i_item=0) -> SimulationResult
        SimulationResult FitObjective::experimentalData(size_t i_item=0) const

        Returns experimental data in the form of  SimulationResult. 

        """
        return _libBornAgainCore.FitObjective_experimentalData(self, i_item)

    def uncertaintyData_cpp(self, i_item=0):
        r"""
        uncertaintyData_cpp(FitObjective self, size_t i_item=0) -> SimulationResult
        SimulationResult FitObjective::uncertaintyData(size_t i_item=0) const

        Returns experimental data uncertainties in the form of  SimulationResult. 

        """
        return _libBornAgainCore.FitObjective_uncertaintyData_cpp(self, i_item)

    def relativeDifference(self, i_item=0):
        r"""
        relativeDifference(FitObjective self, size_t i_item=0) -> SimulationResult
        SimulationResult FitObjective::relativeDifference(size_t i_item=0) const

        Returns relative difference between simulation and experimental data in the form of  SimulationResult. 

        """
        return _libBornAgainCore.FitObjective_relativeDifference(self, i_item)

    def absoluteDifference(self, i_item=0):
        r"""
        absoluteDifference(FitObjective self, size_t i_item=0) -> SimulationResult
        SimulationResult FitObjective::absoluteDifference(size_t i_item=0) const

        Returns absolute value of difference between simulation and experimental data in the form of  SimulationResult. 

        """
        return _libBornAgainCore.FitObjective_absoluteDifference(self, i_item)

    def experimental_array(self):
        r"""
        experimental_array(FitObjective self) -> vdouble1d_t
        std::vector< double > FitObjective::experimental_array() const

        Returns one dimensional array representing merged experimental data. The area outside of the region of interest is not included, masked data is nullified. 

        """
        return _libBornAgainCore.FitObjective_experimental_array(self)

    def simulation_array(self):
        r"""
        simulation_array(FitObjective self) -> vdouble1d_t
        std::vector< double > FitObjective::simulation_array() const

        Returns one dimensional array representing merged simulated intensities data. The area outside of the region of interest is not included, masked data is nullified. 

        """
        return _libBornAgainCore.FitObjective_simulation_array(self)

    def uncertainties_cpp(self):
        r"""
        uncertainties_cpp(FitObjective self) -> vdouble1d_t
        std::vector< double > FitObjective::uncertainties() const

        Returns one-dimensional array representing merged data uncertainties. The area outside of the region of interest is not included, masked data is nullified. 

        """
        return _libBornAgainCore.FitObjective_uncertainties_cpp(self)

    def weights_array(self):
        r"""
        weights_array(FitObjective self) -> vdouble1d_t
        std::vector< double > FitObjective::weights_array() const

        Returns one-dimensional array representing merged user weights. The area outside of the region of interest is not included, masked data is nullified. 

        """
        return _libBornAgainCore.FitObjective_weights_array(self)

    def initPrint(self, every_nth):
        r"""
        initPrint(FitObjective self, int every_nth)
        void FitObjective::initPrint(int every_nth)

        Initializes printing to standard output during the fitting.

        Parameters:
        -----------

        every_nth: 
        Print every n'th iteration. 

        """
        return _libBornAgainCore.FitObjective_initPrint(self, every_nth)

    def initPlot_cpp(self, every_nth, callback):
        r"""
        initPlot_cpp(FitObjective self, int every_nth, PyObserverCallback callback)
        void FitObjective::initPlot(int every_nth, fit_observer_t observer)

        """
        return _libBornAgainCore.FitObjective_initPlot_cpp(self, every_nth, callback)

    def iterationInfo(self):
        r"""
        iterationInfo(FitObjective self) -> IterationInfo
        IterationInfo FitObjective::iterationInfo() const

        """
        return _libBornAgainCore.FitObjective_iterationInfo(self)

    def minimizerResult(self):
        r"""
        minimizerResult(FitObjective self) -> Fit::MinimizerResult
        Fit::MinimizerResult FitObjective::minimizerResult() const

        """
        return _libBornAgainCore.FitObjective_minimizerResult(self)

    def finalize_cpp(self, result):
        r"""
        finalize_cpp(FitObjective self, Fit::MinimizerResult const & result)
        void FitObjective::finalize(const Fit::MinimizerResult &result)

        Should be explicitely called on last iteration to notify all observers. 

        """
        return _libBornAgainCore.FitObjective_finalize_cpp(self, result)

    def fitObjectCount(self):
        r"""
        fitObjectCount(FitObjective self) -> unsigned int
        unsigned FitObjective::fitObjectCount() const

        """
        return _libBornAgainCore.FitObjective_fitObjectCount(self)

    def run_simulations(self, params):
        r"""
        run_simulations(FitObjective self, Parameters params)
        void FitObjective::run_simulations(const Fit::Parameters &params)

        """
        return _libBornAgainCore.FitObjective_run_simulations(self, params)

    def setChiSquaredModule(self, module):
        r"""
        setChiSquaredModule(FitObjective self, IChiSquaredModule module)
        void FitObjective::setChiSquaredModule(const IChiSquaredModule &module)

        """
        return _libBornAgainCore.FitObjective_setChiSquaredModule(self, module)

    def setObjectiveMetric(self, *args):
        r"""
        setObjectiveMetric(FitObjective self, std::string const & metric)
        setObjectiveMetric(FitObjective self, std::string const & metric, std::string const & norm)
        void FitObjective::setObjectiveMetric(std::unique_ptr< ObjectiveMetric > metric)

        """
        return _libBornAgainCore.FitObjective_setObjectiveMetric(self, *args)

    def containsUncertainties_cpp(self, i_item):
        r"""
        containsUncertainties_cpp(FitObjective self, size_t i_item) -> bool
        bool FitObjective::containsUncertainties(size_t i_item) const

        Returns true if the specified DataPair element contains uncertainties. 

        """
        return _libBornAgainCore.FitObjective_containsUncertainties_cpp(self, i_item)

    def allPairsHaveUncertainties_cpp(self):
        r"""
        allPairsHaveUncertainties_cpp(FitObjective self) -> bool
        bool FitObjective::allPairsHaveUncertainties() const

        Returns true if all the data pairs in  FitObjective instance contain uncertainties. 

        """
        return _libBornAgainCore.FitObjective_allPairsHaveUncertainties_cpp(self)

    @staticmethod
    def availableMetricOptions():
        r"""availableMetricOptions() -> std::string"""
        return _libBornAgainCore.FitObjective_availableMetricOptions()

    def addSimulationAndData_cpp(self, *args):
        r"""
        addSimulationAndData_cpp(FitObjective self, PyBuilderCallback callback, vdouble1d_t data, double weight=1.0)
        addSimulationAndData_cpp(FitObjective self, PyBuilderCallback callback, vdouble1d_t data, vdouble1d_t uncertainties, double weight=1.0)
        addSimulationAndData_cpp(FitObjective self, PyBuilderCallback callback, vdouble2d_t data, double weight=1.0)
        addSimulationAndData_cpp(FitObjective self, PyBuilderCallback callback, vdouble2d_t data, vdouble2d_t uncertainties, double weight=1.0)
        void FitObjective::addSimulationAndData(PyBuilderCallback &callback, const T &data, const T &uncertainties, double weight=1.0)

        Constructs simulation/data pair for later fit.

        Parameters:
        -----------

        callback: 
        simulation builder capable of producing simulations

        data: 
        experimental data array

        uncertainties: 
        data uncertainties array

        weight: 
        weight of dataset in metric calculations 

        """
        return _libBornAgainCore.FitObjective_addSimulationAndData_cpp(self, *args)

    def addSimulationAndData(self, callback, data, *args, **kwargs):
        """
        Sets simulation and experimental data to the fit objective.
        Optionally accepts experimental data uncertainties and
        user-defined dataset weight.

        Arguments:

        callback -- user-defined function returning fully-defined bornagain.Simulation object.
        The function must use fit parameter dictionary as its input.

        data -- numpy array with experimental data.

        uncertainties -- numpy array with experimental data uncertainties.
        Array shape must correspond to the shape of data. Optional argument.

        weight -- user-defined weight of the dataset. If not specified, defaults to 1.0.
        """
        if not hasattr(self, 'callback_container'):
            self.callback_container = []
        wrp = SimulationBuilderWrapper(callback)
        self.callback_container.append(wrp)
        return self.addSimulationAndData_cpp(wrp, data, *args, **kwargs)

    def convert_params(self, params):
        """
        Converts parameters to what FitObjective::evaluate expects
        """

        if str(params.__module__) == "lmfit.parameter":
            bapars = libBornAgainFit.Parameters()
            for p in params:
                bapars.add(p, params[p].value)
            return bapars
        else:
            return params

    def evaluate_residuals(self, params):
        return self.evaluate_residuals_cpp(self.convert_params(params))

    def evaluate(self, params):
        return self.evaluate_cpp(self.convert_params(params))

    def convert_result(self, minim_result):
        """
        Converts result reported by arbitrary minimizer to ba.MinimizerResult
        """

        if str(minim_result.__module__) == "lmfit.minimizer":
            return libBornAgainFit.MinimizerResult()
        else:
            return minim_result

    def finalize(self, minimizer_result):
        return self.finalize_cpp(self.convert_result(minimizer_result))

    def create_default_plotter(self):
        import plot_utils
        self.m_plotter = plot_utils.PlotterGISAS()
        return self.m_plotter.plot

    def initPlot(self, every_nth, callback = None):
        if not callback:
            callback = self.create_default_plotter()

        self.wrp_plot_observer = ObserverCallbackWrapper(callback)
        return self.initPlot_cpp(every_nth, self.wrp_plot_observer)

    def uncertainties(self):
        """
        Returns one-dimensional array representing merged data uncertainties.
        If any of the associated data pairs lack uncertainties, returns None.
        """
        if self.allPairsHaveUncertainties_cpp():
            return self.uncertainties_cpp()
        return None

    def uncertaintyData(self, i=0):
        """
        Returns uncertainties for i-th simulation-data pair. If
        no uncertainties are assigned to the data pair, returns
        None.
        """
        if self.containsUncertainties_cpp(i):
            return self.uncertaintyData_cpp(i)
        return None

    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FitObjective(self)
        return weakref.proxy(self)

# Register FitObjective in _libBornAgainCore:
_libBornAgainCore.FitObjective_swigregister(FitObjective)

def FitObjective_availableMetricOptions():
    r"""FitObjective_availableMetricOptions() -> std::string"""
    return _libBornAgainCore.FitObjective_availableMetricOptions()


def GetMajorVersionNumber():
    r"""GetMajorVersionNumber() -> int"""
    return _libBornAgainCore.GetMajorVersionNumber()

def GetMinorVersionNumber():
    r"""GetMinorVersionNumber() -> int"""
    return _libBornAgainCore.GetMinorVersionNumber()

def GetPatchVersionNumber():
    r"""GetPatchVersionNumber() -> int"""
    return _libBornAgainCore.GetPatchVersionNumber()

def GetName():
    r"""GetName() -> std::string"""
    return _libBornAgainCore.GetName()

def GetVersionNumber():
    r"""GetVersionNumber() -> std::string"""
    return _libBornAgainCore.GetVersionNumber()
class Bin1D(object):
    r"""Proxy of C++ Bin1D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Bin1D self) -> Bin1D
        __init__(Bin1D self, double lower, double upper) -> Bin1D
        Bin1D::Bin1D(double lower, double upper)

        """
        _libBornAgainCore.Bin1D_swiginit(self, _libBornAgainCore.new_Bin1D(*args))
    m_lower = property(_libBornAgainCore.Bin1D_m_lower_get, _libBornAgainCore.Bin1D_m_lower_set, doc=r"""m_lower : double""")
    m_upper = property(_libBornAgainCore.Bin1D_m_upper_get, _libBornAgainCore.Bin1D_m_upper_set, doc=r"""m_upper : double""")

    def getMidPoint(self):
        r"""
        getMidPoint(Bin1D self) -> double
        double Bin1D::getMidPoint() const

        """
        return _libBornAgainCore.Bin1D_getMidPoint(self)

    def getBinSize(self):
        r"""
        getBinSize(Bin1D self) -> double
        double Bin1D::getBinSize() const

        """
        return _libBornAgainCore.Bin1D_getBinSize(self)
    __swig_destroy__ = _libBornAgainCore.delete_Bin1D

# Register Bin1D in _libBornAgainCore:
_libBornAgainCore.Bin1D_swigregister(Bin1D)
cvar = _libBornAgainCore.cvar
major_version_number = cvar.major_version_number
minor_version_number = cvar.minor_version_number
patch_version_number = cvar.patch_version_number


def BinContains(bin, value):
    r"""
    BinContains(Bin1D bin, double value) -> bool
    bool BinContains(const Bin1D &bin, double value)

    Checks if value is contained in bin: value in [m_lower, m_upper) 

    """
    return _libBornAgainCore.BinContains(bin, value)
class Bin1DKVector(object):
    r"""


    An one-dimensional range of kvector_t's.

    C++ includes: Bin.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Bin1DKVector self) -> Bin1DKVector
        __init__(Bin1DKVector self, kvector_t lower, kvector_t upper) -> Bin1DKVector
        __init__(Bin1DKVector self, double wavelength, Bin1D alpha_bin, Bin1D phi_bin) -> Bin1DKVector
        Bin1DKVector::Bin1DKVector(double wavelength, const Bin1D &alpha_bin, const Bin1D &phi_bin)

        creation on  Bin1DKVector from alpha and phi bins 

        """
        _libBornAgainCore.Bin1DKVector_swiginit(self, _libBornAgainCore.new_Bin1DKVector(*args))

    def getMidPoint(self):
        r"""
        getMidPoint(Bin1DKVector self) -> kvector_t
        kvector_t Bin1DKVector::getMidPoint() const

        """
        return _libBornAgainCore.Bin1DKVector_getMidPoint(self)

    def getDelta(self):
        r"""
        getDelta(Bin1DKVector self) -> kvector_t
        kvector_t Bin1DKVector::getDelta() const

        """
        return _libBornAgainCore.Bin1DKVector_getDelta(self)
    m_q_lower = property(_libBornAgainCore.Bin1DKVector_m_q_lower_get, _libBornAgainCore.Bin1DKVector_m_q_lower_set, doc=r"""m_q_lower : kvector_t""")
    m_q_upper = property(_libBornAgainCore.Bin1DKVector_m_q_upper_get, _libBornAgainCore.Bin1DKVector_m_q_upper_set, doc=r"""m_q_upper : kvector_t""")
    __swig_destroy__ = _libBornAgainCore.delete_Bin1DKVector

# Register Bin1DKVector in _libBornAgainCore:
_libBornAgainCore.Bin1DKVector_swigregister(Bin1DKVector)

class Bin1DCVector(object):
    r"""


    An one-dimensional range of cvector_t's.

    C++ includes: Bin.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Bin1DCVector self) -> Bin1DCVector
        __init__(Bin1DCVector self, cvector_t lower, cvector_t upper) -> Bin1DCVector
        __init__(Bin1DCVector self, double wavelength, Bin1D alpha_bin, Bin1D phi_bin) -> Bin1DCVector
        Bin1DCVector::Bin1DCVector(double wavelength, const Bin1D &alpha_bin, const Bin1D &phi_bin)

        creation on  Bin1DCVector from alpha and phi bins 

        """
        _libBornAgainCore.Bin1DCVector_swiginit(self, _libBornAgainCore.new_Bin1DCVector(*args))

    def getMidPoint(self):
        r"""
        getMidPoint(Bin1DCVector self) -> cvector_t
        cvector_t Bin1DCVector::getMidPoint() const

        """
        return _libBornAgainCore.Bin1DCVector_getMidPoint(self)

    def getDelta(self):
        r"""
        getDelta(Bin1DCVector self) -> cvector_t
        cvector_t Bin1DCVector::getDelta() const

        """
        return _libBornAgainCore.Bin1DCVector_getDelta(self)
    m_q_lower = property(_libBornAgainCore.Bin1DCVector_m_q_lower_get, _libBornAgainCore.Bin1DCVector_m_q_lower_set, doc=r"""m_q_lower : cvector_t""")
    m_q_upper = property(_libBornAgainCore.Bin1DCVector_m_q_upper_get, _libBornAgainCore.Bin1DCVector_m_q_upper_set, doc=r"""m_q_upper : cvector_t""")
    __swig_destroy__ = _libBornAgainCore.delete_Bin1DCVector

# Register Bin1DCVector in _libBornAgainCore:
_libBornAgainCore.Bin1DCVector_swigregister(Bin1DCVector)

class IPixel(object):
    r"""


    Interface for a function that maps [0,1]x[0,1] to the kvectors in a pixel.

    C++ includes: IPixel.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IPixel

    def clone(self):
        r"""
        clone(IPixel self) -> IPixel
        virtual IPixel* IPixel::clone() const =0

        """
        return _libBornAgainCore.IPixel_clone(self)

    def createZeroSizePixel(self, x, y):
        r"""
        createZeroSizePixel(IPixel self, double x, double y) -> IPixel
        virtual IPixel* IPixel::createZeroSizePixel(double x, double y) const =0

        """
        return _libBornAgainCore.IPixel_createZeroSizePixel(self, x, y)

    def getK(self, x, y, wavelength):
        r"""
        getK(IPixel self, double x, double y, double wavelength) -> kvector_t
        virtual kvector_t IPixel::getK(double x, double y, double wavelength) const =0

        """
        return _libBornAgainCore.IPixel_getK(self, x, y, wavelength)

    def getIntegrationFactor(self, x, y):
        r"""
        getIntegrationFactor(IPixel self, double x, double y) -> double
        virtual double IPixel::getIntegrationFactor(double x, double y) const =0

        """
        return _libBornAgainCore.IPixel_getIntegrationFactor(self, x, y)

    def getSolidAngle(self):
        r"""
        getSolidAngle(IPixel self) -> double
        virtual double IPixel::getSolidAngle() const =0

        """
        return _libBornAgainCore.IPixel_getSolidAngle(self)

# Register IPixel in _libBornAgainCore:
_libBornAgainCore.IPixel_swigregister(IPixel)

class IAxis(object):
    r"""


    Interface for one-dimensional axes.

    C++ includes: IAxis.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        r"""
        clone(IAxis self) -> IAxis
        virtual IAxis* IAxis::clone() const =0

        clone function 

        """
        return _libBornAgainCore.IAxis_clone(self)
    __swig_destroy__ = _libBornAgainCore.delete_IAxis

    def size(self):
        r"""
        size(IAxis self) -> size_t
        virtual size_t IAxis::size() const =0

        retrieve the number of bins 

        """
        return _libBornAgainCore.IAxis_size(self)

    def getName(self):
        r"""
        getName(IAxis self) -> std::string
        std::string IAxis::getName() const

        retrieve the label of the axis 

        """
        return _libBornAgainCore.IAxis_getName(self)

    def setName(self, name):
        r"""
        setName(IAxis self, std::string name)
        void IAxis::setName(std::string name)

        Sets the axis label. 

        """
        return _libBornAgainCore.IAxis_setName(self, name)

    def getBin(self, index):
        r"""
        getBin(IAxis self, size_t index) -> Bin1D
        virtual Bin1D IAxis::getBin(size_t index) const =0

        retrieve a 1d bin for the given index 

        """
        return _libBornAgainCore.IAxis_getBin(self, index)

    def getMin(self):
        r"""
        getMin(IAxis self) -> double
        virtual double IAxis::getMin() const =0

        Returns value of first point of axis. 

        """
        return _libBornAgainCore.IAxis_getMin(self)

    def getMax(self):
        r"""
        getMax(IAxis self) -> double
        virtual double IAxis::getMax() const =0

        Returns value of last point of axis. 

        """
        return _libBornAgainCore.IAxis_getMax(self)

    def getBinCenter(self, index):
        r"""
        getBinCenter(IAxis self, size_t index) -> double
        virtual double IAxis::getBinCenter(size_t index) const =0

        """
        return _libBornAgainCore.IAxis_getBinCenter(self, index)

    def findClosestIndex(self, value):
        r"""
        findClosestIndex(IAxis self, double value) -> size_t
        virtual size_t IAxis::findClosestIndex(double value) const =0

        find bin index which is best match for given value 

        """
        return _libBornAgainCore.IAxis_findClosestIndex(self, value)

    def __eq__(self, right):
        r"""__eq__(IAxis self, IAxis right) -> bool"""
        return _libBornAgainCore.IAxis___eq__(self, right)

    def __ne__(self, right):
        r"""__ne__(IAxis self, IAxis right) -> bool"""
        return _libBornAgainCore.IAxis___ne__(self, right)

    def getBinCenters(self):
        r"""
        getBinCenters(IAxis self) -> vdouble1d_t
        std::vector< double > IAxis::getBinCenters() const

        """
        return _libBornAgainCore.IAxis_getBinCenters(self)

    def getBinBoundaries(self):
        r"""
        getBinBoundaries(IAxis self) -> vdouble1d_t
        std::vector< double > IAxis::getBinBoundaries() const

        """
        return _libBornAgainCore.IAxis_getBinBoundaries(self)

    def createClippedAxis(self, left, right):
        r"""
        createClippedAxis(IAxis self, double left, double right) -> IAxis
        IAxis * IAxis::createClippedAxis(double left, double right) const

        Creates a new clipped axis. 

        """
        return _libBornAgainCore.IAxis_createClippedAxis(self, left, right)

    def contains(self, value):
        r"""
        contains(IAxis self, double value) -> bool
        bool IAxis::contains(double value) const

        Returns true if axis contains given point. 

        """
        return _libBornAgainCore.IAxis_contains(self, value)

# Register IAxis in _libBornAgainCore:
_libBornAgainCore.IAxis_swigregister(IAxis)


def HaveSameNameAndShape(left, right):
    r"""
    HaveSameNameAndShape(IAxis left, IAxis right) -> bool
    bool HaveSameNameAndShape(const IAxis &left, const IAxis &right)

    global helper function for comparison of axes 

    """
    return _libBornAgainCore.HaveSameNameAndShape(left, right)
class VariableBinAxis(IAxis):
    r"""


    Axis with variable bin size.

    C++ includes: VariableBinAxis.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, nbins, bin_boundaries):
        r"""
        __init__(VariableBinAxis self, std::string const & name, size_t nbins, vdouble1d_t bin_boundaries) -> VariableBinAxis
        VariableBinAxis::VariableBinAxis(const std::string &name, size_t nbins, const std::vector< double > &bin_boundaries)

        VariableBinAxis constructor.

        Parameters:
        -----------

        name: 
        Axis name

        nbins: 
        number of bins

        bin_boundaries: 
        Array of size nbins+1 containing low-edges for each bin and upper edge of last bin. 

        """
        _libBornAgainCore.VariableBinAxis_swiginit(self, _libBornAgainCore.new_VariableBinAxis(name, nbins, bin_boundaries))
    __swig_destroy__ = _libBornAgainCore.delete_VariableBinAxis

    def clone(self):
        r"""
        clone(VariableBinAxis self) -> VariableBinAxis
        VariableBinAxis * VariableBinAxis::clone() const

        clone function 

        """
        return _libBornAgainCore.VariableBinAxis_clone(self)

    def size(self):
        r"""
        size(VariableBinAxis self) -> size_t
        size_t VariableBinAxis::size() const

        retrieve the number of bins 

        """
        return _libBornAgainCore.VariableBinAxis_size(self)

    def getBin(self, index):
        r"""
        getBin(VariableBinAxis self, size_t index) -> Bin1D
        Bin1D VariableBinAxis::getBin(size_t index) const

        retrieve a 1d bin for the given index 

        """
        return _libBornAgainCore.VariableBinAxis_getBin(self, index)

    def getMin(self):
        r"""
        getMin(VariableBinAxis self) -> double
        double VariableBinAxis::getMin() const

        Returns value of first point of axis. 

        """
        return _libBornAgainCore.VariableBinAxis_getMin(self)

    def getMax(self):
        r"""
        getMax(VariableBinAxis self) -> double
        double VariableBinAxis::getMax() const

        Returns value of last point of axis. 

        """
        return _libBornAgainCore.VariableBinAxis_getMax(self)

    def getBinCenter(self, index):
        r"""
        getBinCenter(VariableBinAxis self, size_t index) -> double
        double VariableBinAxis::getBinCenter(size_t index) const

        """
        return _libBornAgainCore.VariableBinAxis_getBinCenter(self, index)

    def findClosestIndex(self, value):
        r"""
        findClosestIndex(VariableBinAxis self, double value) -> size_t
        size_t VariableBinAxis::findClosestIndex(double value) const

        find bin index which is best match for given value 

        """
        return _libBornAgainCore.VariableBinAxis_findClosestIndex(self, value)

    def getBinCenters(self):
        r"""
        getBinCenters(VariableBinAxis self) -> vdouble1d_t
        std::vector< double > VariableBinAxis::getBinCenters() const

        """
        return _libBornAgainCore.VariableBinAxis_getBinCenters(self)

    def getBinBoundaries(self):
        r"""
        getBinBoundaries(VariableBinAxis self) -> vdouble1d_t
        std::vector<double> VariableBinAxis::getBinBoundaries() const

        """
        return _libBornAgainCore.VariableBinAxis_getBinBoundaries(self)

    def createClippedAxis(self, left, right):
        r"""
        createClippedAxis(VariableBinAxis self, double left, double right) -> VariableBinAxis
        VariableBinAxis * VariableBinAxis::createClippedAxis(double left, double right) const

        Creates a new clipped axis. 

        """
        return _libBornAgainCore.VariableBinAxis_createClippedAxis(self, left, right)

    def __getitem__(self, i):
        r"""__getitem__(VariableBinAxis self, unsigned int i) -> double"""
        return _libBornAgainCore.VariableBinAxis___getitem__(self, i)

# Register VariableBinAxis in _libBornAgainCore:
_libBornAgainCore.VariableBinAxis_swigregister(VariableBinAxis)

class ConstKBinAxis(VariableBinAxis):
    r"""


    Axis with fixed bin size in sin(angle) space.

    C++ includes: ConstKBinAxis.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, nbins, start, end):
        r"""
        __init__(ConstKBinAxis self, std::string const & name, size_t nbins, double start, double end) -> ConstKBinAxis
        ConstKBinAxis::ConstKBinAxis(const std::string &name, size_t nbins, double start, double end)

        ConstKBinAxis constructor.

        Parameters:
        -----------

        name: 
        Axis name

        nbins: 
        number of bins

        start: 
        low edge of first bin

        end: 
        upper edge of last bin 

        """
        _libBornAgainCore.ConstKBinAxis_swiginit(self, _libBornAgainCore.new_ConstKBinAxis(name, nbins, start, end))
    __swig_destroy__ = _libBornAgainCore.delete_ConstKBinAxis

    def clone(self):
        r"""
        clone(ConstKBinAxis self) -> ConstKBinAxis
        ConstKBinAxis * ConstKBinAxis::clone() const final

        clone function 

        """
        return _libBornAgainCore.ConstKBinAxis_clone(self)

    def createClippedAxis(self, left, right):
        r"""
        createClippedAxis(ConstKBinAxis self, double left, double right) -> ConstKBinAxis
        ConstKBinAxis * ConstKBinAxis::createClippedAxis(double left, double right) const final

        Creates a new clipped axis. 

        """
        return _libBornAgainCore.ConstKBinAxis_createClippedAxis(self, left, right)

# Register ConstKBinAxis in _libBornAgainCore:
_libBornAgainCore.ConstKBinAxis_swigregister(ConstKBinAxis)

class CustomBinAxis(VariableBinAxis):
    r"""


    Axis with fixed bin size in sin(angle) space used for numerical comparison with IsGisaxs. The main feature of the axis is that it produces zero bin sizes.

    C++ includes: CustomBinAxis.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, nbins, start, end):
        r"""
        __init__(CustomBinAxis self, std::string const & name, size_t nbins, double start, double end) -> CustomBinAxis
        CustomBinAxis::CustomBinAxis(const std::string &name, size_t nbins, double start, double end)

        CustomBinAxis constructor.

        Parameters:
        -----------

        name: 
        Axis name

        nbins: 
        number of bins

        start: 
        center of first bin (IsGisaxs convention)

        end: 
        center of last bin (IsGisaxs convention) 

        """
        _libBornAgainCore.CustomBinAxis_swiginit(self, _libBornAgainCore.new_CustomBinAxis(name, nbins, start, end))
    __swig_destroy__ = _libBornAgainCore.delete_CustomBinAxis

    def clone(self):
        r"""
        clone(CustomBinAxis self) -> CustomBinAxis
        CustomBinAxis * CustomBinAxis::clone() const

        clone function 

        """
        return _libBornAgainCore.CustomBinAxis_clone(self)

    def getBin(self, index):
        r"""
        getBin(CustomBinAxis self, size_t index) -> Bin1D
        Bin1D CustomBinAxis::getBin(size_t index) const

        retrieve a 1d bin for the given index 

        """
        return _libBornAgainCore.CustomBinAxis_getBin(self, index)

    def getBinCenters(self):
        r"""
        getBinCenters(CustomBinAxis self) -> vdouble1d_t
        std::vector< double > CustomBinAxis::getBinCenters() const

        """
        return _libBornAgainCore.CustomBinAxis_getBinCenters(self)

    def createClippedAxis(self, left, right):
        r"""
        createClippedAxis(CustomBinAxis self, double left, double right) -> CustomBinAxis
        CustomBinAxis * CustomBinAxis::createClippedAxis(double left, double right) const

        Creates a new clipped axis. 

        """
        return _libBornAgainCore.CustomBinAxis_createClippedAxis(self, left, right)

# Register CustomBinAxis in _libBornAgainCore:
_libBornAgainCore.CustomBinAxis_swigregister(CustomBinAxis)

class FixedBinAxis(IAxis):
    r"""


    Axis with fixed bin size.

    C++ includes: FixedBinAxis.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, nbins, start, end):
        r"""
        __init__(FixedBinAxis self, std::string const & name, size_t nbins, double start, double end) -> FixedBinAxis
        FixedBinAxis::FixedBinAxis(const std::string &name, size_t nbins, double start, double end)

        FixedBinAxis constructor.

        Parameters:
        -----------

        name: 
        Axis name

        nbins: 
        number of bins

        start: 
        low edge of first bin

        end: 
        upper edge of last bin 

        """
        _libBornAgainCore.FixedBinAxis_swiginit(self, _libBornAgainCore.new_FixedBinAxis(name, nbins, start, end))
    __swig_destroy__ = _libBornAgainCore.delete_FixedBinAxis

    def clone(self):
        r"""
        clone(FixedBinAxis self) -> FixedBinAxis
        FixedBinAxis * FixedBinAxis::clone() const

        clone function 

        """
        return _libBornAgainCore.FixedBinAxis_clone(self)

    def size(self):
        r"""
        size(FixedBinAxis self) -> size_t
        size_t FixedBinAxis::size() const

        retrieve the number of bins 

        """
        return _libBornAgainCore.FixedBinAxis_size(self)

    def getBin(self, index):
        r"""
        getBin(FixedBinAxis self, size_t index) -> Bin1D
        Bin1D FixedBinAxis::getBin(size_t index) const

        retrieve a 1d bin for the given index 

        """
        return _libBornAgainCore.FixedBinAxis_getBin(self, index)

    def getMin(self):
        r"""
        getMin(FixedBinAxis self) -> double
        double FixedBinAxis::getMin() const

        Returns value of first point of axis. 

        """
        return _libBornAgainCore.FixedBinAxis_getMin(self)

    def getMax(self):
        r"""
        getMax(FixedBinAxis self) -> double
        double FixedBinAxis::getMax() const

        Returns value of last point of axis. 

        """
        return _libBornAgainCore.FixedBinAxis_getMax(self)

    def getBinCenter(self, index):
        r"""
        getBinCenter(FixedBinAxis self, size_t index) -> double
        double FixedBinAxis::getBinCenter(size_t index) const

        """
        return _libBornAgainCore.FixedBinAxis_getBinCenter(self, index)

    def findClosestIndex(self, value):
        r"""
        findClosestIndex(FixedBinAxis self, double value) -> size_t
        size_t FixedBinAxis::findClosestIndex(double value) const

        find bin index which is best match for given value 

        """
        return _libBornAgainCore.FixedBinAxis_findClosestIndex(self, value)

    def getBinCenters(self):
        r"""
        getBinCenters(FixedBinAxis self) -> vdouble1d_t
        std::vector< double > FixedBinAxis::getBinCenters() const

        """
        return _libBornAgainCore.FixedBinAxis_getBinCenters(self)

    def getBinBoundaries(self):
        r"""
        getBinBoundaries(FixedBinAxis self) -> vdouble1d_t
        std::vector< double > FixedBinAxis::getBinBoundaries() const

        """
        return _libBornAgainCore.FixedBinAxis_getBinBoundaries(self)

    def createClippedAxis(self, left, right):
        r"""
        createClippedAxis(FixedBinAxis self, double left, double right) -> FixedBinAxis
        FixedBinAxis * FixedBinAxis::createClippedAxis(double left, double right) const

        Creates a new clipped axis. 

        """
        return _libBornAgainCore.FixedBinAxis_createClippedAxis(self, left, right)

    def __getitem__(self, i):
        r"""__getitem__(FixedBinAxis self, unsigned int i) -> double"""
        return _libBornAgainCore.FixedBinAxis___getitem__(self, i)

# Register FixedBinAxis in _libBornAgainCore:
_libBornAgainCore.FixedBinAxis_swigregister(FixedBinAxis)

class ICloneable(object):
    r"""


    Interface for polymorphic classes that should not be copied, except by explicit cloning.

    Child classes of  ICloneable must provide clone().

    C++ includes: ICloneable.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_ICloneable

    def clone(self):
        r"""
        clone(ICloneable self) -> ICloneable
        virtual ICloneable* ICloneable::clone() const =0

        """
        return _libBornAgainCore.ICloneable_clone(self)

    def transferToCPP(self):
        r"""
        transferToCPP(ICloneable self)
        virtual void ICloneable::transferToCPP()

        Used for Python overriding of clone (see swig/tweaks.py) 

        """
        return self.__disown__()

# Register ICloneable in _libBornAgainCore:
_libBornAgainCore.ICloneable_swigregister(ICloneable)


def mul_I(z):
    r"""
    mul_I(complex_t z) -> complex_t
    complex_t mul_I(complex_t z)

    Returns product I*z, where I is the imaginary unit. 

    """
    return _libBornAgainCore.mul_I(z)

def exp_I(z):
    r"""
    exp_I(complex_t z) -> complex_t
    complex_t exp_I(complex_t z)

    Returns exp(I*z), where I is the imaginary unit. 

    """
    return _libBornAgainCore.exp_I(z)

def rad2deg(angle):
    r"""
    rad2deg(double angle) -> double
    double Units::rad2deg(double angle)

    """
    return _libBornAgainCore.rad2deg(angle)

def deg2rad(angle):
    r"""
    deg2rad(double angle) -> double
    double Units::deg2rad(double angle)

    """
    return _libBornAgainCore.deg2rad(angle)
class WavevectorInfo(object):
    r"""


    Holds all wavevector information relevant for calculating form factors.

    C++ includes: WavevectorInfo.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetZeroQ():
        r"""GetZeroQ() -> WavevectorInfo"""
        return _libBornAgainCore.WavevectorInfo_GetZeroQ()

    def __init__(self, *args):
        r"""
        __init__(WavevectorInfo self, cvector_t ki, cvector_t kf, double wavelength) -> WavevectorInfo
        __init__(WavevectorInfo self, kvector_t ki, kvector_t kf, double wavelength) -> WavevectorInfo
        WavevectorInfo::WavevectorInfo(kvector_t ki, kvector_t kf, double wavelength)

        """
        _libBornAgainCore.WavevectorInfo_swiginit(self, _libBornAgainCore.new_WavevectorInfo(*args))

    def transformed(self, transform):
        r"""
        transformed(WavevectorInfo self, Transform3D const & transform) -> WavevectorInfo
        WavevectorInfo WavevectorInfo::transformed(const Transform3D &transform) const

        """
        return _libBornAgainCore.WavevectorInfo_transformed(self, transform)

    def getKi(self):
        r"""
        getKi(WavevectorInfo self) -> cvector_t
        cvector_t WavevectorInfo::getKi() const

        """
        return _libBornAgainCore.WavevectorInfo_getKi(self)

    def getKf(self):
        r"""
        getKf(WavevectorInfo self) -> cvector_t
        cvector_t WavevectorInfo::getKf() const

        """
        return _libBornAgainCore.WavevectorInfo_getKf(self)

    def getQ(self):
        r"""
        getQ(WavevectorInfo self) -> cvector_t
        cvector_t WavevectorInfo::getQ() const

        """
        return _libBornAgainCore.WavevectorInfo_getQ(self)

    def getWavelength(self):
        r"""
        getWavelength(WavevectorInfo self) -> double
        double WavevectorInfo::getWavelength() const

        """
        return _libBornAgainCore.WavevectorInfo_getWavelength(self)
    __swig_destroy__ = _libBornAgainCore.delete_WavevectorInfo

# Register WavevectorInfo in _libBornAgainCore:
_libBornAgainCore.WavevectorInfo_swigregister(WavevectorInfo)
I = cvar.I
nanometer = cvar.nanometer
angstrom = cvar.angstrom
micrometer = cvar.micrometer
millimeter = cvar.millimeter
meter = cvar.meter
nm = cvar.nm
nm2 = cvar.nm2
barn = cvar.barn
radian = cvar.radian
milliradian = cvar.milliradian
degree = cvar.degree
steradian = cvar.steradian
rad = cvar.rad
mrad = cvar.mrad
sr = cvar.sr
deg = cvar.deg
tesla = cvar.tesla
gauss = cvar.gauss

def WavevectorInfo_GetZeroQ():
    r"""WavevectorInfo_GetZeroQ() -> WavevectorInfo"""
    return _libBornAgainCore.WavevectorInfo_GetZeroQ()


def StandardNormal(x):
    r"""
    StandardNormal(double x) -> double
    double MathFunctions::StandardNormal(double x)

    """
    return _libBornAgainCore.StandardNormal(x)

def Gaussian(x, average, std_dev):
    r"""
    Gaussian(double x, double average, double std_dev) -> double
    double MathFunctions::Gaussian(double x, double average, double std_dev)

    """
    return _libBornAgainCore.Gaussian(x, average, std_dev)

def IntegratedGaussian(x, average, std_dev):
    r"""
    IntegratedGaussian(double x, double average, double std_dev) -> double
    double MathFunctions::IntegratedGaussian(double x, double average, double std_dev)

    """
    return _libBornAgainCore.IntegratedGaussian(x, average, std_dev)

def cot(x):
    r"""
    cot(double x) -> double
    double MathFunctions::cot(double x)

    cotangent function:  $cot(x)\\equiv1/tan(x)$

    """
    return _libBornAgainCore.cot(x)

def Si(x):
    r"""
    Si(double x) -> double
    double MathFunctions::Si(double x)

    Sine integral function:  $Si(x)\\equiv\\int_0^x du \\sin(u)/u$. 

    """
    return _libBornAgainCore.Si(x)

def sinc(*args):
    r"""
    sinc(double x) -> double
    sinc(complex_t const z) -> complex_t
    complex_t MathFunctions::sinc(const complex_t z)

    Complex sinc function:  $sinc(x)\\equiv\\sin(x)/x$. 

    """
    return _libBornAgainCore.sinc(*args)

def tanhc(z):
    r"""
    tanhc(complex_t const z) -> complex_t
    complex_t MathFunctions::tanhc(const complex_t z)

    Complex tanhc function:  $tanhc(x)\\equiv\\tanh(x)/x$. 

    """
    return _libBornAgainCore.tanhc(z)

def Laue(x, N):
    r"""
    Laue(double const x, size_t N) -> double
    double MathFunctions::Laue(const double x, size_t N)

    Real Laue function:  $Laue(x,N)\\equiv\\sin(Nx)/sin(x)$. 

    """
    return _libBornAgainCore.Laue(x, N)

def erf(arg):
    r"""
    erf(double arg) -> double
    double MathFunctions::erf(double arg)

    Error function of real-valued argument. 

    """
    return _libBornAgainCore.erf(arg)

def Bessel_I0(x):
    r"""
    Bessel_I0(double x) -> double
    double MathFunctions::Bessel_I0(double x)

    Modified Bessel function of the first kind and order 0. 

    """
    return _libBornAgainCore.Bessel_I0(x)

def Bessel_J0(*args):
    r"""
    Bessel_J0(double x) -> double
    Bessel_J0(complex_t const z) -> complex_t
    complex_t MathFunctions::Bessel_J0(const complex_t z)

    Complex Bessel function of the first kind and order 0. 

    """
    return _libBornAgainCore.Bessel_J0(*args)

def Bessel_J1(*args):
    r"""
    Bessel_J1(double x) -> double
    Bessel_J1(complex_t const z) -> complex_t
    complex_t MathFunctions::Bessel_J1(const complex_t z)

    Complex Bessel function of the first kind and order 1. 

    """
    return _libBornAgainCore.Bessel_J1(*args)

def Bessel_J1c(*args):
    r"""
    Bessel_J1c(double x) -> double
    Bessel_J1c(complex_t const z) -> complex_t
    complex_t MathFunctions::Bessel_J1c(const complex_t z)

    Complex Bessel function Bessel_J1(x)/x. 

    """
    return _libBornAgainCore.Bessel_J1c(*args)
FORWARD_FFT = _libBornAgainCore.FORWARD_FFT

BACKWARD_FFT = _libBornAgainCore.BACKWARD_FFT


def FastFourierTransform(*args):
    r"""
    FastFourierTransform(vector_complex_t data, MathFunctions::EFFTDirection tcase) -> vector_complex_t
    FastFourierTransform(vdouble1d_t data, MathFunctions::EFFTDirection tcase) -> vector_complex_t
    std::vector< complex_t > MathFunctions::FastFourierTransform(const std::vector< double > &data, EFFTDirection tcase)

    simple (and unoptimized) wrapper function for the discrete fast Fourier transformation library (fftw3); transforms real to complex 

    """
    return _libBornAgainCore.FastFourierTransform(*args)

def ConvolveFFT(signal, resfunc):
    r"""
    ConvolveFFT(vdouble1d_t signal, vdouble1d_t resfunc) -> vector_complex_t
    std::vector< complex_t > MathFunctions::ConvolveFFT(const std::vector< double > &signal, const std::vector< double > &resfunc)

    convolution of two real vectors of equal size 

    """
    return _libBornAgainCore.ConvolveFFT(signal, resfunc)

def GenerateUniformRandom():
    r"""
    GenerateUniformRandom() -> double
    double MathFunctions::GenerateUniformRandom()

    """
    return _libBornAgainCore.GenerateUniformRandom()

def GenerateStandardNormalRandom():
    r"""
    GenerateStandardNormalRandom() -> double
    double MathFunctions::GenerateStandardNormalRandom()

    """
    return _libBornAgainCore.GenerateStandardNormalRandom()

def GenerateNormalRandom(average, std_dev):
    r"""
    GenerateNormalRandom(double average, double std_dev) -> double
    double MathFunctions::GenerateNormalRandom(double average, double std_dev)

    """
    return _libBornAgainCore.GenerateNormalRandom(average, std_dev)

def GeneratePoissonRandom(average):
    r"""
    GeneratePoissonRandom(double average) -> double
    double MathFunctions::GeneratePoissonRandom(double average)

    """
    return _libBornAgainCore.GeneratePoissonRandom(average)
class IShape2D(ICloneable):
    r"""


    Basic class for all shapes in 2D.

    C++ includes: IShape2D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        r"""
        clone(IShape2D self) -> IShape2D
        virtual IShape2D* IShape2D::clone() const =0

        """
        return _libBornAgainCore.IShape2D_clone(self)

    def contains(self, *args):
        r"""
        contains(IShape2D self, double x, double y) -> bool
        contains(IShape2D self, Bin1D binx, Bin1D biny) -> bool
        virtual bool IShape2D::contains(const Bin1D &binx, const Bin1D &biny) const =0

        Returns true if area defined by two bins is inside or on border of polygon (more precisely, if mid point of two bins satisfy this condition). 

        """
        return _libBornAgainCore.IShape2D_contains(self, *args)
    __swig_destroy__ = _libBornAgainCore.delete_IShape2D

# Register IShape2D in _libBornAgainCore:
_libBornAgainCore.IShape2D_swigregister(IShape2D)

class Ellipse(IShape2D):
    r"""


    Ellipse shape.

    C++ includes: Ellipse.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, xcenter, ycenter, xradius, yradius, theta=0.0):
        r"""
        __init__(Ellipse self, double xcenter, double ycenter, double xradius, double yradius, double theta=0.0) -> Ellipse
        Ellipse::Ellipse(double xcenter, double ycenter, double xradius, double yradius, double theta=0.0)

        Parameters:
        -----------

        xcenter: 
        x-coordinate of  Ellipse's center

        ycenter: 
        y-coordinate of  Ellipse's center

        xradius: 
        Radius along x-axis

        yradius: 
        Radius along y-axis

        theta: 
        Angle of  Ellipse rotation in radians 

        """
        _libBornAgainCore.Ellipse_swiginit(self, _libBornAgainCore.new_Ellipse(xcenter, ycenter, xradius, yradius, theta))

    def clone(self):
        r"""
        clone(Ellipse self) -> Ellipse
        Ellipse* Ellipse::clone() const

        """
        return _libBornAgainCore.Ellipse_clone(self)

    def contains(self, *args):
        r"""
        contains(Ellipse self, double x, double y) -> bool
        contains(Ellipse self, Bin1D binx, Bin1D biny) -> bool
        bool Ellipse::contains(const Bin1D &binx, const Bin1D &biny) const

        Returns true if area defined by two bins is inside or on border of ellipse; more precisely, if mid point of two bins satisfy this condition. 

        """
        return _libBornAgainCore.Ellipse_contains(self, *args)

    def getCenterX(self):
        r"""
        getCenterX(Ellipse self) -> double
        double Ellipse::getCenterX() const

        """
        return _libBornAgainCore.Ellipse_getCenterX(self)

    def getCenterY(self):
        r"""
        getCenterY(Ellipse self) -> double
        double Ellipse::getCenterY() const

        """
        return _libBornAgainCore.Ellipse_getCenterY(self)

    def getRadiusX(self):
        r"""
        getRadiusX(Ellipse self) -> double
        double Ellipse::getRadiusX() const

        """
        return _libBornAgainCore.Ellipse_getRadiusX(self)

    def getRadiusY(self):
        r"""
        getRadiusY(Ellipse self) -> double
        double Ellipse::getRadiusY() const

        """
        return _libBornAgainCore.Ellipse_getRadiusY(self)

    def getTheta(self):
        r"""
        getTheta(Ellipse self) -> double
        double Ellipse::getTheta() const

        """
        return _libBornAgainCore.Ellipse_getTheta(self)
    __swig_destroy__ = _libBornAgainCore.delete_Ellipse

# Register Ellipse in _libBornAgainCore:
_libBornAgainCore.Ellipse_swigregister(Ellipse)

class Line(IShape2D):
    r"""


    A line segment.

    C++ includes: Line.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x1, y1, x2, y2):
        r"""
        __init__(Line self, double x1, double y1, double x2, double y2) -> Line
        Line::Line(double x1, double y1, double x2, double y2)

        """
        _libBornAgainCore.Line_swiginit(self, _libBornAgainCore.new_Line(x1, y1, x2, y2))

    def clone(self):
        r"""
        clone(Line self) -> Line
        Line* Line::clone() const

        """
        return _libBornAgainCore.Line_clone(self)

    def contains(self, *args):
        r"""
        contains(Line self, double x, double y) -> bool
        contains(Line self, Bin1D binx, Bin1D biny) -> bool
        bool Line::contains(const Bin1D &binx, const Bin1D &biny) const

        Returns true if area defined by two bins is inside or on border of polygon (more precisely, if mid point of two bins satisfy this condition). 

        """
        return _libBornAgainCore.Line_contains(self, *args)
    __swig_destroy__ = _libBornAgainCore.delete_Line

# Register Line in _libBornAgainCore:
_libBornAgainCore.Line_swigregister(Line)

class VerticalLine(IShape2D):
    r"""


    An infinite vertical line.

    C++ includes: Line.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x):
        r"""
        __init__(VerticalLine self, double x) -> VerticalLine
        VerticalLine::VerticalLine(double x)

        Parameters:
        -----------

        x: 
        The value at which it crosses x-axes 

        """
        _libBornAgainCore.VerticalLine_swiginit(self, _libBornAgainCore.new_VerticalLine(x))

    def clone(self):
        r"""
        clone(VerticalLine self) -> VerticalLine
        VerticalLine* VerticalLine::clone() const

        """
        return _libBornAgainCore.VerticalLine_clone(self)

    def contains(self, *args):
        r"""
        contains(VerticalLine self, double x, double y) -> bool
        contains(VerticalLine self, Bin1D binx, Bin1D biny) -> bool
        bool VerticalLine::contains(const Bin1D &binx, const Bin1D &biny) const

        Returns true if area defined by two bins is inside or on border of polygon (more precisely, if mid point of two bins satisfy this condition). 

        """
        return _libBornAgainCore.VerticalLine_contains(self, *args)

    def getXpos(self):
        r"""
        getXpos(VerticalLine self) -> double
        double VerticalLine::getXpos() const

        """
        return _libBornAgainCore.VerticalLine_getXpos(self)
    __swig_destroy__ = _libBornAgainCore.delete_VerticalLine

# Register VerticalLine in _libBornAgainCore:
_libBornAgainCore.VerticalLine_swigregister(VerticalLine)

class HorizontalLine(IShape2D):
    r"""


    An infinite horizontal line.

    C++ includes: Line.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, y):
        r"""
        __init__(HorizontalLine self, double y) -> HorizontalLine
        HorizontalLine::HorizontalLine(double y)

        Parameters:
        -----------

        y: 
        The value at which it crosses y-axes 

        """
        _libBornAgainCore.HorizontalLine_swiginit(self, _libBornAgainCore.new_HorizontalLine(y))

    def clone(self):
        r"""
        clone(HorizontalLine self) -> HorizontalLine
        HorizontalLine* HorizontalLine::clone() const

        """
        return _libBornAgainCore.HorizontalLine_clone(self)

    def contains(self, *args):
        r"""
        contains(HorizontalLine self, double x, double y) -> bool
        contains(HorizontalLine self, Bin1D binx, Bin1D biny) -> bool
        bool HorizontalLine::contains(const Bin1D &binx, const Bin1D &biny) const

        Returns true if area defined by two bins is inside or on border of polygon (more precisely, if mid point of two bins satisfy this condition). 

        """
        return _libBornAgainCore.HorizontalLine_contains(self, *args)

    def getYpos(self):
        r"""
        getYpos(HorizontalLine self) -> double
        double HorizontalLine::getYpos() const

        """
        return _libBornAgainCore.HorizontalLine_getYpos(self)
    __swig_destroy__ = _libBornAgainCore.delete_HorizontalLine

# Register HorizontalLine in _libBornAgainCore:
_libBornAgainCore.HorizontalLine_swigregister(HorizontalLine)

class Polygon(IShape2D):
    r"""


    A polygon in 2D space.  Polygon defined by two arrays with x and y coordinates of points. Sizes of arrays should coincide. If polygon is unclosed (the last point doesn't repeat the first one), it will be closed automatically.

    C++ includes: Polygon.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Polygon self, vdouble1d_t x, vdouble1d_t y) -> Polygon
        __init__(Polygon self, vdouble2d_t points) -> Polygon
        __init__(Polygon self, PolygonPrivate const * d) -> Polygon
        Polygon::Polygon(const PolygonPrivate *d)

        """
        _libBornAgainCore.Polygon_swiginit(self, _libBornAgainCore.new_Polygon(*args))
    __swig_destroy__ = _libBornAgainCore.delete_Polygon

    def clone(self):
        r"""
        clone(Polygon self) -> Polygon
        virtual Polygon* Polygon::clone() const

        """
        return _libBornAgainCore.Polygon_clone(self)

    def contains(self, *args):
        r"""
        contains(Polygon self, double x, double y) -> bool
        contains(Polygon self, Bin1D binx, Bin1D biny) -> bool
        bool Polygon::contains(const Bin1D &binx, const Bin1D &biny) const

        Returns true if area defined by two bins is inside or on border of polygon (more precisely, if mid point of two bins satisfy this condition). 

        """
        return _libBornAgainCore.Polygon_contains(self, *args)

    def getArea(self):
        r"""
        getArea(Polygon self) -> double
        double Polygon::getArea() const

        """
        return _libBornAgainCore.Polygon_getArea(self)

    def getPoints(self, xpos, ypos):
        r"""
        getPoints(Polygon self, vdouble1d_t xpos, vdouble1d_t ypos)
        void Polygon::getPoints(std::vector< double > &xpos, std::vector< double > &ypos) const

        """
        return _libBornAgainCore.Polygon_getPoints(self, xpos, ypos)

# Register Polygon in _libBornAgainCore:
_libBornAgainCore.Polygon_swigregister(Polygon)

class Rectangle(IShape2D):
    r"""


    The rectangle shape having its axis aligned to the (non-rotated) coordinate system.

    C++ includes: Rectangle.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, xlow, ylow, xup, yup):
        r"""
        __init__(Rectangle self, double xlow, double ylow, double xup, double yup) -> Rectangle
        Rectangle::Rectangle(double xlow, double ylow, double xup, double yup)

        Parameters:
        -----------

        xlow: 
        x-coordinate of lower left corner

        ylow: 
        y-coordinate of lower left corner

        xup: 
        x-coordinate of upper right corner

        yup: 
        y-coordinate of upper right corner 

        """
        _libBornAgainCore.Rectangle_swiginit(self, _libBornAgainCore.new_Rectangle(xlow, ylow, xup, yup))

    def clone(self):
        r"""
        clone(Rectangle self) -> Rectangle
        Rectangle* Rectangle::clone() const

        """
        return _libBornAgainCore.Rectangle_clone(self)

    def contains(self, *args):
        r"""
        contains(Rectangle self, double x, double y) -> bool
        contains(Rectangle self, Bin1D binx, Bin1D biny) -> bool
        bool Rectangle::contains(const Bin1D &binx, const Bin1D &biny) const

        Returns true if area defined by two bins is inside or on border of polygon (more precisely, if mid point of two bins satisfy this condition). 

        """
        return _libBornAgainCore.Rectangle_contains(self, *args)

    def getArea(self):
        r"""
        getArea(Rectangle self) -> double
        double Rectangle::getArea() const

        """
        return _libBornAgainCore.Rectangle_getArea(self)

    def getXlow(self):
        r"""
        getXlow(Rectangle self) -> double
        double Rectangle::getXlow() const

        """
        return _libBornAgainCore.Rectangle_getXlow(self)

    def getYlow(self):
        r"""
        getYlow(Rectangle self) -> double
        double Rectangle::getYlow() const

        """
        return _libBornAgainCore.Rectangle_getYlow(self)

    def getXup(self):
        r"""
        getXup(Rectangle self) -> double
        double Rectangle::getXup() const

        """
        return _libBornAgainCore.Rectangle_getXup(self)

    def getYup(self):
        r"""
        getYup(Rectangle self) -> double
        double Rectangle::getYup() const

        """
        return _libBornAgainCore.Rectangle_getYup(self)
    __swig_destroy__ = _libBornAgainCore.delete_Rectangle

# Register Rectangle in _libBornAgainCore:
_libBornAgainCore.Rectangle_swigregister(Rectangle)

class IParameterized(object):
    r"""


    Manages a local parameter pool, and a tree of child pools.

    C++ includes: IParameterized.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(IParameterized self, std::string const & name="") -> IParameterized
        __init__(IParameterized self, IParameterized other) -> IParameterized
        IParameterized::IParameterized(const IParameterized &other)

        """
        if self.__class__ == IParameterized:
            _self = None
        else:
            _self = self
        _libBornAgainCore.IParameterized_swiginit(self, _libBornAgainCore.new_IParameterized(_self, *args))
    __swig_destroy__ = _libBornAgainCore.delete_IParameterized

    def parameterPool(self):
        r"""
        parameterPool(IParameterized self) -> ParameterPool
        ParameterPool* IParameterized::parameterPool() const

        Returns pointer to the parameter pool. 

        """
        return _libBornAgainCore.IParameterized_parameterPool(self)

    def createParameterTree(self):
        r"""
        createParameterTree(IParameterized self) -> ParameterPool
        ParameterPool * IParameterized::createParameterTree() const

        Creates new parameter pool, with all local parameters and those of its children. 

        """
        return _libBornAgainCore.IParameterized_createParameterTree(self)

    def parametersToString(self):
        r"""
        parametersToString(IParameterized self) -> std::string
        std::string IParameterized::parametersToString() const

        Returns multiline string representing available parameters. 

        """
        return _libBornAgainCore.IParameterized_parametersToString(self)

    def registerParameter(self, name, parpointer):
        r"""
        registerParameter(IParameterized self, std::string const & name, double * parpointer) -> RealParameter
        RealParameter & IParameterized::registerParameter(const std::string &name, double *parpointer)

        """
        return _libBornAgainCore.IParameterized_registerParameter(self, name, parpointer)

    def registerVector(self, *args):
        r"""
        registerVector(IParameterized self, std::string const & base_name, kvector_t p_vec, std::string const & units="nm")
        void IParameterized::registerVector(const std::string &base_name, kvector_t *p_vec, const std::string &units="nm")

        """
        return _libBornAgainCore.IParameterized_registerVector(self, *args)

    def setParameterValue(self, name, value):
        r"""
        setParameterValue(IParameterized self, std::string const & name, double value)
        void IParameterized::setParameterValue(const std::string &name, double value)

        """
        return _libBornAgainCore.IParameterized_setParameterValue(self, name, value)

    def setVectorValue(self, base_name, value):
        r"""
        setVectorValue(IParameterized self, std::string const & base_name, kvector_t value)
        void IParameterized::setVectorValue(const std::string &base_name, kvector_t value)

        """
        return _libBornAgainCore.IParameterized_setVectorValue(self, base_name, value)

    def parameter(self, name):
        r"""
        parameter(IParameterized self, std::string const & name) -> RealParameter
        RealParameter * IParameterized::parameter(const std::string &name) const

        Returns parameter with given 'name'. 

        """
        return _libBornAgainCore.IParameterized_parameter(self, name)

    def onChange(self):
        r"""
        onChange(IParameterized self)
        virtual void IParameterized::onChange()

        Action to be taken in inherited class when a parameter has changed. 

        """
        return _libBornAgainCore.IParameterized_onChange(self)

    def removeParameter(self, name):
        r"""
        removeParameter(IParameterized self, std::string const & name)
        void IParameterized::removeParameter(const std::string &name)

        """
        return _libBornAgainCore.IParameterized_removeParameter(self, name)

    def removeVector(self, base_name):
        r"""
        removeVector(IParameterized self, std::string const & base_name)
        void IParameterized::removeVector(const std::string &base_name)

        """
        return _libBornAgainCore.IParameterized_removeVector(self, base_name)

    @staticmethod
    def XComponentName(base_name):
        r"""XComponentName(std::string const & base_name) -> std::string"""
        return _libBornAgainCore.IParameterized_XComponentName(base_name)

    @staticmethod
    def YComponentName(base_name):
        r"""YComponentName(std::string const & base_name) -> std::string"""
        return _libBornAgainCore.IParameterized_YComponentName(base_name)

    @staticmethod
    def ZComponentName(base_name):
        r"""ZComponentName(std::string const & base_name) -> std::string"""
        return _libBornAgainCore.IParameterized_ZComponentName(base_name)

    def setName(self, name):
        r"""
        setName(IParameterized self, std::string const & name)
        void IParameterized::setName(const std::string &name)

        """
        return _libBornAgainCore.IParameterized_setName(self, name)

    def getName(self):
        r"""
        getName(IParameterized self) -> std::string const &
        const std::string& IParameterized::getName() const

        """
        return _libBornAgainCore.IParameterized_getName(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IParameterized(self)
        return weakref.proxy(self)

# Register IParameterized in _libBornAgainCore:
_libBornAgainCore.IParameterized_swigregister(IParameterized)

def IParameterized_XComponentName(base_name):
    r"""IParameterized_XComponentName(std::string const & base_name) -> std::string"""
    return _libBornAgainCore.IParameterized_XComponentName(base_name)

def IParameterized_YComponentName(base_name):
    r"""IParameterized_YComponentName(std::string const & base_name) -> std::string"""
    return _libBornAgainCore.IParameterized_YComponentName(base_name)

def IParameterized_ZComponentName(base_name):
    r"""IParameterized_ZComponentName(std::string const & base_name) -> std::string"""
    return _libBornAgainCore.IParameterized_ZComponentName(base_name)

class ParaMeta(object):
    r"""


    Metadata of one model parameter.

    C++ includes: INode.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_libBornAgainCore.ParaMeta_name_get, _libBornAgainCore.ParaMeta_name_set, doc=r"""name : std::string""")
    unit = property(_libBornAgainCore.ParaMeta_unit_get, _libBornAgainCore.ParaMeta_unit_set, doc=r"""unit : std::string""")
    tooltip = property(_libBornAgainCore.ParaMeta_tooltip_get, _libBornAgainCore.ParaMeta_tooltip_set, doc=r"""tooltip : std::string""")
    vMin = property(_libBornAgainCore.ParaMeta_vMin_get, _libBornAgainCore.ParaMeta_vMin_set, doc=r"""vMin : double""")
    vMax = property(_libBornAgainCore.ParaMeta_vMax_get, _libBornAgainCore.ParaMeta_vMax_set, doc=r"""vMax : double""")
    vDefault = property(_libBornAgainCore.ParaMeta_vDefault_get, _libBornAgainCore.ParaMeta_vDefault_set, doc=r"""vDefault : double""")

    def __init__(self):
        r"""
        __init__(ParaMeta self) -> ParaMeta


        Metadata of one model parameter.

        C++ includes: INode.h

        """
        _libBornAgainCore.ParaMeta_swiginit(self, _libBornAgainCore.new_ParaMeta())
    __swig_destroy__ = _libBornAgainCore.delete_ParaMeta

# Register ParaMeta in _libBornAgainCore:
_libBornAgainCore.ParaMeta_swigregister(ParaMeta)
INF = cvar.INF

class NodeMeta(object):
    r"""


    Metadata of one model node.

    C++ includes: INode.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    className = property(_libBornAgainCore.NodeMeta_className_get, _libBornAgainCore.NodeMeta_className_set, doc=r"""className : std::string""")
    tooltip = property(_libBornAgainCore.NodeMeta_tooltip_get, _libBornAgainCore.NodeMeta_tooltip_set, doc=r"""tooltip : std::string""")
    paraMeta = property(_libBornAgainCore.NodeMeta_paraMeta_get, _libBornAgainCore.NodeMeta_paraMeta_set, doc=r"""paraMeta : std::vector<(ParaMeta,std::allocator<(ParaMeta)>)>""")

    def __init__(self):
        r"""
        __init__(NodeMeta self) -> NodeMeta


        Metadata of one model node.

        C++ includes: INode.h

        """
        _libBornAgainCore.NodeMeta_swiginit(self, _libBornAgainCore.new_NodeMeta())
    __swig_destroy__ = _libBornAgainCore.delete_NodeMeta

# Register NodeMeta in _libBornAgainCore:
_libBornAgainCore.NodeMeta_swigregister(NodeMeta)


def nodeMetaUnion(base, other):
    r"""
    nodeMetaUnion(std::vector< ParaMeta,std::allocator< ParaMeta > > const & base, NodeMeta other) -> NodeMeta
    NodeMeta nodeMetaUnion(const std::vector< ParaMeta > &base, const NodeMeta &other)

    """
    return _libBornAgainCore.nodeMetaUnion(base, other)
class INode(IParameterized):
    r"""


    Base class for tree-like structures containing parameterized objects.

    C++ includes: INode.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(INode self) -> INode
        __init__(INode self, NodeMeta meta, vdouble1d_t PValues) -> INode
        INode::INode(const NodeMeta &meta, const std::vector< double > &PValues)

        """
        if self.__class__ == INode:
            _self = None
        else:
            _self = self
        _libBornAgainCore.INode_swiginit(self, _libBornAgainCore.new_INode(_self, *args))
    __swig_destroy__ = _libBornAgainCore.delete_INode

    def accept(self, visitor):
        r"""
        accept(INode self, INodeVisitor visitor)
        virtual void INode::accept(INodeVisitor *visitor) const =0

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.INode_accept(self, visitor)

    def treeToString(self):
        r"""
        treeToString(INode self) -> std::string
        std::string INode::treeToString() const

        Returns multiline string representing tree structure below the node. 

        """
        return _libBornAgainCore.INode_treeToString(self)

    def registerChild(self, node):
        r"""
        registerChild(INode self, INode node)
        void INode::registerChild(INode *node)

        """
        return _libBornAgainCore.INode_registerChild(self, node)

    def getChildren(self):
        r"""
        getChildren(INode self) -> swig_dummy_type_const_inode_vector
        std::vector< const INode * > INode::getChildren() const

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.INode_getChildren(self)

    def setParent(self, newParent):
        r"""
        setParent(INode self, INode newParent)
        void INode::setParent(const INode *newParent)

        """
        return _libBornAgainCore.INode_setParent(self, newParent)

    def parent(self, *args):
        r"""
        parent(INode self) -> INode
        parent(INode self) -> INode
        INode * INode::parent()

        """
        return _libBornAgainCore.INode_parent(self, *args)

    def copyNumber(self, node):
        r"""
        copyNumber(INode self, INode node) -> int
        int INode::copyNumber(const INode *node) const

        Returns copyNumber of child, which takes into account existence of children with same name. 

        """
        return _libBornAgainCore.INode_copyNumber(self, node)

    def displayName(self):
        r"""
        displayName(INode self) -> std::string
        std::string INode::displayName() const

        Returns display name, composed from the name of node and it's copy number. 

        """
        return _libBornAgainCore.INode_displayName(self)

    def createParameterTree(self):
        r"""
        createParameterTree(INode self) -> ParameterPool
        ParameterPool * INode::createParameterTree() const

        Creates new parameter pool, with all local parameters and those of its children. 

        """
        return _libBornAgainCore.INode_createParameterTree(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_INode(self)
        return weakref.proxy(self)

# Register INode in _libBornAgainCore:
_libBornAgainCore.INode_swigregister(INode)

class INodeVisitor(object):
    r"""


    From visitor pattern to achieve double dispatch.

    Visitor interface to visit  ISample objects.

    C++ includes: INodeVisitor.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(INodeVisitor self) -> INodeVisitor
        INodeVisitor::INodeVisitor()

        """
        _libBornAgainCore.INodeVisitor_swiginit(self, _libBornAgainCore.new_INodeVisitor())
    __swig_destroy__ = _libBornAgainCore.delete_INodeVisitor

    def visit(self, *args):
        r"""
        visit(INodeVisitor self, BasicLattice arg2)
        visit(INodeVisitor self, Beam arg2)
        visit(INodeVisitor self, ConstantBackground arg2)
        visit(INodeVisitor self, ConvolutionDetectorResolution const * arg2)
        visit(INodeVisitor self, Crystal arg2)
        visit(INodeVisitor self, DistributionCosine arg2)
        visit(INodeVisitor self, DistributionGate arg2)
        visit(INodeVisitor self, DistributionGaussian arg2)
        visit(INodeVisitor self, DistributionLogNormal arg2)
        visit(INodeVisitor self, DistributionLorentz arg2)
        visit(INodeVisitor self, DistributionTrapezoid arg2)
        visit(INodeVisitor self, FootprintGauss arg2)
        visit(INodeVisitor self, FootprintSquare arg2)
        visit(INodeVisitor self, FormFactorAnisoPyramid arg2)
        visit(INodeVisitor self, FormFactorBarGauss const * arg2)
        visit(INodeVisitor self, FormFactorBarLorentz const * arg2)
        visit(INodeVisitor self, FormFactorBox arg2)
        visit(INodeVisitor self, FormFactorCantellatedCube arg2)
        visit(INodeVisitor self, FormFactorCone arg2)
        visit(INodeVisitor self, FormFactorCone6 arg2)
        visit(INodeVisitor self, FormFactorCoreShell const * arg2)
        visit(INodeVisitor self, FormFactorCrystal arg2)
        visit(INodeVisitor self, FormFactorCuboctahedron arg2)
        visit(INodeVisitor self, FormFactorCylinder arg2)
        visit(INodeVisitor self, FormFactorDWBA const * arg2)
        visit(INodeVisitor self, FormFactorDWBAPol const * arg2)
        visit(INodeVisitor self, FormFactorDecoratorMaterial const * arg2)
        visit(INodeVisitor self, FormFactorDecoratorPositionFactor const * arg2)
        visit(INodeVisitor self, FormFactorDecoratorRotation const * arg2)
        visit(INodeVisitor self, FormFactorDodecahedron arg2)
        visit(INodeVisitor self, FormFactorDot arg2)
        visit(INodeVisitor self, FormFactorEllipsoidalCylinder arg2)
        visit(INodeVisitor self, FormFactorFullSphere arg2)
        visit(INodeVisitor self, FormFactorFullSpheroid arg2)
        visit(INodeVisitor self, FormFactorGaussSphere arg2)
        visit(INodeVisitor self, FormFactorHemiEllipsoid arg2)
        visit(INodeVisitor self, FormFactorHollowSphere arg2)
        visit(INodeVisitor self, FormFactorIcosahedron arg2)
        visit(INodeVisitor self, FormFactorLongBoxGauss arg2)
        visit(INodeVisitor self, FormFactorLongBoxLorentz arg2)
        visit(INodeVisitor self, FormFactorPrism3 arg2)
        visit(INodeVisitor self, FormFactorPrism6 arg2)
        visit(INodeVisitor self, FormFactorPyramid arg2)
        visit(INodeVisitor self, FormFactorCosineRippleBox arg2)
        visit(INodeVisitor self, FormFactorCosineRippleGauss arg2)
        visit(INodeVisitor self, FormFactorCosineRippleLorentz arg2)
        visit(INodeVisitor self, FormFactorSawtoothRippleBox arg2)
        visit(INodeVisitor self, FormFactorSawtoothRippleGauss arg2)
        visit(INodeVisitor self, FormFactorSawtoothRippleLorentz arg2)
        visit(INodeVisitor self, FormFactorSphereGaussianRadius arg2)
        visit(INodeVisitor self, FormFactorSphereLogNormalRadius arg2)
        visit(INodeVisitor self, FormFactorTetrahedron arg2)
        visit(INodeVisitor self, FormFactorTruncatedCube arg2)
        visit(INodeVisitor self, FormFactorTruncatedSphere arg2)
        visit(INodeVisitor self, FormFactorTruncatedSpheroid arg2)
        visit(INodeVisitor self, FormFactorWeighted arg2)
        visit(INodeVisitor self, FTDecayFunction1DCauchy arg2)
        visit(INodeVisitor self, FTDecayFunction1DGauss arg2)
        visit(INodeVisitor self, FTDecayFunction1DTriangle arg2)
        visit(INodeVisitor self, FTDecayFunction1DVoigt arg2)
        visit(INodeVisitor self, FTDecayFunction2DCauchy arg2)
        visit(INodeVisitor self, FTDecayFunction2DGauss arg2)
        visit(INodeVisitor self, FTDecayFunction2DVoigt arg2)
        visit(INodeVisitor self, FTDistribution1DCauchy arg2)
        visit(INodeVisitor self, FTDistribution1DCosine arg2)
        visit(INodeVisitor self, FTDistribution1DGate arg2)
        visit(INodeVisitor self, FTDistribution1DGauss arg2)
        visit(INodeVisitor self, FTDistribution1DTriangle arg2)
        visit(INodeVisitor self, FTDistribution1DVoigt arg2)
        visit(INodeVisitor self, FTDistribution2DCauchy arg2)
        visit(INodeVisitor self, FTDistribution2DCone arg2)
        visit(INodeVisitor self, FTDistribution2DGate arg2)
        visit(INodeVisitor self, FTDistribution2DGauss arg2)
        visit(INodeVisitor self, FTDistribution2DVoigt arg2)
        visit(INodeVisitor self, GISASSimulation arg2)
        visit(INodeVisitor self, HexagonalLattice arg2)
        visit(INodeVisitor self, IAbstractParticle arg2)
        visit(INodeVisitor self, IClusteredParticles arg2)
        visit(INodeVisitor self, IdentityRotation arg2)
        visit(INodeVisitor self, IFormFactor arg2)
        visit(INodeVisitor self, IFormFactorBorn arg2)
        visit(INodeVisitor self, IFormFactorDecorator arg2)
        visit(INodeVisitor self, IInterferenceFunction arg2)
        visit(INodeVisitor self, ILayout arg2)
        visit(INodeVisitor self, INode arg2)
        visit(INodeVisitor self, Instrument arg2)
        visit(INodeVisitor self, InterferenceFunction1DLattice arg2)
        visit(INodeVisitor self, InterferenceFunction2DLattice arg2)
        visit(INodeVisitor self, InterferenceFunction2DParaCrystal arg2)
        visit(INodeVisitor self, InterferenceFunction2DSuperLattice arg2)
        visit(INodeVisitor self, InterferenceFunction3DLattice arg2)
        visit(INodeVisitor self, InterferenceFunctionFinite2DLattice arg2)
        visit(INodeVisitor self, InterferenceFunctionFinite3DLattice arg2)
        visit(INodeVisitor self, InterferenceFunctionHardDisk arg2)
        visit(INodeVisitor self, InterferenceFunctionRadialParaCrystal arg2)
        visit(INodeVisitor self, InterferenceFunctionTwin arg2)
        visit(INodeVisitor self, InterferenceFunctionNone arg2)
        visit(INodeVisitor self, IParticle arg2)
        visit(INodeVisitor self, IPeakShape arg2)
        visit(INodeVisitor self, IRotation arg2)
        visit(INodeVisitor self, ISample arg2)
        visit(INodeVisitor self, IsGISAXSDetector arg2)
        visit(INodeVisitor self, Layer arg2)
        visit(INodeVisitor self, LayerInterface const * arg2)
        visit(INodeVisitor self, LayerRoughness arg2)
        visit(INodeVisitor self, MesoCrystal arg2)
        visit(INodeVisitor self, MultiLayer arg2)
        visit(INodeVisitor self, OffSpecSimulation arg2)
        visit(INodeVisitor self, Particle arg2)
        visit(INodeVisitor self, ParticleComposition arg2)
        visit(INodeVisitor self, ParticleCoreShell arg2)
        visit(INodeVisitor self, ParticleDistribution arg2)
        visit(INodeVisitor self, ParticleLayout arg2)
        visit(INodeVisitor self, PoissonNoiseBackground arg2)
        visit(INodeVisitor self, RectangularDetector arg2)
        visit(INodeVisitor self, ResolutionFunction2DGaussian arg2)
        visit(INodeVisitor self, RotationEuler arg2)
        visit(INodeVisitor self, RotationX arg2)
        visit(INodeVisitor self, RotationY arg2)
        visit(INodeVisitor self, RotationZ arg2)
        visit(INodeVisitor self, SpecularDetector1D const * arg2)
        visit(INodeVisitor self, SpecularSimulation arg2)
        visit(INodeVisitor self, SphericalDetector arg2)
        visit(INodeVisitor self, SquareLattice arg2)
        virtual void INodeVisitor::visit(const SquareLattice *)

        """
        return _libBornAgainCore.INodeVisitor_visit(self, *args)

    def depth(self):
        r"""
        depth(INodeVisitor self) -> int
        int INodeVisitor::depth() const

        Returns depth of the visitor in the composite hierarchy. 

        """
        return _libBornAgainCore.INodeVisitor_depth(self)

    def setDepth(self, depth):
        r"""
        setDepth(INodeVisitor self, int depth)
        void INodeVisitor::setDepth(int depth)

        Sets depth of the visitor in the composite hierarchy. 

        """
        return _libBornAgainCore.INodeVisitor_setDepth(self, depth)

# Register INodeVisitor in _libBornAgainCore:
_libBornAgainCore.INodeVisitor_swigregister(INodeVisitor)


def VisitNodesPreorder(node, visitor):
    r"""
    VisitNodesPreorder(INode node, INodeVisitor visitor)
    BA_CORE_API_ void VisitNodesPreorder(const INode &node, INodeVisitor &visitor)

    """
    return _libBornAgainCore.VisitNodesPreorder(node, visitor)

def VisitNodesPostorder(node, visitor):
    r"""
    VisitNodesPostorder(INode node, INodeVisitor visitor)
    BA_CORE_API_ void VisitNodesPostorder(const INode &node, INodeVisitor &visitor)

    """
    return _libBornAgainCore.VisitNodesPostorder(node, visitor)
class RealParameter(IParameterReal):
    r"""


    Wraps a parameter of type double. In addition to name and on-change callback held by the parent class  IParameter, this class holds Limits, Attributes (currently only fixed or not), and a  Unit.

    C++ includes: RealParameter.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RealParameter self, std::string const & name, double * par, std::string const & parent_name="", std::function< void () > const & onChange=std::function< void () >(), RealLimits limits=RealLimits::limitless(), Attributes attr=Attributes::free()) -> RealParameter
        RealParameter::RealParameter(const std::string &name, double *par, const std::string &parent_name="", const std::function< void()> &onChange=std::function< void()>(), const RealLimits &limits=RealLimits::limitless(), const Attributes &attr=Attributes::free())

        """
        _libBornAgainCore.RealParameter_swiginit(self, _libBornAgainCore.new_RealParameter(*args))
    __swig_destroy__ = _libBornAgainCore.delete_RealParameter

    def clone(self, *args):
        r"""
        clone(RealParameter self, std::string const & new_name="") -> RealParameter
        RealParameter * RealParameter::clone(const std::string &new_name="") const

        """
        return _libBornAgainCore.RealParameter_clone(self, *args)

    def setValue(self, value):
        r"""
        setValue(RealParameter self, double value)
        void RealParameter::setValue(double value)

        Sets value of wrapped parameter and emit signal. 

        """
        return _libBornAgainCore.RealParameter_setValue(self, value)

    def value(self):
        r"""
        value(RealParameter self) -> double
        double RealParameter::value() const

        Returns value of wrapped parameter. 

        """
        return _libBornAgainCore.RealParameter_value(self)

    def setLimits(self, limits):
        r"""
        setLimits(RealParameter self, RealLimits limits) -> RealParameter
        RealParameter & RealParameter::setLimits(const RealLimits &limits)

        """
        return _libBornAgainCore.RealParameter_setLimits(self, limits)

    def limits(self):
        r"""
        limits(RealParameter self) -> RealLimits
        RealLimits RealParameter::limits() const

        """
        return _libBornAgainCore.RealParameter_limits(self)

    def setLimited(self, lower, upper):
        r"""
        setLimited(RealParameter self, double lower, double upper) -> RealParameter
        RealParameter & RealParameter::setLimited(double lower, double upper)

        """
        return _libBornAgainCore.RealParameter_setLimited(self, lower, upper)

    def setPositive(self):
        r"""
        setPositive(RealParameter self) -> RealParameter
        RealParameter & RealParameter::setPositive()

        """
        return _libBornAgainCore.RealParameter_setPositive(self)

    def setNonnegative(self):
        r"""
        setNonnegative(RealParameter self) -> RealParameter
        RealParameter & RealParameter::setNonnegative()

        """
        return _libBornAgainCore.RealParameter_setNonnegative(self)

    def setUnit(self, name):
        r"""
        setUnit(RealParameter self, std::string const & name) -> RealParameter
        RealParameter & RealParameter::setUnit(const std::string &name)

        """
        return _libBornAgainCore.RealParameter_setUnit(self, name)

    def unit(self):
        r"""
        unit(RealParameter self) -> std::string
        std::string RealParameter::unit() const

        """
        return _libBornAgainCore.RealParameter_unit(self)

# Register RealParameter in _libBornAgainCore:
_libBornAgainCore.RealParameter_swigregister(RealParameter)

class IDistribution1D(ICloneable, INode):
    r"""


    Interface for one-dimensional distributions.

    C++ includes: Distributions.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        r"""
        clone(IDistribution1D self) -> IDistribution1D
        virtual IDistribution1D* IDistribution1D::clone() const =0

        """
        return _libBornAgainCore.IDistribution1D_clone(self)

    def probabilityDensity(self, x):
        r"""
        probabilityDensity(IDistribution1D self, double x) -> double
        virtual double IDistribution1D::probabilityDensity(double x) const =0

        Returns the distribution-specific probability density for value x. 

        """
        return _libBornAgainCore.IDistribution1D_probabilityDensity(self, x)

    def getMean(self):
        r"""
        getMean(IDistribution1D self) -> double
        virtual double IDistribution1D::getMean() const =0

        Returns the distribution-specific mean. 

        """
        return _libBornAgainCore.IDistribution1D_getMean(self)

    def equidistantSamples(self, *args):
        r"""
        equidistantSamples(IDistribution1D self, size_t nbr_samples, double sigma_factor=0., RealLimits limits=RealLimits()) -> ParameterSampleVector
        std::vector< ParameterSample > IDistribution1D::equidistantSamples(size_t nbr_samples, double sigma_factor=0., const RealLimits &limits=RealLimits()) const

        Returns equidistant samples, using intrinsic parameters, weighted with  probabilityDensity(). 

        """
        return _libBornAgainCore.IDistribution1D_equidistantSamples(self, *args)

    def equidistantSamplesInRange(self, nbr_samples, xmin, xmax):
        r"""
        equidistantSamplesInRange(IDistribution1D self, size_t nbr_samples, double xmin, double xmax) -> ParameterSampleVector
        std::vector< ParameterSample > IDistribution1D::equidistantSamplesInRange(size_t nbr_samples, double xmin, double xmax) const

        Returns equidistant samples from xmin to xmax, weighted with  probabilityDensity(). 

        """
        return _libBornAgainCore.IDistribution1D_equidistantSamplesInRange(self, nbr_samples, xmin, xmax)

    def equidistantPoints(self, *args):
        r"""
        equidistantPoints(IDistribution1D self, size_t nbr_samples, double sigma_factor, RealLimits limits=RealLimits()) -> vdouble1d_t
        virtual std::vector<double> IDistribution1D::equidistantPoints(size_t nbr_samples, double sigma_factor, const RealLimits &limits=RealLimits()) const =0

        Returns equidistant interpolation points, with range computed in distribution-specific way from mean and width parameter, taking into account limits and sigma_factor. 

        """
        return _libBornAgainCore.IDistribution1D_equidistantPoints(self, *args)

    def equidistantPointsInRange(self, nbr_samples, xmin, xmax):
        r"""
        equidistantPointsInRange(IDistribution1D self, size_t nbr_samples, double xmin, double xmax) -> vdouble1d_t
        std::vector< double > IDistribution1D::equidistantPointsInRange(size_t nbr_samples, double xmin, double xmax) const

        Returns equidistant interpolation points from xmin to xmax. 

        """
        return _libBornAgainCore.IDistribution1D_equidistantPointsInRange(self, nbr_samples, xmin, xmax)

    def isDelta(self):
        r"""
        isDelta(IDistribution1D self) -> bool
        virtual bool IDistribution1D::isDelta() const =0

        Returns true if the distribution is in the limit case of a Dirac delta distribution. 

        """
        return _libBornAgainCore.IDistribution1D_isDelta(self)

    def setUnits(self, units):
        r"""
        setUnits(IDistribution1D self, std::string const & units)
        void IDistribution1D::setUnits(const std::string &units)

        Sets distribution units. 

        """
        return _libBornAgainCore.IDistribution1D_setUnits(self, units)
    __swig_destroy__ = _libBornAgainCore.delete_IDistribution1D

# Register IDistribution1D in _libBornAgainCore:
_libBornAgainCore.IDistribution1D_swigregister(IDistribution1D)

class DistributionGate(IDistribution1D):
    r"""


    Uniform distribution function with half width hwhm.

    C++ includes: Distributions.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DistributionGate self, vdouble1d_t P) -> DistributionGate
        __init__(DistributionGate self, double min, double max) -> DistributionGate
        __init__(DistributionGate self) -> DistributionGate
        DistributionGate::DistributionGate()

        """
        _libBornAgainCore.DistributionGate_swiginit(self, _libBornAgainCore.new_DistributionGate(*args))

    def clone(self):
        r"""
        clone(DistributionGate self) -> DistributionGate
        DistributionGate* DistributionGate::clone() const final

        """
        return _libBornAgainCore.DistributionGate_clone(self)

    def probabilityDensity(self, x):
        r"""
        probabilityDensity(DistributionGate self, double x) -> double
        double DistributionGate::probabilityDensity(double x) const final

        Returns the distribution-specific probability density for value x. 

        """
        return _libBornAgainCore.DistributionGate_probabilityDensity(self, x)

    def getMean(self):
        r"""
        getMean(DistributionGate self) -> double
        double DistributionGate::getMean() const final

        Returns the distribution-specific mean. 

        """
        return _libBornAgainCore.DistributionGate_getMean(self)

    def getMin(self):
        r"""
        getMin(DistributionGate self) -> double
        double DistributionGate::getMin() const

        """
        return _libBornAgainCore.DistributionGate_getMin(self)

    def getMax(self):
        r"""
        getMax(DistributionGate self) -> double
        double DistributionGate::getMax() const

        """
        return _libBornAgainCore.DistributionGate_getMax(self)

    def equidistantPoints(self, *args):
        r"""
        equidistantPoints(DistributionGate self, size_t nbr_samples, double sigma_factor, RealLimits limits=RealLimits()) -> vdouble1d_t
        std::vector< double > DistributionGate::equidistantPoints(size_t nbr_samples, double sigma_factor, const RealLimits &limits=RealLimits()) const

        Returns list of sample values. 

        """
        return _libBornAgainCore.DistributionGate_equidistantPoints(self, *args)

    def isDelta(self):
        r"""
        isDelta(DistributionGate self) -> bool
        bool DistributionGate::isDelta() const final

        Returns true if the distribution is in the limit case of a Dirac delta distribution. 

        """
        return _libBornAgainCore.DistributionGate_isDelta(self)

    def accept(self, visitor):
        r"""
        accept(DistributionGate self, INodeVisitor visitor)
        void DistributionGate::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.DistributionGate_accept(self, visitor)
    __swig_destroy__ = _libBornAgainCore.delete_DistributionGate

# Register DistributionGate in _libBornAgainCore:
_libBornAgainCore.DistributionGate_swigregister(DistributionGate)

class DistributionLorentz(IDistribution1D):
    r"""


    Lorentz distribution with half width hwhm.

    C++ includes: Distributions.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DistributionLorentz self, vdouble1d_t P) -> DistributionLorentz
        __init__(DistributionLorentz self, double mean, double hwhm) -> DistributionLorentz
        __init__(DistributionLorentz self) -> DistributionLorentz
        DistributionLorentz::DistributionLorentz()

        """
        _libBornAgainCore.DistributionLorentz_swiginit(self, _libBornAgainCore.new_DistributionLorentz(*args))

    def clone(self):
        r"""
        clone(DistributionLorentz self) -> DistributionLorentz
        DistributionLorentz* DistributionLorentz::clone() const final

        """
        return _libBornAgainCore.DistributionLorentz_clone(self)

    def probabilityDensity(self, x):
        r"""
        probabilityDensity(DistributionLorentz self, double x) -> double
        double DistributionLorentz::probabilityDensity(double x) const final

        Returns the distribution-specific probability density for value x. 

        """
        return _libBornAgainCore.DistributionLorentz_probabilityDensity(self, x)

    def getMean(self):
        r"""
        getMean(DistributionLorentz self) -> double
        double DistributionLorentz::getMean() const final

        Returns the distribution-specific mean. 

        """
        return _libBornAgainCore.DistributionLorentz_getMean(self)

    def getHWHM(self):
        r"""
        getHWHM(DistributionLorentz self) -> double
        double DistributionLorentz::getHWHM() const

        """
        return _libBornAgainCore.DistributionLorentz_getHWHM(self)

    def equidistantPoints(self, *args):
        r"""
        equidistantPoints(DistributionLorentz self, size_t nbr_samples, double sigma_factor, RealLimits limits=RealLimits()) -> vdouble1d_t
        std::vector< double > DistributionLorentz::equidistantPoints(size_t nbr_samples, double sigma_factor, const RealLimits &limits=RealLimits()) const

        generate list of sample values 

        """
        return _libBornAgainCore.DistributionLorentz_equidistantPoints(self, *args)

    def isDelta(self):
        r"""
        isDelta(DistributionLorentz self) -> bool
        bool DistributionLorentz::isDelta() const final

        Returns true if the distribution is in the limit case of a Dirac delta distribution. 

        """
        return _libBornAgainCore.DistributionLorentz_isDelta(self)

    def accept(self, visitor):
        r"""
        accept(DistributionLorentz self, INodeVisitor visitor)
        void DistributionLorentz::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.DistributionLorentz_accept(self, visitor)
    __swig_destroy__ = _libBornAgainCore.delete_DistributionLorentz

# Register DistributionLorentz in _libBornAgainCore:
_libBornAgainCore.DistributionLorentz_swigregister(DistributionLorentz)

class DistributionGaussian(IDistribution1D):
    r"""


    Gaussian distribution with standard deviation std_dev.

    C++ includes: Distributions.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DistributionGaussian self, vdouble1d_t P) -> DistributionGaussian
        __init__(DistributionGaussian self, double mean, double std_dev) -> DistributionGaussian
        __init__(DistributionGaussian self) -> DistributionGaussian
        DistributionGaussian::DistributionGaussian()

        """
        _libBornAgainCore.DistributionGaussian_swiginit(self, _libBornAgainCore.new_DistributionGaussian(*args))

    def clone(self):
        r"""
        clone(DistributionGaussian self) -> DistributionGaussian
        DistributionGaussian* DistributionGaussian::clone() const final

        """
        return _libBornAgainCore.DistributionGaussian_clone(self)

    def probabilityDensity(self, x):
        r"""
        probabilityDensity(DistributionGaussian self, double x) -> double
        double DistributionGaussian::probabilityDensity(double x) const final

        Returns the distribution-specific probability density for value x. 

        """
        return _libBornAgainCore.DistributionGaussian_probabilityDensity(self, x)

    def getMean(self):
        r"""
        getMean(DistributionGaussian self) -> double
        double DistributionGaussian::getMean() const final

        Returns the distribution-specific mean. 

        """
        return _libBornAgainCore.DistributionGaussian_getMean(self)

    def getStdDev(self):
        r"""
        getStdDev(DistributionGaussian self) -> double
        double DistributionGaussian::getStdDev() const

        """
        return _libBornAgainCore.DistributionGaussian_getStdDev(self)

    def equidistantPoints(self, *args):
        r"""
        equidistantPoints(DistributionGaussian self, size_t nbr_samples, double sigma_factor, RealLimits limits=RealLimits()) -> vdouble1d_t
        std::vector< double > DistributionGaussian::equidistantPoints(size_t nbr_samples, double sigma_factor, const RealLimits &limits=RealLimits()) const

        generate list of sample values 

        """
        return _libBornAgainCore.DistributionGaussian_equidistantPoints(self, *args)

    def isDelta(self):
        r"""
        isDelta(DistributionGaussian self) -> bool
        bool DistributionGaussian::isDelta() const final

        Returns true if the distribution is in the limit case of a Dirac delta distribution. 

        """
        return _libBornAgainCore.DistributionGaussian_isDelta(self)

    def accept(self, visitor):
        r"""
        accept(DistributionGaussian self, INodeVisitor visitor)
        void DistributionGaussian::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.DistributionGaussian_accept(self, visitor)
    __swig_destroy__ = _libBornAgainCore.delete_DistributionGaussian

# Register DistributionGaussian in _libBornAgainCore:
_libBornAgainCore.DistributionGaussian_swigregister(DistributionGaussian)

class DistributionLogNormal(IDistribution1D):
    r"""


    Log-normal distribution.

    C++ includes: Distributions.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DistributionLogNormal self, vdouble1d_t P) -> DistributionLogNormal
        __init__(DistributionLogNormal self, double median, double scale_param) -> DistributionLogNormal
        DistributionLogNormal::DistributionLogNormal()=delete

        """
        _libBornAgainCore.DistributionLogNormal_swiginit(self, _libBornAgainCore.new_DistributionLogNormal(*args))

    def clone(self):
        r"""
        clone(DistributionLogNormal self) -> DistributionLogNormal
        DistributionLogNormal* DistributionLogNormal::clone() const final

        """
        return _libBornAgainCore.DistributionLogNormal_clone(self)

    def probabilityDensity(self, x):
        r"""
        probabilityDensity(DistributionLogNormal self, double x) -> double
        double DistributionLogNormal::probabilityDensity(double x) const final

        Returns the distribution-specific probability density for value x. 

        """
        return _libBornAgainCore.DistributionLogNormal_probabilityDensity(self, x)

    def getMean(self):
        r"""
        getMean(DistributionLogNormal self) -> double
        double DistributionLogNormal::getMean() const final

        Returns the distribution-specific mean. 

        """
        return _libBornAgainCore.DistributionLogNormal_getMean(self)

    def getMedian(self):
        r"""
        getMedian(DistributionLogNormal self) -> double
        double DistributionLogNormal::getMedian() const

        """
        return _libBornAgainCore.DistributionLogNormal_getMedian(self)

    def getScalePar(self):
        r"""
        getScalePar(DistributionLogNormal self) -> double
        double DistributionLogNormal::getScalePar() const

        """
        return _libBornAgainCore.DistributionLogNormal_getScalePar(self)

    def equidistantPoints(self, *args):
        r"""
        equidistantPoints(DistributionLogNormal self, size_t nbr_samples, double sigma_factor, RealLimits limits=RealLimits()) -> vdouble1d_t
        std::vector< double > DistributionLogNormal::equidistantPoints(size_t nbr_samples, double sigma_factor, const RealLimits &limits=RealLimits()) const

        generate list of sample values 

        """
        return _libBornAgainCore.DistributionLogNormal_equidistantPoints(self, *args)

    def isDelta(self):
        r"""
        isDelta(DistributionLogNormal self) -> bool
        bool DistributionLogNormal::isDelta() const final

        Returns true if the distribution is in the limit case of a Dirac delta distribution. 

        """
        return _libBornAgainCore.DistributionLogNormal_isDelta(self)

    def accept(self, visitor):
        r"""
        accept(DistributionLogNormal self, INodeVisitor visitor)
        void DistributionLogNormal::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.DistributionLogNormal_accept(self, visitor)

    def setUnits(self, units):
        r"""
        setUnits(DistributionLogNormal self, std::string const & units)
        void DistributionLogNormal::setUnits(const std::string &units)

        Sets distribution units. 

        """
        return _libBornAgainCore.DistributionLogNormal_setUnits(self, units)
    __swig_destroy__ = _libBornAgainCore.delete_DistributionLogNormal

# Register DistributionLogNormal in _libBornAgainCore:
_libBornAgainCore.DistributionLogNormal_swigregister(DistributionLogNormal)

class DistributionCosine(IDistribution1D):
    r"""


    Cosine distribution.

    C++ includes: Distributions.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DistributionCosine self, vdouble1d_t P) -> DistributionCosine
        __init__(DistributionCosine self, double mean, double sigma) -> DistributionCosine
        __init__(DistributionCosine self) -> DistributionCosine
        DistributionCosine::DistributionCosine()

        """
        _libBornAgainCore.DistributionCosine_swiginit(self, _libBornAgainCore.new_DistributionCosine(*args))

    def clone(self):
        r"""
        clone(DistributionCosine self) -> DistributionCosine
        DistributionCosine* DistributionCosine::clone() const final

        """
        return _libBornAgainCore.DistributionCosine_clone(self)

    def probabilityDensity(self, x):
        r"""
        probabilityDensity(DistributionCosine self, double x) -> double
        double DistributionCosine::probabilityDensity(double x) const final

        Returns the distribution-specific probability density for value x. 

        """
        return _libBornAgainCore.DistributionCosine_probabilityDensity(self, x)

    def getMean(self):
        r"""
        getMean(DistributionCosine self) -> double
        double DistributionCosine::getMean() const final

        Returns the distribution-specific mean. 

        """
        return _libBornAgainCore.DistributionCosine_getMean(self)

    def getSigma(self):
        r"""
        getSigma(DistributionCosine self) -> double
        double DistributionCosine::getSigma() const

        """
        return _libBornAgainCore.DistributionCosine_getSigma(self)

    def equidistantPoints(self, *args):
        r"""
        equidistantPoints(DistributionCosine self, size_t nbr_samples, double sigma_factor, RealLimits limits=RealLimits()) -> vdouble1d_t
        std::vector< double > DistributionCosine::equidistantPoints(size_t nbr_samples, double sigma_factor, const RealLimits &limits=RealLimits()) const

        generate list of sample values 

        """
        return _libBornAgainCore.DistributionCosine_equidistantPoints(self, *args)

    def isDelta(self):
        r"""
        isDelta(DistributionCosine self) -> bool
        bool DistributionCosine::isDelta() const final

        Returns true if the distribution is in the limit case of a Dirac delta distribution. 

        """
        return _libBornAgainCore.DistributionCosine_isDelta(self)

    def accept(self, visitor):
        r"""
        accept(DistributionCosine self, INodeVisitor visitor)
        void DistributionCosine::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.DistributionCosine_accept(self, visitor)
    __swig_destroy__ = _libBornAgainCore.delete_DistributionCosine

# Register DistributionCosine in _libBornAgainCore:
_libBornAgainCore.DistributionCosine_swigregister(DistributionCosine)

class DistributionTrapezoid(IDistribution1D):
    r"""


    Trapezoidal distribution.

    C++ includes: Distributions.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DistributionTrapezoid self, vdouble1d_t P) -> DistributionTrapezoid
        __init__(DistributionTrapezoid self, double center, double left, double middle, double right) -> DistributionTrapezoid
        __init__(DistributionTrapezoid self) -> DistributionTrapezoid
        DistributionTrapezoid::DistributionTrapezoid()

        """
        _libBornAgainCore.DistributionTrapezoid_swiginit(self, _libBornAgainCore.new_DistributionTrapezoid(*args))

    def clone(self):
        r"""
        clone(DistributionTrapezoid self) -> DistributionTrapezoid
        DistributionTrapezoid* DistributionTrapezoid::clone() const final

        """
        return _libBornAgainCore.DistributionTrapezoid_clone(self)

    def probabilityDensity(self, x):
        r"""
        probabilityDensity(DistributionTrapezoid self, double x) -> double
        double DistributionTrapezoid::probabilityDensity(double x) const final

        Returns the distribution-specific probability density for value x. 

        """
        return _libBornAgainCore.DistributionTrapezoid_probabilityDensity(self, x)

    def getMean(self):
        r"""
        getMean(DistributionTrapezoid self) -> double
        double DistributionTrapezoid::getMean() const final

        Returns the distribution-specific mean. 

        """
        return _libBornAgainCore.DistributionTrapezoid_getMean(self)

    def getLeftWidth(self):
        r"""
        getLeftWidth(DistributionTrapezoid self) -> double
        double DistributionTrapezoid::getLeftWidth() const

        """
        return _libBornAgainCore.DistributionTrapezoid_getLeftWidth(self)

    def getMiddleWidth(self):
        r"""
        getMiddleWidth(DistributionTrapezoid self) -> double
        double DistributionTrapezoid::getMiddleWidth() const

        """
        return _libBornAgainCore.DistributionTrapezoid_getMiddleWidth(self)

    def getRightWidth(self):
        r"""
        getRightWidth(DistributionTrapezoid self) -> double
        double DistributionTrapezoid::getRightWidth() const

        """
        return _libBornAgainCore.DistributionTrapezoid_getRightWidth(self)

    def equidistantPoints(self, *args):
        r"""
        equidistantPoints(DistributionTrapezoid self, size_t nbr_samples, double sigma_factor, RealLimits limits=RealLimits()) -> vdouble1d_t
        std::vector< double > DistributionTrapezoid::equidistantPoints(size_t nbr_samples, double sigma_factor, const RealLimits &limits=RealLimits()) const

        generate list of sample values 

        """
        return _libBornAgainCore.DistributionTrapezoid_equidistantPoints(self, *args)

    def isDelta(self):
        r"""
        isDelta(DistributionTrapezoid self) -> bool
        bool DistributionTrapezoid::isDelta() const final

        Returns true if the distribution is in the limit case of a Dirac delta distribution. 

        """
        return _libBornAgainCore.DistributionTrapezoid_isDelta(self)

    def accept(self, visitor):
        r"""
        accept(DistributionTrapezoid self, INodeVisitor visitor)
        void DistributionTrapezoid::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.DistributionTrapezoid_accept(self, visitor)
    __swig_destroy__ = _libBornAgainCore.delete_DistributionTrapezoid

# Register DistributionTrapezoid in _libBornAgainCore:
_libBornAgainCore.DistributionTrapezoid_swigregister(DistributionTrapezoid)

class ParameterDistribution(IParameterized):
    r"""


    A parametric distribution function, for use with any model parameter.

    C++ includes: ParameterDistribution.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ParameterDistribution self, std::string const & par_name, IDistribution1D distribution, size_t nbr_samples, double sigma_factor=0.0, RealLimits limits=RealLimits()) -> ParameterDistribution
        __init__(ParameterDistribution self, std::string const & par_name, IDistribution1D distribution, size_t nbr_samples, double xmin, double xmax) -> ParameterDistribution
        __init__(ParameterDistribution self, ParameterDistribution other) -> ParameterDistribution
        ParameterDistribution::ParameterDistribution(const ParameterDistribution &other)

        """
        _libBornAgainCore.ParameterDistribution_swiginit(self, _libBornAgainCore.new_ParameterDistribution(*args))
    __swig_destroy__ = _libBornAgainCore.delete_ParameterDistribution

    def linkParameter(self, par_name):
        r"""
        linkParameter(ParameterDistribution self, std::string par_name) -> ParameterDistribution
        ParameterDistribution & ParameterDistribution::linkParameter(std::string par_name)

        """
        return _libBornAgainCore.ParameterDistribution_linkParameter(self, par_name)

    def getMainParameterName(self):
        r"""
        getMainParameterName(ParameterDistribution self) -> std::string
        std::string ParameterDistribution::getMainParameterName() const

        get the main parameter's name 

        """
        return _libBornAgainCore.ParameterDistribution_getMainParameterName(self)

    def getNbrSamples(self):
        r"""
        getNbrSamples(ParameterDistribution self) -> size_t
        size_t ParameterDistribution::getNbrSamples() const

        get number of samples for this distribution 

        """
        return _libBornAgainCore.ParameterDistribution_getNbrSamples(self)

    def getSigmaFactor(self):
        r"""
        getSigmaFactor(ParameterDistribution self) -> double
        double ParameterDistribution::getSigmaFactor() const

        get the sigma factor 

        """
        return _libBornAgainCore.ParameterDistribution_getSigmaFactor(self)

    def getDistribution(self, *args):
        r"""
        getDistribution(ParameterDistribution self) -> IDistribution1D
        getDistribution(ParameterDistribution self) -> IDistribution1D
        IDistribution1D * ParameterDistribution::getDistribution()

        """
        return _libBornAgainCore.ParameterDistribution_getDistribution(self, *args)

    def generateSamples(self):
        r"""
        generateSamples(ParameterDistribution self) -> ParameterSampleVector
        std::vector< ParameterSample > ParameterDistribution::generateSamples() const

        generate list of sampled values with their weight 

        """
        return _libBornAgainCore.ParameterDistribution_generateSamples(self)

    def getLinkedParameterNames(self):
        r"""
        getLinkedParameterNames(ParameterDistribution self) -> vector_string_t
        std::vector<std::string> ParameterDistribution::getLinkedParameterNames() const

        get list of linked parameter names 

        """
        return _libBornAgainCore.ParameterDistribution_getLinkedParameterNames(self)

    def getLimits(self):
        r"""
        getLimits(ParameterDistribution self) -> RealLimits
        RealLimits ParameterDistribution::getLimits() const

        """
        return _libBornAgainCore.ParameterDistribution_getLimits(self)

    def getMinValue(self):
        r"""
        getMinValue(ParameterDistribution self) -> double
        double ParameterDistribution::getMinValue() const

        """
        return _libBornAgainCore.ParameterDistribution_getMinValue(self)

    def getMaxValue(self):
        r"""
        getMaxValue(ParameterDistribution self) -> double
        double ParameterDistribution::getMaxValue() const

        """
        return _libBornAgainCore.ParameterDistribution_getMaxValue(self)

# Register ParameterDistribution in _libBornAgainCore:
_libBornAgainCore.ParameterDistribution_swigregister(ParameterDistribution)

class ParameterPool(ICloneable):
    r"""


    Container with parameters for  IParameterized object.

    C++ includes: ParameterPool.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(ParameterPool self) -> ParameterPool
        ParameterPool::ParameterPool()

        Constructs an empty parameter pool. 

        """
        _libBornAgainCore.ParameterPool_swiginit(self, _libBornAgainCore.new_ParameterPool())
    __swig_destroy__ = _libBornAgainCore.delete_ParameterPool

    def clone(self):
        r"""
        clone(ParameterPool self) -> ParameterPool
        ParameterPool * ParameterPool::clone() const

        Returns a literal clone. 

        """
        return _libBornAgainCore.ParameterPool_clone(self)

    def copyToExternalPool(self, prefix, other_pool):
        r"""
        copyToExternalPool(ParameterPool self, std::string const & prefix, ParameterPool other_pool)
        void ParameterPool::copyToExternalPool(const std::string &prefix, ParameterPool *other_pool) const

        Copies parameters of given pool to  other pool, prepeding  prefix to the parameter names. 

        """
        return _libBornAgainCore.ParameterPool_copyToExternalPool(self, prefix, other_pool)

    def clear(self):
        r"""
        clear(ParameterPool self)
        void ParameterPool::clear()

        Clears the parameter map. 

        """
        return _libBornAgainCore.ParameterPool_clear(self)

    def size(self):
        r"""
        size(ParameterPool self) -> size_t
        size_t ParameterPool::size() const

        Returns number of parameters in the pool. 

        """
        return _libBornAgainCore.ParameterPool_size(self)

    def addParameter(self, newPar):
        r"""
        addParameter(ParameterPool self, RealParameter newPar) -> RealParameter
        RealParameter & ParameterPool::addParameter(RealParameter *newPar)

        Adds parameter to the pool, and returns reference to the input pointer.

        Returning the input pointer allows us to concatenate function calls like pool->addParameter( new RealParameter(...) ).setLimits(-1,+1).setFixed().setUnit("nm") 

        """
        return _libBornAgainCore.ParameterPool_addParameter(self, newPar)

    def parameter(self, *args):
        r"""
        parameter(ParameterPool self, std::string const & name) -> RealParameter
        parameter(ParameterPool self, std::string const & name) -> RealParameter
        const RealParameter * ParameterPool::parameter(const std::string &name) const

        Returns parameter with given  name. 

        """
        return _libBornAgainCore.ParameterPool_parameter(self, *args)

    def parameters(self):
        r"""
        parameters(ParameterPool self) -> std::vector< RealParameter *,std::allocator< RealParameter * > > const
        const std::vector<RealParameter*> ParameterPool::parameters() const

        Returns full vector of parameters. 

        """
        return _libBornAgainCore.ParameterPool_parameters(self)

    def getMatchedParameters(self, pattern):
        r"""
        getMatchedParameters(ParameterPool self, std::string const & pattern) -> std::vector< RealParameter *,std::allocator< RealParameter * > >
        std::vector< RealParameter * > ParameterPool::getMatchedParameters(const std::string &pattern) const

        Returns nonempty vector of parameters that match the  pattern ('*' allowed), or throws. 

        """
        return _libBornAgainCore.ParameterPool_getMatchedParameters(self, pattern)

    def getUniqueMatch(self, pattern):
        r"""
        getUniqueMatch(ParameterPool self, std::string const & pattern) -> RealParameter
        RealParameter * ParameterPool::getUniqueMatch(const std::string &pattern) const

        Returns the one parameter that matches the  pattern (wildcards '*' allowed), or throws. 

        """
        return _libBornAgainCore.ParameterPool_getUniqueMatch(self, pattern)

    def setParameterValue(self, name, value):
        r"""
        setParameterValue(ParameterPool self, std::string const & name, double value)
        void ParameterPool::setParameterValue(const std::string &name, double value)

        Sets parameter value. 

        """
        return _libBornAgainCore.ParameterPool_setParameterValue(self, name, value)

    def setMatchedParametersValue(self, wildcards, value):
        r"""
        setMatchedParametersValue(ParameterPool self, std::string const & wildcards, double value) -> int
        int ParameterPool::setMatchedParametersValue(const std::string &wildcards, double value)

        Sets value of the nonzero parameters that match  pattern ('*' allowed), or throws. 

        """
        return _libBornAgainCore.ParameterPool_setMatchedParametersValue(self, wildcards, value)

    def setUniqueMatchValue(self, pattern, value):
        r"""
        setUniqueMatchValue(ParameterPool self, std::string const & pattern, double value)
        void ParameterPool::setUniqueMatchValue(const std::string &pattern, double value)

        Sets value of the one parameter that matches  pattern ('*' allowed), or throws. 

        """
        return _libBornAgainCore.ParameterPool_setUniqueMatchValue(self, pattern, value)

    def parameterNames(self):
        r"""
        parameterNames(ParameterPool self) -> vector_string_t
        std::vector< std::string > ParameterPool::parameterNames() const

        """
        return _libBornAgainCore.ParameterPool_parameterNames(self)

    def removeParameter(self, name):
        r"""
        removeParameter(ParameterPool self, std::string const & name)
        void ParameterPool::removeParameter(const std::string &name)

        Removes parameter with given name from the pool. 

        """
        return _libBornAgainCore.ParameterPool_removeParameter(self, name)

    def __getitem__(self, index):
        r"""__getitem__(ParameterPool self, size_t index) -> RealParameter"""
        return _libBornAgainCore.ParameterPool___getitem__(self, index)

    def __iter__(self):
        return ParameterPoolIterator(self)


# Register ParameterPool in _libBornAgainCore:
_libBornAgainCore.ParameterPool_swigregister(ParameterPool)

class RangedDistributionGate(object):
    r"""


    Uniform distribution function.

    C++ includes: RangedDistributions.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RangedDistributionGate self) -> RangedDistributionGate
        __init__(RangedDistributionGate self, size_t n_samples, double sigma_factor, RealLimits limits=RealLimits::limitless()) -> RangedDistributionGate
        __init__(RangedDistributionGate self, size_t n_samples, double sigma_factor, double min, double max) -> RangedDistributionGate
        RangedDistributionGate::RangedDistributionGate(size_t n_samples, double sigma_factor, double min, double max)

        Initializes Ranged distribution with given number of samples, sigma factor (range in standard deviations to take into account during sample generation) and limits (either RealLimits object or just min and max limits). By default  n_samples = 5,  sigma_factor = 2.0, while the limits are (-inf, +inf). 

        """
        _libBornAgainCore.RangedDistributionGate_swiginit(self, _libBornAgainCore.new_RangedDistributionGate(*args))

    def clone(self):
        r"""
        clone(RangedDistributionGate self) -> RangedDistributionGate
        RangedDistributionGate * RangedDistributionGate::clone() const override

        """
        return _libBornAgainCore.RangedDistributionGate_clone(self)
    __swig_destroy__ = _libBornAgainCore.delete_RangedDistributionGate

# Register RangedDistributionGate in _libBornAgainCore:
_libBornAgainCore.RangedDistributionGate_swigregister(RangedDistributionGate)

class RangedDistributionLorentz(object):
    r"""


    Lorentz distribution with median and hwhm.

    C++ includes: RangedDistributions.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RangedDistributionLorentz self) -> RangedDistributionLorentz
        __init__(RangedDistributionLorentz self, size_t n_samples, double hwhm_factor, RealLimits limits=RealLimits::limitless()) -> RangedDistributionLorentz
        __init__(RangedDistributionLorentz self, size_t n_samples, double hwhm_factor, double min, double max) -> RangedDistributionLorentz
        RangedDistributionLorentz::RangedDistributionLorentz(size_t n_samples, double hwhm_factor, double min, double max)

        Initializes Ranged distribution with given number of samples, sigma factor (range in standard deviations to take into account during sample generation) and limits (either RealLimits object or just min and max limits). By default  n_samples = 5,  hwhm_factor = 2.0, while the limits are (-inf, +inf). 

        """
        _libBornAgainCore.RangedDistributionLorentz_swiginit(self, _libBornAgainCore.new_RangedDistributionLorentz(*args))

    def clone(self):
        r"""
        clone(RangedDistributionLorentz self) -> RangedDistributionLorentz
        RangedDistributionLorentz * RangedDistributionLorentz::clone() const override

        """
        return _libBornAgainCore.RangedDistributionLorentz_clone(self)
    __swig_destroy__ = _libBornAgainCore.delete_RangedDistributionLorentz

# Register RangedDistributionLorentz in _libBornAgainCore:
_libBornAgainCore.RangedDistributionLorentz_swigregister(RangedDistributionLorentz)

class RangedDistributionGaussian(object):
    r"""


    Gaussian distribution with standard deviation std_dev.

    C++ includes: RangedDistributions.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RangedDistributionGaussian self) -> RangedDistributionGaussian
        __init__(RangedDistributionGaussian self, size_t n_samples, double sigma_factor, RealLimits limits=RealLimits::limitless()) -> RangedDistributionGaussian
        __init__(RangedDistributionGaussian self, size_t n_samples, double sigma_factor, double min, double max) -> RangedDistributionGaussian
        RangedDistributionGaussian::RangedDistributionGaussian(size_t n_samples, double sigma_factor, double min, double max)

        Initializes Ranged distribution with given number of samples, sigma factor (range in standard deviations to take into account during sample generation) and limits (either RealLimits object or just min and max limits). By default  n_samples = 5,  sigma_factor = 2.0, while the limits are (-inf, +inf). 

        """
        _libBornAgainCore.RangedDistributionGaussian_swiginit(self, _libBornAgainCore.new_RangedDistributionGaussian(*args))

    def clone(self):
        r"""
        clone(RangedDistributionGaussian self) -> RangedDistributionGaussian
        RangedDistributionGaussian * RangedDistributionGaussian::clone() const override

        """
        return _libBornAgainCore.RangedDistributionGaussian_clone(self)
    __swig_destroy__ = _libBornAgainCore.delete_RangedDistributionGaussian

# Register RangedDistributionGaussian in _libBornAgainCore:
_libBornAgainCore.RangedDistributionGaussian_swigregister(RangedDistributionGaussian)

class RangedDistributionLogNormal(object):
    r"""


    Log-normal distribution.

    C++ includes: RangedDistributions.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RangedDistributionLogNormal self) -> RangedDistributionLogNormal
        __init__(RangedDistributionLogNormal self, size_t n_samples, double sigma_factor, RealLimits limits=RealLimits::limitless()) -> RangedDistributionLogNormal
        __init__(RangedDistributionLogNormal self, size_t n_samples, double sigma_factor, double min, double max) -> RangedDistributionLogNormal
        RangedDistributionLogNormal::RangedDistributionLogNormal(size_t n_samples, double sigma_factor, double min, double max)

        Initializes Ranged distribution with given number of samples, sigma factor (range in standard deviations to take into account during sample generation) and limits (either RealLimits object or just min and max limits). By default  n_samples = 5,  sigma_factor = 2.0, while the limits are (-inf, +inf). 

        """
        _libBornAgainCore.RangedDistributionLogNormal_swiginit(self, _libBornAgainCore.new_RangedDistributionLogNormal(*args))

    def clone(self):
        r"""
        clone(RangedDistributionLogNormal self) -> RangedDistributionLogNormal
        RangedDistributionLogNormal * RangedDistributionLogNormal::clone() const override

        """
        return _libBornAgainCore.RangedDistributionLogNormal_clone(self)
    __swig_destroy__ = _libBornAgainCore.delete_RangedDistributionLogNormal

# Register RangedDistributionLogNormal in _libBornAgainCore:
_libBornAgainCore.RangedDistributionLogNormal_swigregister(RangedDistributionLogNormal)

class RangedDistributionCosine(object):
    r"""


    Cosine distribution.

    C++ includes: RangedDistributions.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RangedDistributionCosine self) -> RangedDistributionCosine
        __init__(RangedDistributionCosine self, size_t n_samples, double sigma_factor, RealLimits limits=RealLimits::limitless()) -> RangedDistributionCosine
        __init__(RangedDistributionCosine self, size_t n_samples, double sigma_factor, double min, double max) -> RangedDistributionCosine
        RangedDistributionCosine::RangedDistributionCosine(size_t n_samples, double sigma_factor, double min, double max)

        Initializes Ranged distribution with given number of samples, sigma factor (range in standard deviations to take into account during sample generation) and limits (either RealLimits object or just min and max limits). By default  n_samples = 5,  sigma_factor = 2.0, while the limits are (-inf, +inf). 

        """
        _libBornAgainCore.RangedDistributionCosine_swiginit(self, _libBornAgainCore.new_RangedDistributionCosine(*args))

    def clone(self):
        r"""
        clone(RangedDistributionCosine self) -> RangedDistributionCosine
        RangedDistributionCosine * RangedDistributionCosine::clone() const override

        """
        return _libBornAgainCore.RangedDistributionCosine_clone(self)
    __swig_destroy__ = _libBornAgainCore.delete_RangedDistributionCosine

# Register RangedDistributionCosine in _libBornAgainCore:
_libBornAgainCore.RangedDistributionCosine_swigregister(RangedDistributionCosine)

class SimulationOptions(object):
    r"""


    Collect the different options for simulation.

    SimulationOptions

    C++ includes: SimulationOptions.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(SimulationOptions self) -> SimulationOptions
        SimulationOptions::SimulationOptions()

        """
        _libBornAgainCore.SimulationOptions_swiginit(self, _libBornAgainCore.new_SimulationOptions())

    def isIntegrate(self):
        r"""
        isIntegrate(SimulationOptions self) -> bool
        bool SimulationOptions::isIntegrate() const

        """
        return _libBornAgainCore.SimulationOptions_isIntegrate(self)

    def getMcPoints(self):
        r"""
        getMcPoints(SimulationOptions self) -> size_t
        size_t SimulationOptions::getMcPoints() const

        """
        return _libBornAgainCore.SimulationOptions_getMcPoints(self)

    def setMonteCarloIntegration(self, flag=True, mc_points=50):
        r"""
        setMonteCarloIntegration(SimulationOptions self, bool flag=True, size_t mc_points=50)
        void SimulationOptions::setMonteCarloIntegration(bool flag=true, size_t mc_points=50)

        Enables/disables MonetCarlo integration.

        Parameters:
        -----------

        flag: 
        If true, MonteCarlo integration will be used, otherwise analytical calculations

        mc_points: 
        Number of points for MonteCarlo integrator 

        """
        return _libBornAgainCore.SimulationOptions_setMonteCarloIntegration(self, flag, mc_points)

    def setNumberOfThreads(self, nthreads):
        r"""
        setNumberOfThreads(SimulationOptions self, int nthreads)
        void SimulationOptions::setNumberOfThreads(int nthreads)

        Sets number of threads to use during the simulation (0 - take the default value from the hardware) 

        """
        return _libBornAgainCore.SimulationOptions_setNumberOfThreads(self, nthreads)

    def getNumberOfThreads(self):
        r"""
        getNumberOfThreads(SimulationOptions self) -> unsigned int
        unsigned SimulationOptions::getNumberOfThreads() const

        """
        return _libBornAgainCore.SimulationOptions_getNumberOfThreads(self)

    def setNumberOfBatches(self, nbatches):
        r"""
        setNumberOfBatches(SimulationOptions self, int nbatches)
        void SimulationOptions::setNumberOfBatches(int nbatches)

        Sets number of batches to split. 

        """
        return _libBornAgainCore.SimulationOptions_setNumberOfBatches(self, nbatches)

    def getNumberOfBatches(self):
        r"""
        getNumberOfBatches(SimulationOptions self) -> unsigned int
        unsigned SimulationOptions::getNumberOfBatches() const

        """
        return _libBornAgainCore.SimulationOptions_getNumberOfBatches(self)

    def getCurrentBatch(self):
        r"""
        getCurrentBatch(SimulationOptions self) -> unsigned int
        unsigned SimulationOptions::getCurrentBatch() const

        """
        return _libBornAgainCore.SimulationOptions_getCurrentBatch(self)

    def setThreadInfo(self, thread_info):
        r"""
        setThreadInfo(SimulationOptions self, ThreadInfo thread_info)
        void SimulationOptions::setThreadInfo(const ThreadInfo &thread_info)

        Sets the batch and thread information to be used. 

        """
        return _libBornAgainCore.SimulationOptions_setThreadInfo(self, thread_info)

    def getHardwareConcurrency(self):
        r"""
        getHardwareConcurrency(SimulationOptions self) -> unsigned int
        unsigned SimulationOptions::getHardwareConcurrency() const

        """
        return _libBornAgainCore.SimulationOptions_getHardwareConcurrency(self)

    def setIncludeSpecular(self, include_specular):
        r"""
        setIncludeSpecular(SimulationOptions self, bool include_specular)
        void SimulationOptions::setIncludeSpecular(bool include_specular)

        """
        return _libBornAgainCore.SimulationOptions_setIncludeSpecular(self, include_specular)

    def includeSpecular(self):
        r"""
        includeSpecular(SimulationOptions self) -> bool
        bool SimulationOptions::includeSpecular() const

        """
        return _libBornAgainCore.SimulationOptions_includeSpecular(self)

    def setUseAvgMaterials(self, use_avg_materials):
        r"""
        setUseAvgMaterials(SimulationOptions self, bool use_avg_materials)
        void SimulationOptions::setUseAvgMaterials(bool use_avg_materials)

        """
        return _libBornAgainCore.SimulationOptions_setUseAvgMaterials(self, use_avg_materials)

    def useAvgMaterials(self):
        r"""
        useAvgMaterials(SimulationOptions self) -> bool
        bool SimulationOptions::useAvgMaterials() const

        """
        return _libBornAgainCore.SimulationOptions_useAvgMaterials(self)
    __swig_destroy__ = _libBornAgainCore.delete_SimulationOptions

# Register SimulationOptions in _libBornAgainCore:
_libBornAgainCore.SimulationOptions_swigregister(SimulationOptions)

class ThreadInfo(object):
    r"""


    Information to run simulation with dedicated number of threads.

    C++ includes: ThreadInfo.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(ThreadInfo self) -> ThreadInfo
        ThreadInfo::ThreadInfo()

        """
        _libBornAgainCore.ThreadInfo_swiginit(self, _libBornAgainCore.new_ThreadInfo())
    n_threads = property(_libBornAgainCore.ThreadInfo_n_threads_get, _libBornAgainCore.ThreadInfo_n_threads_set, doc=r"""n_threads : unsigned int""")
    n_batches = property(_libBornAgainCore.ThreadInfo_n_batches_get, _libBornAgainCore.ThreadInfo_n_batches_set, doc=r"""n_batches : unsigned int""")
    current_batch = property(_libBornAgainCore.ThreadInfo_current_batch_get, _libBornAgainCore.ThreadInfo_current_batch_set, doc=r"""current_batch : unsigned int""")
    __swig_destroy__ = _libBornAgainCore.delete_ThreadInfo

# Register ThreadInfo in _libBornAgainCore:
_libBornAgainCore.ThreadInfo_swigregister(ThreadInfo)

class ISample(ICloneable, INode):
    r"""


    Pure virtual base class for sample components and properties related to scattering.

    C++ includes: ISample.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ISample self) -> ISample
        __init__(ISample self, NodeMeta meta, vdouble1d_t PValues) -> ISample
        ISample::ISample(const NodeMeta &meta, const std::vector< double > &PValues)

        """
        if self.__class__ == ISample:
            _self = None
        else:
            _self = self
        _libBornAgainCore.ISample_swiginit(self, _libBornAgainCore.new_ISample(_self, *args))

    def clone(self):
        r"""
        clone(ISample self) -> ISample
        ISample* ISample::clone() const override=0

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.ISample_clone(self)

    def material(self):
        r"""
        material(ISample self) -> Material
        virtual const Material* ISample::material() const

        Returns nullptr, unless overwritten to return a specific material. 

        """
        return _libBornAgainCore.ISample_material(self)

    def containedMaterials(self):
        r"""
        containedMaterials(ISample self) -> std::vector< Material const *,std::allocator< Material const * > >
        std::vector< const Material * > ISample::containedMaterials() const

        Returns set of unique materials contained in this  ISample. 

        """
        return _libBornAgainCore.ISample_containedMaterials(self)
    __swig_destroy__ = _libBornAgainCore.delete_ISample
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_ISample(self)
        return weakref.proxy(self)

# Register ISample in _libBornAgainCore:
_libBornAgainCore.ISample_swigregister(ISample)

class IFormFactor(ISample):
    r"""


    Pure virtual base class for all form factors.

    The actual form factor is returned by the complex valued function  IFormFactor::evaluate, which depends on the incoming and outgoing wave vectors ki and kf. If it only depends on the scattering vector q=ki-kf, then it is a IBornFormFactor.

    Other children besides IBornFormFactor are  IFormFactorDecorator,  FormFactorWeighted,  FormFactorDWBA,  FormFactorDWBAPol and  FormFactorCrystal.

    C++ includes: IFormFactor.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(IFormFactor self) -> IFormFactor
        __init__(IFormFactor self, NodeMeta meta, vdouble1d_t PValues) -> IFormFactor
        IFormFactor::IFormFactor(const NodeMeta &meta, const std::vector< double > &PValues)

        """
        if self.__class__ == IFormFactor:
            _self = None
        else:
            _self = self
        _libBornAgainCore.IFormFactor_swiginit(self, _libBornAgainCore.new_IFormFactor(_self, *args))
    __swig_destroy__ = _libBornAgainCore.delete_IFormFactor

    def clone(self):
        r"""
        clone(IFormFactor self) -> IFormFactor
        IFormFactor* IFormFactor::clone() const override=0

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.IFormFactor_clone(self)

    def createSlicedFormFactor(self, limits, rot, translation):
        r"""
        createSlicedFormFactor(IFormFactor self, ZLimits limits, IRotation rot, kvector_t translation) -> IFormFactor
        IFormFactor * IFormFactor::createSlicedFormFactor(ZLimits limits, const IRotation &rot, kvector_t translation) const

        Creates a (possibly sliced) form factor with the given rotation and translation. 

        """
        return _libBornAgainCore.IFormFactor_createSlicedFormFactor(self, limits, rot, translation)

    def setAmbientMaterial(self, arg0):
        r"""
        setAmbientMaterial(IFormFactor self, Material arg0)
        virtual void IFormFactor::setAmbientMaterial(Material)=0

        Passes the material in which this particle is embedded. 

        """
        return _libBornAgainCore.IFormFactor_setAmbientMaterial(self, arg0)

    def evaluate(self, wavevectors):
        r"""
        evaluate(IFormFactor self, WavevectorInfo wavevectors) -> complex_t
        virtual complex_t IFormFactor::evaluate(const WavevectorInfo &wavevectors) const =0

        Returns scattering amplitude for complex wavevectors ki, kf. 

        """
        return _libBornAgainCore.IFormFactor_evaluate(self, wavevectors)

    def volume(self):
        r"""
        volume(IFormFactor self) -> double
        double IFormFactor::volume() const

        Returns the total volume of the particle of this form factor's shape. 

        """
        return _libBornAgainCore.IFormFactor_volume(self)

    def radialExtension(self):
        r"""
        radialExtension(IFormFactor self) -> double
        virtual double IFormFactor::radialExtension() const =0

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.IFormFactor_radialExtension(self)

    def bottomZ(self, rotation):
        r"""
        bottomZ(IFormFactor self, IRotation rotation) -> double
        virtual double IFormFactor::bottomZ(const IRotation &rotation) const =0

        Returns the z-coordinate of the lowest point in this shape after a given rotation. 

        """
        return _libBornAgainCore.IFormFactor_bottomZ(self, rotation)

    def topZ(self, rotation):
        r"""
        topZ(IFormFactor self, IRotation rotation) -> double
        virtual double IFormFactor::topZ(const IRotation &rotation) const =0

        Returns the z-coordinate of the lowest point in this shape after a given rotation. 

        """
        return _libBornAgainCore.IFormFactor_topZ(self, rotation)

    def canSliceAnalytically(self, rot):
        r"""canSliceAnalytically(IFormFactor self, IRotation rot) -> bool"""
        return _libBornAgainCore.IFormFactor_canSliceAnalytically(self, rot)

    def sliceFormFactor(self, limits, rot, translation):
        r"""sliceFormFactor(IFormFactor self, ZLimits limits, IRotation rot, kvector_t translation) -> IFormFactor"""
        return _libBornAgainCore.IFormFactor_sliceFormFactor(self, limits, rot, translation)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IFormFactor(self)
        return weakref.proxy(self)

# Register IFormFactor in _libBornAgainCore:
_libBornAgainCore.IFormFactor_swigregister(IFormFactor)


def CreateTransformedFormFactor(formfactor, rot, translation):
    r"""
    CreateTransformedFormFactor(IFormFactor formfactor, IRotation rot, kvector_t translation) -> IFormFactor
    IFormFactor* CreateTransformedFormFactor(const IFormFactor &formfactor, const IRotation &rot, kvector_t translation)

    """
    return _libBornAgainCore.CreateTransformedFormFactor(formfactor, rot, translation)
class IFormFactorBorn(IFormFactor):
    r"""


    Pure virtual base class for Born form factors.

    In contrast to the generic  IFormFactor, a Born form factor does not depend on the incoming and outgoing wave vectors ki and kf, except through their difference, the scattering vector q=ki-kf.

    C++ includes: IFormFactorBorn.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(IFormFactorBorn self) -> IFormFactorBorn
        __init__(IFormFactorBorn self, NodeMeta meta, vdouble1d_t PValues) -> IFormFactorBorn
        IFormFactorBorn::IFormFactorBorn(const NodeMeta &meta, const std::vector< double > &PValues)

        """
        if self.__class__ == IFormFactorBorn:
            _self = None
        else:
            _self = self
        _libBornAgainCore.IFormFactorBorn_swiginit(self, _libBornAgainCore.new_IFormFactorBorn(_self, *args))

    def clone(self):
        r"""
        clone(IFormFactorBorn self) -> IFormFactorBorn
        IFormFactorBorn* IFormFactorBorn::clone() const override=0

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.IFormFactorBorn_clone(self)

    def setAmbientMaterial(self, arg0):
        r"""
        setAmbientMaterial(IFormFactorBorn self, Material arg0)
        void IFormFactorBorn::setAmbientMaterial(Material) override

        Passes the material in which this particle is embedded. 

        """
        return _libBornAgainCore.IFormFactorBorn_setAmbientMaterial(self, arg0)

    def evaluate(self, wavevectors):
        r"""
        evaluate(IFormFactorBorn self, WavevectorInfo wavevectors) -> complex_t
        complex_t IFormFactorBorn::evaluate(const WavevectorInfo &wavevectors) const override

        Returns scattering amplitude for complex wavevectors ki, kf. 

        """
        return _libBornAgainCore.IFormFactorBorn_evaluate(self, wavevectors)

    def bottomZ(self, rotation):
        r"""
        bottomZ(IFormFactorBorn self, IRotation rotation) -> double
        double IFormFactorBorn::bottomZ(const IRotation &rotation) const override

        Returns the z-coordinate of the lowest point in this shape after a given rotation. 

        """
        return _libBornAgainCore.IFormFactorBorn_bottomZ(self, rotation)

    def topZ(self, rotation):
        r"""
        topZ(IFormFactorBorn self, IRotation rotation) -> double
        double IFormFactorBorn::topZ(const IRotation &rotation) const override

        Returns the z-coordinate of the lowest point in this shape after a given rotation. 

        """
        return _libBornAgainCore.IFormFactorBorn_topZ(self, rotation)

    def evaluate_for_q(self, q):
        r"""
        evaluate_for_q(IFormFactorBorn self, cvector_t q) -> complex_t
        virtual complex_t IFormFactorBorn::evaluate_for_q(cvector_t q) const =0

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.IFormFactorBorn_evaluate_for_q(self, q)

    def canSliceAnalytically(self, rot):
        r"""canSliceAnalytically(IFormFactorBorn self, IRotation rot) -> bool"""
        return _libBornAgainCore.IFormFactorBorn_canSliceAnalytically(self, rot)
    __swig_destroy__ = _libBornAgainCore.delete_IFormFactorBorn
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IFormFactorBorn(self)
        return weakref.proxy(self)

    def sliceFormFactor(self, limits, rot, translation):
        r"""sliceFormFactor(IFormFactorBorn self, ZLimits limits, IRotation rot, kvector_t translation) -> IFormFactor"""
        return _libBornAgainCore.IFormFactorBorn_sliceFormFactor(self, limits, rot, translation)

# Register IFormFactorBorn in _libBornAgainCore:
_libBornAgainCore.IFormFactorBorn_swigregister(IFormFactorBorn)

class SlicingEffects(object):
    r"""


    Nested structure that holds slicing effects on position and removed parts.

    C++ includes: IFormFactorBorn.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    position = property(_libBornAgainCore.SlicingEffects_position_get, _libBornAgainCore.SlicingEffects_position_set, doc=r"""position : kvector_t""")
    dz_bottom = property(_libBornAgainCore.SlicingEffects_dz_bottom_get, _libBornAgainCore.SlicingEffects_dz_bottom_set, doc=r"""dz_bottom : double""")
    dz_top = property(_libBornAgainCore.SlicingEffects_dz_top_get, _libBornAgainCore.SlicingEffects_dz_top_set, doc=r"""dz_top : double""")

    def __init__(self):
        r"""
        __init__(SlicingEffects self) -> SlicingEffects


        Nested structure that holds slicing effects on position and removed parts.

        C++ includes: IFormFactorBorn.h

        """
        _libBornAgainCore.SlicingEffects_swiginit(self, _libBornAgainCore.new_SlicingEffects())
    __swig_destroy__ = _libBornAgainCore.delete_SlicingEffects

# Register SlicingEffects in _libBornAgainCore:
_libBornAgainCore.SlicingEffects_swigregister(SlicingEffects)

class IFormFactorDecorator(IFormFactor):
    r"""


    Encapsulates another formfactor and adds extra functionality (a scalar factor, a position-dependent phase factor, ...).

    This class is designed according to the Decorator Pattern. It inherits from  IFormFactor and has a member of type IFormFactor*.

    C++ includes: IFormFactorDecorator.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IFormFactorDecorator

    def clone(self):
        r"""
        clone(IFormFactorDecorator self) -> IFormFactorDecorator
        IFormFactorDecorator* IFormFactorDecorator::clone() const override=0

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.IFormFactorDecorator_clone(self)

    def setAmbientMaterial(self, material):
        r"""
        setAmbientMaterial(IFormFactorDecorator self, Material material)
        void IFormFactorDecorator::setAmbientMaterial(Material material) override

        Passes the material in which this particle is embedded. 

        """
        return _libBornAgainCore.IFormFactorDecorator_setAmbientMaterial(self, material)

    def volume(self):
        r"""
        volume(IFormFactorDecorator self) -> double
        double IFormFactorDecorator::volume() const override

        Returns the total volume of the particle of this form factor's shape. 

        """
        return _libBornAgainCore.IFormFactorDecorator_volume(self)

    def radialExtension(self):
        r"""
        radialExtension(IFormFactorDecorator self) -> double
        double IFormFactorDecorator::radialExtension() const override

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.IFormFactorDecorator_radialExtension(self)

    def bottomZ(self, rotation):
        r"""
        bottomZ(IFormFactorDecorator self, IRotation rotation) -> double
        double IFormFactorDecorator::bottomZ(const IRotation &rotation) const override

        Returns the z-coordinate of the lowest point in this shape after a given rotation. 

        """
        return _libBornAgainCore.IFormFactorDecorator_bottomZ(self, rotation)

    def topZ(self, rotation):
        r"""
        topZ(IFormFactorDecorator self, IRotation rotation) -> double
        double IFormFactorDecorator::topZ(const IRotation &rotation) const override

        Returns the z-coordinate of the lowest point in this shape after a given rotation. 

        """
        return _libBornAgainCore.IFormFactorDecorator_topZ(self, rotation)

    def getFormFactor(self):
        r"""
        getFormFactor(IFormFactorDecorator self) -> IFormFactor
        const IFormFactor* IFormFactorDecorator::getFormFactor() const

        """
        return _libBornAgainCore.IFormFactorDecorator_getFormFactor(self)

# Register IFormFactorDecorator in _libBornAgainCore:
_libBornAgainCore.IFormFactorDecorator_swigregister(IFormFactorDecorator)

class IRotation(ICloneable, INode):
    r"""


    Pure virtual interface for rotations.

    C++ includes: Rotations.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def createRotation(transform):
        r"""createRotation(Transform3D const & transform) -> IRotation"""
        return _libBornAgainCore.IRotation_createRotation(transform)

    @staticmethod
    def createIdentity():
        r"""createIdentity() -> IRotation"""
        return _libBornAgainCore.IRotation_createIdentity()

    def clone(self):
        r"""
        clone(IRotation self) -> IRotation
        virtual IRotation* IRotation::clone() const =0

        """
        return _libBornAgainCore.IRotation_clone(self)

    def createInverse(self):
        r"""
        createInverse(IRotation self) -> IRotation
        virtual IRotation* IRotation::createInverse() const =0

        Returns a new  IRotation object that is the current object's inverse. 

        """
        return _libBornAgainCore.IRotation_createInverse(self)

    def getTransform3D(self):
        r"""
        getTransform3D(IRotation self) -> Transform3D
        virtual Transform3D IRotation::getTransform3D() const =0

        Returns transformation. 

        """
        return _libBornAgainCore.IRotation_getTransform3D(self)

    def transformed(self, v):
        r"""
        transformed(IRotation self, kvector_t v) -> kvector_t
        kvector_t IRotation::transformed(const kvector_t &v) const

        """
        return _libBornAgainCore.IRotation_transformed(self, v)

    def isIdentity(self):
        r"""
        isIdentity(IRotation self) -> bool
        bool IRotation::isIdentity() const

        Returns true if rotation matrix is identity matrix (no rotations) 

        """
        return _libBornAgainCore.IRotation_isIdentity(self)

    def zInvariant(self):
        r"""
        zInvariant(IRotation self) -> bool
        bool IRotation::zInvariant() const

        """
        return _libBornAgainCore.IRotation_zInvariant(self)
    __swig_destroy__ = _libBornAgainCore.delete_IRotation

# Register IRotation in _libBornAgainCore:
_libBornAgainCore.IRotation_swigregister(IRotation)

def IRotation_createRotation(transform):
    r"""IRotation_createRotation(Transform3D const & transform) -> IRotation"""
    return _libBornAgainCore.IRotation_createRotation(transform)

def IRotation_createIdentity():
    r"""IRotation_createIdentity() -> IRotation"""
    return _libBornAgainCore.IRotation_createIdentity()


def createProduct(left, right):
    r"""
    createProduct(IRotation left, IRotation right) -> IRotation
    BA_CORE_API_ IRotation* createProduct(const IRotation &left, const IRotation &right)

    Returns concatenated rotation (first right, then left). 

    """
    return _libBornAgainCore.createProduct(left, right)
class IdentityRotation(IRotation):
    r"""


    The identity rotation, which leaves everything in place.

    C++ includes: Rotations.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(IdentityRotation self) -> IdentityRotation
        IdentityRotation::IdentityRotation()

        """
        _libBornAgainCore.IdentityRotation_swiginit(self, _libBornAgainCore.new_IdentityRotation())

    def clone(self):
        r"""
        clone(IdentityRotation self) -> IdentityRotation
        IdentityRotation* IdentityRotation::clone() const

        """
        return _libBornAgainCore.IdentityRotation_clone(self)

    def createInverse(self):
        r"""
        createInverse(IdentityRotation self) -> IdentityRotation
        IdentityRotation* IdentityRotation::createInverse() const

        Returns a new  IRotation object that is the current object's inverse. 

        """
        return _libBornAgainCore.IdentityRotation_createInverse(self)

    def accept(self, visitor):
        r"""
        accept(IdentityRotation self, INodeVisitor visitor)
        void IdentityRotation::accept(INodeVisitor *visitor) const

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.IdentityRotation_accept(self, visitor)

    def getTransform3D(self):
        r"""
        getTransform3D(IdentityRotation self) -> Transform3D
        Transform3D IdentityRotation::getTransform3D() const

        Returns transformation. 

        """
        return _libBornAgainCore.IdentityRotation_getTransform3D(self)

    def isIdentity(self):
        r"""
        isIdentity(IdentityRotation self) -> bool
        bool IdentityRotation::isIdentity() const

        Returns true if rotation matrix is identity matrix (no rotations) 

        """
        return _libBornAgainCore.IdentityRotation_isIdentity(self)
    __swig_destroy__ = _libBornAgainCore.delete_IdentityRotation

# Register IdentityRotation in _libBornAgainCore:
_libBornAgainCore.IdentityRotation_swigregister(IdentityRotation)

class RotationX(IRotation):
    r"""


    A rotation about the x axis.

    C++ includes: Rotations.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RotationX self, vdouble1d_t P) -> RotationX
        __init__(RotationX self, double angle) -> RotationX
        RotationX::RotationX(double angle)

        """
        _libBornAgainCore.RotationX_swiginit(self, _libBornAgainCore.new_RotationX(*args))

    def clone(self):
        r"""
        clone(RotationX self) -> RotationX
        RotationX* RotationX::clone() const

        """
        return _libBornAgainCore.RotationX_clone(self)

    def createInverse(self):
        r"""
        createInverse(RotationX self) -> RotationX
        RotationX* RotationX::createInverse() const

        Returns a new  IRotation object that is the current object's inverse. 

        """
        return _libBornAgainCore.RotationX_createInverse(self)

    def accept(self, visitor):
        r"""
        accept(RotationX self, INodeVisitor visitor)
        void RotationX::accept(INodeVisitor *visitor) const

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.RotationX_accept(self, visitor)

    def getAngle(self):
        r"""
        getAngle(RotationX self) -> double
        double RotationX::getAngle() const

        """
        return _libBornAgainCore.RotationX_getAngle(self)

    def getTransform3D(self):
        r"""
        getTransform3D(RotationX self) -> Transform3D
        Transform3D RotationX::getTransform3D() const

        Returns transformation. 

        """
        return _libBornAgainCore.RotationX_getTransform3D(self)
    __swig_destroy__ = _libBornAgainCore.delete_RotationX

# Register RotationX in _libBornAgainCore:
_libBornAgainCore.RotationX_swigregister(RotationX)

class RotationY(IRotation):
    r"""


    A rotation about the y axis.

    C++ includes: Rotations.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RotationY self, vdouble1d_t P) -> RotationY
        __init__(RotationY self, double angle) -> RotationY
        RotationY::RotationY(double angle)

        """
        _libBornAgainCore.RotationY_swiginit(self, _libBornAgainCore.new_RotationY(*args))

    def clone(self):
        r"""
        clone(RotationY self) -> RotationY
        RotationY* RotationY::clone() const

        """
        return _libBornAgainCore.RotationY_clone(self)

    def createInverse(self):
        r"""
        createInverse(RotationY self) -> RotationY
        RotationY* RotationY::createInverse() const

        Returns a new  IRotation object that is the current object's inverse. 

        """
        return _libBornAgainCore.RotationY_createInverse(self)

    def accept(self, visitor):
        r"""
        accept(RotationY self, INodeVisitor visitor)
        void RotationY::accept(INodeVisitor *visitor) const

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.RotationY_accept(self, visitor)

    def getAngle(self):
        r"""
        getAngle(RotationY self) -> double
        double RotationY::getAngle() const

        """
        return _libBornAgainCore.RotationY_getAngle(self)

    def getTransform3D(self):
        r"""
        getTransform3D(RotationY self) -> Transform3D
        Transform3D RotationY::getTransform3D() const

        Returns transformation. 

        """
        return _libBornAgainCore.RotationY_getTransform3D(self)
    __swig_destroy__ = _libBornAgainCore.delete_RotationY

# Register RotationY in _libBornAgainCore:
_libBornAgainCore.RotationY_swigregister(RotationY)

class RotationZ(IRotation):
    r"""


    A rotation about the z axis.

    C++ includes: Rotations.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RotationZ self, vdouble1d_t P) -> RotationZ
        __init__(RotationZ self, double angle) -> RotationZ
        RotationZ::RotationZ(double angle)

        """
        _libBornAgainCore.RotationZ_swiginit(self, _libBornAgainCore.new_RotationZ(*args))

    def clone(self):
        r"""
        clone(RotationZ self) -> RotationZ
        RotationZ* RotationZ::clone() const

        """
        return _libBornAgainCore.RotationZ_clone(self)

    def createInverse(self):
        r"""
        createInverse(RotationZ self) -> RotationZ
        RotationZ* RotationZ::createInverse() const

        Returns a new  IRotation object that is the current object's inverse. 

        """
        return _libBornAgainCore.RotationZ_createInverse(self)

    def accept(self, visitor):
        r"""
        accept(RotationZ self, INodeVisitor visitor)
        void RotationZ::accept(INodeVisitor *visitor) const

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.RotationZ_accept(self, visitor)

    def getAngle(self):
        r"""
        getAngle(RotationZ self) -> double
        double RotationZ::getAngle() const

        """
        return _libBornAgainCore.RotationZ_getAngle(self)

    def getTransform3D(self):
        r"""
        getTransform3D(RotationZ self) -> Transform3D
        Transform3D RotationZ::getTransform3D() const

        Returns transformation. 

        """
        return _libBornAgainCore.RotationZ_getTransform3D(self)
    __swig_destroy__ = _libBornAgainCore.delete_RotationZ

# Register RotationZ in _libBornAgainCore:
_libBornAgainCore.RotationZ_swigregister(RotationZ)

class RotationEuler(IRotation):
    r"""


    A sequence of rotations about the z-x'-z'' axes.

    C++ includes: Rotations.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RotationEuler self, vdouble1d_t P) -> RotationEuler
        __init__(RotationEuler self, double alpha, double beta, double gamma) -> RotationEuler
        RotationEuler::RotationEuler(double alpha, double beta, double gamma)

        """
        _libBornAgainCore.RotationEuler_swiginit(self, _libBornAgainCore.new_RotationEuler(*args))

    def clone(self):
        r"""
        clone(RotationEuler self) -> RotationEuler
        RotationEuler* RotationEuler::clone() const

        """
        return _libBornAgainCore.RotationEuler_clone(self)

    def createInverse(self):
        r"""
        createInverse(RotationEuler self) -> IRotation
        IRotation * RotationEuler::createInverse() const

        Returns a new  IRotation object that is the current object's inverse. 

        """
        return _libBornAgainCore.RotationEuler_createInverse(self)

    def accept(self, visitor):
        r"""
        accept(RotationEuler self, INodeVisitor visitor)
        void RotationEuler::accept(INodeVisitor *visitor) const

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.RotationEuler_accept(self, visitor)

    def getAlpha(self):
        r"""
        getAlpha(RotationEuler self) -> double
        double RotationEuler::getAlpha() const

        """
        return _libBornAgainCore.RotationEuler_getAlpha(self)

    def getBeta(self):
        r"""
        getBeta(RotationEuler self) -> double
        double RotationEuler::getBeta() const

        """
        return _libBornAgainCore.RotationEuler_getBeta(self)

    def getGamma(self):
        r"""
        getGamma(RotationEuler self) -> double
        double RotationEuler::getGamma() const

        """
        return _libBornAgainCore.RotationEuler_getGamma(self)

    def getTransform3D(self):
        r"""
        getTransform3D(RotationEuler self) -> Transform3D
        Transform3D RotationEuler::getTransform3D() const

        Returns transformation. 

        """
        return _libBornAgainCore.RotationEuler_getTransform3D(self)
    __swig_destroy__ = _libBornAgainCore.delete_RotationEuler

# Register RotationEuler in _libBornAgainCore:
_libBornAgainCore.RotationEuler_swigregister(RotationEuler)

class FitOptions(object):
    r"""Proxy of C++ FitOptions class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(FitOptions self) -> FitOptions"""
        _libBornAgainCore.FitOptions_swiginit(self, _libBornAgainCore.new_FitOptions())

    def derivEpsilon(self):
        r"""derivEpsilon(FitOptions self) -> double"""
        return _libBornAgainCore.FitOptions_derivEpsilon(self)

    def setDerivEpsilon(self, deriv_epsilon):
        r"""setDerivEpsilon(FitOptions self, double deriv_epsilon)"""
        return _libBornAgainCore.FitOptions_setDerivEpsilon(self, deriv_epsilon)

    def stepFactor(self):
        r"""stepFactor(FitOptions self) -> double"""
        return _libBornAgainCore.FitOptions_stepFactor(self)

    def setStepFactor(self, step_factor):
        r"""setStepFactor(FitOptions self, double step_factor)"""
        return _libBornAgainCore.FitOptions_setStepFactor(self, step_factor)
    __swig_destroy__ = _libBornAgainCore.delete_FitOptions

# Register FitOptions in _libBornAgainCore:
_libBornAgainCore.FitOptions_swigregister(FitOptions)

class IObserver(object):
    r"""


    Observer interface from Observer pattern.

    C++ includes: IObserver.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IObserver

    def notify(self, subject):
        r"""
        notify(IObserver self, IObservable subject)
        virtual void IObserver::notify(IObservable *subject)=0

        method which is used by observable subject to notify change in status 

        """
        return _libBornAgainCore.IObserver_notify(self, subject)

# Register IObserver in _libBornAgainCore:
_libBornAgainCore.IObserver_swigregister(IObserver)

class IObservable(object):
    r"""


    Observable interface from Observer pattern

    C++ includes: IObserver.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IObservable

    def attachObserver(self, obj):
        r"""
        attachObserver(IObservable self, IObservable::observer_t obj)
        void IObservable::attachObserver(observer_t obj)

        attach observer to the list of observers 

        """
        return _libBornAgainCore.IObservable_attachObserver(self, obj)

    def notifyObservers(self):
        r"""
        notifyObservers(IObservable self)
        void IObservable::notifyObservers()

        notify observers about change in status 

        """
        return _libBornAgainCore.IObservable_notifyObservers(self)

    def __init__(self):
        r"""
        __init__(IObservable self) -> IObservable


        Observable interface from Observer pattern

        C++ includes: IObserver.h

        """
        _libBornAgainCore.IObservable_swiginit(self, _libBornAgainCore.new_IObservable())

# Register IObservable in _libBornAgainCore:
_libBornAgainCore.IObservable_swigregister(IObservable)

class IterationInfo(object):
    r"""


    Stores fit iteration info to track fit flow from various observers. Used in context of  FitObjective.

    C++ includes: IterationInfo.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(IterationInfo self) -> IterationInfo
        IterationInfo::IterationInfo()

        """
        _libBornAgainCore.IterationInfo_swiginit(self, _libBornAgainCore.new_IterationInfo())

    def update(self, params, chi2):
        r"""
        update(IterationInfo self, Parameters params, double chi2)
        void IterationInfo::update(const Fit::Parameters &params, double chi2)

        """
        return _libBornAgainCore.IterationInfo_update(self, params, chi2)

    def iterationCount(self):
        r"""
        iterationCount(IterationInfo self) -> unsigned int
        unsigned IterationInfo::iterationCount() const

        Returns current number of minimizer iterations. 

        """
        return _libBornAgainCore.IterationInfo_iterationCount(self)

    def chi2(self):
        r"""
        chi2(IterationInfo self) -> double
        double IterationInfo::chi2() const

        """
        return _libBornAgainCore.IterationInfo_chi2(self)

    def parameters(self):
        r"""
        parameters(IterationInfo self) -> Parameters
        Fit::Parameters IterationInfo::parameters() const

        """
        return _libBornAgainCore.IterationInfo_parameters(self)

    def parameterMap(self):
        r"""
        parameterMap(IterationInfo self) -> map_string_double_t
        std::map< std::string, double > IterationInfo::parameterMap() const

        Returns map of fit parameter names and its current values. 

        """
        return _libBornAgainCore.IterationInfo_parameterMap(self)
    __swig_destroy__ = _libBornAgainCore.delete_IterationInfo

# Register IterationInfo in _libBornAgainCore:
_libBornAgainCore.IterationInfo_swigregister(IterationInfo)

class PyBuilderCallback(object):
    r"""


    Builds simulation object using a Python callable. Base class to wrap Python callable and pass it to C++. Used in swig interface file, intended to be overloaded from Python.

    C++ includes: PyFittingCallbacks.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(PyBuilderCallback self) -> PyBuilderCallback
        PyBuilderCallback::PyBuilderCallback()

        """
        if self.__class__ == PyBuilderCallback:
            _self = None
        else:
            _self = self
        _libBornAgainCore.PyBuilderCallback_swiginit(self, _libBornAgainCore.new_PyBuilderCallback(_self, ))
    __swig_destroy__ = _libBornAgainCore.delete_PyBuilderCallback

    def build_simulation(self, arg0):
        r"""
        build_simulation(PyBuilderCallback self, Parameters arg0) -> Simulation
        Simulation * PyBuilderCallback::build_simulation(Fit::Parameters)

        """
        return _libBornAgainCore.PyBuilderCallback_build_simulation(self, arg0)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_PyBuilderCallback(self)
        return weakref.proxy(self)

# Register PyBuilderCallback in _libBornAgainCore:
_libBornAgainCore.PyBuilderCallback_swigregister(PyBuilderCallback)

class PyObserverCallback(object):
    r"""


    Observer for  FitObjective based on Python callable. Base class to wrap Python callable and pass it to C++. Used in swig interface file, intended to be overloaded from Python.

    C++ includes: PyFittingCallbacks.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(PyObserverCallback self) -> PyObserverCallback
        PyObserverCallback::PyObserverCallback()

        """
        if self.__class__ == PyObserverCallback:
            _self = None
        else:
            _self = self
        _libBornAgainCore.PyObserverCallback_swiginit(self, _libBornAgainCore.new_PyObserverCallback(_self, ))
    __swig_destroy__ = _libBornAgainCore.delete_PyObserverCallback

    def update(self, arg0):
        r"""
        update(PyObserverCallback self, FitObjective arg0)
        void PyObserverCallback::update(const FitObjective &)

        """
        return _libBornAgainCore.PyObserverCallback_update(self, arg0)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_PyObserverCallback(self)
        return weakref.proxy(self)

# Register PyObserverCallback in _libBornAgainCore:
_libBornAgainCore.PyObserverCallback_swigregister(PyObserverCallback)

class FormFactorCrystal(IFormFactor):
    r"""


    The form factor of a  MesoCrystal.

    C++ includes: FormFactorCrystal.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lattice, basis_form_factor, meso_form_factor, position_variance=0.0):
        r"""
        __init__(FormFactorCrystal self, Lattice lattice, IFormFactor basis_form_factor, IFormFactor meso_form_factor, double position_variance=0.0) -> FormFactorCrystal
        FormFactorCrystal::FormFactorCrystal(const Lattice &lattice, const IFormFactor &basis_form_factor, const IFormFactor &meso_form_factor, double position_variance=0.0)

        """
        _libBornAgainCore.FormFactorCrystal_swiginit(self, _libBornAgainCore.new_FormFactorCrystal(lattice, basis_form_factor, meso_form_factor, position_variance))
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorCrystal

    def clone(self):
        r"""
        clone(FormFactorCrystal self) -> FormFactorCrystal
        FormFactorCrystal* FormFactorCrystal::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorCrystal_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorCrystal self, INodeVisitor visitor)
        void FormFactorCrystal::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorCrystal_accept(self, visitor)

    def setAmbientMaterial(self, material):
        r"""
        setAmbientMaterial(FormFactorCrystal self, Material material)
        void FormFactorCrystal::setAmbientMaterial(Material material) override

        Passes the material in which this particle is embedded. 

        """
        return _libBornAgainCore.FormFactorCrystal_setAmbientMaterial(self, material)

    def volume(self):
        r"""
        volume(FormFactorCrystal self) -> double
        double FormFactorCrystal::volume() const override final

        Returns the total volume of the particle of this form factor's shape. 

        """
        return _libBornAgainCore.FormFactorCrystal_volume(self)

    def radialExtension(self):
        r"""
        radialExtension(FormFactorCrystal self) -> double
        double FormFactorCrystal::radialExtension() const override final

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorCrystal_radialExtension(self)

    def bottomZ(self, rotation):
        r"""
        bottomZ(FormFactorCrystal self, IRotation rotation) -> double
        double FormFactorCrystal::bottomZ(const IRotation &rotation) const override

        Returns the z-coordinate of the lowest point in this shape after a given rotation. 

        """
        return _libBornAgainCore.FormFactorCrystal_bottomZ(self, rotation)

    def topZ(self, rotation):
        r"""
        topZ(FormFactorCrystal self, IRotation rotation) -> double
        double FormFactorCrystal::topZ(const IRotation &rotation) const override final

        Returns the z-coordinate of the lowest point in this shape after a given rotation. 

        """
        return _libBornAgainCore.FormFactorCrystal_topZ(self, rotation)

    def evaluate(self, wavevectors):
        r"""
        evaluate(FormFactorCrystal self, WavevectorInfo wavevectors) -> complex_t
        complex_t FormFactorCrystal::evaluate(const WavevectorInfo &wavevectors) const override final

        Returns scattering amplitude for complex wavevectors ki, kf. 

        """
        return _libBornAgainCore.FormFactorCrystal_evaluate(self, wavevectors)

# Register FormFactorCrystal in _libBornAgainCore:
_libBornAgainCore.FormFactorCrystal_swigregister(FormFactorCrystal)

class FormFactorWeighted(IFormFactor):
    r"""


    Coherent sum of different scalar  IFormFactor's with different weights.

    Used by  ParticleComposition. If same particles are at different positions, then consider FormFactorDecoratorMultiPositionFactor (restore from commit 0500a26de76).

    C++ includes: FormFactorWeighted.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(FormFactorWeighted self) -> FormFactorWeighted
        FormFactorWeighted::FormFactorWeighted()

        """
        _libBornAgainCore.FormFactorWeighted_swiginit(self, _libBornAgainCore.new_FormFactorWeighted())
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorWeighted

    def clone(self):
        r"""
        clone(FormFactorWeighted self) -> FormFactorWeighted
        FormFactorWeighted * FormFactorWeighted::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorWeighted_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorWeighted self, INodeVisitor visitor)
        void FormFactorWeighted::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorWeighted_accept(self, visitor)

    def radialExtension(self):
        r"""
        radialExtension(FormFactorWeighted self) -> double
        double FormFactorWeighted::radialExtension() const override final

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorWeighted_radialExtension(self)

    def bottomZ(self, rotation):
        r"""
        bottomZ(FormFactorWeighted self, IRotation rotation) -> double
        double FormFactorWeighted::bottomZ(const IRotation &rotation) const override final

        Returns the z-coordinate of the lowest point in this shape after a given rotation. 

        """
        return _libBornAgainCore.FormFactorWeighted_bottomZ(self, rotation)

    def topZ(self, rotation):
        r"""
        topZ(FormFactorWeighted self, IRotation rotation) -> double
        double FormFactorWeighted::topZ(const IRotation &rotation) const override final

        Returns the z-coordinate of the lowest point in this shape after a given rotation. 

        """
        return _libBornAgainCore.FormFactorWeighted_topZ(self, rotation)

    def addFormFactor(self, form_factor, weight=1.0):
        r"""
        addFormFactor(FormFactorWeighted self, IFormFactor form_factor, double weight=1.0)
        void FormFactorWeighted::addFormFactor(const IFormFactor &form_factor, double weight=1.0)

        """
        return _libBornAgainCore.FormFactorWeighted_addFormFactor(self, form_factor, weight)

    def setAmbientMaterial(self, material):
        r"""
        setAmbientMaterial(FormFactorWeighted self, Material material)
        void FormFactorWeighted::setAmbientMaterial(Material material) override final

        Passes the material in which this particle is embedded. 

        """
        return _libBornAgainCore.FormFactorWeighted_setAmbientMaterial(self, material)

    def evaluate(self, wavevectors):
        r"""
        evaluate(FormFactorWeighted self, WavevectorInfo wavevectors) -> complex_t
        complex_t FormFactorWeighted::evaluate(const WavevectorInfo &wavevectors) const override final

        Returns scattering amplitude for complex wavevectors ki, kf. 

        """
        return _libBornAgainCore.FormFactorWeighted_evaluate(self, wavevectors)

# Register FormFactorWeighted in _libBornAgainCore:
_libBornAgainCore.FormFactorWeighted_swigregister(FormFactorWeighted)

class IAbstractParticle(ISample):
    r"""


    Interface for a generic particle.

    Inherited by  IParticle and  ParticleDistribution.

    C++ includes: IAbstractParticle.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IAbstractParticle

    def clone(self):
        r"""
        clone(IAbstractParticle self) -> IAbstractParticle
        virtual IAbstractParticle* IAbstractParticle::clone() const =0

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.IAbstractParticle_clone(self)

    def accept(self, visitor):
        r"""
        accept(IAbstractParticle self, INodeVisitor visitor)
        void IAbstractParticle::accept(INodeVisitor *visitor) const

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.IAbstractParticle_accept(self, visitor)

    def abundance(self):
        r"""
        abundance(IAbstractParticle self) -> double
        double IAbstractParticle::abundance() const

        """
        return _libBornAgainCore.IAbstractParticle_abundance(self)

    def setAbundance(self, abundance):
        r"""
        setAbundance(IAbstractParticle self, double abundance)
        void IAbstractParticle::setAbundance(double abundance)

        Sets particle abundance.

        Parameters:
        -----------

        abundance: 
        proportion of this type of particles normalized to the total number of particles in the layout. 

        """
        return _libBornAgainCore.IAbstractParticle_setAbundance(self, abundance)

    def translate(self, translation):
        r"""
        translate(IAbstractParticle self, kvector_t translation)
        virtual void IAbstractParticle::translate(kvector_t translation)=0

        Translates the particle with the given vector. 

        """
        return _libBornAgainCore.IAbstractParticle_translate(self, translation)

    def rotate(self, rotation):
        r"""
        rotate(IAbstractParticle self, IRotation rotation)
        virtual void IAbstractParticle::rotate(const IRotation &rotation)=0

        Applies the given rotation to the particle. 

        """
        return _libBornAgainCore.IAbstractParticle_rotate(self, rotation)

# Register IAbstractParticle in _libBornAgainCore:
_libBornAgainCore.IAbstractParticle_swigregister(IAbstractParticle)

class IClusteredParticles(ISample):
    r"""


    An ordered assembly of particles. Currently, the only child class is  Crystal.

    C++ includes: IClusteredParticles.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        r"""
        clone(IClusteredParticles self) -> IClusteredParticles
        IClusteredParticles* IClusteredParticles::clone() const override=0

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.IClusteredParticles_clone(self)

    def createTotalFormFactor(self, arg2, arg3, arg4):
        r"""
        createTotalFormFactor(IClusteredParticles self, IFormFactor arg2, IRotation arg3, kvector_t arg4) -> IFormFactor
        virtual IFormFactor* IClusteredParticles::createTotalFormFactor(const IFormFactor &, const IRotation *, const kvector_t &) const =0

        Creates a total form factor for the mesocrystal with a specific shape and content The bulk content of the mesocrystal is encapsulated by the  IClusteredParticles object itself 

        """
        return _libBornAgainCore.IClusteredParticles_createTotalFormFactor(self, arg2, arg3, arg4)

    def homogeneousRegions(self):
        r"""
        homogeneousRegions(IClusteredParticles self) -> std::vector< HomogeneousRegion,std::allocator< HomogeneousRegion > >
        virtual std::vector<HomogeneousRegion> IClusteredParticles::homogeneousRegions() const =0

        Creates region information with volumetric densities instead of absolute volume These densities need to be multiplied by the total mesocrystal volume 

        """
        return _libBornAgainCore.IClusteredParticles_homogeneousRegions(self)
    __swig_destroy__ = _libBornAgainCore.delete_IClusteredParticles

# Register IClusteredParticles in _libBornAgainCore:
_libBornAgainCore.IClusteredParticles_swigregister(IClusteredParticles)

class Crystal(IClusteredParticles):
    r"""


    A crystal structure with a  ParticleComposition as a basis. Used in  MesoCrystal, where it is given an outer shape.

    C++ includes: Crystal.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lattice_basis, lattice):
        r"""
        __init__(Crystal self, IParticle lattice_basis, Lattice lattice) -> Crystal
        Crystal::Crystal(const IParticle &lattice_basis, const Lattice &lattice)

        """
        _libBornAgainCore.Crystal_swiginit(self, _libBornAgainCore.new_Crystal(lattice_basis, lattice))
    __swig_destroy__ = _libBornAgainCore.delete_Crystal

    def clone(self):
        r"""
        clone(Crystal self) -> Crystal
        Crystal * Crystal::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.Crystal_clone(self)

    def accept(self, visitor):
        r"""
        accept(Crystal self, INodeVisitor visitor)
        void Crystal::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.Crystal_accept(self, visitor)

    def createTotalFormFactor(self, meso_crystal_form_factor, p_rotation, translation):
        r"""
        createTotalFormFactor(Crystal self, IFormFactor meso_crystal_form_factor, IRotation p_rotation, kvector_t translation) -> IFormFactor
        IFormFactor * Crystal::createTotalFormFactor(const IFormFactor &meso_crystal_form_factor, const IRotation *p_rotation, const kvector_t &translation) const override final

        Creates a total form factor for the mesocrystal with a specific shape and content The bulk content of the mesocrystal is encapsulated by the  IClusteredParticles object itself 

        """
        return _libBornAgainCore.Crystal_createTotalFormFactor(self, meso_crystal_form_factor, p_rotation, translation)

    def homogeneousRegions(self):
        r"""
        homogeneousRegions(Crystal self) -> std::vector< HomogeneousRegion,std::allocator< HomogeneousRegion > >
        std::vector< HomogeneousRegion > Crystal::homogeneousRegions() const override final

        Creates region information with volumetric densities instead of absolute volume These densities need to be multiplied by the total mesocrystal volume 

        """
        return _libBornAgainCore.Crystal_homogeneousRegions(self)

    def transformedLattice(self, p_rotation=None):
        r"""
        transformedLattice(Crystal self, IRotation p_rotation=None) -> Lattice
        Lattice Crystal::transformedLattice(const IRotation *p_rotation=nullptr) const

        """
        return _libBornAgainCore.Crystal_transformedLattice(self, p_rotation)

    def setPositionVariance(self, position_variance):
        r"""
        setPositionVariance(Crystal self, double position_variance)
        void Crystal::setPositionVariance(double position_variance)

        """
        return _libBornAgainCore.Crystal_setPositionVariance(self, position_variance)

    def getChildren(self):
        r"""
        getChildren(Crystal self) -> swig_dummy_type_const_inode_vector
        std::vector< const INode * > Crystal::getChildren() const override final

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.Crystal_getChildren(self)

# Register Crystal in _libBornAgainCore:
_libBornAgainCore.Crystal_swigregister(Crystal)

class IParticle(IAbstractParticle):
    r"""


    Pure virtual base class for  Particle,  ParticleComposition,  ParticleCoreShell,  MesoCrystal. Provides position/rotation and form factor. Abundance is inherited from  IAbstractParticle.

    C++ includes: IParticle.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IParticle

    def clone(self):
        r"""
        clone(IParticle self) -> IParticle
        IParticle* IParticle::clone() const override=0

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.IParticle_clone(self)

    def createFormFactor(self):
        r"""
        createFormFactor(IParticle self) -> IFormFactor
        IFormFactor * IParticle::createFormFactor() const

        Create a form factor for this particle. 

        """
        return _libBornAgainCore.IParticle_createFormFactor(self)

    def createSlicedParticle(self, limits):
        r"""
        createSlicedParticle(IParticle self, ZLimits limits) -> SlicedParticle
        SlicedParticle IParticle::createSlicedParticle(ZLimits limits) const

        Create a sliced form factor for this particle. 

        """
        return _libBornAgainCore.IParticle_createSlicedParticle(self, limits)

    def position(self):
        r"""
        position(IParticle self) -> kvector_t
        kvector_t IParticle::position() const

        Returns particle position. 

        """
        return _libBornAgainCore.IParticle_position(self)

    def setPosition(self, *args):
        r"""
        setPosition(IParticle self, kvector_t position)
        setPosition(IParticle self, double x, double y, double z)
        void IParticle::setPosition(double x, double y, double z)

        Sets relative position of the particle's reference point in the coordinate system of parent.

        Parameters:
        -----------

        x: 
        x-coordinate in nanometers

        y: 
        y-coordinate in nanometers

        z: 
        z-coordinate in nanometers 

        """
        return _libBornAgainCore.IParticle_setPosition(self, *args)

    def translate(self, translation):
        r"""
        translate(IParticle self, kvector_t translation)
        void IParticle::translate(kvector_t translation) override final

        Translates the particle. 

        """
        return _libBornAgainCore.IParticle_translate(self, translation)

    def rotation(self):
        r"""
        rotation(IParticle self) -> IRotation
        const IRotation * IParticle::rotation() const

        Returns rotation object. 

        """
        return _libBornAgainCore.IParticle_rotation(self)

    def setRotation(self, rotation):
        r"""
        setRotation(IParticle self, IRotation rotation)
        void IParticle::setRotation(const IRotation &rotation)

        Sets transformation. 

        """
        return _libBornAgainCore.IParticle_setRotation(self, rotation)

    def rotate(self, rotation):
        r"""
        rotate(IParticle self, IRotation rotation)
        void IParticle::rotate(const IRotation &rotation) override final

        Rotates the particle. 

        """
        return _libBornAgainCore.IParticle_rotate(self, rotation)

    def getChildren(self):
        r"""
        getChildren(IParticle self) -> swig_dummy_type_const_inode_vector
        std::vector< const INode * > IParticle::getChildren() const override

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.IParticle_getChildren(self)

    def registerAbundance(self, make_registered=True):
        r"""
        registerAbundance(IParticle self, bool make_registered=True)
        void IParticle::registerAbundance(bool make_registered=true)

        """
        return _libBornAgainCore.IParticle_registerAbundance(self, make_registered)

    def registerPosition(self, make_registered=True):
        r"""
        registerPosition(IParticle self, bool make_registered=True)
        void IParticle::registerPosition(bool make_registered=true)

        Registers the three components of its position. 

        """
        return _libBornAgainCore.IParticle_registerPosition(self, make_registered)

    def decompose(self):
        r"""
        decompose(IParticle self) -> SafePointerVector< IParticle >
        SafePointerVector< IParticle > IParticle::decompose() const

        Decompose in constituent  IParticle objects. 

        """
        return _libBornAgainCore.IParticle_decompose(self)

    def bottomTopZ(self):
        r"""
        bottomTopZ(IParticle self) -> ParticleLimits
        ParticleLimits IParticle::bottomTopZ() const

        Top and bottom z-coordinate. 

        """
        return _libBornAgainCore.IParticle_bottomTopZ(self)

# Register IParticle in _libBornAgainCore:
_libBornAgainCore.IParticle_swigregister(IParticle)

class MesoCrystal(IParticle):
    r"""


    A particle with an internal structure of smaller particles.

    C++ includes: MesoCrystal.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, particle_structure, form_factor):
        r"""
        __init__(MesoCrystal self, IClusteredParticles particle_structure, IFormFactor form_factor) -> MesoCrystal
        MesoCrystal::MesoCrystal(const IClusteredParticles &particle_structure, const IFormFactor &form_factor)

        """
        _libBornAgainCore.MesoCrystal_swiginit(self, _libBornAgainCore.new_MesoCrystal(particle_structure, form_factor))
    __swig_destroy__ = _libBornAgainCore.delete_MesoCrystal

    def clone(self):
        r"""
        clone(MesoCrystal self) -> MesoCrystal
        MesoCrystal * MesoCrystal::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.MesoCrystal_clone(self)

    def accept(self, visitor):
        r"""
        accept(MesoCrystal self, INodeVisitor visitor)
        void MesoCrystal::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.MesoCrystal_accept(self, visitor)

    def createSlicedParticle(self, limits):
        r"""
        createSlicedParticle(MesoCrystal self, ZLimits limits) -> SlicedParticle
        SlicedParticle MesoCrystal::createSlicedParticle(ZLimits limits) const override final

        Create a sliced form factor for this particle. 

        """
        return _libBornAgainCore.MesoCrystal_createSlicedParticle(self, limits)

    def getChildren(self):
        r"""
        getChildren(MesoCrystal self) -> swig_dummy_type_const_inode_vector
        std::vector< const INode * > MesoCrystal::getChildren() const override final

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.MesoCrystal_getChildren(self)

# Register MesoCrystal in _libBornAgainCore:
_libBornAgainCore.MesoCrystal_swigregister(MesoCrystal)

class Particle(IParticle):
    r"""


    A particle with a form factor and refractive index.

    C++ includes: Particle.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Particle self) -> Particle
        __init__(Particle self, Material material) -> Particle
        __init__(Particle self, Material material, IFormFactor form_factor) -> Particle
        __init__(Particle self, Material material, IFormFactor form_factor, IRotation rotation) -> Particle
        Particle::Particle(Material material, const IFormFactor &form_factor, const IRotation &rotation)

        """
        _libBornAgainCore.Particle_swiginit(self, _libBornAgainCore.new_Particle(*args))

    def clone(self):
        r"""
        clone(Particle self) -> Particle
        Particle * Particle::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.Particle_clone(self)

    def accept(self, visitor):
        r"""
        accept(Particle self, INodeVisitor visitor)
        void Particle::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.Particle_accept(self, visitor)

    def createSlicedParticle(self, limits):
        r"""
        createSlicedParticle(Particle self, ZLimits limits) -> SlicedParticle
        SlicedParticle Particle::createSlicedParticle(ZLimits limits) const override final

        Create a sliced form factor for this particle. 

        """
        return _libBornAgainCore.Particle_createSlicedParticle(self, limits)

    def setMaterial(self, material):
        r"""
        setMaterial(Particle self, Material material)
        void Particle::setMaterial(Material material)

        """
        return _libBornAgainCore.Particle_setMaterial(self, material)

    def material(self):
        r"""
        material(Particle self) -> Material
        const Material* Particle::material() const override final

        Returns nullptr, unless overwritten to return a specific material. 

        """
        return _libBornAgainCore.Particle_material(self)

    def setFormFactor(self, form_factor):
        r"""
        setFormFactor(Particle self, IFormFactor form_factor)
        void Particle::setFormFactor(const IFormFactor &form_factor)

        """
        return _libBornAgainCore.Particle_setFormFactor(self, form_factor)

    def getChildren(self):
        r"""
        getChildren(Particle self) -> swig_dummy_type_const_inode_vector
        std::vector< const INode * > Particle::getChildren() const override final

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.Particle_getChildren(self)
    __swig_destroy__ = _libBornAgainCore.delete_Particle

# Register Particle in _libBornAgainCore:
_libBornAgainCore.Particle_swigregister(Particle)

class ParticleComposition(IParticle):
    r"""


    A composition of particles at fixed positions

    C++ includes: ParticleComposition.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ParticleComposition self) -> ParticleComposition
        __init__(ParticleComposition self, IParticle particle, vector_kvector_t positions) -> ParticleComposition
        ParticleComposition::ParticleComposition(const IParticle &particle, std::vector< kvector_t > positions)

        """
        _libBornAgainCore.ParticleComposition_swiginit(self, _libBornAgainCore.new_ParticleComposition(*args))
    __swig_destroy__ = _libBornAgainCore.delete_ParticleComposition

    def clone(self):
        r"""
        clone(ParticleComposition self) -> ParticleComposition
        ParticleComposition * ParticleComposition::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.ParticleComposition_clone(self)

    def accept(self, visitor):
        r"""
        accept(ParticleComposition self, INodeVisitor visitor)
        void ParticleComposition::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.ParticleComposition_accept(self, visitor)

    def createFormFactor(self):
        r"""
        createFormFactor(ParticleComposition self) -> IFormFactor
        IFormFactor * ParticleComposition::createFormFactor() const override final

        Create a form factor for this particle. 

        """
        return _libBornAgainCore.ParticleComposition_createFormFactor(self)

    def addParticle(self, *args):
        r"""
        addParticle(ParticleComposition self, IParticle particle)
        addParticle(ParticleComposition self, IParticle particle, kvector_t position)
        void ParticleComposition::addParticle(const IParticle &particle, kvector_t position)

        """
        return _libBornAgainCore.ParticleComposition_addParticle(self, *args)

    def addParticles(self, particle, positions):
        r"""
        addParticles(ParticleComposition self, IParticle particle, vector_kvector_t positions)
        void ParticleComposition::addParticles(const IParticle &particle, std::vector< kvector_t > positions)

        """
        return _libBornAgainCore.ParticleComposition_addParticles(self, particle, positions)

    def nbrParticles(self):
        r"""
        nbrParticles(ParticleComposition self) -> size_t
        size_t ParticleComposition::nbrParticles() const

        Returns number of different particles. 

        """
        return _libBornAgainCore.ParticleComposition_nbrParticles(self)

    def getChildren(self):
        r"""
        getChildren(ParticleComposition self) -> swig_dummy_type_const_inode_vector
        std::vector< const INode * > ParticleComposition::getChildren() const override final

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.ParticleComposition_getChildren(self)

    def decompose(self):
        r"""
        decompose(ParticleComposition self) -> SafePointerVector< IParticle >
        SafePointerVector< IParticle > ParticleComposition::decompose() const override final

        Decompose in constituent  IParticle objects. 

        """
        return _libBornAgainCore.ParticleComposition_decompose(self)

    def bottomTopZ(self):
        r"""
        bottomTopZ(ParticleComposition self) -> ParticleLimits
        ParticleLimits ParticleComposition::bottomTopZ() const override final

        Top and bottom z-coordinate. 

        """
        return _libBornAgainCore.ParticleComposition_bottomTopZ(self)

# Register ParticleComposition in _libBornAgainCore:
_libBornAgainCore.ParticleComposition_swigregister(ParticleComposition)

class ParticleCoreShell(IParticle):
    r"""


    A particle with a core/shell geometry.

    C++ includes: ParticleCoreShell.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ParticleCoreShell self, Particle shell, Particle core, kvector_t relative_core_position=kvector_t(0.0, 0.0, 0.0)) -> ParticleCoreShell
        ParticleCoreShell::ParticleCoreShell(const Particle &shell, const Particle &core, kvector_t relative_core_position=kvector_t(0.0, 0.0, 0.0))

        """
        _libBornAgainCore.ParticleCoreShell_swiginit(self, _libBornAgainCore.new_ParticleCoreShell(*args))
    __swig_destroy__ = _libBornAgainCore.delete_ParticleCoreShell

    def clone(self):
        r"""
        clone(ParticleCoreShell self) -> ParticleCoreShell
        ParticleCoreShell * ParticleCoreShell::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.ParticleCoreShell_clone(self)

    def accept(self, visitor):
        r"""
        accept(ParticleCoreShell self, INodeVisitor visitor)
        void ParticleCoreShell::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.ParticleCoreShell_accept(self, visitor)

    def createSlicedParticle(self, limits):
        r"""
        createSlicedParticle(ParticleCoreShell self, ZLimits limits) -> SlicedParticle
        SlicedParticle ParticleCoreShell::createSlicedParticle(ZLimits limits) const override final

        Create a sliced form factor for this particle. 

        """
        return _libBornAgainCore.ParticleCoreShell_createSlicedParticle(self, limits)

    def coreParticle(self):
        r"""
        coreParticle(ParticleCoreShell self) -> Particle
        const Particle * ParticleCoreShell::coreParticle() const

        """
        return _libBornAgainCore.ParticleCoreShell_coreParticle(self)

    def shellParticle(self):
        r"""
        shellParticle(ParticleCoreShell self) -> Particle
        const Particle * ParticleCoreShell::shellParticle() const

        """
        return _libBornAgainCore.ParticleCoreShell_shellParticle(self)

    def getChildren(self):
        r"""
        getChildren(ParticleCoreShell self) -> swig_dummy_type_const_inode_vector
        std::vector< const INode * > ParticleCoreShell::getChildren() const override final

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.ParticleCoreShell_getChildren(self)

# Register ParticleCoreShell in _libBornAgainCore:
_libBornAgainCore.ParticleCoreShell_swigregister(ParticleCoreShell)

class ParticleDistribution(IAbstractParticle):
    r"""


    A particle type that is a parametric distribution of  IParticle's.

    C++ includes: ParticleDistribution.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, prototype, par_distr):
        r"""
        __init__(ParticleDistribution self, IParticle prototype, ParameterDistribution par_distr) -> ParticleDistribution
        ParticleDistribution::ParticleDistribution(const IParticle &prototype, const ParameterDistribution &par_distr)

        """
        _libBornAgainCore.ParticleDistribution_swiginit(self, _libBornAgainCore.new_ParticleDistribution(prototype, par_distr))

    def clone(self):
        r"""
        clone(ParticleDistribution self) -> ParticleDistribution
        ParticleDistribution * ParticleDistribution::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.ParticleDistribution_clone(self)

    def accept(self, visitor):
        r"""
        accept(ParticleDistribution self, INodeVisitor visitor)
        void ParticleDistribution::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.ParticleDistribution_accept(self, visitor)

    def translate(self, translation):
        r"""
        translate(ParticleDistribution self, kvector_t translation)
        void ParticleDistribution::translate(kvector_t translation) override final

        Translates the particle with the given vector. 

        """
        return _libBornAgainCore.ParticleDistribution_translate(self, translation)

    def rotate(self, rotation):
        r"""
        rotate(ParticleDistribution self, IRotation rotation)
        void ParticleDistribution::rotate(const IRotation &rotation) override final

        Applies the given rotation to the particle. 

        """
        return _libBornAgainCore.ParticleDistribution_rotate(self, rotation)

    def generateParticles(self):
        r"""
        generateParticles(ParticleDistribution self) -> SafePointerVector< IParticle >
        SafePointerVector< IParticle > ParticleDistribution::generateParticles() const

        Returns list of new particles generated according to a distribution.

        Returns particle clones with parameter values drawn from distribution. 

        """
        return _libBornAgainCore.ParticleDistribution_generateParticles(self)

    def prototype(self):
        r"""
        prototype(ParticleDistribution self) -> IParticle
        const IParticle& ParticleDistribution::prototype() const

        Returns the prototype particle, used for generating multiple ones. 

        """
        return _libBornAgainCore.ParticleDistribution_prototype(self)

    def parameterDistribution(self):
        r"""
        parameterDistribution(ParticleDistribution self) -> ParameterDistribution
        ParameterDistribution ParticleDistribution::parameterDistribution() const

        Returns the distributed parameter data. 

        """
        return _libBornAgainCore.ParticleDistribution_parameterDistribution(self)

    def getChildren(self):
        r"""
        getChildren(ParticleDistribution self) -> swig_dummy_type_const_inode_vector
        std::vector< const INode * > ParticleDistribution::getChildren() const override final

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.ParticleDistribution_getChildren(self)

    def mainUnits(self):
        r"""
        mainUnits(ParticleDistribution self) -> std::string
        std::string ParticleDistribution::mainUnits() const

        """
        return _libBornAgainCore.ParticleDistribution_mainUnits(self)
    __swig_destroy__ = _libBornAgainCore.delete_ParticleDistribution

# Register ParticleDistribution in _libBornAgainCore:
_libBornAgainCore.ParticleDistribution_swigregister(ParticleDistribution)

class IFTDecayFunction1D(ICloneable, INode):
    r"""


    Interface for a one-dimensional decay function, with evaluate(q) returning the Fourier transform, normalized to  $\\int dq\\; {\\rm evaluate}(q) = 1$.

    C++ includes: FTDecay1D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        r"""
        clone(IFTDecayFunction1D self) -> IFTDecayFunction1D
        virtual IFTDecayFunction1D* IFTDecayFunction1D::clone() const =0

        """
        return _libBornAgainCore.IFTDecayFunction1D_clone(self)

    def evaluate(self, q):
        r"""
        evaluate(IFTDecayFunction1D self, double q) -> double
        virtual double IFTDecayFunction1D::evaluate(double q) const =0

        """
        return _libBornAgainCore.IFTDecayFunction1D_evaluate(self, q)

    def decayLength(self):
        r"""
        decayLength(IFTDecayFunction1D self) -> double
        double IFTDecayFunction1D::decayLength() const

        """
        return _libBornAgainCore.IFTDecayFunction1D_decayLength(self)
    __swig_destroy__ = _libBornAgainCore.delete_IFTDecayFunction1D

# Register IFTDecayFunction1D in _libBornAgainCore:
_libBornAgainCore.IFTDecayFunction1D_swigregister(IFTDecayFunction1D)

class FTDecayFunction1DCauchy(IFTDecayFunction1D):
    r"""


    One-dimensional Cauchy decay function in reciprocal space; corresponds to exp(-|x|/decay_length) in real space.

    C++ includes: FTDecay1D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FTDecayFunction1DCauchy self, vdouble1d_t P) -> FTDecayFunction1DCauchy
        __init__(FTDecayFunction1DCauchy self, double decay_length) -> FTDecayFunction1DCauchy
        FTDecayFunction1DCauchy::FTDecayFunction1DCauchy(double decay_length)

        """
        _libBornAgainCore.FTDecayFunction1DCauchy_swiginit(self, _libBornAgainCore.new_FTDecayFunction1DCauchy(*args))

    def clone(self):
        r"""
        clone(FTDecayFunction1DCauchy self) -> FTDecayFunction1DCauchy
        FTDecayFunction1DCauchy * FTDecayFunction1DCauchy::clone() const

        """
        return _libBornAgainCore.FTDecayFunction1DCauchy_clone(self)

    def accept(self, visitor):
        r"""
        accept(FTDecayFunction1DCauchy self, INodeVisitor visitor)
        void FTDecayFunction1DCauchy::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDecayFunction1DCauchy_accept(self, visitor)

    def evaluate(self, q):
        r"""
        evaluate(FTDecayFunction1DCauchy self, double q) -> double
        double FTDecayFunction1DCauchy::evaluate(double q) const final

        """
        return _libBornAgainCore.FTDecayFunction1DCauchy_evaluate(self, q)
    __swig_destroy__ = _libBornAgainCore.delete_FTDecayFunction1DCauchy

# Register FTDecayFunction1DCauchy in _libBornAgainCore:
_libBornAgainCore.FTDecayFunction1DCauchy_swigregister(FTDecayFunction1DCauchy)

class FTDecayFunction1DGauss(IFTDecayFunction1D):
    r"""


    One-dimensional Gauss decay function in reciprocal space; corresponds to exp[-x^2/(2*decay_length^2)] in real space.

    C++ includes: FTDecay1D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FTDecayFunction1DGauss self, vdouble1d_t P) -> FTDecayFunction1DGauss
        __init__(FTDecayFunction1DGauss self, double decay_length) -> FTDecayFunction1DGauss
        FTDecayFunction1DGauss::FTDecayFunction1DGauss(double decay_length)

        """
        _libBornAgainCore.FTDecayFunction1DGauss_swiginit(self, _libBornAgainCore.new_FTDecayFunction1DGauss(*args))

    def clone(self):
        r"""
        clone(FTDecayFunction1DGauss self) -> FTDecayFunction1DGauss
        FTDecayFunction1DGauss * FTDecayFunction1DGauss::clone() const

        """
        return _libBornAgainCore.FTDecayFunction1DGauss_clone(self)

    def accept(self, visitor):
        r"""
        accept(FTDecayFunction1DGauss self, INodeVisitor visitor)
        void FTDecayFunction1DGauss::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDecayFunction1DGauss_accept(self, visitor)

    def evaluate(self, q):
        r"""
        evaluate(FTDecayFunction1DGauss self, double q) -> double
        double FTDecayFunction1DGauss::evaluate(double q) const final

        """
        return _libBornAgainCore.FTDecayFunction1DGauss_evaluate(self, q)
    __swig_destroy__ = _libBornAgainCore.delete_FTDecayFunction1DGauss

# Register FTDecayFunction1DGauss in _libBornAgainCore:
_libBornAgainCore.FTDecayFunction1DGauss_swigregister(FTDecayFunction1DGauss)

class FTDecayFunction1DTriangle(IFTDecayFunction1D):
    r"""


    One-dimensional triangle decay function in reciprocal space; corresponds to 1-|x|/decay_length if |x|<decay_length (and 0 otherwise) in real space.

    C++ includes: FTDecay1D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FTDecayFunction1DTriangle self, vdouble1d_t P) -> FTDecayFunction1DTriangle
        __init__(FTDecayFunction1DTriangle self, double decay_length) -> FTDecayFunction1DTriangle
        FTDecayFunction1DTriangle::FTDecayFunction1DTriangle(double decay_length)

        """
        _libBornAgainCore.FTDecayFunction1DTriangle_swiginit(self, _libBornAgainCore.new_FTDecayFunction1DTriangle(*args))

    def clone(self):
        r"""
        clone(FTDecayFunction1DTriangle self) -> FTDecayFunction1DTriangle
        FTDecayFunction1DTriangle * FTDecayFunction1DTriangle::clone() const

        """
        return _libBornAgainCore.FTDecayFunction1DTriangle_clone(self)

    def accept(self, visitor):
        r"""
        accept(FTDecayFunction1DTriangle self, INodeVisitor visitor)
        void FTDecayFunction1DTriangle::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDecayFunction1DTriangle_accept(self, visitor)

    def evaluate(self, q):
        r"""
        evaluate(FTDecayFunction1DTriangle self, double q) -> double
        double FTDecayFunction1DTriangle::evaluate(double q) const final

        """
        return _libBornAgainCore.FTDecayFunction1DTriangle_evaluate(self, q)
    __swig_destroy__ = _libBornAgainCore.delete_FTDecayFunction1DTriangle

# Register FTDecayFunction1DTriangle in _libBornAgainCore:
_libBornAgainCore.FTDecayFunction1DTriangle_swigregister(FTDecayFunction1DTriangle)

class FTDecayFunction1DVoigt(IFTDecayFunction1D):
    r"""


    One-dimensional pseudo-Voigt decay function in reciprocal space; corresponds to eta*Gauss + (1-eta)*Cauchy.

    C++ includes: FTDecay1D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FTDecayFunction1DVoigt self, vdouble1d_t P) -> FTDecayFunction1DVoigt
        __init__(FTDecayFunction1DVoigt self, double decay_length, double eta) -> FTDecayFunction1DVoigt
        FTDecayFunction1DVoigt::FTDecayFunction1DVoigt(double decay_length, double eta)

        """
        _libBornAgainCore.FTDecayFunction1DVoigt_swiginit(self, _libBornAgainCore.new_FTDecayFunction1DVoigt(*args))

    def clone(self):
        r"""
        clone(FTDecayFunction1DVoigt self) -> FTDecayFunction1DVoigt
        FTDecayFunction1DVoigt * FTDecayFunction1DVoigt::clone() const

        """
        return _libBornAgainCore.FTDecayFunction1DVoigt_clone(self)

    def accept(self, visitor):
        r"""
        accept(FTDecayFunction1DVoigt self, INodeVisitor visitor)
        void FTDecayFunction1DVoigt::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDecayFunction1DVoigt_accept(self, visitor)

    def evaluate(self, q):
        r"""
        evaluate(FTDecayFunction1DVoigt self, double q) -> double
        double FTDecayFunction1DVoigt::evaluate(double q) const final

        """
        return _libBornAgainCore.FTDecayFunction1DVoigt_evaluate(self, q)

    def eEta(self):
        r"""
        eEta(FTDecayFunction1DVoigt self) -> double
        double FTDecayFunction1DVoigt::eEta() const

        """
        return _libBornAgainCore.FTDecayFunction1DVoigt_eEta(self)
    __swig_destroy__ = _libBornAgainCore.delete_FTDecayFunction1DVoigt

# Register FTDecayFunction1DVoigt in _libBornAgainCore:
_libBornAgainCore.FTDecayFunction1DVoigt_swigregister(FTDecayFunction1DVoigt)

class IFTDecayFunction2D(ICloneable, INode):
    r"""


    Interface for two-dimensional decay function in reciprocal space.

    C++ includes: FTDecay2D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        r"""
        clone(IFTDecayFunction2D self) -> IFTDecayFunction2D
        virtual IFTDecayFunction2D* IFTDecayFunction2D::clone() const =0

        """
        return _libBornAgainCore.IFTDecayFunction2D_clone(self)

    def decayLengthX(self):
        r"""
        decayLengthX(IFTDecayFunction2D self) -> double
        double IFTDecayFunction2D::decayLengthX() const

        get decay length in distribution's X-direction 

        """
        return _libBornAgainCore.IFTDecayFunction2D_decayLengthX(self)

    def decayLengthY(self):
        r"""
        decayLengthY(IFTDecayFunction2D self) -> double
        double IFTDecayFunction2D::decayLengthY() const

        get decay length in distribution's Y-direction 

        """
        return _libBornAgainCore.IFTDecayFunction2D_decayLengthY(self)

    def gamma(self):
        r"""
        gamma(IFTDecayFunction2D self) -> double
        double IFTDecayFunction2D::gamma() const

        get angle between first lattice vector and X-axis of distribution (both in direct space) 

        """
        return _libBornAgainCore.IFTDecayFunction2D_gamma(self)

    def evaluate(self, qx, qy):
        r"""
        evaluate(IFTDecayFunction2D self, double qx, double qy) -> double
        virtual double IFTDecayFunction2D::evaluate(double qx, double qy) const =0

        evaluate Fourier transformed decay function for q in X,Y coordinates 

        """
        return _libBornAgainCore.IFTDecayFunction2D_evaluate(self, qx, qy)

    def boundingReciprocalLatticeCoordinates(self, qX, qY, a, b, alpha):
        r"""
        boundingReciprocalLatticeCoordinates(IFTDecayFunction2D self, double qX, double qY, double a, double b, double alpha) -> pair_double_t
        std::pair< double, double > IFTDecayFunction2D::boundingReciprocalLatticeCoordinates(double qX, double qY, double a, double b, double alpha) const

        transform back to a*, b* basis:

        Calculates bounding values of reciprocal lattice coordinates that contain the centered rectangle with a corner defined by qX and qY 

        """
        return _libBornAgainCore.IFTDecayFunction2D_boundingReciprocalLatticeCoordinates(self, qX, qY, a, b, alpha)
    __swig_destroy__ = _libBornAgainCore.delete_IFTDecayFunction2D

# Register IFTDecayFunction2D in _libBornAgainCore:
_libBornAgainCore.IFTDecayFunction2D_swigregister(IFTDecayFunction2D)

class FTDecayFunction2DCauchy(IFTDecayFunction2D):
    r"""


    Two-dimensional Cauchy decay function in reciprocal space; corresponds to exp(-r) in real space, with  $r=\\sqrt{(\\frac{x}{\\omega_x})^2 + (\\frac{y}{\\omega_y})^2}$.

    C++ includes: FTDecay2D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FTDecayFunction2DCauchy self, vdouble1d_t P) -> FTDecayFunction2DCauchy
        __init__(FTDecayFunction2DCauchy self, double decay_length_x, double decay_length_y, double gamma) -> FTDecayFunction2DCauchy
        FTDecayFunction2DCauchy::FTDecayFunction2DCauchy(double decay_length_x, double decay_length_y, double gamma)

        """
        _libBornAgainCore.FTDecayFunction2DCauchy_swiginit(self, _libBornAgainCore.new_FTDecayFunction2DCauchy(*args))

    def clone(self):
        r"""
        clone(FTDecayFunction2DCauchy self) -> FTDecayFunction2DCauchy
        FTDecayFunction2DCauchy * FTDecayFunction2DCauchy::clone() const

        """
        return _libBornAgainCore.FTDecayFunction2DCauchy_clone(self)

    def accept(self, visitor):
        r"""
        accept(FTDecayFunction2DCauchy self, INodeVisitor visitor)
        void FTDecayFunction2DCauchy::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDecayFunction2DCauchy_accept(self, visitor)

    def evaluate(self, qx, qy):
        r"""
        evaluate(FTDecayFunction2DCauchy self, double qx, double qy) -> double
        double FTDecayFunction2DCauchy::evaluate(double qx, double qy) const final

        evaluate Fourier transformed decay function for q in X,Y coordinates 

        """
        return _libBornAgainCore.FTDecayFunction2DCauchy_evaluate(self, qx, qy)
    __swig_destroy__ = _libBornAgainCore.delete_FTDecayFunction2DCauchy

# Register FTDecayFunction2DCauchy in _libBornAgainCore:
_libBornAgainCore.FTDecayFunction2DCauchy_swigregister(FTDecayFunction2DCauchy)

class FTDecayFunction2DGauss(IFTDecayFunction2D):
    r"""


    Two-dimensional Gauss decay function in reciprocal space; corresponds to exp(-r^2/2) in real space, with  $r=\\sqrt{(\\frac{x}{\\omega_x})^2 + (\\frac{y}{\\omega_y})^2}$.

    C++ includes: FTDecay2D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FTDecayFunction2DGauss self, vdouble1d_t P) -> FTDecayFunction2DGauss
        __init__(FTDecayFunction2DGauss self, double decay_length_x, double decay_length_y, double gamma) -> FTDecayFunction2DGauss
        FTDecayFunction2DGauss::FTDecayFunction2DGauss(double decay_length_x, double decay_length_y, double gamma)

        """
        _libBornAgainCore.FTDecayFunction2DGauss_swiginit(self, _libBornAgainCore.new_FTDecayFunction2DGauss(*args))

    def clone(self):
        r"""
        clone(FTDecayFunction2DGauss self) -> FTDecayFunction2DGauss
        FTDecayFunction2DGauss * FTDecayFunction2DGauss::clone() const

        """
        return _libBornAgainCore.FTDecayFunction2DGauss_clone(self)

    def accept(self, visitor):
        r"""
        accept(FTDecayFunction2DGauss self, INodeVisitor visitor)
        void FTDecayFunction2DGauss::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDecayFunction2DGauss_accept(self, visitor)

    def evaluate(self, qx, qy):
        r"""
        evaluate(FTDecayFunction2DGauss self, double qx, double qy) -> double
        double FTDecayFunction2DGauss::evaluate(double qx, double qy) const final

        evaluate Fourier transformed decay function for q in X,Y coordinates 

        """
        return _libBornAgainCore.FTDecayFunction2DGauss_evaluate(self, qx, qy)
    __swig_destroy__ = _libBornAgainCore.delete_FTDecayFunction2DGauss

# Register FTDecayFunction2DGauss in _libBornAgainCore:
_libBornAgainCore.FTDecayFunction2DGauss_swigregister(FTDecayFunction2DGauss)

class FTDecayFunction2DVoigt(IFTDecayFunction2D):
    r"""


    Two-dimensional pseudo-Voigt decay function in reciprocal space; corresponds to eta*Gauss + (1-eta)*Cauchy.

    C++ includes: FTDecay2D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FTDecayFunction2DVoigt self, vdouble1d_t P) -> FTDecayFunction2DVoigt
        __init__(FTDecayFunction2DVoigt self, double decay_length_x, double decay_length_y, double gamma, double eta) -> FTDecayFunction2DVoigt
        FTDecayFunction2DVoigt::FTDecayFunction2DVoigt(double decay_length_x, double decay_length_y, double gamma, double eta)

        """
        _libBornAgainCore.FTDecayFunction2DVoigt_swiginit(self, _libBornAgainCore.new_FTDecayFunction2DVoigt(*args))

    def clone(self):
        r"""
        clone(FTDecayFunction2DVoigt self) -> FTDecayFunction2DVoigt
        FTDecayFunction2DVoigt * FTDecayFunction2DVoigt::clone() const

        """
        return _libBornAgainCore.FTDecayFunction2DVoigt_clone(self)

    def accept(self, visitor):
        r"""
        accept(FTDecayFunction2DVoigt self, INodeVisitor visitor)
        void FTDecayFunction2DVoigt::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDecayFunction2DVoigt_accept(self, visitor)

    def evaluate(self, qx, qy):
        r"""
        evaluate(FTDecayFunction2DVoigt self, double qx, double qy) -> double
        double FTDecayFunction2DVoigt::evaluate(double qx, double qy) const final

        evaluate Fourier transformed decay function for q in X,Y coordinates 

        """
        return _libBornAgainCore.FTDecayFunction2DVoigt_evaluate(self, qx, qy)

    def eta(self):
        r"""
        eta(FTDecayFunction2DVoigt self) -> double
        double FTDecayFunction2DVoigt::eta() const

        """
        return _libBornAgainCore.FTDecayFunction2DVoigt_eta(self)
    __swig_destroy__ = _libBornAgainCore.delete_FTDecayFunction2DVoigt

# Register FTDecayFunction2DVoigt in _libBornAgainCore:
_libBornAgainCore.FTDecayFunction2DVoigt_swigregister(FTDecayFunction2DVoigt)

class IFTDistribution1D(ICloneable, INode):
    r"""


    Interface for a one-dimensional distribution, with normalization adjusted so that the Fourier transform evaluate(q) is a decay function that starts at evaluate(0)=1.

    C++ includes: FTDistributions1D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        r"""
        clone(IFTDistribution1D self) -> IFTDistribution1D
        virtual IFTDistribution1D* IFTDistribution1D::clone() const =0

        """
        return _libBornAgainCore.IFTDistribution1D_clone(self)

    def evaluate(self, q):
        r"""
        evaluate(IFTDistribution1D self, double q) -> double
        virtual double IFTDistribution1D::evaluate(double q) const =0

        Returns Fourier transform of this distribution; is a decay function starting at evaluate(0)=1. 

        """
        return _libBornAgainCore.IFTDistribution1D_evaluate(self, q)

    def omega(self):
        r"""
        omega(IFTDistribution1D self) -> double
        double IFTDistribution1D::omega() const

        """
        return _libBornAgainCore.IFTDistribution1D_omega(self)

    def qSecondDerivative(self):
        r"""
        qSecondDerivative(IFTDistribution1D self) -> double
        virtual double IFTDistribution1D::qSecondDerivative() const =0

        Returns the negative of the second order derivative in q space around q=0. 

        """
        return _libBornAgainCore.IFTDistribution1D_qSecondDerivative(self)
    __swig_destroy__ = _libBornAgainCore.delete_IFTDistribution1D

# Register IFTDistribution1D in _libBornAgainCore:
_libBornAgainCore.IFTDistribution1D_swigregister(IFTDistribution1D)

class FTDistribution1DCauchy(IFTDistribution1D):
    r"""


    Exponential  IFTDistribution1D exp(-|omega*x|); its Fourier transform evaluate(q) is a Cauchy-Lorentzian starting at evaluate(0)=1.

    C++ includes: FTDistributions1D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FTDistribution1DCauchy self, vdouble1d_t P) -> FTDistribution1DCauchy
        __init__(FTDistribution1DCauchy self, double omega) -> FTDistribution1DCauchy
        FTDistribution1DCauchy::FTDistribution1DCauchy(double omega)

        """
        _libBornAgainCore.FTDistribution1DCauchy_swiginit(self, _libBornAgainCore.new_FTDistribution1DCauchy(*args))

    def clone(self):
        r"""
        clone(FTDistribution1DCauchy self) -> FTDistribution1DCauchy
        FTDistribution1DCauchy * FTDistribution1DCauchy::clone() const override final

        """
        return _libBornAgainCore.FTDistribution1DCauchy_clone(self)

    def accept(self, visitor):
        r"""
        accept(FTDistribution1DCauchy self, INodeVisitor visitor)
        void FTDistribution1DCauchy::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDistribution1DCauchy_accept(self, visitor)

    def evaluate(self, q):
        r"""
        evaluate(FTDistribution1DCauchy self, double q) -> double
        double FTDistribution1DCauchy::evaluate(double q) const override final

        Returns Fourier transform of this distribution; is a decay function starting at evaluate(0)=1. 

        """
        return _libBornAgainCore.FTDistribution1DCauchy_evaluate(self, q)

    def qSecondDerivative(self):
        r"""
        qSecondDerivative(FTDistribution1DCauchy self) -> double
        double FTDistribution1DCauchy::qSecondDerivative() const override final

        Returns the negative of the second order derivative in q space around q=0. 

        """
        return _libBornAgainCore.FTDistribution1DCauchy_qSecondDerivative(self)
    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution1DCauchy

# Register FTDistribution1DCauchy in _libBornAgainCore:
_libBornAgainCore.FTDistribution1DCauchy_swigregister(FTDistribution1DCauchy)

class FTDistribution1DGauss(IFTDistribution1D):
    r"""


    Gaussian  IFTDistribution1D; its Fourier transform evaluate(q) is a Gaussian starting at evaluate(0)=1.

    C++ includes: FTDistributions1D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FTDistribution1DGauss self, vdouble1d_t P) -> FTDistribution1DGauss
        __init__(FTDistribution1DGauss self, double omega) -> FTDistribution1DGauss
        FTDistribution1DGauss::FTDistribution1DGauss(double omega)

        """
        _libBornAgainCore.FTDistribution1DGauss_swiginit(self, _libBornAgainCore.new_FTDistribution1DGauss(*args))

    def clone(self):
        r"""
        clone(FTDistribution1DGauss self) -> FTDistribution1DGauss
        FTDistribution1DGauss * FTDistribution1DGauss::clone() const override final

        """
        return _libBornAgainCore.FTDistribution1DGauss_clone(self)

    def accept(self, visitor):
        r"""
        accept(FTDistribution1DGauss self, INodeVisitor visitor)
        void FTDistribution1DGauss::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDistribution1DGauss_accept(self, visitor)

    def evaluate(self, q):
        r"""
        evaluate(FTDistribution1DGauss self, double q) -> double
        double FTDistribution1DGauss::evaluate(double q) const override final

        Returns Fourier transform of this distribution; is a decay function starting at evaluate(0)=1. 

        """
        return _libBornAgainCore.FTDistribution1DGauss_evaluate(self, q)

    def qSecondDerivative(self):
        r"""
        qSecondDerivative(FTDistribution1DGauss self) -> double
        double FTDistribution1DGauss::qSecondDerivative() const override final

        Returns the negative of the second order derivative in q space around q=0. 

        """
        return _libBornAgainCore.FTDistribution1DGauss_qSecondDerivative(self)
    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution1DGauss

# Register FTDistribution1DGauss in _libBornAgainCore:
_libBornAgainCore.FTDistribution1DGauss_swigregister(FTDistribution1DGauss)

class FTDistribution1DGate(IFTDistribution1D):
    r"""


    Square gate  IFTDistribution1D; its Fourier transform evaluate(q) is a sinc function starting at evaluate(0)=1.

    C++ includes: FTDistributions1D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FTDistribution1DGate self, vdouble1d_t P) -> FTDistribution1DGate
        __init__(FTDistribution1DGate self, double omega) -> FTDistribution1DGate
        FTDistribution1DGate::FTDistribution1DGate(double omega)

        """
        _libBornAgainCore.FTDistribution1DGate_swiginit(self, _libBornAgainCore.new_FTDistribution1DGate(*args))

    def clone(self):
        r"""
        clone(FTDistribution1DGate self) -> FTDistribution1DGate
        FTDistribution1DGate * FTDistribution1DGate::clone() const override final

        """
        return _libBornAgainCore.FTDistribution1DGate_clone(self)

    def accept(self, visitor):
        r"""
        accept(FTDistribution1DGate self, INodeVisitor visitor)
        void FTDistribution1DGate::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDistribution1DGate_accept(self, visitor)

    def evaluate(self, q):
        r"""
        evaluate(FTDistribution1DGate self, double q) -> double
        double FTDistribution1DGate::evaluate(double q) const override final

        Returns Fourier transform of this distribution; is a decay function starting at evaluate(0)=1. 

        """
        return _libBornAgainCore.FTDistribution1DGate_evaluate(self, q)

    def qSecondDerivative(self):
        r"""
        qSecondDerivative(FTDistribution1DGate self) -> double
        double FTDistribution1DGate::qSecondDerivative() const override final

        Returns the negative of the second order derivative in q space around q=0. 

        """
        return _libBornAgainCore.FTDistribution1DGate_qSecondDerivative(self)
    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution1DGate

# Register FTDistribution1DGate in _libBornAgainCore:
_libBornAgainCore.FTDistribution1DGate_swigregister(FTDistribution1DGate)

class FTDistribution1DTriangle(IFTDistribution1D):
    r"""


    Triangle  IFTDistribution1D [1-|x|/omega if |x|<omega, and 0 otherwise]; its Fourier transform evaluate(q) is a squared sinc function starting at evaluate(0)=1.

    C++ includes: FTDistributions1D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FTDistribution1DTriangle self, vdouble1d_t P) -> FTDistribution1DTriangle
        __init__(FTDistribution1DTriangle self, double omega) -> FTDistribution1DTriangle
        FTDistribution1DTriangle::FTDistribution1DTriangle(double omega)

        """
        _libBornAgainCore.FTDistribution1DTriangle_swiginit(self, _libBornAgainCore.new_FTDistribution1DTriangle(*args))

    def clone(self):
        r"""
        clone(FTDistribution1DTriangle self) -> FTDistribution1DTriangle
        FTDistribution1DTriangle * FTDistribution1DTriangle::clone() const override final

        """
        return _libBornAgainCore.FTDistribution1DTriangle_clone(self)

    def accept(self, visitor):
        r"""
        accept(FTDistribution1DTriangle self, INodeVisitor visitor)
        void FTDistribution1DTriangle::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDistribution1DTriangle_accept(self, visitor)

    def evaluate(self, q):
        r"""
        evaluate(FTDistribution1DTriangle self, double q) -> double
        double FTDistribution1DTriangle::evaluate(double q) const override final

        Returns Fourier transform of this distribution; is a decay function starting at evaluate(0)=1. 

        """
        return _libBornAgainCore.FTDistribution1DTriangle_evaluate(self, q)

    def qSecondDerivative(self):
        r"""
        qSecondDerivative(FTDistribution1DTriangle self) -> double
        double FTDistribution1DTriangle::qSecondDerivative() const override final

        Returns the negative of the second order derivative in q space around q=0. 

        """
        return _libBornAgainCore.FTDistribution1DTriangle_qSecondDerivative(self)
    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution1DTriangle

# Register FTDistribution1DTriangle in _libBornAgainCore:
_libBornAgainCore.FTDistribution1DTriangle_swigregister(FTDistribution1DTriangle)

class FTDistribution1DCosine(IFTDistribution1D):
    r"""


    IFTDistribution1D consisting of one cosine wave [1+cos(pi*x/omega) if |x|<omega, and 0 otherwise]; its Fourier transform evaluate(q) starts at evaluate(0)=1.

    C++ includes: FTDistributions1D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FTDistribution1DCosine self, vdouble1d_t P) -> FTDistribution1DCosine
        __init__(FTDistribution1DCosine self, double omega) -> FTDistribution1DCosine
        FTDistribution1DCosine::FTDistribution1DCosine(double omega)

        """
        _libBornAgainCore.FTDistribution1DCosine_swiginit(self, _libBornAgainCore.new_FTDistribution1DCosine(*args))

    def clone(self):
        r"""
        clone(FTDistribution1DCosine self) -> FTDistribution1DCosine
        FTDistribution1DCosine * FTDistribution1DCosine::clone() const override final

        """
        return _libBornAgainCore.FTDistribution1DCosine_clone(self)

    def accept(self, visitor):
        r"""
        accept(FTDistribution1DCosine self, INodeVisitor visitor)
        void FTDistribution1DCosine::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDistribution1DCosine_accept(self, visitor)

    def evaluate(self, q):
        r"""
        evaluate(FTDistribution1DCosine self, double q) -> double
        double FTDistribution1DCosine::evaluate(double q) const override final

        Returns Fourier transform of this distribution; is a decay function starting at evaluate(0)=1. 

        """
        return _libBornAgainCore.FTDistribution1DCosine_evaluate(self, q)

    def qSecondDerivative(self):
        r"""
        qSecondDerivative(FTDistribution1DCosine self) -> double
        double FTDistribution1DCosine::qSecondDerivative() const override final

        Returns the negative of the second order derivative in q space around q=0. 

        """
        return _libBornAgainCore.FTDistribution1DCosine_qSecondDerivative(self)
    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution1DCosine

# Register FTDistribution1DCosine in _libBornAgainCore:
_libBornAgainCore.FTDistribution1DCosine_swigregister(FTDistribution1DCosine)

class FTDistribution1DVoigt(IFTDistribution1D):
    r"""


    IFTDistribution1D that provides a Fourier transform evaluate(q) in form of a pseudo-Voigt decay function eta*Gauss + (1-eta)*Cauchy, with both components starting at 1 for q=0.

    C++ includes: FTDistributions1D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FTDistribution1DVoigt self, vdouble1d_t P) -> FTDistribution1DVoigt
        __init__(FTDistribution1DVoigt self, double omega, double eta) -> FTDistribution1DVoigt
        FTDistribution1DVoigt::FTDistribution1DVoigt(double omega, double eta)

        """
        _libBornAgainCore.FTDistribution1DVoigt_swiginit(self, _libBornAgainCore.new_FTDistribution1DVoigt(*args))

    def clone(self):
        r"""
        clone(FTDistribution1DVoigt self) -> FTDistribution1DVoigt
        FTDistribution1DVoigt * FTDistribution1DVoigt::clone() const override final

        """
        return _libBornAgainCore.FTDistribution1DVoigt_clone(self)

    def accept(self, visitor):
        r"""
        accept(FTDistribution1DVoigt self, INodeVisitor visitor)
        void FTDistribution1DVoigt::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDistribution1DVoigt_accept(self, visitor)

    def evaluate(self, q):
        r"""
        evaluate(FTDistribution1DVoigt self, double q) -> double
        double FTDistribution1DVoigt::evaluate(double q) const override final

        Returns Fourier transform of this distribution; is a decay function starting at evaluate(0)=1. 

        """
        return _libBornAgainCore.FTDistribution1DVoigt_evaluate(self, q)

    def eta(self):
        r"""
        eta(FTDistribution1DVoigt self) -> double
        double FTDistribution1DVoigt::eta() const

        """
        return _libBornAgainCore.FTDistribution1DVoigt_eta(self)

    def qSecondDerivative(self):
        r"""
        qSecondDerivative(FTDistribution1DVoigt self) -> double
        double FTDistribution1DVoigt::qSecondDerivative() const override final

        Returns the negative of the second order derivative in q space around q=0. 

        """
        return _libBornAgainCore.FTDistribution1DVoigt_qSecondDerivative(self)
    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution1DVoigt

# Register FTDistribution1DVoigt in _libBornAgainCore:
_libBornAgainCore.FTDistribution1DVoigt_swigregister(FTDistribution1DVoigt)

class IFTDistribution2D(ICloneable, INode):
    r"""


    Interface for two-dimensional distributions in Fourier space.

    C++ includes: FTDistributions2D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        r"""
        clone(IFTDistribution2D self) -> IFTDistribution2D
        IFTDistribution2D* IFTDistribution2D::clone() const =0

        """
        return _libBornAgainCore.IFTDistribution2D_clone(self)

    def omegaX(self):
        r"""
        omegaX(IFTDistribution2D self) -> double
        double IFTDistribution2D::omegaX() const

        """
        return _libBornAgainCore.IFTDistribution2D_omegaX(self)

    def omegaY(self):
        r"""
        omegaY(IFTDistribution2D self) -> double
        double IFTDistribution2D::omegaY() const

        """
        return _libBornAgainCore.IFTDistribution2D_omegaY(self)

    def gamma(self):
        r"""
        gamma(IFTDistribution2D self) -> double
        double IFTDistribution2D::gamma() const

        """
        return _libBornAgainCore.IFTDistribution2D_gamma(self)

    def delta(self):
        r"""
        delta(IFTDistribution2D self) -> double
        double IFTDistribution2D::delta() const

        Angle in direct space between X- and Y-axis of distribution. 

        """
        return _libBornAgainCore.IFTDistribution2D_delta(self)

    def evaluate(self, qx, qy):
        r"""
        evaluate(IFTDistribution2D self, double qx, double qy) -> double
        virtual double IFTDistribution2D::evaluate(double qx, double qy) const =0

        evaluate Fourier transformed distribution for q in X,Y coordinates the original distribution (in real space) is assumed to be normalized: total integral is equal to 1 

        """
        return _libBornAgainCore.IFTDistribution2D_evaluate(self, qx, qy)
    __swig_destroy__ = _libBornAgainCore.delete_IFTDistribution2D

# Register IFTDistribution2D in _libBornAgainCore:
_libBornAgainCore.IFTDistribution2D_swigregister(IFTDistribution2D)

class FTDistribution2DCauchy(IFTDistribution2D):
    r"""


    Two-dimensional Cauchy distribution in Fourier space; corresponds to a normalized exp(-r) in real space, with  $r=\\sqrt{(\\frac{x}{\\omega_x})^2 + (\\frac{y}{\\omega_y})^2}$.

    C++ includes: FTDistributions2D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FTDistribution2DCauchy self, vdouble1d_t P) -> FTDistribution2DCauchy
        __init__(FTDistribution2DCauchy self, double omega_x, double omega_y, double gamma) -> FTDistribution2DCauchy
        FTDistribution2DCauchy::FTDistribution2DCauchy(double omega_x, double omega_y, double gamma)

        """
        _libBornAgainCore.FTDistribution2DCauchy_swiginit(self, _libBornAgainCore.new_FTDistribution2DCauchy(*args))

    def clone(self):
        r"""
        clone(FTDistribution2DCauchy self) -> FTDistribution2DCauchy
        FTDistribution2DCauchy * FTDistribution2DCauchy::clone() const final

        """
        return _libBornAgainCore.FTDistribution2DCauchy_clone(self)

    def accept(self, visitor):
        r"""
        accept(FTDistribution2DCauchy self, INodeVisitor visitor)
        void FTDistribution2DCauchy::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDistribution2DCauchy_accept(self, visitor)

    def evaluate(self, qx, qy):
        r"""
        evaluate(FTDistribution2DCauchy self, double qx, double qy) -> double
        double FTDistribution2DCauchy::evaluate(double qx, double qy) const final

        evaluate Fourier transformed distribution for q in X,Y coordinates the original distribution (in real space) is assumed to be normalized: total integral is equal to 1 

        """
        return _libBornAgainCore.FTDistribution2DCauchy_evaluate(self, qx, qy)
    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution2DCauchy

# Register FTDistribution2DCauchy in _libBornAgainCore:
_libBornAgainCore.FTDistribution2DCauchy_swigregister(FTDistribution2DCauchy)

class FTDistribution2DGauss(IFTDistribution2D):
    r"""


    Two-dimensional Gauss distribution in Fourier space; corresponds to normalized exp(-r^2/2) in real space with  $r=\\sqrt{(\\frac{x}{\\omega_x})^2 + (\\frac{y}{\\omega_y})^2}$.

    C++ includes: FTDistributions2D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FTDistribution2DGauss self, vdouble1d_t P) -> FTDistribution2DGauss
        __init__(FTDistribution2DGauss self, double omega_x, double omega_y, double gamma) -> FTDistribution2DGauss
        FTDistribution2DGauss::FTDistribution2DGauss(double omega_x, double omega_y, double gamma)

        """
        _libBornAgainCore.FTDistribution2DGauss_swiginit(self, _libBornAgainCore.new_FTDistribution2DGauss(*args))

    def clone(self):
        r"""
        clone(FTDistribution2DGauss self) -> FTDistribution2DGauss
        FTDistribution2DGauss * FTDistribution2DGauss::clone() const final

        """
        return _libBornAgainCore.FTDistribution2DGauss_clone(self)

    def accept(self, visitor):
        r"""
        accept(FTDistribution2DGauss self, INodeVisitor visitor)
        void FTDistribution2DGauss::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDistribution2DGauss_accept(self, visitor)

    def evaluate(self, qx, qy):
        r"""
        evaluate(FTDistribution2DGauss self, double qx, double qy) -> double
        double FTDistribution2DGauss::evaluate(double qx, double qy) const final

        evaluate Fourier transformed distribution for q in X,Y coordinates the original distribution (in real space) is assumed to be normalized: total integral is equal to 1 

        """
        return _libBornAgainCore.FTDistribution2DGauss_evaluate(self, qx, qy)
    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution2DGauss

# Register FTDistribution2DGauss in _libBornAgainCore:
_libBornAgainCore.FTDistribution2DGauss_swigregister(FTDistribution2DGauss)

class FTDistribution2DGate(IFTDistribution2D):
    r"""


    Two-dimensional gate distribution in Fourier space; corresponds to normalized constant if r<1 (and 0 otherwise) in real space, with  $r=\\sqrt{(\\frac{x}{\\omega_x})^2 + (\\frac{y}{\\omega_y})^2}$.

    C++ includes: FTDistributions2D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FTDistribution2DGate self, vdouble1d_t P) -> FTDistribution2DGate
        __init__(FTDistribution2DGate self, double omega_x, double omega_y, double gamma) -> FTDistribution2DGate
        FTDistribution2DGate::FTDistribution2DGate(double omega_x, double omega_y, double gamma)

        """
        _libBornAgainCore.FTDistribution2DGate_swiginit(self, _libBornAgainCore.new_FTDistribution2DGate(*args))

    def clone(self):
        r"""
        clone(FTDistribution2DGate self) -> FTDistribution2DGate
        FTDistribution2DGate * FTDistribution2DGate::clone() const final

        """
        return _libBornAgainCore.FTDistribution2DGate_clone(self)

    def accept(self, visitor):
        r"""
        accept(FTDistribution2DGate self, INodeVisitor visitor)
        void FTDistribution2DGate::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDistribution2DGate_accept(self, visitor)

    def evaluate(self, qx, qy):
        r"""
        evaluate(FTDistribution2DGate self, double qx, double qy) -> double
        double FTDistribution2DGate::evaluate(double qx, double qy) const final

        evaluate Fourier transformed distribution for q in X,Y coordinates the original distribution (in real space) is assumed to be normalized: total integral is equal to 1 

        """
        return _libBornAgainCore.FTDistribution2DGate_evaluate(self, qx, qy)
    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution2DGate

# Register FTDistribution2DGate in _libBornAgainCore:
_libBornAgainCore.FTDistribution2DGate_swigregister(FTDistribution2DGate)

class FTDistribution2DCone(IFTDistribution2D):
    r"""


    Two-dimensional cone distribution in Fourier space; corresponds to 1-r if r<1 (and 0 otherwise) in real space with  $r=\\sqrt{(\\frac{x}{\\omega_x})^2 + (\\frac{y}{\\omega_y})^2}$.

    C++ includes: FTDistributions2D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FTDistribution2DCone self, vdouble1d_t P) -> FTDistribution2DCone
        __init__(FTDistribution2DCone self, double omega_x, double omega_y, double gamma) -> FTDistribution2DCone
        FTDistribution2DCone::FTDistribution2DCone(double omega_x, double omega_y, double gamma)

        """
        _libBornAgainCore.FTDistribution2DCone_swiginit(self, _libBornAgainCore.new_FTDistribution2DCone(*args))

    def clone(self):
        r"""
        clone(FTDistribution2DCone self) -> FTDistribution2DCone
        FTDistribution2DCone * FTDistribution2DCone::clone() const final

        """
        return _libBornAgainCore.FTDistribution2DCone_clone(self)

    def accept(self, visitor):
        r"""
        accept(FTDistribution2DCone self, INodeVisitor visitor)
        void FTDistribution2DCone::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDistribution2DCone_accept(self, visitor)

    def evaluate(self, qx, qy):
        r"""
        evaluate(FTDistribution2DCone self, double qx, double qy) -> double
        double FTDistribution2DCone::evaluate(double qx, double qy) const final

        evaluate Fourier transformed distribution for q in X,Y coordinates the original distribution (in real space) is assumed to be normalized: total integral is equal to 1 

        """
        return _libBornAgainCore.FTDistribution2DCone_evaluate(self, qx, qy)
    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution2DCone

# Register FTDistribution2DCone in _libBornAgainCore:
_libBornAgainCore.FTDistribution2DCone_swigregister(FTDistribution2DCone)

class FTDistribution2DVoigt(IFTDistribution2D):
    r"""


    Two-dimensional Voigt distribution in Fourier space; corresponds to eta*Gauss + (1-eta)*Cauchy

    C++ includes: FTDistributions2D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FTDistribution2DVoigt self, vdouble1d_t P) -> FTDistribution2DVoigt
        __init__(FTDistribution2DVoigt self, double omega_x, double omega_y, double gamma, double eta) -> FTDistribution2DVoigt
        FTDistribution2DVoigt::FTDistribution2DVoigt(double omega_x, double omega_y, double gamma, double eta)

        """
        _libBornAgainCore.FTDistribution2DVoigt_swiginit(self, _libBornAgainCore.new_FTDistribution2DVoigt(*args))

    def clone(self):
        r"""
        clone(FTDistribution2DVoigt self) -> FTDistribution2DVoigt
        FTDistribution2DVoigt * FTDistribution2DVoigt::clone() const final

        """
        return _libBornAgainCore.FTDistribution2DVoigt_clone(self)

    def accept(self, visitor):
        r"""
        accept(FTDistribution2DVoigt self, INodeVisitor visitor)
        void FTDistribution2DVoigt::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FTDistribution2DVoigt_accept(self, visitor)

    def evaluate(self, qx, qy):
        r"""
        evaluate(FTDistribution2DVoigt self, double qx, double qy) -> double
        double FTDistribution2DVoigt::evaluate(double qx, double qy) const final

        evaluate Fourier transformed distribution for q in X,Y coordinates the original distribution (in real space) is assumed to be normalized: total integral is equal to 1 

        """
        return _libBornAgainCore.FTDistribution2DVoigt_evaluate(self, qx, qy)

    def eta(self):
        r"""
        eta(FTDistribution2DVoigt self) -> double
        double FTDistribution2DVoigt::eta() const

        """
        return _libBornAgainCore.FTDistribution2DVoigt_eta(self)
    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution2DVoigt

# Register FTDistribution2DVoigt in _libBornAgainCore:
_libBornAgainCore.FTDistribution2DVoigt_swigregister(FTDistribution2DVoigt)

class ILayout(ISample):
    r"""


    Pure virtual interface class to equip a sample layer with scattering properties. Currently only inherited by  ParticleLayout; in the future also by domain structure.

    C++ includes: ILayout.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_ILayout

    def clone(self):
        r"""
        clone(ILayout self) -> ILayout
        virtual ILayout* ILayout::clone() const =0

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.ILayout_clone(self)

    def accept(self, visitor):
        r"""
        accept(ILayout self, INodeVisitor visitor)
        virtual void ILayout::accept(INodeVisitor *visitor) const =0

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.ILayout_accept(self, visitor)

    def particles(self):
        r"""
        particles(ILayout self) -> SafePointerVector< IParticle >
        virtual SafePointerVector<IParticle> ILayout::particles() const =0

        Returns information on all particles (type and abundance) and generates new particles if an  IAbstractParticle denotes a collection 

        """
        return _libBornAgainCore.ILayout_particles(self)

    def interferenceFunction(self):
        r"""
        interferenceFunction(ILayout self) -> IInterferenceFunction
        virtual const IInterferenceFunction* ILayout::interferenceFunction() const =0

        Returns the interference function. 

        """
        return _libBornAgainCore.ILayout_interferenceFunction(self)

    def getTotalAbundance(self):
        r"""
        getTotalAbundance(ILayout self) -> double
        virtual double ILayout::getTotalAbundance() const =0

        Get total abundance of all particles. 

        """
        return _libBornAgainCore.ILayout_getTotalAbundance(self)

    def totalParticleSurfaceDensity(self):
        r"""
        totalParticleSurfaceDensity(ILayout self) -> double
        virtual double ILayout::totalParticleSurfaceDensity() const =0

        Returns surface density of all particles. 

        """
        return _libBornAgainCore.ILayout_totalParticleSurfaceDensity(self)

    def setTotalParticleSurfaceDensity(self, particle_density):
        r"""
        setTotalParticleSurfaceDensity(ILayout self, double particle_density)
        virtual void ILayout::setTotalParticleSurfaceDensity(double particle_density)=0

        Sets surface density of all particles. 

        """
        return _libBornAgainCore.ILayout_setTotalParticleSurfaceDensity(self, particle_density)

    def weight(self):
        r"""
        weight(ILayout self) -> double
        double ILayout::weight() const

        Returns the relative weight of this layout. 

        """
        return _libBornAgainCore.ILayout_weight(self)

    def setWeight(self, weight):
        r"""
        setWeight(ILayout self, double weight)
        void ILayout::setWeight(double weight)

        Sets the relative weight of this layout. 

        """
        return _libBornAgainCore.ILayout_setWeight(self, weight)

# Register ILayout in _libBornAgainCore:
_libBornAgainCore.ILayout_swigregister(ILayout)

class IPeakShape(ISample):
    r"""


    Pure virtual interface class that defines the peak shape of a Bragg peak.

    C++ includes: IPeakShape.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IPeakShape

    def clone(self):
        r"""
        clone(IPeakShape self) -> IPeakShape
        virtual IPeakShape* IPeakShape::clone() const =0

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.IPeakShape_clone(self)

    def evaluate(self, q, q_lattice_point):
        r"""
        evaluate(IPeakShape self, kvector_t q, kvector_t q_lattice_point) -> double
        virtual double IPeakShape::evaluate(const kvector_t q, const kvector_t q_lattice_point) const =0

        Evaluates the peak shape at q from a reciprocal lattice point at q_lattice_point. 

        """
        return _libBornAgainCore.IPeakShape_evaluate(self, q, q_lattice_point)

    def angularDisorder(self):
        r"""
        angularDisorder(IPeakShape self) -> bool
        virtual bool IPeakShape::angularDisorder() const

        Indicates if the peak shape encodes angular disorder, in which case all peaks in a spherical shell are needed 

        """
        return _libBornAgainCore.IPeakShape_angularDisorder(self)

# Register IPeakShape in _libBornAgainCore:
_libBornAgainCore.IPeakShape_swigregister(IPeakShape)

class IsotropicGaussPeakShape(IPeakShape):
    r"""


    Class that implements an isotropic Gaussian peak shape of a Bragg peak.

    C++ includes: IPeakShape.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, max_intensity, domainsize):
        r"""
        __init__(IsotropicGaussPeakShape self, double max_intensity, double domainsize) -> IsotropicGaussPeakShape
        IsotropicGaussPeakShape::IsotropicGaussPeakShape(double max_intensity, double domainsize)

        """
        _libBornAgainCore.IsotropicGaussPeakShape_swiginit(self, _libBornAgainCore.new_IsotropicGaussPeakShape(max_intensity, domainsize))
    __swig_destroy__ = _libBornAgainCore.delete_IsotropicGaussPeakShape

    def clone(self):
        r"""
        clone(IsotropicGaussPeakShape self) -> IsotropicGaussPeakShape
        IsotropicGaussPeakShape * IsotropicGaussPeakShape::clone() const override

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.IsotropicGaussPeakShape_clone(self)

    def accept(self, visitor):
        r"""
        accept(IsotropicGaussPeakShape self, INodeVisitor visitor)
        void IsotropicGaussPeakShape::accept(INodeVisitor *visitor) const override

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.IsotropicGaussPeakShape_accept(self, visitor)

    def evaluate(self, q, q_lattice_point):
        r"""
        evaluate(IsotropicGaussPeakShape self, kvector_t q, kvector_t q_lattice_point) -> double
        double IsotropicGaussPeakShape::evaluate(const kvector_t q, const kvector_t q_lattice_point) const override

        Evaluates the peak shape at q from a reciprocal lattice point at q_lattice_point. 

        """
        return _libBornAgainCore.IsotropicGaussPeakShape_evaluate(self, q, q_lattice_point)

# Register IsotropicGaussPeakShape in _libBornAgainCore:
_libBornAgainCore.IsotropicGaussPeakShape_swigregister(IsotropicGaussPeakShape)

class IsotropicLorentzPeakShape(IPeakShape):
    r"""


    An isotropic Lorentzian peak shape of a Bragg peak.

    C++ includes: IPeakShape.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, max_intensity, domainsize):
        r"""
        __init__(IsotropicLorentzPeakShape self, double max_intensity, double domainsize) -> IsotropicLorentzPeakShape
        IsotropicLorentzPeakShape::IsotropicLorentzPeakShape(double max_intensity, double domainsize)

        """
        _libBornAgainCore.IsotropicLorentzPeakShape_swiginit(self, _libBornAgainCore.new_IsotropicLorentzPeakShape(max_intensity, domainsize))
    __swig_destroy__ = _libBornAgainCore.delete_IsotropicLorentzPeakShape

    def clone(self):
        r"""
        clone(IsotropicLorentzPeakShape self) -> IsotropicLorentzPeakShape
        IsotropicLorentzPeakShape * IsotropicLorentzPeakShape::clone() const override

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.IsotropicLorentzPeakShape_clone(self)

    def accept(self, visitor):
        r"""
        accept(IsotropicLorentzPeakShape self, INodeVisitor visitor)
        void IsotropicLorentzPeakShape::accept(INodeVisitor *visitor) const override

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.IsotropicLorentzPeakShape_accept(self, visitor)

    def evaluate(self, q, q_lattice_point):
        r"""
        evaluate(IsotropicLorentzPeakShape self, kvector_t q, kvector_t q_lattice_point) -> double
        double IsotropicLorentzPeakShape::evaluate(const kvector_t q, const kvector_t q_lattice_point) const override

        Evaluates the peak shape at q from a reciprocal lattice point at q_lattice_point. 

        """
        return _libBornAgainCore.IsotropicLorentzPeakShape_evaluate(self, q, q_lattice_point)

# Register IsotropicLorentzPeakShape in _libBornAgainCore:
_libBornAgainCore.IsotropicLorentzPeakShape_swigregister(IsotropicLorentzPeakShape)

class GaussFisherPeakShape(IPeakShape):
    r"""


    A peak shape that is Gaussian in the radial direction and uses the Mises-Fisher distribution in the angular direction.

    C++ includes: IPeakShape.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, max_intensity, radial_size, kappa):
        r"""
        __init__(GaussFisherPeakShape self, double max_intensity, double radial_size, double kappa) -> GaussFisherPeakShape
        GaussFisherPeakShape::GaussFisherPeakShape(double max_intensity, double radial_size, double kappa)

        """
        _libBornAgainCore.GaussFisherPeakShape_swiginit(self, _libBornAgainCore.new_GaussFisherPeakShape(max_intensity, radial_size, kappa))
    __swig_destroy__ = _libBornAgainCore.delete_GaussFisherPeakShape

    def clone(self):
        r"""
        clone(GaussFisherPeakShape self) -> GaussFisherPeakShape
        GaussFisherPeakShape * GaussFisherPeakShape::clone() const override

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.GaussFisherPeakShape_clone(self)

    def accept(self, visitor):
        r"""
        accept(GaussFisherPeakShape self, INodeVisitor visitor)
        void GaussFisherPeakShape::accept(INodeVisitor *visitor) const override

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.GaussFisherPeakShape_accept(self, visitor)

    def evaluate(self, q, q_lattice_point):
        r"""
        evaluate(GaussFisherPeakShape self, kvector_t q, kvector_t q_lattice_point) -> double
        double GaussFisherPeakShape::evaluate(const kvector_t q, const kvector_t q_lattice_point) const override

        Evaluates the peak shape at q from a reciprocal lattice point at q_lattice_point. 

        """
        return _libBornAgainCore.GaussFisherPeakShape_evaluate(self, q, q_lattice_point)

    def angularDisorder(self):
        r"""
        angularDisorder(GaussFisherPeakShape self) -> bool
        bool GaussFisherPeakShape::angularDisorder() const override

        Indicates if the peak shape encodes angular disorder, in which case all peaks in a spherical shell are needed 

        """
        return _libBornAgainCore.GaussFisherPeakShape_angularDisorder(self)

# Register GaussFisherPeakShape in _libBornAgainCore:
_libBornAgainCore.GaussFisherPeakShape_swigregister(GaussFisherPeakShape)

class LorentzFisherPeakShape(IPeakShape):
    r"""


    A peak shape that is Lorentzian in the radial direction and uses the Mises-Fisher distribution in the angular direction.

    C++ includes: IPeakShape.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, max_intensity, radial_size, kappa):
        r"""
        __init__(LorentzFisherPeakShape self, double max_intensity, double radial_size, double kappa) -> LorentzFisherPeakShape
        LorentzFisherPeakShape::LorentzFisherPeakShape(double max_intensity, double radial_size, double kappa)

        """
        _libBornAgainCore.LorentzFisherPeakShape_swiginit(self, _libBornAgainCore.new_LorentzFisherPeakShape(max_intensity, radial_size, kappa))
    __swig_destroy__ = _libBornAgainCore.delete_LorentzFisherPeakShape

    def clone(self):
        r"""
        clone(LorentzFisherPeakShape self) -> LorentzFisherPeakShape
        LorentzFisherPeakShape * LorentzFisherPeakShape::clone() const override

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.LorentzFisherPeakShape_clone(self)

    def accept(self, visitor):
        r"""
        accept(LorentzFisherPeakShape self, INodeVisitor visitor)
        void LorentzFisherPeakShape::accept(INodeVisitor *visitor) const override

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.LorentzFisherPeakShape_accept(self, visitor)

    def evaluate(self, q, q_lattice_point):
        r"""
        evaluate(LorentzFisherPeakShape self, kvector_t q, kvector_t q_lattice_point) -> double
        double LorentzFisherPeakShape::evaluate(const kvector_t q, const kvector_t q_lattice_point) const override

        Evaluates the peak shape at q from a reciprocal lattice point at q_lattice_point. 

        """
        return _libBornAgainCore.LorentzFisherPeakShape_evaluate(self, q, q_lattice_point)

    def angularDisorder(self):
        r"""
        angularDisorder(LorentzFisherPeakShape self) -> bool
        bool LorentzFisherPeakShape::angularDisorder() const override

        Indicates if the peak shape encodes angular disorder, in which case all peaks in a spherical shell are needed 

        """
        return _libBornAgainCore.LorentzFisherPeakShape_angularDisorder(self)

# Register LorentzFisherPeakShape in _libBornAgainCore:
_libBornAgainCore.LorentzFisherPeakShape_swigregister(LorentzFisherPeakShape)

class MisesFisherGaussPeakShape(IPeakShape):
    r"""


    A peak shape that is Gaussian in the radial direction and a convolution of a Mises-Fisher distribution with a Mises distribution on the two-sphere.

    C++ includes: IPeakShape.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, max_intensity, radial_size, zenith, kappa_1, kappa_2):
        r"""
        __init__(MisesFisherGaussPeakShape self, double max_intensity, double radial_size, kvector_t zenith, double kappa_1, double kappa_2) -> MisesFisherGaussPeakShape
        MisesFisherGaussPeakShape::MisesFisherGaussPeakShape(double max_intensity, double radial_size, kvector_t zenith, double kappa_1, double kappa_2)

        """
        _libBornAgainCore.MisesFisherGaussPeakShape_swiginit(self, _libBornAgainCore.new_MisesFisherGaussPeakShape(max_intensity, radial_size, zenith, kappa_1, kappa_2))
    __swig_destroy__ = _libBornAgainCore.delete_MisesFisherGaussPeakShape

    def clone(self):
        r"""
        clone(MisesFisherGaussPeakShape self) -> MisesFisherGaussPeakShape
        MisesFisherGaussPeakShape * MisesFisherGaussPeakShape::clone() const override

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.MisesFisherGaussPeakShape_clone(self)

    def accept(self, visitor):
        r"""
        accept(MisesFisherGaussPeakShape self, INodeVisitor visitor)
        void MisesFisherGaussPeakShape::accept(INodeVisitor *visitor) const override

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.MisesFisherGaussPeakShape_accept(self, visitor)

    def evaluate(self, q, q_lattice_point):
        r"""
        evaluate(MisesFisherGaussPeakShape self, kvector_t q, kvector_t q_lattice_point) -> double
        double MisesFisherGaussPeakShape::evaluate(const kvector_t q, const kvector_t q_lattice_point) const override

        Evaluates the peak shape at q from a reciprocal lattice point at q_lattice_point. 

        """
        return _libBornAgainCore.MisesFisherGaussPeakShape_evaluate(self, q, q_lattice_point)

    def angularDisorder(self):
        r"""
        angularDisorder(MisesFisherGaussPeakShape self) -> bool
        bool MisesFisherGaussPeakShape::angularDisorder() const override

        Indicates if the peak shape encodes angular disorder, in which case all peaks in a spherical shell are needed 

        """
        return _libBornAgainCore.MisesFisherGaussPeakShape_angularDisorder(self)

# Register MisesFisherGaussPeakShape in _libBornAgainCore:
_libBornAgainCore.MisesFisherGaussPeakShape_swigregister(MisesFisherGaussPeakShape)

class MisesGaussPeakShape(IPeakShape):
    r"""


    A peak shape that is a convolution of a Mises-Fisher distribution with a 3d Gaussian.

    C++ includes: IPeakShape.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, max_intensity, radial_size, zenith, kappa):
        r"""
        __init__(MisesGaussPeakShape self, double max_intensity, double radial_size, kvector_t zenith, double kappa) -> MisesGaussPeakShape
        MisesGaussPeakShape::MisesGaussPeakShape(double max_intensity, double radial_size, kvector_t zenith, double kappa)

        """
        _libBornAgainCore.MisesGaussPeakShape_swiginit(self, _libBornAgainCore.new_MisesGaussPeakShape(max_intensity, radial_size, zenith, kappa))
    __swig_destroy__ = _libBornAgainCore.delete_MisesGaussPeakShape

    def clone(self):
        r"""
        clone(MisesGaussPeakShape self) -> MisesGaussPeakShape
        MisesGaussPeakShape * MisesGaussPeakShape::clone() const override

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.MisesGaussPeakShape_clone(self)

    def accept(self, visitor):
        r"""
        accept(MisesGaussPeakShape self, INodeVisitor visitor)
        void MisesGaussPeakShape::accept(INodeVisitor *visitor) const override

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.MisesGaussPeakShape_accept(self, visitor)

    def evaluate(self, q, q_lattice_point):
        r"""
        evaluate(MisesGaussPeakShape self, kvector_t q, kvector_t q_lattice_point) -> double
        double MisesGaussPeakShape::evaluate(const kvector_t q, const kvector_t q_lattice_point) const override

        Evaluates the peak shape at q from a reciprocal lattice point at q_lattice_point. 

        """
        return _libBornAgainCore.MisesGaussPeakShape_evaluate(self, q, q_lattice_point)

    def angularDisorder(self):
        r"""
        angularDisorder(MisesGaussPeakShape self) -> bool
        bool MisesGaussPeakShape::angularDisorder() const override

        Indicates if the peak shape encodes angular disorder, in which case all peaks in a spherical shell are needed 

        """
        return _libBornAgainCore.MisesGaussPeakShape_angularDisorder(self)

# Register MisesGaussPeakShape in _libBornAgainCore:
_libBornAgainCore.MisesGaussPeakShape_swigregister(MisesGaussPeakShape)

class IInterferenceFunction(ISample):
    r"""


    Pure virtual base class of interference functions.

    C++ includes: IInterferenceFunction.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(IInterferenceFunction self, NodeMeta meta, vdouble1d_t PValues) -> IInterferenceFunction
        __init__(IInterferenceFunction self, double position_var) -> IInterferenceFunction
        IInterferenceFunction::IInterferenceFunction(double position_var)

        """
        if self.__class__ == IInterferenceFunction:
            _self = None
        else:
            _self = self
        _libBornAgainCore.IInterferenceFunction_swiginit(self, _libBornAgainCore.new_IInterferenceFunction(_self, *args))

    def clone(self):
        r"""
        clone(IInterferenceFunction self) -> IInterferenceFunction
        virtual IInterferenceFunction* IInterferenceFunction::clone() const =0

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.IInterferenceFunction_clone(self)

    def evaluate(self, q, outer_iff=1.0):
        r"""
        evaluate(IInterferenceFunction self, kvector_t q, double outer_iff=1.0) -> double
        double IInterferenceFunction::evaluate(const kvector_t q, double outer_iff=1.0) const

        Evaluates the interference function for a given wavevector transfer. 

        """
        return _libBornAgainCore.IInterferenceFunction_evaluate(self, q, outer_iff)

    def setPositionVariance(self, var):
        r"""
        setPositionVariance(IInterferenceFunction self, double var)
        void IInterferenceFunction::setPositionVariance(double var)

        Sets the variance of the position for the calculation of the DW factor It is defined as the variance in each relevant dimension 

        """
        return _libBornAgainCore.IInterferenceFunction_setPositionVariance(self, var)

    def positionVariance(self):
        r"""
        positionVariance(IInterferenceFunction self) -> double
        double IInterferenceFunction::positionVariance() const

        Returns the position variance. 

        """
        return _libBornAgainCore.IInterferenceFunction_positionVariance(self)

    def getParticleDensity(self):
        r"""
        getParticleDensity(IInterferenceFunction self) -> double
        virtual double IInterferenceFunction::getParticleDensity() const

        If defined by this interference function's parameters, returns the particle density (per area). Otherwise, returns zero or a user-defined value 

        """
        return _libBornAgainCore.IInterferenceFunction_getParticleDensity(self)

    def supportsMultilayer(self):
        r"""
        supportsMultilayer(IInterferenceFunction self) -> bool
        virtual bool IInterferenceFunction::supportsMultilayer() const

        Indicates if this interference function can be used with a multilayer (DWBA mode) 

        """
        return _libBornAgainCore.IInterferenceFunction_supportsMultilayer(self)

    def DWfactor(self, q):
        r"""
        DWfactor(IInterferenceFunction self, kvector_t q) -> double
        double IInterferenceFunction::DWfactor(kvector_t q) const

        Evaluates the Debye-Waller factor for a given wavevector transfer. 

        """
        return _libBornAgainCore.IInterferenceFunction_DWfactor(self, q)

    def iff_without_dw(self, q):
        r"""iff_without_dw(IInterferenceFunction self, kvector_t q) -> double"""
        return _libBornAgainCore.IInterferenceFunction_iff_without_dw(self, q)
    __swig_destroy__ = _libBornAgainCore.delete_IInterferenceFunction
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IInterferenceFunction(self)
        return weakref.proxy(self)

# Register IInterferenceFunction in _libBornAgainCore:
_libBornAgainCore.IInterferenceFunction_swigregister(IInterferenceFunction)

class InterferenceFunction1DLattice(IInterferenceFunction):
    r"""


    Interference function of a 1D lattice.

    C++ includes: InterferenceFunction1DLattice.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, length, xi):
        r"""
        __init__(InterferenceFunction1DLattice self, double length, double xi) -> InterferenceFunction1DLattice
        InterferenceFunction1DLattice::InterferenceFunction1DLattice(double length, double xi)

        Constructor of interference function of one-dimensional lattice.

        Parameters:
        -----------

        length: 
        lattice constant in nanometers

        xi: 
        rotation of lattice with respect to x-axis in radians 

        """
        _libBornAgainCore.InterferenceFunction1DLattice_swiginit(self, _libBornAgainCore.new_InterferenceFunction1DLattice(length, xi))
    __swig_destroy__ = _libBornAgainCore.delete_InterferenceFunction1DLattice

    def clone(self):
        r"""
        clone(InterferenceFunction1DLattice self) -> InterferenceFunction1DLattice
        InterferenceFunction1DLattice * InterferenceFunction1DLattice::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.InterferenceFunction1DLattice_clone(self)

    def accept(self, visitor):
        r"""
        accept(InterferenceFunction1DLattice self, INodeVisitor visitor)
        void InterferenceFunction1DLattice::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.InterferenceFunction1DLattice_accept(self, visitor)

    def setDecayFunction(self, decay):
        r"""
        setDecayFunction(InterferenceFunction1DLattice self, IFTDecayFunction1D decay)
        void InterferenceFunction1DLattice::setDecayFunction(const IFTDecayFunction1D &decay)

        Sets one-dimensional decay function.

        Parameters:
        -----------

        decay: 
        one-dimensional decay function in reciprocal space 

        """
        return _libBornAgainCore.InterferenceFunction1DLattice_setDecayFunction(self, decay)

    def getLength(self):
        r"""
        getLength(InterferenceFunction1DLattice self) -> double
        double InterferenceFunction1DLattice::getLength() const

        """
        return _libBornAgainCore.InterferenceFunction1DLattice_getLength(self)

    def getXi(self):
        r"""
        getXi(InterferenceFunction1DLattice self) -> double
        double InterferenceFunction1DLattice::getXi() const

        """
        return _libBornAgainCore.InterferenceFunction1DLattice_getXi(self)

    def getChildren(self):
        r"""
        getChildren(InterferenceFunction1DLattice self) -> swig_dummy_type_const_inode_vector
        std::vector< const INode * > InterferenceFunction1DLattice::getChildren() const override final

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.InterferenceFunction1DLattice_getChildren(self)

# Register InterferenceFunction1DLattice in _libBornAgainCore:
_libBornAgainCore.InterferenceFunction1DLattice_swigregister(InterferenceFunction1DLattice)

class InterferenceFunction2DLattice(IInterferenceFunction):
    r"""


    Interference function of a 2D lattice.

    C++ includes: InterferenceFunction2DLattice.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(InterferenceFunction2DLattice self, double length_1, double length_2, double alpha, double xi) -> InterferenceFunction2DLattice
        __init__(InterferenceFunction2DLattice self, Lattice2D lattice) -> InterferenceFunction2DLattice
        InterferenceFunction2DLattice::InterferenceFunction2DLattice(const Lattice2D &lattice)

        """
        _libBornAgainCore.InterferenceFunction2DLattice_swiginit(self, _libBornAgainCore.new_InterferenceFunction2DLattice(*args))
    __swig_destroy__ = _libBornAgainCore.delete_InterferenceFunction2DLattice

    def clone(self):
        r"""
        clone(InterferenceFunction2DLattice self) -> InterferenceFunction2DLattice
        InterferenceFunction2DLattice * InterferenceFunction2DLattice::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.InterferenceFunction2DLattice_clone(self)

    def accept(self, visitor):
        r"""
        accept(InterferenceFunction2DLattice self, INodeVisitor visitor)
        void InterferenceFunction2DLattice::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.InterferenceFunction2DLattice_accept(self, visitor)

    @staticmethod
    def createSquare(lattice_length, xi):
        r"""createSquare(double lattice_length, double xi) -> InterferenceFunction2DLattice"""
        return _libBornAgainCore.InterferenceFunction2DLattice_createSquare(lattice_length, xi)

    @staticmethod
    def createHexagonal(lattice_length, xi):
        r"""createHexagonal(double lattice_length, double xi) -> InterferenceFunction2DLattice"""
        return _libBornAgainCore.InterferenceFunction2DLattice_createHexagonal(lattice_length, xi)

    def setDecayFunction(self, decay):
        r"""
        setDecayFunction(InterferenceFunction2DLattice self, IFTDecayFunction2D decay)
        void InterferenceFunction2DLattice::setDecayFunction(const IFTDecayFunction2D &decay)

        Sets two-dimensional decay function.

        Parameters:
        -----------

        decay: 
        two-dimensional decay function in reciprocal space 

        """
        return _libBornAgainCore.InterferenceFunction2DLattice_setDecayFunction(self, decay)

    def setIntegrationOverXi(self, integrate_xi):
        r"""
        setIntegrationOverXi(InterferenceFunction2DLattice self, bool integrate_xi)
        void InterferenceFunction2DLattice::setIntegrationOverXi(bool integrate_xi)

        """
        return _libBornAgainCore.InterferenceFunction2DLattice_setIntegrationOverXi(self, integrate_xi)

    def integrationOverXi(self):
        r"""
        integrationOverXi(InterferenceFunction2DLattice self) -> bool
        bool InterferenceFunction2DLattice::integrationOverXi() const

        """
        return _libBornAgainCore.InterferenceFunction2DLattice_integrationOverXi(self)

    def lattice(self):
        r"""
        lattice(InterferenceFunction2DLattice self) -> Lattice2D
        const Lattice2D & InterferenceFunction2DLattice::lattice() const

        """
        return _libBornAgainCore.InterferenceFunction2DLattice_lattice(self)

    def getParticleDensity(self):
        r"""
        getParticleDensity(InterferenceFunction2DLattice self) -> double
        double InterferenceFunction2DLattice::getParticleDensity() const override final

        Returns the particle density associated with this 2d lattice. 

        """
        return _libBornAgainCore.InterferenceFunction2DLattice_getParticleDensity(self)

    def getChildren(self):
        r"""
        getChildren(InterferenceFunction2DLattice self) -> swig_dummy_type_const_inode_vector
        std::vector< const INode * > InterferenceFunction2DLattice::getChildren() const override final

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.InterferenceFunction2DLattice_getChildren(self)

    def onChange(self):
        r"""
        onChange(InterferenceFunction2DLattice self)
        void InterferenceFunction2DLattice::onChange() override final

        Action to be taken in inherited class when a parameter has changed. 

        """
        return _libBornAgainCore.InterferenceFunction2DLattice_onChange(self)

# Register InterferenceFunction2DLattice in _libBornAgainCore:
_libBornAgainCore.InterferenceFunction2DLattice_swigregister(InterferenceFunction2DLattice)

def InterferenceFunction2DLattice_createSquare(lattice_length, xi):
    r"""InterferenceFunction2DLattice_createSquare(double lattice_length, double xi) -> InterferenceFunction2DLattice"""
    return _libBornAgainCore.InterferenceFunction2DLattice_createSquare(lattice_length, xi)

def InterferenceFunction2DLattice_createHexagonal(lattice_length, xi):
    r"""InterferenceFunction2DLattice_createHexagonal(double lattice_length, double xi) -> InterferenceFunction2DLattice"""
    return _libBornAgainCore.InterferenceFunction2DLattice_createHexagonal(lattice_length, xi)

class InterferenceFunction2DParaCrystal(IInterferenceFunction):
    r"""


    Interference function of a 2D paracrystal.

    C++ includes: InterferenceFunction2DParaCrystal.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(InterferenceFunction2DParaCrystal self, Lattice2D lattice, double damping_length, double domain_size_1, double domain_size_2) -> InterferenceFunction2DParaCrystal
        __init__(InterferenceFunction2DParaCrystal self, double length_1, double length_2, double alpha, double xi, double damping_length) -> InterferenceFunction2DParaCrystal
        InterferenceFunction2DParaCrystal::InterferenceFunction2DParaCrystal(double length_1, double length_2, double alpha, double xi, double damping_length)

        Constructor of interference function of two-dimensional paracrystal.

        Parameters:
        -----------

        length_1: 
        length of first lattice vector in nanometers

        length_2: 
        length of second lattice vector in nanometers

        alpha: 
        angle between lattice vectors in radians

        xi: 
        rotation of lattice with respect to x-axis (beam direction) in radians

        damping_length: 
        the damping (coherence) length of the paracrystal in nanometers 

        """
        _libBornAgainCore.InterferenceFunction2DParaCrystal_swiginit(self, _libBornAgainCore.new_InterferenceFunction2DParaCrystal(*args))
    __swig_destroy__ = _libBornAgainCore.delete_InterferenceFunction2DParaCrystal

    def clone(self):
        r"""
        clone(InterferenceFunction2DParaCrystal self) -> InterferenceFunction2DParaCrystal
        InterferenceFunction2DParaCrystal * InterferenceFunction2DParaCrystal::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_clone(self)

    def accept(self, visitor):
        r"""
        accept(InterferenceFunction2DParaCrystal self, INodeVisitor visitor)
        void InterferenceFunction2DParaCrystal::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_accept(self, visitor)

    @staticmethod
    def createSquare(lattice_length, damping_length, domain_size_1, domain_size_2):
        r"""createSquare(double lattice_length, double damping_length, double domain_size_1, double domain_size_2) -> InterferenceFunction2DParaCrystal"""
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_createSquare(lattice_length, damping_length, domain_size_1, domain_size_2)

    @staticmethod
    def createHexagonal(lattice_length, damping_length, domain_size_1, domain_size_2):
        r"""createHexagonal(double lattice_length, double damping_length, double domain_size_1, double domain_size_2) -> InterferenceFunction2DParaCrystal"""
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_createHexagonal(lattice_length, damping_length, domain_size_1, domain_size_2)

    def setDomainSizes(self, size_1, size_2):
        r"""
        setDomainSizes(InterferenceFunction2DParaCrystal self, double size_1, double size_2)
        void InterferenceFunction2DParaCrystal::setDomainSizes(double size_1, double size_2)

        Sets the sizes of coherence domains.

        Parameters:
        -----------

        size_1: 
        coherence domain size along the first basis vector in nanometers

        size_2: 
        coherence domain size along the second basis vector in nanometers 

        """
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_setDomainSizes(self, size_1, size_2)

    def setProbabilityDistributions(self, pdf_1, pdf_2):
        r"""
        setProbabilityDistributions(InterferenceFunction2DParaCrystal self, IFTDistribution2D pdf_1, IFTDistribution2D pdf_2)
        void InterferenceFunction2DParaCrystal::setProbabilityDistributions(const IFTDistribution2D &pdf_1, const IFTDistribution2D &pdf_2)

        Sets the probability distributions (Fourier transformed) for the two lattice directions.

        Parameters:
        -----------

        pdf_1: 
        probability distribution in first lattice direction

        pdf_2: 
        probability distribution in second lattice direction 

        """
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_setProbabilityDistributions(self, pdf_1, pdf_2)

    def setDampingLength(self, damping_length):
        r"""
        setDampingLength(InterferenceFunction2DParaCrystal self, double damping_length)
        void InterferenceFunction2DParaCrystal::setDampingLength(double damping_length)

        Sets the damping length.

        Parameters:
        -----------

        damping_length: 
        the damping (coherence) length of the paracrystal in nanometers 

        """
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_setDampingLength(self, damping_length)

    def domainSizes(self):
        r"""
        domainSizes(InterferenceFunction2DParaCrystal self) -> vdouble1d_t
        std::vector< double > InterferenceFunction2DParaCrystal::domainSizes() const

        """
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_domainSizes(self)

    def setIntegrationOverXi(self, integrate_xi):
        r"""
        setIntegrationOverXi(InterferenceFunction2DParaCrystal self, bool integrate_xi)
        void InterferenceFunction2DParaCrystal::setIntegrationOverXi(bool integrate_xi)

        Enables/disables averaging over the lattice rotation angle.

        Parameters:
        -----------

        integrate_xi: 
        integration flag 

        """
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_setIntegrationOverXi(self, integrate_xi)

    def integrationOverXi(self):
        r"""
        integrationOverXi(InterferenceFunction2DParaCrystal self) -> bool
        bool InterferenceFunction2DParaCrystal::integrationOverXi() const

        """
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_integrationOverXi(self)

    def dampingLength(self):
        r"""
        dampingLength(InterferenceFunction2DParaCrystal self) -> double
        double InterferenceFunction2DParaCrystal::dampingLength() const

        """
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_dampingLength(self)

    def lattice(self):
        r"""
        lattice(InterferenceFunction2DParaCrystal self) -> Lattice2D
        const Lattice2D & InterferenceFunction2DParaCrystal::lattice() const

        """
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_lattice(self)

    def getParticleDensity(self):
        r"""
        getParticleDensity(InterferenceFunction2DParaCrystal self) -> double
        double InterferenceFunction2DParaCrystal::getParticleDensity() const override final

        If defined by this interference function's parameters, returns the particle density (per area). Otherwise, returns zero or a user-defined value 

        """
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_getParticleDensity(self)

    def getChildren(self):
        r"""
        getChildren(InterferenceFunction2DParaCrystal self) -> swig_dummy_type_const_inode_vector
        std::vector< const INode * > InterferenceFunction2DParaCrystal::getChildren() const override final

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_getChildren(self)

    def pdf1(self):
        r"""
        pdf1(InterferenceFunction2DParaCrystal self) -> IFTDistribution2D
        const IFTDistribution2D* InterferenceFunction2DParaCrystal::pdf1() const

        """
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_pdf1(self)

    def pdf2(self):
        r"""
        pdf2(InterferenceFunction2DParaCrystal self) -> IFTDistribution2D
        const IFTDistribution2D* InterferenceFunction2DParaCrystal::pdf2() const

        """
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_pdf2(self)

# Register InterferenceFunction2DParaCrystal in _libBornAgainCore:
_libBornAgainCore.InterferenceFunction2DParaCrystal_swigregister(InterferenceFunction2DParaCrystal)

def InterferenceFunction2DParaCrystal_createSquare(lattice_length, damping_length, domain_size_1, domain_size_2):
    r"""InterferenceFunction2DParaCrystal_createSquare(double lattice_length, double damping_length, double domain_size_1, double domain_size_2) -> InterferenceFunction2DParaCrystal"""
    return _libBornAgainCore.InterferenceFunction2DParaCrystal_createSquare(lattice_length, damping_length, domain_size_1, domain_size_2)

def InterferenceFunction2DParaCrystal_createHexagonal(lattice_length, damping_length, domain_size_1, domain_size_2):
    r"""InterferenceFunction2DParaCrystal_createHexagonal(double lattice_length, double damping_length, double domain_size_1, double domain_size_2) -> InterferenceFunction2DParaCrystal"""
    return _libBornAgainCore.InterferenceFunction2DParaCrystal_createHexagonal(lattice_length, damping_length, domain_size_1, domain_size_2)

class InterferenceFunction2DSuperLattice(IInterferenceFunction):
    r"""


    Interference function of a 2D superlattice with a configurable interference function for each lattice site.

    C++ includes: InterferenceFunction2DSuperLattice.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(InterferenceFunction2DSuperLattice self, Lattice2D lattice, unsigned int size_1, unsigned int size_2) -> InterferenceFunction2DSuperLattice
        __init__(InterferenceFunction2DSuperLattice self, double length_1, double length_2, double alpha, double xi, unsigned int size_1, unsigned int size_2) -> InterferenceFunction2DSuperLattice
        InterferenceFunction2DSuperLattice::InterferenceFunction2DSuperLattice(double length_1, double length_2, double alpha, double xi, unsigned size_1, unsigned size_2)

        Constructor of two-dimensional interference function.

        Parameters:
        -----------

        length_1: 
        length of first lattice vector in nanometers

        length_2: 
        length of second lattice vector in nanometers

        alpha: 
        angle between lattice vectors in radians

        xi: 
        rotation of lattice with respect to x-axis (beam direction) in radians 

        """
        _libBornAgainCore.InterferenceFunction2DSuperLattice_swiginit(self, _libBornAgainCore.new_InterferenceFunction2DSuperLattice(*args))
    __swig_destroy__ = _libBornAgainCore.delete_InterferenceFunction2DSuperLattice

    def clone(self):
        r"""
        clone(InterferenceFunction2DSuperLattice self) -> InterferenceFunction2DSuperLattice
        InterferenceFunction2DSuperLattice * InterferenceFunction2DSuperLattice::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.InterferenceFunction2DSuperLattice_clone(self)

    def accept(self, visitor):
        r"""
        accept(InterferenceFunction2DSuperLattice self, INodeVisitor visitor)
        void InterferenceFunction2DSuperLattice::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.InterferenceFunction2DSuperLattice_accept(self, visitor)

    def setSubstructureIFF(self, sub_iff):
        r"""
        setSubstructureIFF(InterferenceFunction2DSuperLattice self, IInterferenceFunction sub_iff)
        void InterferenceFunction2DSuperLattice::setSubstructureIFF(const IInterferenceFunction &sub_iff)

        """
        return _libBornAgainCore.InterferenceFunction2DSuperLattice_setSubstructureIFF(self, sub_iff)

    def substructureIFF(self):
        r"""
        substructureIFF(InterferenceFunction2DSuperLattice self) -> IInterferenceFunction
        const IInterferenceFunction & InterferenceFunction2DSuperLattice::substructureIFF() const

        """
        return _libBornAgainCore.InterferenceFunction2DSuperLattice_substructureIFF(self)

    @staticmethod
    def createSquare(lattice_length, xi, size_1, size_2):
        r"""createSquare(double lattice_length, double xi, unsigned int size_1, unsigned int size_2) -> InterferenceFunction2DSuperLattice"""
        return _libBornAgainCore.InterferenceFunction2DSuperLattice_createSquare(lattice_length, xi, size_1, size_2)

    @staticmethod
    def createHexagonal(lattice_length, xi, size_1, size_2):
        r"""createHexagonal(double lattice_length, double xi, unsigned int size_1, unsigned int size_2) -> InterferenceFunction2DSuperLattice"""
        return _libBornAgainCore.InterferenceFunction2DSuperLattice_createHexagonal(lattice_length, xi, size_1, size_2)

    def evaluate(self, q, outer_iff=1.0):
        r"""
        evaluate(InterferenceFunction2DSuperLattice self, kvector_t q, double outer_iff=1.0) -> double
        double InterferenceFunction2DSuperLattice::evaluate(const kvector_t q, double outer_iff=1.0) const override final

        Evaluates the interference function for a given wavevector transfer. 

        """
        return _libBornAgainCore.InterferenceFunction2DSuperLattice_evaluate(self, q, outer_iff)

    def domainSize1(self):
        r"""
        domainSize1(InterferenceFunction2DSuperLattice self) -> unsigned int
        unsigned InterferenceFunction2DSuperLattice::domainSize1() const

        """
        return _libBornAgainCore.InterferenceFunction2DSuperLattice_domainSize1(self)

    def domainSize2(self):
        r"""
        domainSize2(InterferenceFunction2DSuperLattice self) -> unsigned int
        unsigned InterferenceFunction2DSuperLattice::domainSize2() const

        """
        return _libBornAgainCore.InterferenceFunction2DSuperLattice_domainSize2(self)

    def setIntegrationOverXi(self, integrate_xi):
        r"""
        setIntegrationOverXi(InterferenceFunction2DSuperLattice self, bool integrate_xi)
        void InterferenceFunction2DSuperLattice::setIntegrationOverXi(bool integrate_xi)

        """
        return _libBornAgainCore.InterferenceFunction2DSuperLattice_setIntegrationOverXi(self, integrate_xi)

    def integrationOverXi(self):
        r"""
        integrationOverXi(InterferenceFunction2DSuperLattice self) -> bool
        bool InterferenceFunction2DSuperLattice::integrationOverXi() const

        """
        return _libBornAgainCore.InterferenceFunction2DSuperLattice_integrationOverXi(self)

    def lattice(self):
        r"""
        lattice(InterferenceFunction2DSuperLattice self) -> Lattice2D
        const Lattice2D & InterferenceFunction2DSuperLattice::lattice() const

        """
        return _libBornAgainCore.InterferenceFunction2DSuperLattice_lattice(self)

    def getChildren(self):
        r"""
        getChildren(InterferenceFunction2DSuperLattice self) -> swig_dummy_type_const_inode_vector
        std::vector< const INode * > InterferenceFunction2DSuperLattice::getChildren() const override final

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.InterferenceFunction2DSuperLattice_getChildren(self)

# Register InterferenceFunction2DSuperLattice in _libBornAgainCore:
_libBornAgainCore.InterferenceFunction2DSuperLattice_swigregister(InterferenceFunction2DSuperLattice)

def InterferenceFunction2DSuperLattice_createSquare(lattice_length, xi, size_1, size_2):
    r"""InterferenceFunction2DSuperLattice_createSquare(double lattice_length, double xi, unsigned int size_1, unsigned int size_2) -> InterferenceFunction2DSuperLattice"""
    return _libBornAgainCore.InterferenceFunction2DSuperLattice_createSquare(lattice_length, xi, size_1, size_2)

def InterferenceFunction2DSuperLattice_createHexagonal(lattice_length, xi, size_1, size_2):
    r"""InterferenceFunction2DSuperLattice_createHexagonal(double lattice_length, double xi, unsigned int size_1, unsigned int size_2) -> InterferenceFunction2DSuperLattice"""
    return _libBornAgainCore.InterferenceFunction2DSuperLattice_createHexagonal(lattice_length, xi, size_1, size_2)

class InterferenceFunction3DLattice(IInterferenceFunction):
    r"""


    Interference function of a 3D lattice.

    C++ includes: InterferenceFunction3DLattice.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lattice):
        r"""
        __init__(InterferenceFunction3DLattice self, Lattice lattice) -> InterferenceFunction3DLattice
        InterferenceFunction3DLattice::InterferenceFunction3DLattice(const Lattice &lattice)

        """
        _libBornAgainCore.InterferenceFunction3DLattice_swiginit(self, _libBornAgainCore.new_InterferenceFunction3DLattice(lattice))
    __swig_destroy__ = _libBornAgainCore.delete_InterferenceFunction3DLattice

    def clone(self):
        r"""
        clone(InterferenceFunction3DLattice self) -> InterferenceFunction3DLattice
        InterferenceFunction3DLattice * InterferenceFunction3DLattice::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.InterferenceFunction3DLattice_clone(self)

    def accept(self, visitor):
        r"""
        accept(InterferenceFunction3DLattice self, INodeVisitor visitor)
        void InterferenceFunction3DLattice::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.InterferenceFunction3DLattice_accept(self, visitor)

    def setPeakShape(self, peak_shape):
        r"""
        setPeakShape(InterferenceFunction3DLattice self, IPeakShape peak_shape)
        void InterferenceFunction3DLattice::setPeakShape(const IPeakShape &peak_shape)

        """
        return _libBornAgainCore.InterferenceFunction3DLattice_setPeakShape(self, peak_shape)

    def lattice(self):
        r"""
        lattice(InterferenceFunction3DLattice self) -> Lattice
        const Lattice & InterferenceFunction3DLattice::lattice() const

        """
        return _libBornAgainCore.InterferenceFunction3DLattice_lattice(self)

    def supportsMultilayer(self):
        r"""
        supportsMultilayer(InterferenceFunction3DLattice self) -> bool
        bool InterferenceFunction3DLattice::supportsMultilayer() const override final

        Indicates if this interference function can be used with a multilayer (DWBA mode) 

        """
        return _libBornAgainCore.InterferenceFunction3DLattice_supportsMultilayer(self)

    def getChildren(self):
        r"""
        getChildren(InterferenceFunction3DLattice self) -> swig_dummy_type_const_inode_vector
        std::vector< const INode * > InterferenceFunction3DLattice::getChildren() const override final

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.InterferenceFunction3DLattice_getChildren(self)

    def onChange(self):
        r"""
        onChange(InterferenceFunction3DLattice self)
        void InterferenceFunction3DLattice::onChange() override final

        Action to be taken in inherited class when a parameter has changed. 

        """
        return _libBornAgainCore.InterferenceFunction3DLattice_onChange(self)

# Register InterferenceFunction3DLattice in _libBornAgainCore:
_libBornAgainCore.InterferenceFunction3DLattice_swigregister(InterferenceFunction3DLattice)

class InterferenceFunctionFinite2DLattice(IInterferenceFunction):
    r"""


    Interference function of a finite 2D lattice.

    C++ includes: InterferenceFunctionFinite2DLattice.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(InterferenceFunctionFinite2DLattice self, Lattice2D lattice, unsigned int N_1, unsigned int N_2) -> InterferenceFunctionFinite2DLattice
        __init__(InterferenceFunctionFinite2DLattice self, double length_1, double length_2, double alpha, double xi, unsigned int N_1, unsigned int N_2) -> InterferenceFunctionFinite2DLattice
        InterferenceFunctionFinite2DLattice::InterferenceFunctionFinite2DLattice(double length_1, double length_2, double alpha, double xi, unsigned N_1, unsigned N_2)

        Constructor of two-dimensional finite lattice interference function.

        Parameters:
        -----------

        length_1: 
        length of first lattice vector in nanometers

        length_2: 
        length of second lattice vector in nanometers

        alpha: 
        angle between lattice vectors in radians

        xi: 
        rotation of lattice with respect to x-axis (beam direction) in radians

        N_1: 
        number of lattice cells in the first lattice direction

        N_2: 
        number of lattice cells in the second lattice direction 

        """
        _libBornAgainCore.InterferenceFunctionFinite2DLattice_swiginit(self, _libBornAgainCore.new_InterferenceFunctionFinite2DLattice(*args))
    __swig_destroy__ = _libBornAgainCore.delete_InterferenceFunctionFinite2DLattice

    def clone(self):
        r"""
        clone(InterferenceFunctionFinite2DLattice self) -> InterferenceFunctionFinite2DLattice
        InterferenceFunctionFinite2DLattice * InterferenceFunctionFinite2DLattice::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.InterferenceFunctionFinite2DLattice_clone(self)

    def accept(self, visitor):
        r"""
        accept(InterferenceFunctionFinite2DLattice self, INodeVisitor visitor)
        void InterferenceFunctionFinite2DLattice::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.InterferenceFunctionFinite2DLattice_accept(self, visitor)

    @staticmethod
    def createSquare(lattice_length, xi, N_1, N_2):
        r"""createSquare(double lattice_length, double xi, unsigned int N_1, unsigned int N_2) -> InterferenceFunctionFinite2DLattice"""
        return _libBornAgainCore.InterferenceFunctionFinite2DLattice_createSquare(lattice_length, xi, N_1, N_2)

    @staticmethod
    def createHexagonal(lattice_length, xi, N_1, N_2):
        r"""createHexagonal(double lattice_length, double xi, unsigned int N_1, unsigned int N_2) -> InterferenceFunctionFinite2DLattice"""
        return _libBornAgainCore.InterferenceFunctionFinite2DLattice_createHexagonal(lattice_length, xi, N_1, N_2)

    def numberUnitCells1(self):
        r"""
        numberUnitCells1(InterferenceFunctionFinite2DLattice self) -> unsigned int
        unsigned InterferenceFunctionFinite2DLattice::numberUnitCells1() const

        """
        return _libBornAgainCore.InterferenceFunctionFinite2DLattice_numberUnitCells1(self)

    def numberUnitCells2(self):
        r"""
        numberUnitCells2(InterferenceFunctionFinite2DLattice self) -> unsigned int
        unsigned InterferenceFunctionFinite2DLattice::numberUnitCells2() const

        """
        return _libBornAgainCore.InterferenceFunctionFinite2DLattice_numberUnitCells2(self)

    def setIntegrationOverXi(self, integrate_xi):
        r"""
        setIntegrationOverXi(InterferenceFunctionFinite2DLattice self, bool integrate_xi)
        void InterferenceFunctionFinite2DLattice::setIntegrationOverXi(bool integrate_xi)

        """
        return _libBornAgainCore.InterferenceFunctionFinite2DLattice_setIntegrationOverXi(self, integrate_xi)

    def integrationOverXi(self):
        r"""
        integrationOverXi(InterferenceFunctionFinite2DLattice self) -> bool
        bool InterferenceFunctionFinite2DLattice::integrationOverXi() const

        """
        return _libBornAgainCore.InterferenceFunctionFinite2DLattice_integrationOverXi(self)

    def lattice(self):
        r"""
        lattice(InterferenceFunctionFinite2DLattice self) -> Lattice2D
        const Lattice2D & InterferenceFunctionFinite2DLattice::lattice() const

        """
        return _libBornAgainCore.InterferenceFunctionFinite2DLattice_lattice(self)

    def getParticleDensity(self):
        r"""
        getParticleDensity(InterferenceFunctionFinite2DLattice self) -> double
        double InterferenceFunctionFinite2DLattice::getParticleDensity() const override final

        Returns the particle density associated with this 2d lattice. 

        """
        return _libBornAgainCore.InterferenceFunctionFinite2DLattice_getParticleDensity(self)

    def getChildren(self):
        r"""
        getChildren(InterferenceFunctionFinite2DLattice self) -> swig_dummy_type_const_inode_vector
        std::vector< const INode * > InterferenceFunctionFinite2DLattice::getChildren() const override final

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.InterferenceFunctionFinite2DLattice_getChildren(self)

# Register InterferenceFunctionFinite2DLattice in _libBornAgainCore:
_libBornAgainCore.InterferenceFunctionFinite2DLattice_swigregister(InterferenceFunctionFinite2DLattice)

def InterferenceFunctionFinite2DLattice_createSquare(lattice_length, xi, N_1, N_2):
    r"""InterferenceFunctionFinite2DLattice_createSquare(double lattice_length, double xi, unsigned int N_1, unsigned int N_2) -> InterferenceFunctionFinite2DLattice"""
    return _libBornAgainCore.InterferenceFunctionFinite2DLattice_createSquare(lattice_length, xi, N_1, N_2)

def InterferenceFunctionFinite2DLattice_createHexagonal(lattice_length, xi, N_1, N_2):
    r"""InterferenceFunctionFinite2DLattice_createHexagonal(double lattice_length, double xi, unsigned int N_1, unsigned int N_2) -> InterferenceFunctionFinite2DLattice"""
    return _libBornAgainCore.InterferenceFunctionFinite2DLattice_createHexagonal(lattice_length, xi, N_1, N_2)

class InterferenceFunctionFinite3DLattice(IInterferenceFunction):
    r"""


    Interference function of a finite 3D lattice.

    C++ includes: InterferenceFunctionFinite3DLattice.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lattice, N_1, N_2, N_3):
        r"""
        __init__(InterferenceFunctionFinite3DLattice self, Lattice lattice, unsigned int N_1, unsigned int N_2, unsigned int N_3) -> InterferenceFunctionFinite3DLattice
        InterferenceFunctionFinite3DLattice::InterferenceFunctionFinite3DLattice(const Lattice &lattice, unsigned N_1, unsigned N_2, unsigned N_3)

        Constructor of three-dimensional finite lattice interference function.

        Parameters:
        -----------

        lattice: 
        object specifying a 2d lattice structure

        N_1: 
        number of lattice cells in the first lattice direction

        N_2: 
        number of lattice cells in the second lattice direction 

        """
        _libBornAgainCore.InterferenceFunctionFinite3DLattice_swiginit(self, _libBornAgainCore.new_InterferenceFunctionFinite3DLattice(lattice, N_1, N_2, N_3))
    __swig_destroy__ = _libBornAgainCore.delete_InterferenceFunctionFinite3DLattice

    def clone(self):
        r"""
        clone(InterferenceFunctionFinite3DLattice self) -> InterferenceFunctionFinite3DLattice
        InterferenceFunctionFinite3DLattice * InterferenceFunctionFinite3DLattice::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.InterferenceFunctionFinite3DLattice_clone(self)

    def accept(self, visitor):
        r"""
        accept(InterferenceFunctionFinite3DLattice self, INodeVisitor visitor)
        void InterferenceFunctionFinite3DLattice::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.InterferenceFunctionFinite3DLattice_accept(self, visitor)

    def numberUnitCells1(self):
        r"""
        numberUnitCells1(InterferenceFunctionFinite3DLattice self) -> unsigned int
        unsigned InterferenceFunctionFinite3DLattice::numberUnitCells1() const

        """
        return _libBornAgainCore.InterferenceFunctionFinite3DLattice_numberUnitCells1(self)

    def numberUnitCells2(self):
        r"""
        numberUnitCells2(InterferenceFunctionFinite3DLattice self) -> unsigned int
        unsigned InterferenceFunctionFinite3DLattice::numberUnitCells2() const

        """
        return _libBornAgainCore.InterferenceFunctionFinite3DLattice_numberUnitCells2(self)

    def numberUnitCells3(self):
        r"""
        numberUnitCells3(InterferenceFunctionFinite3DLattice self) -> unsigned int
        unsigned InterferenceFunctionFinite3DLattice::numberUnitCells3() const

        """
        return _libBornAgainCore.InterferenceFunctionFinite3DLattice_numberUnitCells3(self)

    def lattice(self):
        r"""
        lattice(InterferenceFunctionFinite3DLattice self) -> Lattice
        const Lattice & InterferenceFunctionFinite3DLattice::lattice() const

        """
        return _libBornAgainCore.InterferenceFunctionFinite3DLattice_lattice(self)

    def supportsMultilayer(self):
        r"""
        supportsMultilayer(InterferenceFunctionFinite3DLattice self) -> bool
        bool InterferenceFunctionFinite3DLattice::supportsMultilayer() const override final

        Indicates if this interference function can be used with a multilayer (DWBA mode) 

        """
        return _libBornAgainCore.InterferenceFunctionFinite3DLattice_supportsMultilayer(self)

    def getChildren(self):
        r"""
        getChildren(InterferenceFunctionFinite3DLattice self) -> swig_dummy_type_const_inode_vector
        std::vector< const INode * > InterferenceFunctionFinite3DLattice::getChildren() const override final

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.InterferenceFunctionFinite3DLattice_getChildren(self)

# Register InterferenceFunctionFinite3DLattice in _libBornAgainCore:
_libBornAgainCore.InterferenceFunctionFinite3DLattice_swigregister(InterferenceFunctionFinite3DLattice)

class InterferenceFunctionHardDisk(IInterferenceFunction):
    r"""


    Percus-Yevick hard disk interference function.

    M.S. Ripoll & C.F. Tejero (1995) Approximate analytical expression for the direct correlation function of hard discs within the Percus-Yevick equation, Molecular Physics, 85:2, 423-428, DOI: 10.1080/00268979500101211

    C++ includes: InterferenceFunctionHardDisk.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, radius, density, position_var=0):
        r"""
        __init__(InterferenceFunctionHardDisk self, double radius, double density, double position_var=0) -> InterferenceFunctionHardDisk
        InterferenceFunctionHardDisk::InterferenceFunctionHardDisk(double radius, double density, double position_var=0)

        """
        _libBornAgainCore.InterferenceFunctionHardDisk_swiginit(self, _libBornAgainCore.new_InterferenceFunctionHardDisk(radius, density, position_var))
    __swig_destroy__ = _libBornAgainCore.delete_InterferenceFunctionHardDisk

    def clone(self):
        r"""
        clone(InterferenceFunctionHardDisk self) -> InterferenceFunctionHardDisk
        InterferenceFunctionHardDisk * InterferenceFunctionHardDisk::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.InterferenceFunctionHardDisk_clone(self)

    def accept(self, visitor):
        r"""
        accept(InterferenceFunctionHardDisk self, INodeVisitor visitor)
        void InterferenceFunctionHardDisk::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.InterferenceFunctionHardDisk_accept(self, visitor)

    def getParticleDensity(self):
        r"""
        getParticleDensity(InterferenceFunctionHardDisk self) -> double
        double InterferenceFunctionHardDisk::getParticleDensity() const override final

        If defined by this interference function's parameters, returns the particle density (per area). Otherwise, returns zero or a user-defined value 

        """
        return _libBornAgainCore.InterferenceFunctionHardDisk_getParticleDensity(self)

    def radius(self):
        r"""
        radius(InterferenceFunctionHardDisk self) -> double
        double InterferenceFunctionHardDisk::radius() const

        """
        return _libBornAgainCore.InterferenceFunctionHardDisk_radius(self)

    def density(self):
        r"""
        density(InterferenceFunctionHardDisk self) -> double
        double InterferenceFunctionHardDisk::density() const

        """
        return _libBornAgainCore.InterferenceFunctionHardDisk_density(self)

# Register InterferenceFunctionHardDisk in _libBornAgainCore:
_libBornAgainCore.InterferenceFunctionHardDisk_swigregister(InterferenceFunctionHardDisk)

class InterferenceFunctionNone(IInterferenceFunction):
    r"""


    Default interference function (i.e. absence of any interference).

    C++ includes: InterferenceFunctionNone.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(InterferenceFunctionNone self) -> InterferenceFunctionNone
        InterferenceFunctionNone::InterferenceFunctionNone()

        """
        _libBornAgainCore.InterferenceFunctionNone_swiginit(self, _libBornAgainCore.new_InterferenceFunctionNone())

    def clone(self):
        r"""
        clone(InterferenceFunctionNone self) -> InterferenceFunctionNone
        InterferenceFunctionNone * InterferenceFunctionNone::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.InterferenceFunctionNone_clone(self)

    def accept(self, visitor):
        r"""
        accept(InterferenceFunctionNone self, INodeVisitor visitor)
        void InterferenceFunctionNone::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.InterferenceFunctionNone_accept(self, visitor)
    __swig_destroy__ = _libBornAgainCore.delete_InterferenceFunctionNone

# Register InterferenceFunctionNone in _libBornAgainCore:
_libBornAgainCore.InterferenceFunctionNone_swigregister(InterferenceFunctionNone)

class InterferenceFunctionRadialParaCrystal(IInterferenceFunction):
    r"""


    Interference function of radial paracrystal.

    C++ includes: InterferenceFunctionRadialParaCrystal.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, peak_distance, damping_length):
        r"""
        __init__(InterferenceFunctionRadialParaCrystal self, double peak_distance, double damping_length) -> InterferenceFunctionRadialParaCrystal
        InterferenceFunctionRadialParaCrystal::InterferenceFunctionRadialParaCrystal(double peak_distance, double damping_length)

        Constructor of interference function of radial paracrystal.

        Parameters:
        -----------

        peak_distance: 
        average distance to the next neighbor in nanometers

        damping_length: 
        the damping (coherence) length of the paracrystal in nanometers 

        """
        _libBornAgainCore.InterferenceFunctionRadialParaCrystal_swiginit(self, _libBornAgainCore.new_InterferenceFunctionRadialParaCrystal(peak_distance, damping_length))

    def clone(self):
        r"""
        clone(InterferenceFunctionRadialParaCrystal self) -> InterferenceFunctionRadialParaCrystal
        InterferenceFunctionRadialParaCrystal * InterferenceFunctionRadialParaCrystal::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_clone(self)

    def accept(self, visitor):
        r"""
        accept(InterferenceFunctionRadialParaCrystal self, INodeVisitor visitor)
        void InterferenceFunctionRadialParaCrystal::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_accept(self, visitor)

    def setKappa(self, kappa):
        r"""
        setKappa(InterferenceFunctionRadialParaCrystal self, double kappa)
        void InterferenceFunctionRadialParaCrystal::setKappa(double kappa)

        Sets size spacing coupling parameter of the Size Spacing Correlation Approximation.

        Parameters:
        -----------

        size: 
        spacing coupling parameter 

        """
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_setKappa(self, kappa)

    def kappa(self):
        r"""
        kappa(InterferenceFunctionRadialParaCrystal self) -> double
        double InterferenceFunctionRadialParaCrystal::kappa() const

        """
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_kappa(self)

    def setDomainSize(self, size):
        r"""
        setDomainSize(InterferenceFunctionRadialParaCrystal self, double size)
        void InterferenceFunctionRadialParaCrystal::setDomainSize(double size)

        Sets domain size (finite size corrections).

        Parameters:
        -----------

        size: 
        size of coherence domain along the lattice main axis in nanometers 

        """
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_setDomainSize(self, size)

    def domainSize(self):
        r"""
        domainSize(InterferenceFunctionRadialParaCrystal self) -> double
        double InterferenceFunctionRadialParaCrystal::domainSize() const

        """
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_domainSize(self)

    def FTPDF(self, qpar):
        r"""
        FTPDF(InterferenceFunctionRadialParaCrystal self, double qpar) -> complex_t
        complex_t InterferenceFunctionRadialParaCrystal::FTPDF(double qpar) const

        """
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_FTPDF(self, qpar)

    def setProbabilityDistribution(self, pdf):
        r"""
        setProbabilityDistribution(InterferenceFunctionRadialParaCrystal self, IFTDistribution1D pdf)
        void InterferenceFunctionRadialParaCrystal::setProbabilityDistribution(const IFTDistribution1D &pdf)

        Sets one-dimensional probability distribution.

        Parameters:
        -----------

        pdf: 
        probability distribution (Fourier transform of probability density) 

        """
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_setProbabilityDistribution(self, pdf)

    def peakDistance(self):
        r"""
        peakDistance(InterferenceFunctionRadialParaCrystal self) -> double
        double InterferenceFunctionRadialParaCrystal::peakDistance() const

        """
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_peakDistance(self)

    def dampingLength(self):
        r"""
        dampingLength(InterferenceFunctionRadialParaCrystal self) -> double
        double InterferenceFunctionRadialParaCrystal::dampingLength() const

        """
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_dampingLength(self)

    def getChildren(self):
        r"""
        getChildren(InterferenceFunctionRadialParaCrystal self) -> swig_dummy_type_const_inode_vector
        std::vector< const INode * > InterferenceFunctionRadialParaCrystal::getChildren() const override final

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_getChildren(self)

    def randomSample(self):
        r"""
        randomSample(InterferenceFunctionRadialParaCrystal self) -> double
        double InterferenceFunctionRadialParaCrystal::randomSample() const

        """
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_randomSample(self)
    __swig_destroy__ = _libBornAgainCore.delete_InterferenceFunctionRadialParaCrystal

# Register InterferenceFunctionRadialParaCrystal in _libBornAgainCore:
_libBornAgainCore.InterferenceFunctionRadialParaCrystal_swigregister(InterferenceFunctionRadialParaCrystal)

class InterferenceFunctionTwin(IInterferenceFunction):
    r"""


    Interference function for two particles at a mean distance and given standard deviation from each other in a given direction.

    C++ includes: InterferenceFunctionTwin.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, direction, mean_distance, std_dev):
        r"""
        __init__(InterferenceFunctionTwin self, kvector_t direction, double mean_distance, double std_dev) -> InterferenceFunctionTwin
        InterferenceFunctionTwin::InterferenceFunctionTwin(const kvector_t &direction, double mean_distance, double std_dev)

        """
        _libBornAgainCore.InterferenceFunctionTwin_swiginit(self, _libBornAgainCore.new_InterferenceFunctionTwin(direction, mean_distance, std_dev))

    def clone(self):
        r"""
        clone(InterferenceFunctionTwin self) -> InterferenceFunctionTwin
        InterferenceFunctionTwin * InterferenceFunctionTwin::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.InterferenceFunctionTwin_clone(self)

    def accept(self, visitor):
        r"""
        accept(InterferenceFunctionTwin self, INodeVisitor visitor)
        void InterferenceFunctionTwin::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.InterferenceFunctionTwin_accept(self, visitor)

    def direction(self):
        r"""
        direction(InterferenceFunctionTwin self) -> kvector_t
        kvector_t InterferenceFunctionTwin::direction() const

        """
        return _libBornAgainCore.InterferenceFunctionTwin_direction(self)

    def meanDistance(self):
        r"""
        meanDistance(InterferenceFunctionTwin self) -> double
        double InterferenceFunctionTwin::meanDistance() const

        """
        return _libBornAgainCore.InterferenceFunctionTwin_meanDistance(self)

    def stdDev(self):
        r"""
        stdDev(InterferenceFunctionTwin self) -> double
        double InterferenceFunctionTwin::stdDev() const

        """
        return _libBornAgainCore.InterferenceFunctionTwin_stdDev(self)
    __swig_destroy__ = _libBornAgainCore.delete_InterferenceFunctionTwin

# Register InterferenceFunctionTwin in _libBornAgainCore:
_libBornAgainCore.InterferenceFunctionTwin_swigregister(InterferenceFunctionTwin)

class ParticleLayout(ILayout):
    r"""


    Decorator class that adds particles to  ISample objects.

    C++ includes: ParticleLayout.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ParticleLayout self) -> ParticleLayout
        __init__(ParticleLayout self, IAbstractParticle particle, double abundance=-1.0) -> ParticleLayout
        ParticleLayout::ParticleLayout(const IAbstractParticle &particle, double abundance=-1.0)

        """
        _libBornAgainCore.ParticleLayout_swiginit(self, _libBornAgainCore.new_ParticleLayout(*args))
    __swig_destroy__ = _libBornAgainCore.delete_ParticleLayout

    def clone(self):
        r"""
        clone(ParticleLayout self) -> ParticleLayout
        ParticleLayout * ParticleLayout::clone() const final override

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.ParticleLayout_clone(self)

    def accept(self, visitor):
        r"""
        accept(ParticleLayout self, INodeVisitor visitor)
        void ParticleLayout::accept(INodeVisitor *visitor) const final override

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.ParticleLayout_accept(self, visitor)

    def addParticle(self, *args):
        r"""
        addParticle(ParticleLayout self, IAbstractParticle particle, double abundance=-1.0, kvector_t position={}, IRotation rotation=IdentityRotation())
        void ParticleLayout::addParticle(const IAbstractParticle &particle, double abundance=-1.0, const kvector_t position={}, const IRotation &rotation=IdentityRotation())

        Adds particle to the layout with abundance, position and the rotation defined.

        Parameters:
        -----------

        particle: 
        to be added

        abundance: 
         Particle abundance

        position: 
         Particle position

        rotation: 
         Particle rotation 

        """
        return _libBornAgainCore.ParticleLayout_addParticle(self, *args)

    def particles(self):
        r"""
        particles(ParticleLayout self) -> SafePointerVector< IParticle >
        SafePointerVector< IParticle > ParticleLayout::particles() const final override

        Returns information on all particles (type and abundance) and generates new particles if an  IAbstractParticle denotes a collection 

        """
        return _libBornAgainCore.ParticleLayout_particles(self)

    def interferenceFunction(self):
        r"""
        interferenceFunction(ParticleLayout self) -> IInterferenceFunction
        const IInterferenceFunction * ParticleLayout::interferenceFunction() const final override

        Returns the interference function. 

        """
        return _libBornAgainCore.ParticleLayout_interferenceFunction(self)

    def getTotalAbundance(self):
        r"""
        getTotalAbundance(ParticleLayout self) -> double
        double ParticleLayout::getTotalAbundance() const final override

        Get total abundance of all particles. 

        """
        return _libBornAgainCore.ParticleLayout_getTotalAbundance(self)

    def setInterferenceFunction(self, interference_function):
        r"""
        setInterferenceFunction(ParticleLayout self, IInterferenceFunction interference_function)
        void ParticleLayout::setInterferenceFunction(const IInterferenceFunction &interference_function)

        Adds interference functions. 

        """
        return _libBornAgainCore.ParticleLayout_setInterferenceFunction(self, interference_function)

    def totalParticleSurfaceDensity(self):
        r"""
        totalParticleSurfaceDensity(ParticleLayout self) -> double
        double ParticleLayout::totalParticleSurfaceDensity() const final override

        Returns surface density of all particles. 

        """
        return _libBornAgainCore.ParticleLayout_totalParticleSurfaceDensity(self)

    def setTotalParticleSurfaceDensity(self, particle_density):
        r"""
        setTotalParticleSurfaceDensity(ParticleLayout self, double particle_density)
        void ParticleLayout::setTotalParticleSurfaceDensity(double particle_density) final override

        Sets total particle surface density.

        Parameters:
        -----------

        particle_density: 
        number of particles per square nanometer 

        """
        return _libBornAgainCore.ParticleLayout_setTotalParticleSurfaceDensity(self, particle_density)

    def getChildren(self):
        r"""
        getChildren(ParticleLayout self) -> swig_dummy_type_const_inode_vector
        std::vector< const INode * > ParticleLayout::getChildren() const final override

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.ParticleLayout_getChildren(self)

# Register ParticleLayout in _libBornAgainCore:
_libBornAgainCore.ParticleLayout_swigregister(ParticleLayout)

class Beam(INode):
    r"""


    Beam defined by wavelength, direction and intensity.

    C++ includes: Beam.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Beam self, double wavelength, double alpha, double phi, double intensity) -> Beam
        __init__(Beam self, Beam other) -> Beam
        Beam::Beam(const Beam &other)

        """
        _libBornAgainCore.Beam_swiginit(self, _libBornAgainCore.new_Beam(*args))
    __swig_destroy__ = _libBornAgainCore.delete_Beam

    @staticmethod
    def horizontalBeam():
        r"""horizontalBeam() -> Beam"""
        return _libBornAgainCore.Beam_horizontalBeam()

    def getCentralK(self):
        r"""
        getCentralK(Beam self) -> kvector_t
        kvector_t Beam::getCentralK() const

        Returns the wavevector. 

        """
        return _libBornAgainCore.Beam_getCentralK(self)

    def setCentralK(self, wavelength, alpha_i, phi_i):
        r"""
        setCentralK(Beam self, double wavelength, double alpha_i, double phi_i)
        void Beam::setCentralK(double wavelength, double alpha_i, double phi_i)

        Sets the wavevector in terms of wavelength and incoming angles. 

        """
        return _libBornAgainCore.Beam_setCentralK(self, wavelength, alpha_i, phi_i)

    def getIntensity(self):
        r"""
        getIntensity(Beam self) -> double
        double Beam::getIntensity() const

        Returns the beam intensity in neutrons/sec. 

        """
        return _libBornAgainCore.Beam_getIntensity(self)

    def setIntensity(self, intensity):
        r"""
        setIntensity(Beam self, double intensity)
        void Beam::setIntensity(double intensity)

        Sets the beam intensity in neutrons/sec. 

        """
        return _libBornAgainCore.Beam_setIntensity(self, intensity)

    def footprintFactor(self):
        r"""
        footprintFactor(Beam self) -> IFootprintFactor
        const IFootprintFactor * Beam::footprintFactor() const

        Returns footprint factor. 

        """
        return _libBornAgainCore.Beam_footprintFactor(self)

    def setFootprintFactor(self, shape_factor):
        r"""
        setFootprintFactor(Beam self, IFootprintFactor shape_factor)
        void Beam::setFootprintFactor(const IFootprintFactor &shape_factor)

        Sets footprint factor to the beam. 

        """
        return _libBornAgainCore.Beam_setFootprintFactor(self, shape_factor)

    def setWidthRatio(self, width_ratio):
        r"""
        setWidthRatio(Beam self, double width_ratio)
        void Beam::setWidthRatio(double width_ratio)

        Sets beam to sample width ratio in footprint factor. 

        """
        return _libBornAgainCore.Beam_setWidthRatio(self, width_ratio)

    def setPolarization(self, bloch_vector):
        r"""
        setPolarization(Beam self, kvector_t bloch_vector)
        void Beam::setPolarization(const kvector_t bloch_vector)

        Sets the polarization density matrix according to the given Bloch vector. 

        """
        return _libBornAgainCore.Beam_setPolarization(self, bloch_vector)

    def getBlochVector(self):
        r"""
        getBlochVector(Beam self) -> kvector_t
        kvector_t Beam::getBlochVector() const

        """
        return _libBornAgainCore.Beam_getBlochVector(self)

    def getWavelength(self):
        r"""
        getWavelength(Beam self) -> double
        double Beam::getWavelength() const

        """
        return _libBornAgainCore.Beam_getWavelength(self)

    def getAlpha(self):
        r"""
        getAlpha(Beam self) -> double
        double Beam::getAlpha() const

        """
        return _libBornAgainCore.Beam_getAlpha(self)

    def getPhi(self):
        r"""
        getPhi(Beam self) -> double
        double Beam::getPhi() const

        """
        return _libBornAgainCore.Beam_getPhi(self)

    def accept(self, visitor):
        r"""
        accept(Beam self, INodeVisitor visitor)
        void Beam::accept(INodeVisitor *visitor) const override

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.Beam_accept(self, visitor)

    def getChildren(self):
        r"""
        getChildren(Beam self) -> swig_dummy_type_const_inode_vector
        std::vector< const INode * > Beam::getChildren() const override

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.Beam_getChildren(self)

# Register Beam in _libBornAgainCore:
_libBornAgainCore.Beam_swigregister(Beam)

def Beam_horizontalBeam():
    r"""Beam_horizontalBeam() -> Beam"""
    return _libBornAgainCore.Beam_horizontalBeam()

class IFootprintFactor(ICloneable, INode):
    r"""


    Abstract base for classes that calculate the beam footprint factor

    C++ includes: IFootprintFactor.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IFootprintFactor

    def clone(self):
        r"""
        clone(IFootprintFactor self) -> IFootprintFactor
        virtual IFootprintFactor* IFootprintFactor::clone() const =0

        """
        return _libBornAgainCore.IFootprintFactor_clone(self)

    def setWidthRatio(self, width_ratio):
        r"""
        setWidthRatio(IFootprintFactor self, double width_ratio)
        void IFootprintFactor::setWidthRatio(double width_ratio)

        """
        return _libBornAgainCore.IFootprintFactor_setWidthRatio(self, width_ratio)

    def widthRatio(self):
        r"""
        widthRatio(IFootprintFactor self) -> double
        double IFootprintFactor::widthRatio() const

        """
        return _libBornAgainCore.IFootprintFactor_widthRatio(self)

    def calculate(self, alpha):
        r"""
        calculate(IFootprintFactor self, double alpha) -> double
        virtual double IFootprintFactor::calculate(double alpha) const =0

        Calculate footprint correction coefficient from the beam incident angle  alpha. 

        """
        return _libBornAgainCore.IFootprintFactor_calculate(self, alpha)

    def _print(self):
        r"""
        _print(IFootprintFactor self) -> std::string
        virtual std::string IFootprintFactor::print() const =0

        Print python-formatted footprint definition. 

        """
        return _libBornAgainCore.IFootprintFactor__print(self)

# Register IFootprintFactor in _libBornAgainCore:
_libBornAgainCore.IFootprintFactor_swigregister(IFootprintFactor)

class FootprintGauss(IFootprintFactor):
    r"""


    Calculates footprint coefficient for a gaussian beam  Beam width is interpreted as the full width on the level of  \\[ \\exp{-1/2} \\] from the peak intensity.

    C++ includes: FootprintGauss.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FootprintGauss self, vdouble1d_t P) -> FootprintGauss
        __init__(FootprintGauss self, double width_ratio) -> FootprintGauss
        FootprintGauss::FootprintGauss(double width_ratio)

        """
        _libBornAgainCore.FootprintGauss_swiginit(self, _libBornAgainCore.new_FootprintGauss(*args))

    def accept(self, visitor):
        r"""
        accept(FootprintGauss self, INodeVisitor visitor)
        void FootprintGauss::accept(INodeVisitor *visitor) const override

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FootprintGauss_accept(self, visitor)

    def clone(self):
        r"""
        clone(FootprintGauss self) -> FootprintGauss
        FootprintGauss * FootprintGauss::clone() const override

        """
        return _libBornAgainCore.FootprintGauss_clone(self)

    def calculate(self, alpha):
        r"""
        calculate(FootprintGauss self, double alpha) -> double
        double FootprintGauss::calculate(double alpha) const override

        Calculate footprint correction coefficient from the beam incident angle  alpha. 

        """
        return _libBornAgainCore.FootprintGauss_calculate(self, alpha)

    def _print(self):
        r"""
        _print(FootprintGauss self) -> std::string
        std::string FootprintGauss::print() const override

        Print python-formatted footprint definition. 

        """
        return _libBornAgainCore.FootprintGauss__print(self)
    __swig_destroy__ = _libBornAgainCore.delete_FootprintGauss

# Register FootprintGauss in _libBornAgainCore:
_libBornAgainCore.FootprintGauss_swigregister(FootprintGauss)

class FootprintSquare(IFootprintFactor):
    r"""


    Calculates footprint coefficient for a square beam

    C++ includes: FootprintSquare.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FootprintSquare self, vdouble1d_t P) -> FootprintSquare
        __init__(FootprintSquare self, double width_ratio) -> FootprintSquare
        FootprintSquare::FootprintSquare(double width_ratio)

        """
        _libBornAgainCore.FootprintSquare_swiginit(self, _libBornAgainCore.new_FootprintSquare(*args))

    def accept(self, visitor):
        r"""
        accept(FootprintSquare self, INodeVisitor visitor)
        void FootprintSquare::accept(INodeVisitor *visitor) const override

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FootprintSquare_accept(self, visitor)

    def clone(self):
        r"""
        clone(FootprintSquare self) -> FootprintSquare
        FootprintSquare * FootprintSquare::clone() const override

        """
        return _libBornAgainCore.FootprintSquare_clone(self)

    def calculate(self, alpha):
        r"""
        calculate(FootprintSquare self, double alpha) -> double
        double FootprintSquare::calculate(double alpha) const override

        Calculate footprint correction coefficient from the beam incident angle  alpha. 

        """
        return _libBornAgainCore.FootprintSquare_calculate(self, alpha)

    def _print(self):
        r"""
        _print(FootprintSquare self) -> std::string
        std::string FootprintSquare::print() const override

        Print python-formatted footprint definition. 

        """
        return _libBornAgainCore.FootprintSquare__print(self)
    __swig_destroy__ = _libBornAgainCore.delete_FootprintSquare

# Register FootprintSquare in _libBornAgainCore:
_libBornAgainCore.FootprintSquare_swigregister(FootprintSquare)

class IMultiLayerBuilder(IParameterized):
    r"""


    Interface to the class capable to build samples to simulate.

    C++ includes: IMultiLayerBuilder.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(IMultiLayerBuilder self) -> IMultiLayerBuilder
        IMultiLayerBuilder::IMultiLayerBuilder()

        """
        if self.__class__ == IMultiLayerBuilder:
            _self = None
        else:
            _self = self
        _libBornAgainCore.IMultiLayerBuilder_swiginit(self, _libBornAgainCore.new_IMultiLayerBuilder(_self, ))
    __swig_destroy__ = _libBornAgainCore.delete_IMultiLayerBuilder

    def buildSample(self):
        r"""
        buildSample(IMultiLayerBuilder self) -> MultiLayer
        virtual MultiLayer* IMultiLayerBuilder::buildSample() const =0

        """
        return _libBornAgainCore.IMultiLayerBuilder_buildSample(self)

    def createSample(self, index=0):
        r"""
        createSample(IMultiLayerBuilder self, size_t index=0) -> MultiLayer
        virtual MultiLayer* IMultiLayerBuilder::createSample(size_t index=0)

        """
        return _libBornAgainCore.IMultiLayerBuilder_createSample(self, index)

    def size(self):
        r"""
        size(IMultiLayerBuilder self) -> size_t
        virtual size_t IMultiLayerBuilder::size()

        """
        return _libBornAgainCore.IMultiLayerBuilder_size(self)

    def registerParameter(self, name, parpointer):
        r"""
        registerParameter(IMultiLayerBuilder self, std::string const & name, int64_t parpointer) -> RealParameter
        RealParameter & IParameterized::registerParameter(const std::string &name, double *parpointer)

        """
        return _libBornAgainCore.IMultiLayerBuilder_registerParameter(self, name, parpointer)

    def setParameterValue(self, name, value):
        r"""
        setParameterValue(IMultiLayerBuilder self, std::string const & name, double value)
        void IParameterized::setParameterValue(const std::string &name, double value)

        """
        return _libBornAgainCore.IMultiLayerBuilder_setParameterValue(self, name, value)

    def parametersToString(self):
        r"""
        parametersToString(IMultiLayerBuilder self) -> std::string
        std::string IParameterized::parametersToString() const

        Returns multiline string representing available parameters. 

        """
        return _libBornAgainCore.IMultiLayerBuilder_parametersToString(self)

    def createParameterTree(self):
        r"""
        createParameterTree(IMultiLayerBuilder self) -> ParameterPool
        ParameterPool * IParameterized::createParameterTree() const

        Creates new parameter pool, with all local parameters and those of its children. 

        """
        return _libBornAgainCore.IMultiLayerBuilder_createParameterTree(self)

    def parameterPool(self):
        r"""
        parameterPool(IMultiLayerBuilder self) -> ParameterPool
        ParameterPool* IParameterized::parameterPool() const

        Returns pointer to the parameter pool. 

        """
        return _libBornAgainCore.IMultiLayerBuilder_parameterPool(self)

    def onChange(self):
        r"""
        onChange(IMultiLayerBuilder self)
        virtual void IParameterized::onChange()

        Action to be taken in inherited class when a parameter has changed. 

        """
        return _libBornAgainCore.IMultiLayerBuilder_onChange(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IMultiLayerBuilder(self)
        return weakref.proxy(self)

# Register IMultiLayerBuilder in _libBornAgainCore:
_libBornAgainCore.IMultiLayerBuilder_swigregister(IMultiLayerBuilder)

class Layer(ISample):
    r"""


    A layer, with thickness (in nanometer) and material.

    C++ includes: Layer.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, material, thickness=0):
        r"""
        __init__(Layer self, Material material, double thickness=0) -> Layer
        Layer::Layer(Material material, double thickness=0)

        Constructor of a layer with thickness and material

        Parameters:
        -----------

        material: 
        material the layer is made of

        thickness: 
        thickness of a layer in nanometers 

        """
        _libBornAgainCore.Layer_swiginit(self, _libBornAgainCore.new_Layer(material, thickness))
    __swig_destroy__ = _libBornAgainCore.delete_Layer

    def clone(self):
        r"""
        clone(Layer self) -> Layer
        Layer * Layer::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.Layer_clone(self)

    def accept(self, visitor):
        r"""
        accept(Layer self, INodeVisitor visitor)
        void Layer::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.Layer_accept(self, visitor)

    def setThickness(self, thickness):
        r"""
        setThickness(Layer self, double thickness)
        void Layer::setThickness(double thickness)

        Sets layer thickness in nanometers. 

        """
        return _libBornAgainCore.Layer_setThickness(self, thickness)

    def thickness(self):
        r"""
        thickness(Layer self) -> double
        double Layer::thickness() const

        """
        return _libBornAgainCore.Layer_thickness(self)

    def material(self):
        r"""
        material(Layer self) -> Material
        const Material* Layer::material() const override final

        Returns nullptr, unless overwritten to return a specific material. 

        """
        return _libBornAgainCore.Layer_material(self)

    def setMaterial(self, material):
        r"""
        setMaterial(Layer self, Material material)
        void Layer::setMaterial(Material material)

        """
        return _libBornAgainCore.Layer_setMaterial(self, material)

    def addLayout(self, decoration):
        r"""
        addLayout(Layer self, ILayout decoration)
        void Layer::addLayout(const ILayout &decoration)

        """
        return _libBornAgainCore.Layer_addLayout(self, decoration)

    def numberOfLayouts(self):
        r"""
        numberOfLayouts(Layer self) -> size_t
        size_t Layer::numberOfLayouts() const

        """
        return _libBornAgainCore.Layer_numberOfLayouts(self)

    def layouts(self):
        r"""
        layouts(Layer self) -> std::vector< ILayout const *,std::allocator< ILayout const * > >
        std::vector< const ILayout * > Layer::layouts() const

        """
        return _libBornAgainCore.Layer_layouts(self)

    def getChildren(self):
        r"""
        getChildren(Layer self) -> swig_dummy_type_const_inode_vector
        std::vector< const INode * > Layer::getChildren() const override final

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.Layer_getChildren(self)

    def registerThickness(self, make_registered=True):
        r"""
        registerThickness(Layer self, bool make_registered=True)
        void Layer::registerThickness(bool make_registered=true)

        """
        return _libBornAgainCore.Layer_registerThickness(self, make_registered)

    def setNumberOfSlices(self, n_slices):
        r"""
        setNumberOfSlices(Layer self, unsigned int n_slices)
        void Layer::setNumberOfSlices(unsigned int n_slices)

        """
        return _libBornAgainCore.Layer_setNumberOfSlices(self, n_slices)

    def numberOfSlices(self):
        r"""
        numberOfSlices(Layer self) -> unsigned int
        unsigned int Layer::numberOfSlices() const

        """
        return _libBornAgainCore.Layer_numberOfSlices(self)

# Register Layer in _libBornAgainCore:
_libBornAgainCore.Layer_swigregister(Layer)

class LayerRoughness(ISample):
    r"""


    A roughness of interface between two layers.

    Based on the article D.K.G. de Boer, Physical review B, Volume 51, Number 8, 15 February 1995 "X-ray reflection and transmission by rough surfaces"

    C++ includes: LayerRoughness.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(LayerRoughness self, double sigma, double hurstParameter, double lateralCorrLength) -> LayerRoughness
        __init__(LayerRoughness self) -> LayerRoughness
        LayerRoughness::LayerRoughness()

        """
        _libBornAgainCore.LayerRoughness_swiginit(self, _libBornAgainCore.new_LayerRoughness(*args))

    def clone(self):
        r"""
        clone(LayerRoughness self) -> LayerRoughness
        LayerRoughness* LayerRoughness::clone() const

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.LayerRoughness_clone(self)

    def accept(self, visitor):
        r"""
        accept(LayerRoughness self, INodeVisitor visitor)
        virtual void LayerRoughness::accept(INodeVisitor *visitor) const

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.LayerRoughness_accept(self, visitor)

    def getSpectralFun(self, kvec):
        r"""
        getSpectralFun(LayerRoughness self, kvector_t kvec) -> double
        double LayerRoughness::getSpectralFun(const kvector_t kvec) const

        Returns power spectral density of the surface roughness.

        Power spectral density of the surface roughness is a result of two-dimensional Fourier transform of the correlation function of the roughness profile.

        Based on the article D.K.G. de Boer, Physical review B, Volume 51, Number 8, 15 February 1995 "X-ray reflection and transmission by rough surfaces" 

        """
        return _libBornAgainCore.LayerRoughness_getSpectralFun(self, kvec)

    def getCorrFun(self, k):
        r"""
        getCorrFun(LayerRoughness self, kvector_t k) -> double
        double LayerRoughness::getCorrFun(const kvector_t k) const

        Correlation function of the roughness profile. 

        """
        return _libBornAgainCore.LayerRoughness_getCorrFun(self, k)

    def setSigma(self, sigma):
        r"""
        setSigma(LayerRoughness self, double sigma)
        void LayerRoughness::setSigma(double sigma)

        Sets rms of roughness. 

        """
        return _libBornAgainCore.LayerRoughness_setSigma(self, sigma)

    def getSigma(self):
        r"""
        getSigma(LayerRoughness self) -> double
        double LayerRoughness::getSigma() const

        Returns rms of roughness. 

        """
        return _libBornAgainCore.LayerRoughness_getSigma(self)

    def setHurstParameter(self, hurstParameter):
        r"""
        setHurstParameter(LayerRoughness self, double hurstParameter)
        void LayerRoughness::setHurstParameter(double hurstParameter)

        Sets hurst parameter. It describes how jagged the surface is. 

        """
        return _libBornAgainCore.LayerRoughness_setHurstParameter(self, hurstParameter)

    def getHurstParameter(self):
        r"""
        getHurstParameter(LayerRoughness self) -> double
        double LayerRoughness::getHurstParameter() const

        Returns hurst parameter. 

        """
        return _libBornAgainCore.LayerRoughness_getHurstParameter(self)

    def setLatteralCorrLength(self, lateralCorrLength):
        r"""
        setLatteralCorrLength(LayerRoughness self, double lateralCorrLength)
        void LayerRoughness::setLatteralCorrLength(double lateralCorrLength)

        Sets lateral correlation length. 

        """
        return _libBornAgainCore.LayerRoughness_setLatteralCorrLength(self, lateralCorrLength)

    def getLatteralCorrLength(self):
        r"""
        getLatteralCorrLength(LayerRoughness self) -> double
        double LayerRoughness::getLatteralCorrLength() const

        Returns lateral correlation length. 

        """
        return _libBornAgainCore.LayerRoughness_getLatteralCorrLength(self)
    __swig_destroy__ = _libBornAgainCore.delete_LayerRoughness

# Register LayerRoughness in _libBornAgainCore:
_libBornAgainCore.LayerRoughness_swigregister(LayerRoughness)

class MultiLayer(ISample):
    r"""


    Our sample model: a stack of layers one below the other. Example of system of 4 layers (3 interfaces):

    ambience layer #0 ------ interface #0 z=0.0 Fe, 20A layer #1 ------ interface #1 z=-20.0 Cr, 40A layer #2 ------ interface #2 z=-60.0 substrate layer #3

    C++ includes: MultiLayer.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(MultiLayer self) -> MultiLayer
        MultiLayer::MultiLayer()

        """
        _libBornAgainCore.MultiLayer_swiginit(self, _libBornAgainCore.new_MultiLayer())
    __swig_destroy__ = _libBornAgainCore.delete_MultiLayer

    def clone(self):
        r"""
        clone(MultiLayer self) -> MultiLayer
        MultiLayer * MultiLayer::clone() const final override

        Returns a clone of multilayer with clones of all layers and interfaces between layers 

        """
        return _libBornAgainCore.MultiLayer_clone(self)

    def accept(self, visitor):
        r"""
        accept(MultiLayer self, INodeVisitor visitor)
        void MultiLayer::accept(INodeVisitor *visitor) const final override

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.MultiLayer_accept(self, visitor)

    def numberOfLayers(self):
        r"""
        numberOfLayers(MultiLayer self) -> size_t
        size_t MultiLayer::numberOfLayers() const

        """
        return _libBornAgainCore.MultiLayer_numberOfLayers(self)

    def addLayer(self, layer):
        r"""
        addLayer(MultiLayer self, Layer layer)
        void MultiLayer::addLayer(const Layer &layer)

        Adds object to multilayer.

        Adds layer with default (zero) roughness. 

        """
        return _libBornAgainCore.MultiLayer_addLayer(self, layer)

    def addLayerWithTopRoughness(self, layer, roughness):
        r"""
        addLayerWithTopRoughness(MultiLayer self, Layer layer, LayerRoughness roughness)
        void MultiLayer::addLayerWithTopRoughness(const Layer &layer, const LayerRoughness &roughness)

        Adds layer with top roughness. 

        """
        return _libBornAgainCore.MultiLayer_addLayerWithTopRoughness(self, layer, roughness)

    def layer(self, i_layer):
        r"""
        layer(MultiLayer self, size_t i_layer) -> Layer
        const Layer * MultiLayer::layer(size_t i_layer) const

        Returns layer with given index. 

        """
        return _libBornAgainCore.MultiLayer_layer(self, i_layer)

    def layerInterface(self, i_interface):
        r"""
        layerInterface(MultiLayer self, size_t i_interface) -> LayerInterface const *
        const LayerInterface * MultiLayer::layerInterface(size_t i_interface) const

        Returns interface with given index. 

        """
        return _libBornAgainCore.MultiLayer_layerInterface(self, i_interface)

    def setCrossCorrLength(self, crossCorrLength):
        r"""
        setCrossCorrLength(MultiLayer self, double crossCorrLength)
        void MultiLayer::setCrossCorrLength(double crossCorrLength)

        Sets cross correlation length of roughnesses between interfaces. 

        """
        return _libBornAgainCore.MultiLayer_setCrossCorrLength(self, crossCorrLength)

    def crossCorrLength(self):
        r"""
        crossCorrLength(MultiLayer self) -> double
        double MultiLayer::crossCorrLength() const

        Returns cross correlation length of roughnesses between interfaces. 

        """
        return _libBornAgainCore.MultiLayer_crossCorrLength(self)

    def setExternalField(self, ext_field):
        r"""
        setExternalField(MultiLayer self, kvector_t ext_field)
        void MultiLayer::setExternalField(kvector_t ext_field)

        Sets the external field applied to the multilayer (units: A/m) 

        """
        return _libBornAgainCore.MultiLayer_setExternalField(self, ext_field)

    def externalField(self):
        r"""
        externalField(MultiLayer self) -> kvector_t
        kvector_t MultiLayer::externalField() const

        Returns the external field applied to the multilayer (units: A/m) 

        """
        return _libBornAgainCore.MultiLayer_externalField(self)

    def getChildren(self):
        r"""
        getChildren(MultiLayer self) -> swig_dummy_type_const_inode_vector
        std::vector< const INode * > MultiLayer::getChildren() const final override

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.MultiLayer_getChildren(self)

    def setRoughnessModel(self, roughnessModel):
        r"""
        setRoughnessModel(MultiLayer self, RoughnessModel roughnessModel)
        void MultiLayer::setRoughnessModel(RoughnessModel roughnessModel)

        """
        return _libBornAgainCore.MultiLayer_setRoughnessModel(self, roughnessModel)

    def roughnessModel(self):
        r"""
        roughnessModel(MultiLayer self) -> RoughnessModel
        RoughnessModel MultiLayer::roughnessModel() const

        """
        return _libBornAgainCore.MultiLayer_roughnessModel(self)

# Register MultiLayer in _libBornAgainCore:
_libBornAgainCore.MultiLayer_swigregister(MultiLayer)

class RoughnessModel(object):
    r"""Proxy of C++ RoughnessModelWrap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    DEFAULT = _libBornAgainCore.RoughnessModel_DEFAULT
    
    TANH = _libBornAgainCore.RoughnessModel_TANH
    
    NEVOT_CROCE = _libBornAgainCore.RoughnessModel_NEVOT_CROCE
    
    __swig_destroy__ = _libBornAgainCore.delete_RoughnessModel

# Register RoughnessModel in _libBornAgainCore:
_libBornAgainCore.RoughnessModel_swigregister(RoughnessModel)

class PolygonalTopology(object):
    r"""


    For internal use in  PolyhedralFace.

    C++ includes: FormFactorPolyhedron.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vertexIndices = property(_libBornAgainCore.PolygonalTopology_vertexIndices_get, _libBornAgainCore.PolygonalTopology_vertexIndices_set, doc=r"""vertexIndices : std::vector<(int,std::allocator<(int)>)>""")
    symmetry_S2 = property(_libBornAgainCore.PolygonalTopology_symmetry_S2_get, _libBornAgainCore.PolygonalTopology_symmetry_S2_set, doc=r"""symmetry_S2 : bool""")

    def __init__(self):
        r"""
        __init__(PolygonalTopology self) -> PolygonalTopology


        For internal use in  PolyhedralFace.

        C++ includes: FormFactorPolyhedron.h

        """
        _libBornAgainCore.PolygonalTopology_swiginit(self, _libBornAgainCore.new_PolygonalTopology())
    __swig_destroy__ = _libBornAgainCore.delete_PolygonalTopology

# Register PolygonalTopology in _libBornAgainCore:
_libBornAgainCore.PolygonalTopology_swigregister(PolygonalTopology)

class PolyhedralTopology(object):
    r"""


    For internal use in  FormFactorPolyhedron.

    C++ includes: FormFactorPolyhedron.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    faces = property(_libBornAgainCore.PolyhedralTopology_faces_get, _libBornAgainCore.PolyhedralTopology_faces_set, doc=r"""faces : std::vector<(PolygonalTopology,std::allocator<(PolygonalTopology)>)>""")
    symmetry_Ci = property(_libBornAgainCore.PolyhedralTopology_symmetry_Ci_get, _libBornAgainCore.PolyhedralTopology_symmetry_Ci_set, doc=r"""symmetry_Ci : bool""")

    def __init__(self):
        r"""
        __init__(PolyhedralTopology self) -> PolyhedralTopology


        For internal use in  FormFactorPolyhedron.

        C++ includes: FormFactorPolyhedron.h

        """
        _libBornAgainCore.PolyhedralTopology_swiginit(self, _libBornAgainCore.new_PolyhedralTopology())
    __swig_destroy__ = _libBornAgainCore.delete_PolyhedralTopology

# Register PolyhedralTopology in _libBornAgainCore:
_libBornAgainCore.PolyhedralTopology_swigregister(PolyhedralTopology)

class PolyhedralEdge(object):
    r"""


    One edge of a polygon, for form factor computation.

    C++ includes: FormFactorPolyhedron.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _Vlow, _Vhig):
        r"""
        __init__(PolyhedralEdge self, kvector_t _Vlow, kvector_t _Vhig) -> PolyhedralEdge
        PolyhedralEdge::PolyhedralEdge(const kvector_t _Vlow, const kvector_t _Vhig)

        """
        _libBornAgainCore.PolyhedralEdge_swiginit(self, _libBornAgainCore.new_PolyhedralEdge(_Vlow, _Vhig))

    def E(self):
        r"""
        E(PolyhedralEdge self) -> kvector_t
        kvector_t PolyhedralEdge::E() const

        """
        return _libBornAgainCore.PolyhedralEdge_E(self)

    def R(self):
        r"""
        R(PolyhedralEdge self) -> kvector_t
        kvector_t PolyhedralEdge::R() const

        """
        return _libBornAgainCore.PolyhedralEdge_R(self)

    def qE(self, q):
        r"""
        qE(PolyhedralEdge self, cvector_t q) -> complex_t
        complex_t PolyhedralEdge::qE(cvector_t q) const

        """
        return _libBornAgainCore.PolyhedralEdge_qE(self, q)

    def qR(self, q):
        r"""
        qR(PolyhedralEdge self, cvector_t q) -> complex_t
        complex_t PolyhedralEdge::qR(cvector_t q) const

        """
        return _libBornAgainCore.PolyhedralEdge_qR(self, q)

    def contrib(self, m, qpa, qrperp):
        r"""
        contrib(PolyhedralEdge self, int m, cvector_t qpa, complex_t qrperp) -> complex_t
        complex_t PolyhedralEdge::contrib(int m, cvector_t qpa, complex_t qrperp) const

        Returns sum_l=0^M/2 u^2l v^(M-2l) / (2l+1)!(M-2l)! - vperp^M/M! 

        """
        return _libBornAgainCore.PolyhedralEdge_contrib(self, m, qpa, qrperp)
    __swig_destroy__ = _libBornAgainCore.delete_PolyhedralEdge

# Register PolyhedralEdge in _libBornAgainCore:
_libBornAgainCore.PolyhedralEdge_swigregister(PolyhedralEdge)

class PolyhedralFace(object):
    r"""


    A polygon, for form factor computation.

    C++ includes: FormFactorPolyhedron.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def diameter(V):
        r"""diameter(vector_kvector_t V) -> double"""
        return _libBornAgainCore.PolyhedralFace_diameter(V)

    def __init__(self, *args):
        r"""
        __init__(PolyhedralFace self, vector_kvector_t _V=std::vector< kvector_t >(), bool _sym_S2=False) -> PolyhedralFace
        PolyhedralFace::PolyhedralFace(const std::vector< kvector_t > &_V=std::vector< kvector_t >(), bool _sym_S2=false)

        Sets internal variables for given vertex chain.

        Parameters:
        -----------

        V: 
        oriented vertex list

        _sym_S2: 
        true if face has a perpedicular two-fold symmetry axis 

        """
        _libBornAgainCore.PolyhedralFace_swiginit(self, _libBornAgainCore.new_PolyhedralFace(*args))

    def area(self):
        r"""
        area(PolyhedralFace self) -> double
        double PolyhedralFace::area() const

        """
        return _libBornAgainCore.PolyhedralFace_area(self)

    def pyramidalVolume(self):
        r"""
        pyramidalVolume(PolyhedralFace self) -> double
        double PolyhedralFace::pyramidalVolume() const

        """
        return _libBornAgainCore.PolyhedralFace_pyramidalVolume(self)

    def radius3d(self):
        r"""
        radius3d(PolyhedralFace self) -> double
        double PolyhedralFace::radius3d() const

        """
        return _libBornAgainCore.PolyhedralFace_radius3d(self)

    def normalProjectionConj(self, q):
        r"""
        normalProjectionConj(PolyhedralFace self, cvector_t q) -> complex_t
        complex_t PolyhedralFace::normalProjectionConj(cvector_t q) const

        Returns conj(q)*normal [ BasicVector3D::dot is antilinear in 'this' argument]. 

        """
        return _libBornAgainCore.PolyhedralFace_normalProjectionConj(self, q)

    def ff_n(self, m, q):
        r"""
        ff_n(PolyhedralFace self, int m, cvector_t q) -> complex_t
        complex_t PolyhedralFace::ff_n(int m, cvector_t q) const

        Returns contribution qn*f_n [of order q^(n+1)] from this face to the polyhedral form factor. 

        """
        return _libBornAgainCore.PolyhedralFace_ff_n(self, m, q)

    def ff(self, q, sym_Ci):
        r"""
        ff(PolyhedralFace self, cvector_t q, bool sym_Ci) -> complex_t
        complex_t PolyhedralFace::ff(cvector_t q, bool sym_Ci) const

        Returns the contribution ff(q) of this face to the polyhedral form factor. 

        """
        return _libBornAgainCore.PolyhedralFace_ff(self, q, sym_Ci)

    def ff_2D(self, qpa):
        r"""
        ff_2D(PolyhedralFace self, cvector_t qpa) -> complex_t
        complex_t PolyhedralFace::ff_2D(cvector_t qpa) const

        Returns the two-dimensional form factor of this face, for use in a prism. 

        """
        return _libBornAgainCore.PolyhedralFace_ff_2D(self, qpa)

    def assert_Ci(self, other):
        r"""
        assert_Ci(PolyhedralFace self, PolyhedralFace other)
        void PolyhedralFace::assert_Ci(const PolyhedralFace &other) const

        Throws if deviation from inversion symmetry is detected. Does not check vertices. 

        """
        return _libBornAgainCore.PolyhedralFace_assert_Ci(self, other)
    __swig_destroy__ = _libBornAgainCore.delete_PolyhedralFace

# Register PolyhedralFace in _libBornAgainCore:
_libBornAgainCore.PolyhedralFace_swigregister(PolyhedralFace)

def PolyhedralFace_diameter(V):
    r"""PolyhedralFace_diameter(vector_kvector_t V) -> double"""
    return _libBornAgainCore.PolyhedralFace_diameter(V)

class FormFactorPolyhedron(IFormFactorBorn):
    r"""


    A polyhedron, for form factor computation.

    C++ includes: FormFactorPolyhedron.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def bottomZ(self, rotation):
        r"""
        bottomZ(FormFactorPolyhedron self, IRotation rotation) -> double
        double FormFactorPolyhedron::bottomZ(const IRotation &rotation) const override final

        Returns the z-coordinate of the lowest point in this shape after a given rotation. 

        """
        return _libBornAgainCore.FormFactorPolyhedron_bottomZ(self, rotation)

    def topZ(self, rotation):
        r"""
        topZ(FormFactorPolyhedron self, IRotation rotation) -> double
        double FormFactorPolyhedron::topZ(const IRotation &rotation) const override final

        Returns the z-coordinate of the lowest point in this shape after a given rotation. 

        """
        return _libBornAgainCore.FormFactorPolyhedron_topZ(self, rotation)

    def evaluate_for_q(self, q):
        r"""
        evaluate_for_q(FormFactorPolyhedron self, cvector_t q) -> complex_t
        complex_t FormFactorPolyhedron::evaluate_for_q(cvector_t q) const override final

        Returns the form factor F(q) of this polyhedron, respecting the offset z_bottom. 

        """
        return _libBornAgainCore.FormFactorPolyhedron_evaluate_for_q(self, q)

    def evaluate_centered(self, q):
        r"""
        evaluate_centered(FormFactorPolyhedron self, cvector_t q) -> complex_t
        complex_t FormFactorPolyhedron::evaluate_centered(cvector_t q) const

        Returns the form factor F(q) of this polyhedron, with origin at z=0. 

        """
        return _libBornAgainCore.FormFactorPolyhedron_evaluate_centered(self, q)

    def volume(self):
        r"""
        volume(FormFactorPolyhedron self) -> double
        double FormFactorPolyhedron::volume() const override final

        Returns the total volume of the particle of this form factor's shape. 

        """
        return _libBornAgainCore.FormFactorPolyhedron_volume(self)

    def radialExtension(self):
        r"""
        radialExtension(FormFactorPolyhedron self) -> double
        double FormFactorPolyhedron::radialExtension() const override final

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorPolyhedron_radialExtension(self)

    def assert_platonic(self):
        r"""
        assert_platonic(FormFactorPolyhedron self)
        void FormFactorPolyhedron::assert_platonic() const

        Assertions for Platonic solid. 

        """
        return _libBornAgainCore.FormFactorPolyhedron_assert_platonic(self)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorPolyhedron

# Register FormFactorPolyhedron in _libBornAgainCore:
_libBornAgainCore.FormFactorPolyhedron_swigregister(FormFactorPolyhedron)

class FormFactorPolygonalPrism(IFormFactorBorn):
    r"""


    A prism with a polygonal base, for form factor computation.

    C++ includes: FormFactorPolyhedron.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def bottomZ(self, rotation):
        r"""
        bottomZ(FormFactorPolygonalPrism self, IRotation rotation) -> double
        double FormFactorPolygonalPrism::bottomZ(const IRotation &rotation) const override final

        Returns the z-coordinate of the lowest point in this shape after a given rotation. 

        """
        return _libBornAgainCore.FormFactorPolygonalPrism_bottomZ(self, rotation)

    def topZ(self, rotation):
        r"""
        topZ(FormFactorPolygonalPrism self, IRotation rotation) -> double
        double FormFactorPolygonalPrism::topZ(const IRotation &rotation) const override final

        Returns the z-coordinate of the lowest point in this shape after a given rotation. 

        """
        return _libBornAgainCore.FormFactorPolygonalPrism_topZ(self, rotation)

    def evaluate_for_q(self, q):
        r"""
        evaluate_for_q(FormFactorPolygonalPrism self, cvector_t q) -> complex_t
        complex_t FormFactorPolygonalPrism::evaluate_for_q(cvector_t q) const override

        Returns the form factor F(q) of this polyhedron, respecting the offset height/2. 

        """
        return _libBornAgainCore.FormFactorPolygonalPrism_evaluate_for_q(self, q)

    def volume(self):
        r"""
        volume(FormFactorPolygonalPrism self) -> double
        double FormFactorPolygonalPrism::volume() const override

        Returns the volume of this prism. 

        """
        return _libBornAgainCore.FormFactorPolygonalPrism_volume(self)

    def getHeight(self):
        r"""
        getHeight(FormFactorPolygonalPrism self) -> double
        double FormFactorPolygonalPrism::getHeight() const

        """
        return _libBornAgainCore.FormFactorPolygonalPrism_getHeight(self)

    def radialExtension(self):
        r"""
        radialExtension(FormFactorPolygonalPrism self) -> double
        virtual double FormFactorPolygonalPrism::radialExtension() const override

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorPolygonalPrism_radialExtension(self)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorPolygonalPrism

# Register FormFactorPolygonalPrism in _libBornAgainCore:
_libBornAgainCore.FormFactorPolygonalPrism_swigregister(FormFactorPolygonalPrism)

class FormFactorPolygonalSurface(IFormFactorBorn):
    r"""


    A polygonal surface, for testing form factor computations.

    C++ includes: FormFactorPolyhedron.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def evaluate_for_q(self, q):
        r"""
        evaluate_for_q(FormFactorPolygonalSurface self, cvector_t q) -> complex_t
        complex_t FormFactorPolygonalSurface::evaluate_for_q(cvector_t q) const override final

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorPolygonalSurface_evaluate_for_q(self, q)

    def volume(self):
        r"""
        volume(FormFactorPolygonalSurface self) -> double
        double FormFactorPolygonalSurface::volume() const override

        Returns the total volume of the particle of this form factor's shape. 

        """
        return _libBornAgainCore.FormFactorPolygonalSurface_volume(self)

    def radialExtension(self):
        r"""
        radialExtension(FormFactorPolygonalSurface self) -> double
        double FormFactorPolygonalSurface::radialExtension() const override final

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorPolygonalSurface_radialExtension(self)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorPolygonalSurface

# Register FormFactorPolygonalSurface in _libBornAgainCore:
_libBornAgainCore.FormFactorPolygonalSurface_swigregister(FormFactorPolygonalSurface)

class IProfileRipple(IFormFactorBorn):
    r"""


    Base class for form factors with a cosine ripple profile in the yz plane.

    C++ includes: IProfileRipple.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getLength(self):
        r"""
        getLength(IProfileRipple self) -> double
        double IProfileRipple::getLength() const

        """
        return _libBornAgainCore.IProfileRipple_getLength(self)

    def getHeight(self):
        r"""
        getHeight(IProfileRipple self) -> double
        double IProfileRipple::getHeight() const

        """
        return _libBornAgainCore.IProfileRipple_getHeight(self)

    def getWidth(self):
        r"""
        getWidth(IProfileRipple self) -> double
        double IProfileRipple::getWidth() const

        """
        return _libBornAgainCore.IProfileRipple_getWidth(self)

    def radialExtension(self):
        r"""
        radialExtension(IProfileRipple self) -> double
        double IProfileRipple::radialExtension() const override final

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.IProfileRipple_radialExtension(self)

    def evaluate_for_q(self, q):
        r"""
        evaluate_for_q(IProfileRipple self, cvector_t q) -> complex_t
        complex_t IProfileRipple::evaluate_for_q(cvector_t q) const override final

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.IProfileRipple_evaluate_for_q(self, q)
    __swig_destroy__ = _libBornAgainCore.delete_IProfileRipple

# Register IProfileRipple in _libBornAgainCore:
_libBornAgainCore.IProfileRipple_swigregister(IProfileRipple)

class IProfileRectangularRipple(IProfileRipple):
    r"""


    Base class for form factors with a rectangular ripple (bar) profile in the yz plane.

    C++ includes: IProfileRipple.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IProfileRectangularRipple

# Register IProfileRectangularRipple in _libBornAgainCore:
_libBornAgainCore.IProfileRectangularRipple_swigregister(IProfileRectangularRipple)

class ICosineRipple(IProfileRipple):
    r"""


    Base class for form factors with a cosine ripple profile in the yz plane.

    C++ includes: IProfileRipple.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_ICosineRipple

# Register ICosineRipple in _libBornAgainCore:
_libBornAgainCore.ICosineRipple_swigregister(ICosineRipple)

class ISawtoothRipple(IProfileRipple):
    r"""


    Base class for form factors with a triangular ripple profile in the yz plane.

    C++ includes: IProfileRipple.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getAsymmetry(self):
        r"""
        getAsymmetry(ISawtoothRipple self) -> double
        double ISawtoothRipple::getAsymmetry() const

        """
        return _libBornAgainCore.ISawtoothRipple_getAsymmetry(self)
    __swig_destroy__ = _libBornAgainCore.delete_ISawtoothRipple

# Register ISawtoothRipple in _libBornAgainCore:
_libBornAgainCore.ISawtoothRipple_swigregister(ISawtoothRipple)

class FormFactorAnisoPyramid(FormFactorPolyhedron):
    r"""


    A frustum (truncated pyramid) with rectangular base.

    C++ includes: FormFactorAnisoPyramid.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorAnisoPyramid self, vdouble1d_t P) -> FormFactorAnisoPyramid
        __init__(FormFactorAnisoPyramid self, double length, double width, double height, double alpha) -> FormFactorAnisoPyramid
        FormFactorAnisoPyramid::FormFactorAnisoPyramid(double length, double width, double height, double alpha)

        """
        _libBornAgainCore.FormFactorAnisoPyramid_swiginit(self, _libBornAgainCore.new_FormFactorAnisoPyramid(*args))

    def clone(self):
        r"""
        clone(FormFactorAnisoPyramid self) -> FormFactorAnisoPyramid
        FormFactorAnisoPyramid* FormFactorAnisoPyramid::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorAnisoPyramid_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorAnisoPyramid self, INodeVisitor visitor)
        void FormFactorAnisoPyramid::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorAnisoPyramid_accept(self, visitor)

    def getLength(self):
        r"""
        getLength(FormFactorAnisoPyramid self) -> double
        double FormFactorAnisoPyramid::getLength() const

        """
        return _libBornAgainCore.FormFactorAnisoPyramid_getLength(self)

    def getWidth(self):
        r"""
        getWidth(FormFactorAnisoPyramid self) -> double
        double FormFactorAnisoPyramid::getWidth() const

        """
        return _libBornAgainCore.FormFactorAnisoPyramid_getWidth(self)

    def getHeight(self):
        r"""
        getHeight(FormFactorAnisoPyramid self) -> double
        double FormFactorAnisoPyramid::getHeight() const

        """
        return _libBornAgainCore.FormFactorAnisoPyramid_getHeight(self)

    def getAlpha(self):
        r"""
        getAlpha(FormFactorAnisoPyramid self) -> double
        double FormFactorAnisoPyramid::getAlpha() const

        """
        return _libBornAgainCore.FormFactorAnisoPyramid_getAlpha(self)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorAnisoPyramid

# Register FormFactorAnisoPyramid in _libBornAgainCore:
_libBornAgainCore.FormFactorAnisoPyramid_swigregister(FormFactorAnisoPyramid)

class FormFactorBox(FormFactorPolygonalPrism):
    r"""


    A rectangular prism (parallelepiped).

    C++ includes: FormFactorBox.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorBox self, vdouble1d_t P) -> FormFactorBox
        __init__(FormFactorBox self, double length, double width, double height) -> FormFactorBox
        FormFactorBox::FormFactorBox(double length, double width, double height)

        """
        _libBornAgainCore.FormFactorBox_swiginit(self, _libBornAgainCore.new_FormFactorBox(*args))

    def clone(self):
        r"""
        clone(FormFactorBox self) -> FormFactorBox
        FormFactorBox* FormFactorBox::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorBox_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorBox self, INodeVisitor visitor)
        void FormFactorBox::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorBox_accept(self, visitor)

    def getLength(self):
        r"""
        getLength(FormFactorBox self) -> double
        double FormFactorBox::getLength() const

        """
        return _libBornAgainCore.FormFactorBox_getLength(self)

    def getWidth(self):
        r"""
        getWidth(FormFactorBox self) -> double
        double FormFactorBox::getWidth() const

        """
        return _libBornAgainCore.FormFactorBox_getWidth(self)

    def volume(self):
        r"""
        volume(FormFactorBox self) -> double
        double FormFactorBox::volume() const override final

        Returns the volume of this prism. 

        """
        return _libBornAgainCore.FormFactorBox_volume(self)

    def radialExtension(self):
        r"""
        radialExtension(FormFactorBox self) -> double
        double FormFactorBox::radialExtension() const override final

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorBox_radialExtension(self)

    def evaluate_for_q(self, q):
        r"""
        evaluate_for_q(FormFactorBox self, cvector_t q) -> complex_t
        complex_t FormFactorBox::evaluate_for_q(cvector_t q) const override final

        Returns the form factor F(q) of this polyhedron, respecting the offset height/2. 

        """
        return _libBornAgainCore.FormFactorBox_evaluate_for_q(self, q)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorBox

# Register FormFactorBox in _libBornAgainCore:
_libBornAgainCore.FormFactorBox_swigregister(FormFactorBox)

class FormFactorCantellatedCube(FormFactorPolyhedron):
    r"""


    A cube, with truncation of all edges and corners, as in Croset (2017) Fig 7

    C++ includes: FormFactorCantellatedCube.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorCantellatedCube self, vdouble1d_t P) -> FormFactorCantellatedCube
        __init__(FormFactorCantellatedCube self, double length, double removed_length) -> FormFactorCantellatedCube
        FormFactorCantellatedCube::FormFactorCantellatedCube(double length, double removed_length)

        """
        _libBornAgainCore.FormFactorCantellatedCube_swiginit(self, _libBornAgainCore.new_FormFactorCantellatedCube(*args))

    def clone(self):
        r"""
        clone(FormFactorCantellatedCube self) -> FormFactorCantellatedCube
        FormFactorCantellatedCube* FormFactorCantellatedCube::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorCantellatedCube_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorCantellatedCube self, INodeVisitor visitor)
        void FormFactorCantellatedCube::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorCantellatedCube_accept(self, visitor)

    def getLength(self):
        r"""
        getLength(FormFactorCantellatedCube self) -> double
        double FormFactorCantellatedCube::getLength() const

        """
        return _libBornAgainCore.FormFactorCantellatedCube_getLength(self)

    def getRemovedLength(self):
        r"""
        getRemovedLength(FormFactorCantellatedCube self) -> double
        double FormFactorCantellatedCube::getRemovedLength() const

        """
        return _libBornAgainCore.FormFactorCantellatedCube_getRemovedLength(self)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorCantellatedCube

# Register FormFactorCantellatedCube in _libBornAgainCore:
_libBornAgainCore.FormFactorCantellatedCube_swigregister(FormFactorCantellatedCube)

class FormFactorCone(IFormFactorBorn):
    r"""


    A conical frustum (cone truncated parallel to the base) with circular base.

    C++ includes: FormFactorCone.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorCone self, vdouble1d_t P) -> FormFactorCone
        __init__(FormFactorCone self, double radius, double height, double alpha) -> FormFactorCone
        FormFactorCone::FormFactorCone(double radius, double height, double alpha)

        """
        _libBornAgainCore.FormFactorCone_swiginit(self, _libBornAgainCore.new_FormFactorCone(*args))

    def clone(self):
        r"""
        clone(FormFactorCone self) -> FormFactorCone
        FormFactorCone* FormFactorCone::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorCone_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorCone self, INodeVisitor visitor)
        void FormFactorCone::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorCone_accept(self, visitor)

    def getHeight(self):
        r"""
        getHeight(FormFactorCone self) -> double
        double FormFactorCone::getHeight() const

        """
        return _libBornAgainCore.FormFactorCone_getHeight(self)

    def getAlpha(self):
        r"""
        getAlpha(FormFactorCone self) -> double
        double FormFactorCone::getAlpha() const

        """
        return _libBornAgainCore.FormFactorCone_getAlpha(self)

    def getRadius(self):
        r"""
        getRadius(FormFactorCone self) -> double
        double FormFactorCone::getRadius() const

        """
        return _libBornAgainCore.FormFactorCone_getRadius(self)

    def radialExtension(self):
        r"""
        radialExtension(FormFactorCone self) -> double
        double FormFactorCone::radialExtension() const override final

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorCone_radialExtension(self)

    def evaluate_for_q(self, q):
        r"""
        evaluate_for_q(FormFactorCone self, cvector_t q) -> complex_t
        complex_t FormFactorCone::evaluate_for_q(cvector_t q) const override final

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorCone_evaluate_for_q(self, q)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorCone

# Register FormFactorCone in _libBornAgainCore:
_libBornAgainCore.FormFactorCone_swigregister(FormFactorCone)

class FormFactorCone6(FormFactorPolyhedron):
    r"""


    A frustum (truncated pyramid) with regular hexagonal base.

    C++ includes: FormFactorCone6.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorCone6 self, vdouble1d_t P) -> FormFactorCone6
        __init__(FormFactorCone6 self, double base_edge, double height, double alpha) -> FormFactorCone6
        FormFactorCone6::FormFactorCone6(double base_edge, double height, double alpha)

        """
        _libBornAgainCore.FormFactorCone6_swiginit(self, _libBornAgainCore.new_FormFactorCone6(*args))

    def clone(self):
        r"""
        clone(FormFactorCone6 self) -> FormFactorCone6
        FormFactorCone6* FormFactorCone6::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorCone6_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorCone6 self, INodeVisitor visitor)
        void FormFactorCone6::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorCone6_accept(self, visitor)

    def getBaseEdge(self):
        r"""
        getBaseEdge(FormFactorCone6 self) -> double
        double FormFactorCone6::getBaseEdge() const

        """
        return _libBornAgainCore.FormFactorCone6_getBaseEdge(self)

    def getHeight(self):
        r"""
        getHeight(FormFactorCone6 self) -> double
        double FormFactorCone6::getHeight() const

        """
        return _libBornAgainCore.FormFactorCone6_getHeight(self)

    def getAlpha(self):
        r"""
        getAlpha(FormFactorCone6 self) -> double
        double FormFactorCone6::getAlpha() const

        """
        return _libBornAgainCore.FormFactorCone6_getAlpha(self)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorCone6

# Register FormFactorCone6 in _libBornAgainCore:
_libBornAgainCore.FormFactorCone6_swigregister(FormFactorCone6)

class FormFactorCosineRippleBox(ICosineRipple):
    r"""


    The form factor for a cosine ripple, with box profile in elongation direction.

    C++ includes: FormFactorCosineRipple.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorCosineRippleBox self, vdouble1d_t P) -> FormFactorCosineRippleBox
        __init__(FormFactorCosineRippleBox self, double length, double width, double height) -> FormFactorCosineRippleBox
        FormFactorCosineRippleBox::FormFactorCosineRippleBox(double length, double width, double height)

        """
        _libBornAgainCore.FormFactorCosineRippleBox_swiginit(self, _libBornAgainCore.new_FormFactorCosineRippleBox(*args))

    def clone(self):
        r"""
        clone(FormFactorCosineRippleBox self) -> FormFactorCosineRippleBox
        FormFactorCosineRippleBox * FormFactorCosineRippleBox::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorCosineRippleBox_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorCosineRippleBox self, INodeVisitor visitor)
        void FormFactorCosineRippleBox::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorCosineRippleBox_accept(self, visitor)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorCosineRippleBox

# Register FormFactorCosineRippleBox in _libBornAgainCore:
_libBornAgainCore.FormFactorCosineRippleBox_swigregister(FormFactorCosineRippleBox)

class FormFactorCosineRippleGauss(ICosineRipple):
    r"""


    The form factor for a cosine ripple, with Gaussian profile in elongation direction.

    C++ includes: FormFactorCosineRipple.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorCosineRippleGauss self, vdouble1d_t P) -> FormFactorCosineRippleGauss
        __init__(FormFactorCosineRippleGauss self, double length, double width, double height) -> FormFactorCosineRippleGauss
        FormFactorCosineRippleGauss::FormFactorCosineRippleGauss(double length, double width, double height)

        """
        _libBornAgainCore.FormFactorCosineRippleGauss_swiginit(self, _libBornAgainCore.new_FormFactorCosineRippleGauss(*args))

    def clone(self):
        r"""
        clone(FormFactorCosineRippleGauss self) -> FormFactorCosineRippleGauss
        FormFactorCosineRippleGauss * FormFactorCosineRippleGauss::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorCosineRippleGauss_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorCosineRippleGauss self, INodeVisitor visitor)
        void FormFactorCosineRippleGauss::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorCosineRippleGauss_accept(self, visitor)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorCosineRippleGauss

# Register FormFactorCosineRippleGauss in _libBornAgainCore:
_libBornAgainCore.FormFactorCosineRippleGauss_swigregister(FormFactorCosineRippleGauss)

class FormFactorCosineRippleLorentz(ICosineRipple):
    r"""


    The form factor for a cosine ripple, with Lorentz form factor in elongation direction.

    C++ includes: FormFactorCosineRipple.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorCosineRippleLorentz self, vdouble1d_t P) -> FormFactorCosineRippleLorentz
        __init__(FormFactorCosineRippleLorentz self, double length, double width, double height) -> FormFactorCosineRippleLorentz
        FormFactorCosineRippleLorentz::FormFactorCosineRippleLorentz(double length, double width, double height)

        """
        _libBornAgainCore.FormFactorCosineRippleLorentz_swiginit(self, _libBornAgainCore.new_FormFactorCosineRippleLorentz(*args))

    def clone(self):
        r"""
        clone(FormFactorCosineRippleLorentz self) -> FormFactorCosineRippleLorentz
        FormFactorCosineRippleLorentz * FormFactorCosineRippleLorentz::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorCosineRippleLorentz_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorCosineRippleLorentz self, INodeVisitor visitor)
        void FormFactorCosineRippleLorentz::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorCosineRippleLorentz_accept(self, visitor)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorCosineRippleLorentz

# Register FormFactorCosineRippleLorentz in _libBornAgainCore:
_libBornAgainCore.FormFactorCosineRippleLorentz_swigregister(FormFactorCosineRippleLorentz)

class FormFactorCuboctahedron(FormFactorPolyhedron):
    r"""


    A truncated bifrustum with quadratic base.

    C++ includes: FormFactorCuboctahedron.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorCuboctahedron self, vdouble1d_t P) -> FormFactorCuboctahedron
        __init__(FormFactorCuboctahedron self, double length, double height, double height_ratio, double alpha) -> FormFactorCuboctahedron
        FormFactorCuboctahedron::FormFactorCuboctahedron(double length, double height, double height_ratio, double alpha)

        """
        _libBornAgainCore.FormFactorCuboctahedron_swiginit(self, _libBornAgainCore.new_FormFactorCuboctahedron(*args))

    def clone(self):
        r"""
        clone(FormFactorCuboctahedron self) -> FormFactorCuboctahedron
        FormFactorCuboctahedron* FormFactorCuboctahedron::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorCuboctahedron_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorCuboctahedron self, INodeVisitor visitor)
        void FormFactorCuboctahedron::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorCuboctahedron_accept(self, visitor)

    def getLength(self):
        r"""
        getLength(FormFactorCuboctahedron self) -> double
        double FormFactorCuboctahedron::getLength() const

        """
        return _libBornAgainCore.FormFactorCuboctahedron_getLength(self)

    def getHeight(self):
        r"""
        getHeight(FormFactorCuboctahedron self) -> double
        double FormFactorCuboctahedron::getHeight() const

        """
        return _libBornAgainCore.FormFactorCuboctahedron_getHeight(self)

    def getHeightRatio(self):
        r"""
        getHeightRatio(FormFactorCuboctahedron self) -> double
        double FormFactorCuboctahedron::getHeightRatio() const

        """
        return _libBornAgainCore.FormFactorCuboctahedron_getHeightRatio(self)

    def getAlpha(self):
        r"""
        getAlpha(FormFactorCuboctahedron self) -> double
        double FormFactorCuboctahedron::getAlpha() const

        """
        return _libBornAgainCore.FormFactorCuboctahedron_getAlpha(self)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorCuboctahedron

# Register FormFactorCuboctahedron in _libBornAgainCore:
_libBornAgainCore.FormFactorCuboctahedron_swigregister(FormFactorCuboctahedron)

class FormFactorCylinder(IFormFactorBorn):
    r"""


    A circular cylinder.

    C++ includes: FormFactorCylinder.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorCylinder self, vdouble1d_t P) -> FormFactorCylinder
        __init__(FormFactorCylinder self, double radius, double height) -> FormFactorCylinder
        FormFactorCylinder::FormFactorCylinder(double radius, double height)

        """
        _libBornAgainCore.FormFactorCylinder_swiginit(self, _libBornAgainCore.new_FormFactorCylinder(*args))

    def clone(self):
        r"""
        clone(FormFactorCylinder self) -> FormFactorCylinder
        FormFactorCylinder* FormFactorCylinder::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorCylinder_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorCylinder self, INodeVisitor visitor)
        void FormFactorCylinder::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorCylinder_accept(self, visitor)

    def getHeight(self):
        r"""
        getHeight(FormFactorCylinder self) -> double
        double FormFactorCylinder::getHeight() const

        """
        return _libBornAgainCore.FormFactorCylinder_getHeight(self)

    def getRadius(self):
        r"""
        getRadius(FormFactorCylinder self) -> double
        double FormFactorCylinder::getRadius() const

        """
        return _libBornAgainCore.FormFactorCylinder_getRadius(self)

    def radialExtension(self):
        r"""
        radialExtension(FormFactorCylinder self) -> double
        double FormFactorCylinder::radialExtension() const override final

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorCylinder_radialExtension(self)

    def evaluate_for_q(self, q):
        r"""
        evaluate_for_q(FormFactorCylinder self, cvector_t q) -> complex_t
        complex_t FormFactorCylinder::evaluate_for_q(cvector_t q) const override final

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorCylinder_evaluate_for_q(self, q)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorCylinder

# Register FormFactorCylinder in _libBornAgainCore:
_libBornAgainCore.FormFactorCylinder_swigregister(FormFactorCylinder)

class FormFactorDodecahedron(FormFactorPolyhedron):
    r"""


    A regular dodecahedron.

    C++ includes: FormFactorDodecahedron.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorDodecahedron self, vdouble1d_t P) -> FormFactorDodecahedron
        __init__(FormFactorDodecahedron self, double edge) -> FormFactorDodecahedron
        FormFactorDodecahedron::FormFactorDodecahedron(double edge)

        """
        _libBornAgainCore.FormFactorDodecahedron_swiginit(self, _libBornAgainCore.new_FormFactorDodecahedron(*args))

    def clone(self):
        r"""
        clone(FormFactorDodecahedron self) -> FormFactorDodecahedron
        FormFactorDodecahedron* FormFactorDodecahedron::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorDodecahedron_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorDodecahedron self, INodeVisitor visitor)
        void FormFactorDodecahedron::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorDodecahedron_accept(self, visitor)

    def getEdge(self):
        r"""
        getEdge(FormFactorDodecahedron self) -> double
        double FormFactorDodecahedron::getEdge() const

        """
        return _libBornAgainCore.FormFactorDodecahedron_getEdge(self)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorDodecahedron

# Register FormFactorDodecahedron in _libBornAgainCore:
_libBornAgainCore.FormFactorDodecahedron_swigregister(FormFactorDodecahedron)

class FormFactorDot(IFormFactorBorn):
    r"""


    A dot, with scattering power as a sphere of radius rscat, but with F(q)=const.

    C++ includes: FormFactorDot.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorDot self, vdouble1d_t P) -> FormFactorDot
        __init__(FormFactorDot self, double radius) -> FormFactorDot
        FormFactorDot::FormFactorDot(double radius)

        """
        _libBornAgainCore.FormFactorDot_swiginit(self, _libBornAgainCore.new_FormFactorDot(*args))

    def clone(self):
        r"""
        clone(FormFactorDot self) -> FormFactorDot
        FormFactorDot* FormFactorDot::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorDot_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorDot self, INodeVisitor visitor)
        void FormFactorDot::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorDot_accept(self, visitor)

    def getRadius(self):
        r"""
        getRadius(FormFactorDot self) -> double
        double FormFactorDot::getRadius() const

        """
        return _libBornAgainCore.FormFactorDot_getRadius(self)

    def radialExtension(self):
        r"""
        radialExtension(FormFactorDot self) -> double
        double FormFactorDot::radialExtension() const override final

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorDot_radialExtension(self)

    def bottomZ(self, arg2):
        r"""
        bottomZ(FormFactorDot self, IRotation arg2) -> double
        double FormFactorDot::bottomZ(const IRotation &) const override final

        Returns the z-coordinate of the lowest point in this shape after a given rotation. 

        """
        return _libBornAgainCore.FormFactorDot_bottomZ(self, arg2)

    def topZ(self, arg2):
        r"""
        topZ(FormFactorDot self, IRotation arg2) -> double
        double FormFactorDot::topZ(const IRotation &) const override final

        Returns the z-coordinate of the lowest point in this shape after a given rotation. 

        """
        return _libBornAgainCore.FormFactorDot_topZ(self, arg2)

    def evaluate_for_q(self, q):
        r"""
        evaluate_for_q(FormFactorDot self, cvector_t q) -> complex_t
        complex_t FormFactorDot::evaluate_for_q(cvector_t q) const override final

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorDot_evaluate_for_q(self, q)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorDot

# Register FormFactorDot in _libBornAgainCore:
_libBornAgainCore.FormFactorDot_swigregister(FormFactorDot)

class FormFactorEllipsoidalCylinder(IFormFactorBorn):
    r"""


    A cylinder with elliptical base.

    C++ includes: FormFactorEllipsoidalCylinder.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorEllipsoidalCylinder self, vdouble1d_t P) -> FormFactorEllipsoidalCylinder
        __init__(FormFactorEllipsoidalCylinder self, double radius_x, double radius_y, double height) -> FormFactorEllipsoidalCylinder
        FormFactorEllipsoidalCylinder::FormFactorEllipsoidalCylinder(double radius_x, double radius_y, double height)

        """
        _libBornAgainCore.FormFactorEllipsoidalCylinder_swiginit(self, _libBornAgainCore.new_FormFactorEllipsoidalCylinder(*args))

    def clone(self):
        r"""
        clone(FormFactorEllipsoidalCylinder self) -> FormFactorEllipsoidalCylinder
        FormFactorEllipsoidalCylinder* FormFactorEllipsoidalCylinder::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorEllipsoidalCylinder_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorEllipsoidalCylinder self, INodeVisitor visitor)
        void FormFactorEllipsoidalCylinder::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorEllipsoidalCylinder_accept(self, visitor)

    def getRadiusX(self):
        r"""
        getRadiusX(FormFactorEllipsoidalCylinder self) -> double
        double FormFactorEllipsoidalCylinder::getRadiusX() const

        """
        return _libBornAgainCore.FormFactorEllipsoidalCylinder_getRadiusX(self)

    def getRadiusY(self):
        r"""
        getRadiusY(FormFactorEllipsoidalCylinder self) -> double
        double FormFactorEllipsoidalCylinder::getRadiusY() const

        """
        return _libBornAgainCore.FormFactorEllipsoidalCylinder_getRadiusY(self)

    def getHeight(self):
        r"""
        getHeight(FormFactorEllipsoidalCylinder self) -> double
        double FormFactorEllipsoidalCylinder::getHeight() const

        """
        return _libBornAgainCore.FormFactorEllipsoidalCylinder_getHeight(self)

    def radialExtension(self):
        r"""
        radialExtension(FormFactorEllipsoidalCylinder self) -> double
        double FormFactorEllipsoidalCylinder::radialExtension() const override final

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorEllipsoidalCylinder_radialExtension(self)

    def evaluate_for_q(self, q):
        r"""
        evaluate_for_q(FormFactorEllipsoidalCylinder self, cvector_t q) -> complex_t
        complex_t FormFactorEllipsoidalCylinder::evaluate_for_q(cvector_t q) const override final

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorEllipsoidalCylinder_evaluate_for_q(self, q)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorEllipsoidalCylinder

# Register FormFactorEllipsoidalCylinder in _libBornAgainCore:
_libBornAgainCore.FormFactorEllipsoidalCylinder_swigregister(FormFactorEllipsoidalCylinder)

class FormFactorFullSphere(IFormFactorBorn):
    r"""


    A full sphere.

    C++ includes: FormFactorFullSphere.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorFullSphere self, vdouble1d_t P, bool position_at_center=False) -> FormFactorFullSphere
        __init__(FormFactorFullSphere self, double radius, bool position_at_center=False) -> FormFactorFullSphere
        FormFactorFullSphere::FormFactorFullSphere(double radius, bool position_at_center=false)

        """
        _libBornAgainCore.FormFactorFullSphere_swiginit(self, _libBornAgainCore.new_FormFactorFullSphere(*args))

    def clone(self):
        r"""
        clone(FormFactorFullSphere self) -> FormFactorFullSphere
        FormFactorFullSphere* FormFactorFullSphere::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorFullSphere_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorFullSphere self, INodeVisitor visitor)
        void FormFactorFullSphere::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorFullSphere_accept(self, visitor)

    def getRadius(self):
        r"""
        getRadius(FormFactorFullSphere self) -> double
        double FormFactorFullSphere::getRadius() const

        """
        return _libBornAgainCore.FormFactorFullSphere_getRadius(self)

    def radialExtension(self):
        r"""
        radialExtension(FormFactorFullSphere self) -> double
        double FormFactorFullSphere::radialExtension() const override final

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorFullSphere_radialExtension(self)

    def bottomZ(self, rotation):
        r"""
        bottomZ(FormFactorFullSphere self, IRotation rotation) -> double
        double FormFactorFullSphere::bottomZ(const IRotation &rotation) const override final

        Returns the z-coordinate of the lowest point in this shape after a given rotation. 

        """
        return _libBornAgainCore.FormFactorFullSphere_bottomZ(self, rotation)

    def topZ(self, rotation):
        r"""
        topZ(FormFactorFullSphere self, IRotation rotation) -> double
        double FormFactorFullSphere::topZ(const IRotation &rotation) const override final

        Returns the z-coordinate of the lowest point in this shape after a given rotation. 

        """
        return _libBornAgainCore.FormFactorFullSphere_topZ(self, rotation)

    def evaluate_for_q(self, q):
        r"""
        evaluate_for_q(FormFactorFullSphere self, cvector_t q) -> complex_t
        complex_t FormFactorFullSphere::evaluate_for_q(cvector_t q) const override final

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorFullSphere_evaluate_for_q(self, q)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorFullSphere

# Register FormFactorFullSphere in _libBornAgainCore:
_libBornAgainCore.FormFactorFullSphere_swigregister(FormFactorFullSphere)

class FormFactorFullSpheroid(IFormFactorBorn):
    r"""


    A full spheroid (an ellipsoid with two equal axes, hence with circular cross section)

    C++ includes: FormFactorFullSpheroid.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorFullSpheroid self, vdouble1d_t P) -> FormFactorFullSpheroid
        __init__(FormFactorFullSpheroid self, double radius, double height) -> FormFactorFullSpheroid
        FormFactorFullSpheroid::FormFactorFullSpheroid(double radius, double height)

        """
        _libBornAgainCore.FormFactorFullSpheroid_swiginit(self, _libBornAgainCore.new_FormFactorFullSpheroid(*args))

    def clone(self):
        r"""
        clone(FormFactorFullSpheroid self) -> FormFactorFullSpheroid
        FormFactorFullSpheroid* FormFactorFullSpheroid::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorFullSpheroid_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorFullSpheroid self, INodeVisitor visitor)
        void FormFactorFullSpheroid::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorFullSpheroid_accept(self, visitor)

    def getHeight(self):
        r"""
        getHeight(FormFactorFullSpheroid self) -> double
        double FormFactorFullSpheroid::getHeight() const

        """
        return _libBornAgainCore.FormFactorFullSpheroid_getHeight(self)

    def getRadius(self):
        r"""
        getRadius(FormFactorFullSpheroid self) -> double
        double FormFactorFullSpheroid::getRadius() const

        """
        return _libBornAgainCore.FormFactorFullSpheroid_getRadius(self)

    def radialExtension(self):
        r"""
        radialExtension(FormFactorFullSpheroid self) -> double
        double FormFactorFullSpheroid::radialExtension() const override final

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorFullSpheroid_radialExtension(self)

    def evaluate_for_q(self, q):
        r"""
        evaluate_for_q(FormFactorFullSpheroid self, cvector_t q) -> complex_t
        complex_t FormFactorFullSpheroid::evaluate_for_q(cvector_t q) const override final

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorFullSpheroid_evaluate_for_q(self, q)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorFullSpheroid

# Register FormFactorFullSpheroid in _libBornAgainCore:
_libBornAgainCore.FormFactorFullSpheroid_swigregister(FormFactorFullSpheroid)

class FormFactorHemiEllipsoid(IFormFactorBorn):
    r"""


    An hemi ellipsoid, obtained by truncating a full ellipsoid in the middle plane spanned by two principal axes.

    C++ includes: FormFactorHemiEllipsoid.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorHemiEllipsoid self, vdouble1d_t P) -> FormFactorHemiEllipsoid
        __init__(FormFactorHemiEllipsoid self, double radius_x, double radius_y, double height) -> FormFactorHemiEllipsoid
        FormFactorHemiEllipsoid::FormFactorHemiEllipsoid(double radius_x, double radius_y, double height)

        """
        _libBornAgainCore.FormFactorHemiEllipsoid_swiginit(self, _libBornAgainCore.new_FormFactorHemiEllipsoid(*args))
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorHemiEllipsoid

    def clone(self):
        r"""
        clone(FormFactorHemiEllipsoid self) -> FormFactorHemiEllipsoid
        FormFactorHemiEllipsoid* FormFactorHemiEllipsoid::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorHemiEllipsoid_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorHemiEllipsoid self, INodeVisitor visitor)
        void FormFactorHemiEllipsoid::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorHemiEllipsoid_accept(self, visitor)

    def getHeight(self):
        r"""
        getHeight(FormFactorHemiEllipsoid self) -> double
        double FormFactorHemiEllipsoid::getHeight() const

        """
        return _libBornAgainCore.FormFactorHemiEllipsoid_getHeight(self)

    def getRadiusX(self):
        r"""
        getRadiusX(FormFactorHemiEllipsoid self) -> double
        double FormFactorHemiEllipsoid::getRadiusX() const

        """
        return _libBornAgainCore.FormFactorHemiEllipsoid_getRadiusX(self)

    def getRadiusY(self):
        r"""
        getRadiusY(FormFactorHemiEllipsoid self) -> double
        double FormFactorHemiEllipsoid::getRadiusY() const

        """
        return _libBornAgainCore.FormFactorHemiEllipsoid_getRadiusY(self)

    def radialExtension(self):
        r"""
        radialExtension(FormFactorHemiEllipsoid self) -> double
        double FormFactorHemiEllipsoid::radialExtension() const override final

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorHemiEllipsoid_radialExtension(self)

    def evaluate_for_q(self, q):
        r"""
        evaluate_for_q(FormFactorHemiEllipsoid self, cvector_t q) -> complex_t
        complex_t FormFactorHemiEllipsoid::evaluate_for_q(cvector_t q) const override final

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorHemiEllipsoid_evaluate_for_q(self, q)

# Register FormFactorHemiEllipsoid in _libBornAgainCore:
_libBornAgainCore.FormFactorHemiEllipsoid_swigregister(FormFactorHemiEllipsoid)

class FormFactorHollowSphere(IFormFactorBorn):
    r"""


    Integrated full sphere form factor over a uniform distribution of radii.

    C++ includes: FormFactorHollowSphere.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorHollowSphere self, vdouble1d_t P) -> FormFactorHollowSphere
        __init__(FormFactorHollowSphere self, double mean, double full_width) -> FormFactorHollowSphere
        FormFactorHollowSphere::FormFactorHollowSphere(double mean, double full_width)

        """
        _libBornAgainCore.FormFactorHollowSphere_swiginit(self, _libBornAgainCore.new_FormFactorHollowSphere(*args))

    def clone(self):
        r"""
        clone(FormFactorHollowSphere self) -> FormFactorHollowSphere
        FormFactorHollowSphere* FormFactorHollowSphere::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorHollowSphere_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorHollowSphere self, INodeVisitor visitor)
        void FormFactorHollowSphere::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorHollowSphere_accept(self, visitor)

    def radialExtension(self):
        r"""
        radialExtension(FormFactorHollowSphere self) -> double
        double FormFactorHollowSphere::radialExtension() const override final

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorHollowSphere_radialExtension(self)

    def evaluate_for_q(self, q):
        r"""
        evaluate_for_q(FormFactorHollowSphere self, cvector_t q) -> complex_t
        complex_t FormFactorHollowSphere::evaluate_for_q(cvector_t q) const override final

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorHollowSphere_evaluate_for_q(self, q)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorHollowSphere

# Register FormFactorHollowSphere in _libBornAgainCore:
_libBornAgainCore.FormFactorHollowSphere_swigregister(FormFactorHollowSphere)

class FormFactorIcosahedron(FormFactorPolyhedron):
    r"""


    A regular icosahedron.

    C++ includes: FormFactorIcosahedron.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorIcosahedron self, vdouble1d_t P) -> FormFactorIcosahedron
        __init__(FormFactorIcosahedron self, double edge) -> FormFactorIcosahedron
        FormFactorIcosahedron::FormFactorIcosahedron(double edge)

        """
        _libBornAgainCore.FormFactorIcosahedron_swiginit(self, _libBornAgainCore.new_FormFactorIcosahedron(*args))

    def clone(self):
        r"""
        clone(FormFactorIcosahedron self) -> FormFactorIcosahedron
        FormFactorIcosahedron* FormFactorIcosahedron::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorIcosahedron_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorIcosahedron self, INodeVisitor visitor)
        void FormFactorIcosahedron::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorIcosahedron_accept(self, visitor)

    def getEdge(self):
        r"""
        getEdge(FormFactorIcosahedron self) -> double
        double FormFactorIcosahedron::getEdge() const

        """
        return _libBornAgainCore.FormFactorIcosahedron_getEdge(self)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorIcosahedron

# Register FormFactorIcosahedron in _libBornAgainCore:
_libBornAgainCore.FormFactorIcosahedron_swigregister(FormFactorIcosahedron)

class FormFactorLongBoxGauss(IFormFactorBorn):
    r"""


    The form factor for a long rectangular box.

    C++ includes: FormFactorLongBoxGauss.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorLongBoxGauss self, vdouble1d_t P) -> FormFactorLongBoxGauss
        __init__(FormFactorLongBoxGauss self, double length, double width, double height) -> FormFactorLongBoxGauss
        FormFactorLongBoxGauss::FormFactorLongBoxGauss(double length, double width, double height)

        """
        _libBornAgainCore.FormFactorLongBoxGauss_swiginit(self, _libBornAgainCore.new_FormFactorLongBoxGauss(*args))

    def clone(self):
        r"""
        clone(FormFactorLongBoxGauss self) -> FormFactorLongBoxGauss
        FormFactorLongBoxGauss* FormFactorLongBoxGauss::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorLongBoxGauss_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorLongBoxGauss self, INodeVisitor visitor)
        void FormFactorLongBoxGauss::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorLongBoxGauss_accept(self, visitor)

    def getLength(self):
        r"""
        getLength(FormFactorLongBoxGauss self) -> double
        double FormFactorLongBoxGauss::getLength() const

        """
        return _libBornAgainCore.FormFactorLongBoxGauss_getLength(self)

    def getHeight(self):
        r"""
        getHeight(FormFactorLongBoxGauss self) -> double
        double FormFactorLongBoxGauss::getHeight() const

        """
        return _libBornAgainCore.FormFactorLongBoxGauss_getHeight(self)

    def getWidth(self):
        r"""
        getWidth(FormFactorLongBoxGauss self) -> double
        double FormFactorLongBoxGauss::getWidth() const

        """
        return _libBornAgainCore.FormFactorLongBoxGauss_getWidth(self)

    def radialExtension(self):
        r"""
        radialExtension(FormFactorLongBoxGauss self) -> double
        double FormFactorLongBoxGauss::radialExtension() const override final

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorLongBoxGauss_radialExtension(self)

    def evaluate_for_q(self, q):
        r"""
        evaluate_for_q(FormFactorLongBoxGauss self, cvector_t q) -> complex_t
        complex_t FormFactorLongBoxGauss::evaluate_for_q(cvector_t q) const override final

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorLongBoxGauss_evaluate_for_q(self, q)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorLongBoxGauss

# Register FormFactorLongBoxGauss in _libBornAgainCore:
_libBornAgainCore.FormFactorLongBoxGauss_swigregister(FormFactorLongBoxGauss)

class FormFactorLongBoxLorentz(IFormFactorBorn):
    r"""


    The form factor for a long rectangular box.

    C++ includes: FormFactorLongBoxLorentz.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorLongBoxLorentz self, vdouble1d_t P) -> FormFactorLongBoxLorentz
        __init__(FormFactorLongBoxLorentz self, double length, double width, double height) -> FormFactorLongBoxLorentz
        FormFactorLongBoxLorentz::FormFactorLongBoxLorentz(double length, double width, double height)

        """
        _libBornAgainCore.FormFactorLongBoxLorentz_swiginit(self, _libBornAgainCore.new_FormFactorLongBoxLorentz(*args))

    def clone(self):
        r"""
        clone(FormFactorLongBoxLorentz self) -> FormFactorLongBoxLorentz
        FormFactorLongBoxLorentz* FormFactorLongBoxLorentz::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorLongBoxLorentz_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorLongBoxLorentz self, INodeVisitor visitor)
        void FormFactorLongBoxLorentz::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorLongBoxLorentz_accept(self, visitor)

    def getLength(self):
        r"""
        getLength(FormFactorLongBoxLorentz self) -> double
        double FormFactorLongBoxLorentz::getLength() const

        """
        return _libBornAgainCore.FormFactorLongBoxLorentz_getLength(self)

    def getHeight(self):
        r"""
        getHeight(FormFactorLongBoxLorentz self) -> double
        double FormFactorLongBoxLorentz::getHeight() const

        """
        return _libBornAgainCore.FormFactorLongBoxLorentz_getHeight(self)

    def getWidth(self):
        r"""
        getWidth(FormFactorLongBoxLorentz self) -> double
        double FormFactorLongBoxLorentz::getWidth() const

        """
        return _libBornAgainCore.FormFactorLongBoxLorentz_getWidth(self)

    def radialExtension(self):
        r"""
        radialExtension(FormFactorLongBoxLorentz self) -> double
        double FormFactorLongBoxLorentz::radialExtension() const override final

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorLongBoxLorentz_radialExtension(self)

    def evaluate_for_q(self, q):
        r"""
        evaluate_for_q(FormFactorLongBoxLorentz self, cvector_t q) -> complex_t
        complex_t FormFactorLongBoxLorentz::evaluate_for_q(cvector_t q) const override final

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorLongBoxLorentz_evaluate_for_q(self, q)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorLongBoxLorentz

# Register FormFactorLongBoxLorentz in _libBornAgainCore:
_libBornAgainCore.FormFactorLongBoxLorentz_swigregister(FormFactorLongBoxLorentz)

class FormFactorPrism3(FormFactorPolygonalPrism):
    r"""


    A prism based on an equilateral triangle.

    C++ includes: FormFactorPrism3.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorPrism3 self, vdouble1d_t P) -> FormFactorPrism3
        __init__(FormFactorPrism3 self, double base_edge, double height) -> FormFactorPrism3
        FormFactorPrism3::FormFactorPrism3(double base_edge, double height)

        """
        _libBornAgainCore.FormFactorPrism3_swiginit(self, _libBornAgainCore.new_FormFactorPrism3(*args))

    def clone(self):
        r"""
        clone(FormFactorPrism3 self) -> FormFactorPrism3
        FormFactorPrism3* FormFactorPrism3::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorPrism3_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorPrism3 self, INodeVisitor visitor)
        void FormFactorPrism3::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorPrism3_accept(self, visitor)

    def getBaseEdge(self):
        r"""
        getBaseEdge(FormFactorPrism3 self) -> double
        double FormFactorPrism3::getBaseEdge() const

        """
        return _libBornAgainCore.FormFactorPrism3_getBaseEdge(self)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorPrism3

# Register FormFactorPrism3 in _libBornAgainCore:
_libBornAgainCore.FormFactorPrism3_swigregister(FormFactorPrism3)

class FormFactorPrism6(FormFactorPolygonalPrism):
    r"""


    A prism based on a regular hexagonal.

    C++ includes: FormFactorPrism6.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorPrism6 self, vdouble1d_t P) -> FormFactorPrism6
        __init__(FormFactorPrism6 self, double base_edge, double height) -> FormFactorPrism6
        FormFactorPrism6::FormFactorPrism6(double base_edge, double height)

        """
        _libBornAgainCore.FormFactorPrism6_swiginit(self, _libBornAgainCore.new_FormFactorPrism6(*args))

    def clone(self):
        r"""
        clone(FormFactorPrism6 self) -> FormFactorPrism6
        FormFactorPrism6* FormFactorPrism6::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorPrism6_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorPrism6 self, INodeVisitor visitor)
        void FormFactorPrism6::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorPrism6_accept(self, visitor)

    def getBaseEdge(self):
        r"""
        getBaseEdge(FormFactorPrism6 self) -> double
        double FormFactorPrism6::getBaseEdge() const

        """
        return _libBornAgainCore.FormFactorPrism6_getBaseEdge(self)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorPrism6

# Register FormFactorPrism6 in _libBornAgainCore:
_libBornAgainCore.FormFactorPrism6_swigregister(FormFactorPrism6)

class FormFactorPyramid(FormFactorPolyhedron):
    r"""


    A frustum with a quadratic base.

    C++ includes: FormFactorPyramid.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorPyramid self, vdouble1d_t P) -> FormFactorPyramid
        __init__(FormFactorPyramid self, double base_edge, double height, double alpha) -> FormFactorPyramid
        FormFactorPyramid::FormFactorPyramid(double base_edge, double height, double alpha)

        """
        _libBornAgainCore.FormFactorPyramid_swiginit(self, _libBornAgainCore.new_FormFactorPyramid(*args))

    def clone(self):
        r"""
        clone(FormFactorPyramid self) -> FormFactorPyramid
        FormFactorPyramid* FormFactorPyramid::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorPyramid_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorPyramid self, INodeVisitor visitor)
        void FormFactorPyramid::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorPyramid_accept(self, visitor)

    def getHeight(self):
        r"""
        getHeight(FormFactorPyramid self) -> double
        double FormFactorPyramid::getHeight() const

        """
        return _libBornAgainCore.FormFactorPyramid_getHeight(self)

    def getBaseEdge(self):
        r"""
        getBaseEdge(FormFactorPyramid self) -> double
        double FormFactorPyramid::getBaseEdge() const

        """
        return _libBornAgainCore.FormFactorPyramid_getBaseEdge(self)

    def getAlpha(self):
        r"""
        getAlpha(FormFactorPyramid self) -> double
        double FormFactorPyramid::getAlpha() const

        """
        return _libBornAgainCore.FormFactorPyramid_getAlpha(self)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorPyramid

# Register FormFactorPyramid in _libBornAgainCore:
_libBornAgainCore.FormFactorPyramid_swigregister(FormFactorPyramid)

class FormFactorSawtoothRippleBox(ISawtoothRipple):
    r"""


    The form factor for a cosine ripple, with box profile in elongation direction.

    C++ includes: FormFactorSawtoothRipple.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorSawtoothRippleBox self, vdouble1d_t P) -> FormFactorSawtoothRippleBox
        __init__(FormFactorSawtoothRippleBox self, double length, double width, double height, double asymmetry) -> FormFactorSawtoothRippleBox
        FormFactorSawtoothRippleBox::FormFactorSawtoothRippleBox(double length, double width, double height, double asymmetry)

        """
        _libBornAgainCore.FormFactorSawtoothRippleBox_swiginit(self, _libBornAgainCore.new_FormFactorSawtoothRippleBox(*args))

    def clone(self):
        r"""
        clone(FormFactorSawtoothRippleBox self) -> FormFactorSawtoothRippleBox
        FormFactorSawtoothRippleBox * FormFactorSawtoothRippleBox::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorSawtoothRippleBox_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorSawtoothRippleBox self, INodeVisitor visitor)
        void FormFactorSawtoothRippleBox::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorSawtoothRippleBox_accept(self, visitor)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorSawtoothRippleBox

# Register FormFactorSawtoothRippleBox in _libBornAgainCore:
_libBornAgainCore.FormFactorSawtoothRippleBox_swigregister(FormFactorSawtoothRippleBox)

class FormFactorSawtoothRippleGauss(ISawtoothRipple):
    r"""


    The form factor for a cosine ripple, with Gaussian profile in elongation direction.

    C++ includes: FormFactorSawtoothRipple.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorSawtoothRippleGauss self, vdouble1d_t P) -> FormFactorSawtoothRippleGauss
        __init__(FormFactorSawtoothRippleGauss self, double length, double width, double height, double asymmetry) -> FormFactorSawtoothRippleGauss
        FormFactorSawtoothRippleGauss::FormFactorSawtoothRippleGauss(double length, double width, double height, double asymmetry)

        """
        _libBornAgainCore.FormFactorSawtoothRippleGauss_swiginit(self, _libBornAgainCore.new_FormFactorSawtoothRippleGauss(*args))

    def clone(self):
        r"""
        clone(FormFactorSawtoothRippleGauss self) -> FormFactorSawtoothRippleGauss
        FormFactorSawtoothRippleGauss * FormFactorSawtoothRippleGauss::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorSawtoothRippleGauss_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorSawtoothRippleGauss self, INodeVisitor visitor)
        void FormFactorSawtoothRippleGauss::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorSawtoothRippleGauss_accept(self, visitor)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorSawtoothRippleGauss

# Register FormFactorSawtoothRippleGauss in _libBornAgainCore:
_libBornAgainCore.FormFactorSawtoothRippleGauss_swigregister(FormFactorSawtoothRippleGauss)

class FormFactorSawtoothRippleLorentz(ISawtoothRipple):
    r"""


    The form factor for a cosine ripple, with Lorentz form factor in elongation direction.

    C++ includes: FormFactorSawtoothRipple.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorSawtoothRippleLorentz self, vdouble1d_t P) -> FormFactorSawtoothRippleLorentz
        __init__(FormFactorSawtoothRippleLorentz self, double length, double width, double height, double asymmetry) -> FormFactorSawtoothRippleLorentz
        FormFactorSawtoothRippleLorentz::FormFactorSawtoothRippleLorentz(double length, double width, double height, double asymmetry)

        """
        _libBornAgainCore.FormFactorSawtoothRippleLorentz_swiginit(self, _libBornAgainCore.new_FormFactorSawtoothRippleLorentz(*args))

    def clone(self):
        r"""
        clone(FormFactorSawtoothRippleLorentz self) -> FormFactorSawtoothRippleLorentz
        FormFactorSawtoothRippleLorentz * FormFactorSawtoothRippleLorentz::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorSawtoothRippleLorentz_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorSawtoothRippleLorentz self, INodeVisitor visitor)
        void FormFactorSawtoothRippleLorentz::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorSawtoothRippleLorentz_accept(self, visitor)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorSawtoothRippleLorentz

# Register FormFactorSawtoothRippleLorentz in _libBornAgainCore:
_libBornAgainCore.FormFactorSawtoothRippleLorentz_swigregister(FormFactorSawtoothRippleLorentz)

class FormFactorTetrahedron(FormFactorPolyhedron):
    r"""


    A frustum with equilateral trigonal base.

    C++ includes: FormFactorTetrahedron.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorTetrahedron self, vdouble1d_t P) -> FormFactorTetrahedron
        __init__(FormFactorTetrahedron self, double base_edge, double height, double alpha) -> FormFactorTetrahedron
        FormFactorTetrahedron::FormFactorTetrahedron(double base_edge, double height, double alpha)

        """
        _libBornAgainCore.FormFactorTetrahedron_swiginit(self, _libBornAgainCore.new_FormFactorTetrahedron(*args))

    def clone(self):
        r"""
        clone(FormFactorTetrahedron self) -> FormFactorTetrahedron
        FormFactorTetrahedron* FormFactorTetrahedron::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorTetrahedron_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorTetrahedron self, INodeVisitor visitor)
        void FormFactorTetrahedron::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorTetrahedron_accept(self, visitor)

    def getBaseEdge(self):
        r"""
        getBaseEdge(FormFactorTetrahedron self) -> double
        double FormFactorTetrahedron::getBaseEdge() const

        """
        return _libBornAgainCore.FormFactorTetrahedron_getBaseEdge(self)

    def getHeight(self):
        r"""
        getHeight(FormFactorTetrahedron self) -> double
        double FormFactorTetrahedron::getHeight() const

        """
        return _libBornAgainCore.FormFactorTetrahedron_getHeight(self)

    def getAlpha(self):
        r"""
        getAlpha(FormFactorTetrahedron self) -> double
        double FormFactorTetrahedron::getAlpha() const

        """
        return _libBornAgainCore.FormFactorTetrahedron_getAlpha(self)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorTetrahedron

# Register FormFactorTetrahedron in _libBornAgainCore:
_libBornAgainCore.FormFactorTetrahedron_swigregister(FormFactorTetrahedron)

class FormFactorTruncatedCube(FormFactorPolyhedron):
    r"""


    A cube, with tetrahedral truncation of all corners

    C++ includes: FormFactorTruncatedCube.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorTruncatedCube self, vdouble1d_t P) -> FormFactorTruncatedCube
        __init__(FormFactorTruncatedCube self, double length, double removed_length) -> FormFactorTruncatedCube
        FormFactorTruncatedCube::FormFactorTruncatedCube(double length, double removed_length)

        """
        _libBornAgainCore.FormFactorTruncatedCube_swiginit(self, _libBornAgainCore.new_FormFactorTruncatedCube(*args))

    def clone(self):
        r"""
        clone(FormFactorTruncatedCube self) -> FormFactorTruncatedCube
        FormFactorTruncatedCube* FormFactorTruncatedCube::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorTruncatedCube_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorTruncatedCube self, INodeVisitor visitor)
        void FormFactorTruncatedCube::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorTruncatedCube_accept(self, visitor)

    def getLength(self):
        r"""
        getLength(FormFactorTruncatedCube self) -> double
        double FormFactorTruncatedCube::getLength() const

        """
        return _libBornAgainCore.FormFactorTruncatedCube_getLength(self)

    def getRemovedLength(self):
        r"""
        getRemovedLength(FormFactorTruncatedCube self) -> double
        double FormFactorTruncatedCube::getRemovedLength() const

        """
        return _libBornAgainCore.FormFactorTruncatedCube_getRemovedLength(self)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorTruncatedCube

# Register FormFactorTruncatedCube in _libBornAgainCore:
_libBornAgainCore.FormFactorTruncatedCube_swigregister(FormFactorTruncatedCube)

class FormFactorTruncatedSphere(IFormFactorBorn):
    r"""


    A truncated Sphere.

    C++ includes: FormFactorTruncatedSphere.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorTruncatedSphere self, vdouble1d_t P) -> FormFactorTruncatedSphere
        __init__(FormFactorTruncatedSphere self, double radius, double height, double dh) -> FormFactorTruncatedSphere
        FormFactorTruncatedSphere::FormFactorTruncatedSphere(double radius, double height, double dh)

        """
        _libBornAgainCore.FormFactorTruncatedSphere_swiginit(self, _libBornAgainCore.new_FormFactorTruncatedSphere(*args))

    def clone(self):
        r"""
        clone(FormFactorTruncatedSphere self) -> FormFactorTruncatedSphere
        FormFactorTruncatedSphere* FormFactorTruncatedSphere::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorTruncatedSphere_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorTruncatedSphere self, INodeVisitor visitor)
        void FormFactorTruncatedSphere::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorTruncatedSphere_accept(self, visitor)

    def getHeight(self):
        r"""
        getHeight(FormFactorTruncatedSphere self) -> double
        double FormFactorTruncatedSphere::getHeight() const

        """
        return _libBornAgainCore.FormFactorTruncatedSphere_getHeight(self)

    def getRadius(self):
        r"""
        getRadius(FormFactorTruncatedSphere self) -> double
        double FormFactorTruncatedSphere::getRadius() const

        """
        return _libBornAgainCore.FormFactorTruncatedSphere_getRadius(self)

    def getRemovedTop(self):
        r"""
        getRemovedTop(FormFactorTruncatedSphere self) -> double
        double FormFactorTruncatedSphere::getRemovedTop() const

        """
        return _libBornAgainCore.FormFactorTruncatedSphere_getRemovedTop(self)

    def radialExtension(self):
        r"""
        radialExtension(FormFactorTruncatedSphere self) -> double
        double FormFactorTruncatedSphere::radialExtension() const override final

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorTruncatedSphere_radialExtension(self)

    def evaluate_for_q(self, q):
        r"""
        evaluate_for_q(FormFactorTruncatedSphere self, cvector_t q) -> complex_t
        complex_t FormFactorTruncatedSphere::evaluate_for_q(cvector_t q) const override final

        Complex form factor. 

        """
        return _libBornAgainCore.FormFactorTruncatedSphere_evaluate_for_q(self, q)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorTruncatedSphere

# Register FormFactorTruncatedSphere in _libBornAgainCore:
_libBornAgainCore.FormFactorTruncatedSphere_swigregister(FormFactorTruncatedSphere)

class FormFactorTruncatedSpheroid(IFormFactorBorn):
    r"""


    A truncated spheroid. An ellipsoid with two equal axis, truncated by a plane perpendicular to the third axis.

    C++ includes: FormFactorTruncatedSpheroid.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorTruncatedSpheroid self, vdouble1d_t P) -> FormFactorTruncatedSpheroid
        __init__(FormFactorTruncatedSpheroid self, double radius, double height, double height_flattening, double dh) -> FormFactorTruncatedSpheroid
        FormFactorTruncatedSpheroid::FormFactorTruncatedSpheroid(double radius, double height, double height_flattening, double dh)

        """
        _libBornAgainCore.FormFactorTruncatedSpheroid_swiginit(self, _libBornAgainCore.new_FormFactorTruncatedSpheroid(*args))

    def clone(self):
        r"""
        clone(FormFactorTruncatedSpheroid self) -> FormFactorTruncatedSpheroid
        FormFactorTruncatedSpheroid* FormFactorTruncatedSpheroid::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorTruncatedSpheroid_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorTruncatedSpheroid self, INodeVisitor visitor)
        void FormFactorTruncatedSpheroid::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorTruncatedSpheroid_accept(self, visitor)

    def getRadius(self):
        r"""
        getRadius(FormFactorTruncatedSpheroid self) -> double
        double FormFactorTruncatedSpheroid::getRadius() const

        """
        return _libBornAgainCore.FormFactorTruncatedSpheroid_getRadius(self)

    def getHeight(self):
        r"""
        getHeight(FormFactorTruncatedSpheroid self) -> double
        double FormFactorTruncatedSpheroid::getHeight() const

        """
        return _libBornAgainCore.FormFactorTruncatedSpheroid_getHeight(self)

    def getHeightFlattening(self):
        r"""
        getHeightFlattening(FormFactorTruncatedSpheroid self) -> double
        double FormFactorTruncatedSpheroid::getHeightFlattening() const

        """
        return _libBornAgainCore.FormFactorTruncatedSpheroid_getHeightFlattening(self)

    def getRemovedTop(self):
        r"""
        getRemovedTop(FormFactorTruncatedSpheroid self) -> double
        double FormFactorTruncatedSpheroid::getRemovedTop() const

        """
        return _libBornAgainCore.FormFactorTruncatedSpheroid_getRemovedTop(self)

    def radialExtension(self):
        r"""
        radialExtension(FormFactorTruncatedSpheroid self) -> double
        double FormFactorTruncatedSpheroid::radialExtension() const override final

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorTruncatedSpheroid_radialExtension(self)

    def evaluate_for_q(self, q):
        r"""
        evaluate_for_q(FormFactorTruncatedSpheroid self, cvector_t q) -> complex_t
        complex_t FormFactorTruncatedSpheroid::evaluate_for_q(cvector_t q) const override final

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorTruncatedSpheroid_evaluate_for_q(self, q)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorTruncatedSpheroid

# Register FormFactorTruncatedSpheroid in _libBornAgainCore:
_libBornAgainCore.FormFactorTruncatedSpheroid_swigregister(FormFactorTruncatedSpheroid)

class FormFactorGaussSphere(IFormFactorBorn):
    r"""


    The form factor of a Gaussian sphere.

    C++ includes: FormFactorGauss.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorGaussSphere self, vdouble1d_t P) -> FormFactorGaussSphere
        __init__(FormFactorGaussSphere self, double mean_radius) -> FormFactorGaussSphere
        FormFactorGaussSphere::FormFactorGaussSphere(double mean_radius)

        """
        _libBornAgainCore.FormFactorGaussSphere_swiginit(self, _libBornAgainCore.new_FormFactorGaussSphere(*args))

    def clone(self):
        r"""
        clone(FormFactorGaussSphere self) -> FormFactorGaussSphere
        FormFactorGaussSphere* FormFactorGaussSphere::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorGaussSphere_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorGaussSphere self, INodeVisitor visitor)
        void FormFactorGaussSphere::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorGaussSphere_accept(self, visitor)

    def getMeanRadius(self):
        r"""
        getMeanRadius(FormFactorGaussSphere self) -> double
        double FormFactorGaussSphere::getMeanRadius() const

        """
        return _libBornAgainCore.FormFactorGaussSphere_getMeanRadius(self)

    def radialExtension(self):
        r"""
        radialExtension(FormFactorGaussSphere self) -> double
        double FormFactorGaussSphere::radialExtension() const override final

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorGaussSphere_radialExtension(self)

    def evaluate_for_q(self, q):
        r"""
        evaluate_for_q(FormFactorGaussSphere self, cvector_t q) -> complex_t
        complex_t FormFactorGaussSphere::evaluate_for_q(cvector_t q) const override final

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorGaussSphere_evaluate_for_q(self, q)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorGaussSphere

# Register FormFactorGaussSphere in _libBornAgainCore:
_libBornAgainCore.FormFactorGaussSphere_swigregister(FormFactorGaussSphere)

class FormFactorSphereGaussianRadius(IFormFactorBorn):
    r"""


    A sphere with gaussian radius distribution.

    C++ includes: FormFactorSphereGaussianRadius.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorSphereGaussianRadius self, vdouble1d_t P) -> FormFactorSphereGaussianRadius
        __init__(FormFactorSphereGaussianRadius self, double mean, double sigma) -> FormFactorSphereGaussianRadius
        FormFactorSphereGaussianRadius::FormFactorSphereGaussianRadius(double mean, double sigma)

        """
        _libBornAgainCore.FormFactorSphereGaussianRadius_swiginit(self, _libBornAgainCore.new_FormFactorSphereGaussianRadius(*args))

    def clone(self):
        r"""
        clone(FormFactorSphereGaussianRadius self) -> FormFactorSphereGaussianRadius
        FormFactorSphereGaussianRadius* FormFactorSphereGaussianRadius::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorSphereGaussianRadius_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorSphereGaussianRadius self, INodeVisitor visitor)
        void FormFactorSphereGaussianRadius::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorSphereGaussianRadius_accept(self, visitor)

    def radialExtension(self):
        r"""
        radialExtension(FormFactorSphereGaussianRadius self) -> double
        double FormFactorSphereGaussianRadius::radialExtension() const override final

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorSphereGaussianRadius_radialExtension(self)

    def evaluate_for_q(self, q):
        r"""
        evaluate_for_q(FormFactorSphereGaussianRadius self, cvector_t q) -> complex_t
        complex_t FormFactorSphereGaussianRadius::evaluate_for_q(cvector_t q) const override final

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorSphereGaussianRadius_evaluate_for_q(self, q)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorSphereGaussianRadius

# Register FormFactorSphereGaussianRadius in _libBornAgainCore:
_libBornAgainCore.FormFactorSphereGaussianRadius_swigregister(FormFactorSphereGaussianRadius)

class FormFactorSphereLogNormalRadius(IFormFactorBorn):
    r"""


    A sphere with log normal radius distribution.

    C++ includes: FormFactorSphereLogNormalRadius.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FormFactorSphereLogNormalRadius self, vdouble1d_t P, size_t n_samples=0) -> FormFactorSphereLogNormalRadius
        __init__(FormFactorSphereLogNormalRadius self, double mean, double scale_param, size_t n_samples) -> FormFactorSphereLogNormalRadius
        FormFactorSphereLogNormalRadius::FormFactorSphereLogNormalRadius(double mean, double scale_param, size_t n_samples)

        """
        _libBornAgainCore.FormFactorSphereLogNormalRadius_swiginit(self, _libBornAgainCore.new_FormFactorSphereLogNormalRadius(*args))

    def clone(self):
        r"""
        clone(FormFactorSphereLogNormalRadius self) -> FormFactorSphereLogNormalRadius
        FormFactorSphereLogNormalRadius * FormFactorSphereLogNormalRadius::clone() const override final

        Returns a clone of this  ISample object. 

        """
        return _libBornAgainCore.FormFactorSphereLogNormalRadius_clone(self)

    def accept(self, visitor):
        r"""
        accept(FormFactorSphereLogNormalRadius self, INodeVisitor visitor)
        void FormFactorSphereLogNormalRadius::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.FormFactorSphereLogNormalRadius_accept(self, visitor)

    def radialExtension(self):
        r"""
        radialExtension(FormFactorSphereLogNormalRadius self) -> double
        double FormFactorSphereLogNormalRadius::radialExtension() const override final

        Returns the (approximate in some cases) radial size of the particle of this form factor's shape. This is used for SSCA calculations 

        """
        return _libBornAgainCore.FormFactorSphereLogNormalRadius_radialExtension(self)

    def evaluate_for_q(self, q):
        r"""
        evaluate_for_q(FormFactorSphereLogNormalRadius self, cvector_t q) -> complex_t
        complex_t FormFactorSphereLogNormalRadius::evaluate_for_q(cvector_t q) const override final

        Returns scattering amplitude for complex scattering wavevector q=k_i-k_f. This method is public only for convenience of plotting form factors in Python. 

        """
        return _libBornAgainCore.FormFactorSphereLogNormalRadius_evaluate_for_q(self, q)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorSphereLogNormalRadius

# Register FormFactorSphereLogNormalRadius in _libBornAgainCore:
_libBornAgainCore.FormFactorSphereLogNormalRadius_swigregister(FormFactorSphereLogNormalRadius)

class Simulation(ICloneable, INode):
    r"""


    Pure virtual base class of OffSpecularSimulation,  GISASSimulation and  SpecularSimulation. Holds the common infrastructure to run a simulation: multithreading, batch processing, weighting over parameter distributions, ...

    C++ includes: Simulation.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_Simulation

    def clone(self):
        r"""
        clone(Simulation self) -> Simulation
        virtual Simulation* Simulation::clone() const =0

        """
        return _libBornAgainCore.Simulation_clone(self)

    def prepareSimulation(self):
        r"""
        prepareSimulation(Simulation self)
        void Simulation::prepareSimulation()

        Put into a clean state for running a simulation. 

        """
        return _libBornAgainCore.Simulation_prepareSimulation(self)

    def runSimulation(self):
        r"""
        runSimulation(Simulation self)
        void Simulation::runSimulation()

        Run a simulation, possibly averaged over parameter distributions.

        Run simulation with possible averaging over parameter distributions. 

        """
        return _libBornAgainCore.Simulation_runSimulation(self)

    def runMPISimulation(self):
        r"""
        runMPISimulation(Simulation self)
        void Simulation::runMPISimulation()

        Run a simulation in a MPI environment. 

        """
        return _libBornAgainCore.Simulation_runMPISimulation(self)

    def setInstrument(self, instrument):
        r"""
        setInstrument(Simulation self, Instrument instrument)
        void Simulation::setInstrument(const Instrument &instrument)

        """
        return _libBornAgainCore.Simulation_setInstrument(self, instrument)

    def getInstrument(self, *args):
        r"""
        getInstrument(Simulation self) -> Instrument
        getInstrument(Simulation self) -> Instrument
        Instrument& Simulation::getInstrument()

        """
        return _libBornAgainCore.Simulation_getInstrument(self, *args)

    def setBeamIntensity(self, intensity):
        r"""
        setBeamIntensity(Simulation self, double intensity)
        void Simulation::setBeamIntensity(double intensity)

        """
        return _libBornAgainCore.Simulation_setBeamIntensity(self, intensity)

    def getBeamIntensity(self):
        r"""
        getBeamIntensity(Simulation self) -> double
        double Simulation::getBeamIntensity() const

        """
        return _libBornAgainCore.Simulation_getBeamIntensity(self)

    def setBeamPolarization(self, bloch_vector):
        r"""
        setBeamPolarization(Simulation self, kvector_t bloch_vector)
        void Simulation::setBeamPolarization(const kvector_t bloch_vector)

        Sets the beam polarization according to the given Bloch vector. 

        """
        return _libBornAgainCore.Simulation_setBeamPolarization(self, bloch_vector)

    def setDetectorResolutionFunction(self, resolution_function):
        r"""
        setDetectorResolutionFunction(Simulation self, IResolutionFunction2D resolution_function)
        void Simulation::setDetectorResolutionFunction(const IResolutionFunction2D &resolution_function)

        """
        return _libBornAgainCore.Simulation_setDetectorResolutionFunction(self, resolution_function)

    def removeDetectorResolutionFunction(self):
        r"""
        removeDetectorResolutionFunction(Simulation self)
        void Simulation::removeDetectorResolutionFunction()

        """
        return _libBornAgainCore.Simulation_removeDetectorResolutionFunction(self)

    def setAnalyzerProperties(self, direction, efficiency, total_transmission):
        r"""
        setAnalyzerProperties(Simulation self, kvector_t direction, double efficiency, double total_transmission)
        void Simulation::setAnalyzerProperties(const kvector_t direction, double efficiency, double total_transmission)

        Sets the polarization analyzer characteristics of the detector. 

        """
        return _libBornAgainCore.Simulation_setAnalyzerProperties(self, direction, efficiency, total_transmission)

    def setSample(self, sample):
        r"""
        setSample(Simulation self, MultiLayer sample)
        void Simulation::setSample(const MultiLayer &sample)

        The  MultiLayer object will not be owned by the  Simulation object. 

        """
        return _libBornAgainCore.Simulation_setSample(self, sample)

    def sample(self):
        r"""
        sample(Simulation self) -> MultiLayer
        const MultiLayer * Simulation::sample() const

        """
        return _libBornAgainCore.Simulation_sample(self)

    def setSampleBuilderCpp(self, sample_builder):
        r"""
        setSampleBuilderCpp(Simulation self, std::shared_ptr< IMultiLayerBuilder > const sample_builder)
        void Simulation::setSampleBuilder(const std::shared_ptr< IMultiLayerBuilder > sample_builder)

        """
        return _libBornAgainCore.Simulation_setSampleBuilderCpp(self, sample_builder)

    def setBackground(self, bg):
        r"""
        setBackground(Simulation self, IBackground bg)
        void Simulation::setBackground(const IBackground &bg)

        """
        return _libBornAgainCore.Simulation_setBackground(self, bg)

    def background(self):
        r"""
        background(Simulation self) -> IBackground
        const IBackground* Simulation::background() const

        """
        return _libBornAgainCore.Simulation_background(self)

    def intensityMapSize(self):
        r"""
        intensityMapSize(Simulation self) -> size_t
        virtual size_t Simulation::intensityMapSize() const =0

        Returns the total number of the intensity values in the simulation result. 

        """
        return _libBornAgainCore.Simulation_intensityMapSize(self)

    def result(self):
        r"""
        result(Simulation self) -> SimulationResult
        virtual SimulationResult Simulation::result() const =0

        Returns the results of the simulation in a format that supports unit conversion and export to numpy arrays 

        """
        return _libBornAgainCore.Simulation_result(self)

    def addParameterDistribution(self, *args):
        r"""
        addParameterDistribution(Simulation self, std::string const & param_name, IDistribution1D distribution, size_t nbr_samples, double sigma_factor=0.0, RealLimits limits=RealLimits())
        addParameterDistribution(Simulation self, ParameterDistribution par_distr)
        void Simulation::addParameterDistribution(const ParameterDistribution &par_distr)

        """
        return _libBornAgainCore.Simulation_addParameterDistribution(self, *args)

    def getDistributionHandler(self):
        r"""
        getDistributionHandler(Simulation self) -> DistributionHandler const &
        const DistributionHandler& Simulation::getDistributionHandler() const

        """
        return _libBornAgainCore.Simulation_getDistributionHandler(self)

    def setOptions(self, options):
        r"""
        setOptions(Simulation self, SimulationOptions options)
        void Simulation::setOptions(const SimulationOptions &options)

        """
        return _libBornAgainCore.Simulation_setOptions(self, options)

    def getOptions(self, *args):
        r"""
        getOptions(Simulation self) -> SimulationOptions
        getOptions(Simulation self) -> SimulationOptions
        SimulationOptions& Simulation::getOptions()

        """
        return _libBornAgainCore.Simulation_getOptions(self, *args)

    def subscribe(self, inform):
        r"""
        subscribe(Simulation self, ProgressHandler::Callback_t inform)
        void Simulation::subscribe(ProgressHandler::Callback_t inform)

        """
        return _libBornAgainCore.Simulation_subscribe(self, inform)

    def setTerminalProgressMonitor(self):
        r"""
        setTerminalProgressMonitor(Simulation self)
        void Simulation::setTerminalProgressMonitor()

        Initializes a progress monitor that prints to stdout. 

        """
        return _libBornAgainCore.Simulation_setTerminalProgressMonitor(self)

    def getChildren(self):
        r"""
        getChildren(Simulation self) -> swig_dummy_type_const_inode_vector
        std::vector< const INode * > Simulation::getChildren() const

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.Simulation_getChildren(self)

    def convertData(self, data, put_masked_areas_to_zero=True):
        r"""
        convertData(Simulation self, IntensityData data, bool put_masked_areas_to_zero=True) -> SimulationResult
        SimulationResult Simulation::convertData(const OutputData< double > &data, bool put_masked_areas_to_zero=true)

        Convert user data to  SimulationResult object for later drawing in various axes units. User data will be cropped to the ROI defined in the simulation, amplitudes in areas corresponding to the masked areas of the detector will be set to zero.

        Parameters:
        -----------

        simulation: 
         Simulation object with possible ROI and masks defined.

        data: 
        User data with amplitudes with the shape of data matching the detector.

        SimulationResult object. 

        """
        return _libBornAgainCore.Simulation_convertData(self, data, put_masked_areas_to_zero)

    def setSampleBuilder(self, ptr):
        self.samplebuilder = ptr
        self.setSampleBuilderCpp(ptr)


# Register Simulation in _libBornAgainCore:
_libBornAgainCore.Simulation_swigregister(Simulation)

class Simulation2D(Simulation):
    r"""


    Pure virtual base class of OffSpecularSimulation and  GISASSimulation. Holds the common implementations for simulations with a 2D detector

    C++ includes: Simulation2D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_Simulation2D

    def clone(self):
        r"""
        clone(Simulation2D self) -> Simulation2D
        Simulation2D* Simulation2D::clone() const override=0

        """
        return _libBornAgainCore.Simulation2D_clone(self)

    def prepareSimulation(self):
        r"""
        prepareSimulation(Simulation2D self)
        void Simulation2D::prepareSimulation() override

        Put into a clean state for running a simulation. 

        """
        return _libBornAgainCore.Simulation2D_prepareSimulation(self)

    def setDetectorParameters(self, n_phi, phi_min, phi_max, n_alpha, alpha_min, alpha_max):
        r"""
        setDetectorParameters(Simulation2D self, size_t n_phi, double phi_min, double phi_max, size_t n_alpha, double alpha_min, double alpha_max)
        void Simulation2D::setDetectorParameters(size_t n_phi, double phi_min, double phi_max, size_t n_alpha, double alpha_min, double alpha_max)

        Sets spherical detector parameters using angle ranges

        Parameters:
        -----------

        n_phi: 
        number of phi-axis bins

        phi_min: 
        low edge of first phi-bin

        phi_max: 
        upper edge of last phi-bin

        n_alpha: 
        number of alpha-axis bins

        alpha_min: 
        low edge of first alpha-bin

        alpha_max: 
        upper edge of last alpha-bin 

        """
        return _libBornAgainCore.Simulation2D_setDetectorParameters(self, n_phi, phi_min, phi_max, n_alpha, alpha_min, alpha_max)

    def setDetector(self, detector):
        r"""
        setDetector(Simulation2D self, IDetector2D detector)
        void Simulation2D::setDetector(const IDetector2D &detector)

        Sets the detector (axes can be overwritten later) 

        """
        return _libBornAgainCore.Simulation2D_setDetector(self, detector)

    def removeMasks(self):
        r"""
        removeMasks(Simulation2D self)
        void Simulation2D::removeMasks()

        removes all masks from the detector 

        """
        return _libBornAgainCore.Simulation2D_removeMasks(self)

    def addMask(self, shape, mask_value=True):
        r"""
        addMask(Simulation2D self, IShape2D shape, bool mask_value=True)
        void Simulation2D::addMask(const IShape2D &shape, bool mask_value=true)

        Adds mask of given shape to the stack of detector masks. The mask value 'true' means that the channel will be excluded from the simulation. The mask which is added last has priority.

        Parameters:
        -----------

        shape: 
        The shape of mask ( Rectangle,  Polygon,  Line,  Ellipse)

        mask_value: 
        The value of mask 

        """
        return _libBornAgainCore.Simulation2D_addMask(self, shape, mask_value)

    def maskAll(self):
        r"""
        maskAll(Simulation2D self)
        void Simulation2D::maskAll()

        Put the mask for all detector channels (i.e. exclude whole detector from the analysis) 

        """
        return _libBornAgainCore.Simulation2D_maskAll(self)

    def setRegionOfInterest(self, xlow, ylow, xup, yup):
        r"""
        setRegionOfInterest(Simulation2D self, double xlow, double ylow, double xup, double yup)
        void Simulation2D::setRegionOfInterest(double xlow, double ylow, double xup, double yup)

        Sets rectangular region of interest with lower left and upper right corners defined. 

        """
        return _libBornAgainCore.Simulation2D_setRegionOfInterest(self, xlow, ylow, xup, yup)

# Register Simulation2D in _libBornAgainCore:
_libBornAgainCore.Simulation2D_swigregister(Simulation2D)

class GISASSimulation(Simulation2D):
    r"""


    Main class to run a Grazing-Incidence Small-Angle Scattering simulation.

    C++ includes: GISASSimulation.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(GISASSimulation self) -> GISASSimulation
        __init__(GISASSimulation self, MultiLayer p_sample) -> GISASSimulation
        __init__(GISASSimulation self, std::shared_ptr< IMultiLayerBuilder > const p_sample_builder) -> GISASSimulation
        GISASSimulation::GISASSimulation(const std::shared_ptr< IMultiLayerBuilder > p_sample_builder)

        """
        _libBornAgainCore.GISASSimulation_swiginit(self, _libBornAgainCore.new_GISASSimulation(*args))
    __swig_destroy__ = _libBornAgainCore.delete_GISASSimulation

    def clone(self):
        r"""
        clone(GISASSimulation self) -> GISASSimulation
        GISASSimulation* GISASSimulation::clone() const override

        """
        return _libBornAgainCore.GISASSimulation_clone(self)

    def accept(self, visitor):
        r"""
        accept(GISASSimulation self, INodeVisitor visitor)
        void GISASSimulation::accept(INodeVisitor *visitor) const override

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.GISASSimulation_accept(self, visitor)

    def prepareSimulation(self):
        r"""
        prepareSimulation(GISASSimulation self)
        void GISASSimulation::prepareSimulation() override

        Put into a clean state for running a simulation. 

        """
        return _libBornAgainCore.GISASSimulation_prepareSimulation(self)

    def result(self):
        r"""
        result(GISASSimulation self) -> SimulationResult
        SimulationResult GISASSimulation::result() const override

        Returns the results of the simulation in a format that supports unit conversion and export to numpy arrays 

        """
        return _libBornAgainCore.GISASSimulation_result(self)

    def setBeamParameters(self, wavelength, alpha_i, phi_i):
        r"""
        setBeamParameters(GISASSimulation self, double wavelength, double alpha_i, double phi_i)
        void GISASSimulation::setBeamParameters(double wavelength, double alpha_i, double phi_i)

        Sets beam parameters from here (forwarded to  Instrument) 

        """
        return _libBornAgainCore.GISASSimulation_setBeamParameters(self, wavelength, alpha_i, phi_i)

    def intensityMapSize(self):
        r"""
        intensityMapSize(GISASSimulation self) -> size_t
        size_t GISASSimulation::intensityMapSize() const override

        Returns the total number of the intensity values in the simulation result. 

        """
        return _libBornAgainCore.GISASSimulation_intensityMapSize(self)

# Register GISASSimulation in _libBornAgainCore:
_libBornAgainCore.GISASSimulation_swigregister(GISASSimulation)

class DepthProbeSimulation(Simulation):
    r"""Proxy of C++ DepthProbeSimulation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DepthProbeSimulation self) -> DepthProbeSimulation
        __init__(DepthProbeSimulation self, MultiLayer sample) -> DepthProbeSimulation
        __init__(DepthProbeSimulation self, std::shared_ptr< IMultiLayerBuilder > const sample_builder) -> DepthProbeSimulation
        DepthProbeSimulation::DepthProbeSimulation(const std::shared_ptr< IMultiLayerBuilder > sample_builder)

        """
        _libBornAgainCore.DepthProbeSimulation_swiginit(self, _libBornAgainCore.new_DepthProbeSimulation(*args))
    __swig_destroy__ = _libBornAgainCore.delete_DepthProbeSimulation

    def clone(self):
        r"""
        clone(DepthProbeSimulation self) -> DepthProbeSimulation
        DepthProbeSimulation * DepthProbeSimulation::clone() const override

        """
        return _libBornAgainCore.DepthProbeSimulation_clone(self)

    def accept(self, visitor):
        r"""
        accept(DepthProbeSimulation self, INodeVisitor visitor)
        void DepthProbeSimulation::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.DepthProbeSimulation_accept(self, visitor)

    def result(self):
        r"""
        result(DepthProbeSimulation self) -> SimulationResult
        SimulationResult DepthProbeSimulation::result() const override

        Returns the results of the simulation in a format that supports unit conversion and export to numpy arrays 

        """
        return _libBornAgainCore.DepthProbeSimulation_result(self)

    def setBeamParameters(self, _lambda, nbins, alpha_i_min, alpha_i_max, beam_shape=None):
        r"""
        setBeamParameters(DepthProbeSimulation self, double _lambda, int nbins, double alpha_i_min, double alpha_i_max, IFootprintFactor beam_shape=None)
        void DepthProbeSimulation::setBeamParameters(double lambda, int nbins, double alpha_i_min, double alpha_i_max, const IFootprintFactor *beam_shape=nullptr)

        Sets beam parameters with alpha_i of the beam defined in the range. 

        """
        return _libBornAgainCore.DepthProbeSimulation_setBeamParameters(self, _lambda, nbins, alpha_i_min, alpha_i_max, beam_shape)

    def setZSpan(self, n_bins, z_min, z_max):
        r"""
        setZSpan(DepthProbeSimulation self, size_t n_bins, double z_min, double z_max)
        void DepthProbeSimulation::setZSpan(size_t n_bins, double z_min, double z_max)

        Set z positions for intensity calculations. Negative z's correspond to the area under sample surface. The more negative z is, the deeper layer corresponds to it. 

        """
        return _libBornAgainCore.DepthProbeSimulation_setZSpan(self, n_bins, z_min, z_max)

    def getAlphaAxis(self):
        r"""
        getAlphaAxis(DepthProbeSimulation self) -> IAxis
        const IAxis * DepthProbeSimulation::getAlphaAxis() const

        Returns a pointer to incident angle axis. 

        """
        return _libBornAgainCore.DepthProbeSimulation_getAlphaAxis(self)

    def getZAxis(self):
        r"""
        getZAxis(DepthProbeSimulation self) -> IAxis
        const IAxis * DepthProbeSimulation::getZAxis() const

        Returns a pointer to z-position axis. 

        """
        return _libBornAgainCore.DepthProbeSimulation_getZAxis(self)

    def intensityMapSize(self):
        r"""
        intensityMapSize(DepthProbeSimulation self) -> size_t
        size_t DepthProbeSimulation::intensityMapSize() const override

        Returns the total number of the intensity values in the simulation result. 

        """
        return _libBornAgainCore.DepthProbeSimulation_intensityMapSize(self)

# Register DepthProbeSimulation in _libBornAgainCore:
_libBornAgainCore.DepthProbeSimulation_swigregister(DepthProbeSimulation)

class SpecularSimulation(Simulation):
    r"""


    Main class to run a specular simulation.

    C++ includes: SpecularSimulation.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SpecularSimulation self) -> SpecularSimulation
        __init__(SpecularSimulation self, MultiLayer sample) -> SpecularSimulation
        __init__(SpecularSimulation self, std::shared_ptr< IMultiLayerBuilder > const sample_builder) -> SpecularSimulation
        SpecularSimulation::SpecularSimulation(const std::shared_ptr< IMultiLayerBuilder > sample_builder)

        """
        _libBornAgainCore.SpecularSimulation_swiginit(self, _libBornAgainCore.new_SpecularSimulation(*args))
    __swig_destroy__ = _libBornAgainCore.delete_SpecularSimulation

    def clone(self):
        r"""
        clone(SpecularSimulation self) -> SpecularSimulation
        SpecularSimulation * SpecularSimulation::clone() const override

        """
        return _libBornAgainCore.SpecularSimulation_clone(self)

    def prepareSimulation(self):
        r"""
        prepareSimulation(SpecularSimulation self)
        void SpecularSimulation::prepareSimulation() override

        Put into a clean state for running a simulation. 

        """
        return _libBornAgainCore.SpecularSimulation_prepareSimulation(self)

    def accept(self, visitor):
        r"""
        accept(SpecularSimulation self, INodeVisitor visitor)
        void SpecularSimulation::accept(INodeVisitor *visitor) const override final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.SpecularSimulation_accept(self, visitor)

    def result(self):
        r"""
        result(SpecularSimulation self) -> SimulationResult
        SimulationResult SpecularSimulation::result() const override

        Returns the results of the simulation in a format that supports unit conversion and export to numpy arrays. If simulation was not run, returns an array of proper size filled with zeros. 

        """
        return _libBornAgainCore.SpecularSimulation_result(self)

    def setScan(self, scan):
        r"""
        setScan(SpecularSimulation self, ISpecularScan const & scan)
        void SpecularSimulation::setScan(const ISpecularScan &scan)

        Sets chosen specular scan to the simulation. 

        """
        return _libBornAgainCore.SpecularSimulation_setScan(self, scan)

    def coordinateAxis(self):
        r"""
        coordinateAxis(SpecularSimulation self) -> IAxis
        const IAxis * SpecularSimulation::coordinateAxis() const

        Returns a pointer to coordinate axis. 

        """
        return _libBornAgainCore.SpecularSimulation_coordinateAxis(self)

    def footprintFactor(self):
        r"""
        footprintFactor(SpecularSimulation self) -> IFootprintFactor
        const IFootprintFactor * SpecularSimulation::footprintFactor() const

        Returns a pointer to footprint factor holder. 

        """
        return _libBornAgainCore.SpecularSimulation_footprintFactor(self)

    def intensityMapSize(self):
        r"""
        intensityMapSize(SpecularSimulation self) -> size_t
        size_t SpecularSimulation::intensityMapSize() const override

        Returns the total number of the intensity values in the simulation result. 

        """
        return _libBornAgainCore.SpecularSimulation_intensityMapSize(self)

    def setSampleBuilder(self, ptr):
        self.samplebuilder = ptr
        self.setSampleBuilderCpp(ptr)


# Register SpecularSimulation in _libBornAgainCore:
_libBornAgainCore.SpecularSimulation_swigregister(SpecularSimulation)

class OffSpecSimulation(Simulation2D):
    r"""


    Main class to run an off-specular simulation.

    C++ includes: OffSpecSimulation.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(OffSpecSimulation self) -> OffSpecSimulation
        __init__(OffSpecSimulation self, MultiLayer p_sample) -> OffSpecSimulation
        __init__(OffSpecSimulation self, std::shared_ptr< IMultiLayerBuilder > const p_sample_builder) -> OffSpecSimulation
        OffSpecSimulation::OffSpecSimulation(const std::shared_ptr< class IMultiLayerBuilder > p_sample_builder)

        """
        _libBornAgainCore.OffSpecSimulation_swiginit(self, _libBornAgainCore.new_OffSpecSimulation(*args))
    __swig_destroy__ = _libBornAgainCore.delete_OffSpecSimulation

    def clone(self):
        r"""
        clone(OffSpecSimulation self) -> OffSpecSimulation
        OffSpecSimulation* OffSpecSimulation::clone() const override

        """
        return _libBornAgainCore.OffSpecSimulation_clone(self)

    def accept(self, visitor):
        r"""
        accept(OffSpecSimulation self, INodeVisitor visitor)
        void OffSpecSimulation::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.OffSpecSimulation_accept(self, visitor)

    def prepareSimulation(self):
        r"""
        prepareSimulation(OffSpecSimulation self)
        void OffSpecSimulation::prepareSimulation() final

        Put into a clean state for running a simulation. 

        """
        return _libBornAgainCore.OffSpecSimulation_prepareSimulation(self)

    def result(self):
        r"""
        result(OffSpecSimulation self) -> SimulationResult
        SimulationResult OffSpecSimulation::result() const override

        Returns the results of the simulation in a format that supports unit conversion and export to numpy arrays 

        """
        return _libBornAgainCore.OffSpecSimulation_result(self)

    def setBeamParameters(self, wavelength, alpha_axis, phi_i):
        r"""
        setBeamParameters(OffSpecSimulation self, double wavelength, IAxis alpha_axis, double phi_i)
        void OffSpecSimulation::setBeamParameters(double wavelength, const IAxis &alpha_axis, double phi_i)

        Sets beam parameters from here (forwarded to  Instrument) 

        """
        return _libBornAgainCore.OffSpecSimulation_setBeamParameters(self, wavelength, alpha_axis, phi_i)

    def beamAxis(self):
        r"""
        beamAxis(OffSpecSimulation self) -> IAxis
        const IAxis * OffSpecSimulation::beamAxis() const

        Returns axis of the beam. 

        """
        return _libBornAgainCore.OffSpecSimulation_beamAxis(self)

    def intensityMapSize(self):
        r"""
        intensityMapSize(OffSpecSimulation self) -> size_t
        size_t OffSpecSimulation::intensityMapSize() const override

        Returns the total number of the intensity values in the simulation result. 

        """
        return _libBornAgainCore.OffSpecSimulation_intensityMapSize(self)

# Register OffSpecSimulation in _libBornAgainCore:
_libBornAgainCore.OffSpecSimulation_swigregister(OffSpecSimulation)

class IBackground(ICloneable, INode):
    r"""


    Interface for a simulating the background signal

    C++ includes: IBackground.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IBackground

    def clone(self):
        r"""
        clone(IBackground self) -> IBackground
        virtual IBackground* IBackground::clone() const =0

        """
        return _libBornAgainCore.IBackground_clone(self)

    def addBackGround(self, element):
        r"""
        addBackGround(IBackground self, double element) -> double
        virtual double IBackground::addBackGround(double element) const =0

        """
        return _libBornAgainCore.IBackground_addBackGround(self, element)

# Register IBackground in _libBornAgainCore:
_libBornAgainCore.IBackground_swigregister(IBackground)

class ConstantBackground(IBackground):
    r"""


    Class representing a constant background signal

    C++ includes: ConstantBackground.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ConstantBackground self, vdouble1d_t P) -> ConstantBackground
        __init__(ConstantBackground self, double background_value) -> ConstantBackground
        ConstantBackground::ConstantBackground(double background_value)

        """
        _libBornAgainCore.ConstantBackground_swiginit(self, _libBornAgainCore.new_ConstantBackground(*args))

    def clone(self):
        r"""
        clone(ConstantBackground self) -> ConstantBackground
        ConstantBackground * ConstantBackground::clone() const override final

        """
        return _libBornAgainCore.ConstantBackground_clone(self)

    def backgroundValue(self):
        r"""
        backgroundValue(ConstantBackground self) -> double
        double ConstantBackground::backgroundValue() const

        """
        return _libBornAgainCore.ConstantBackground_backgroundValue(self)

    def accept(self, visitor):
        r"""
        accept(ConstantBackground self, INodeVisitor visitor)
        void ConstantBackground::accept(INodeVisitor *visitor) const override

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.ConstantBackground_accept(self, visitor)

    def addBackGround(self, intensity):
        r"""
        addBackGround(ConstantBackground self, double intensity) -> double
        double ConstantBackground::addBackGround(double intensity) const override final

        """
        return _libBornAgainCore.ConstantBackground_addBackGround(self, intensity)
    __swig_destroy__ = _libBornAgainCore.delete_ConstantBackground

# Register ConstantBackground in _libBornAgainCore:
_libBornAgainCore.ConstantBackground_swigregister(ConstantBackground)

class PoissonNoiseBackground(IBackground):
    r"""


    Class representing Poisson noise on top of the scattered intensity

    C++ includes: PoissonNoiseBackground.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(PoissonNoiseBackground self) -> PoissonNoiseBackground
        PoissonNoiseBackground::PoissonNoiseBackground()

        """
        _libBornAgainCore.PoissonNoiseBackground_swiginit(self, _libBornAgainCore.new_PoissonNoiseBackground())

    def clone(self):
        r"""
        clone(PoissonNoiseBackground self) -> PoissonNoiseBackground
        PoissonNoiseBackground * PoissonNoiseBackground::clone() const override final

        """
        return _libBornAgainCore.PoissonNoiseBackground_clone(self)

    def accept(self, visitor):
        r"""
        accept(PoissonNoiseBackground self, INodeVisitor visitor)
        void PoissonNoiseBackground::accept(INodeVisitor *visitor) const override

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.PoissonNoiseBackground_accept(self, visitor)

    def addBackGround(self, intensity):
        r"""
        addBackGround(PoissonNoiseBackground self, double intensity) -> double
        double PoissonNoiseBackground::addBackGround(double intensity) const override final

        """
        return _libBornAgainCore.PoissonNoiseBackground_addBackGround(self, intensity)
    __swig_destroy__ = _libBornAgainCore.delete_PoissonNoiseBackground

# Register PoissonNoiseBackground in _libBornAgainCore:
_libBornAgainCore.PoissonNoiseBackground_swigregister(PoissonNoiseBackground)


def MaterialProfile_cpp(multilayer, n_points, z_min, z_max):
    r"""
    MaterialProfile_cpp(MultiLayer multilayer, int n_points, double z_min, double z_max) -> vector_complex_t
    BA_CORE_API_ std::vector<complex_t> MaterialProfile(const MultiLayer &multilayer, int n_points, double z_min, double z_max)

    Calculate average material profile for given multilayer. 

    """
    return _libBornAgainCore.MaterialProfile_cpp(multilayer, n_points, z_min, z_max)

def DefaultMaterialProfileLimits(multilayer):
    r"""
    DefaultMaterialProfileLimits(MultiLayer multilayer) -> pair_double_t
    BA_CORE_API_ std::pair<double, double> DefaultMaterialProfileLimits(const MultiLayer &multilayer)

    Get default z limits for generating a material profile. 

    """
    return _libBornAgainCore.DefaultMaterialProfileLimits(multilayer)

def GenerateZValues(n_points, z_min, z_max):
    r"""
    GenerateZValues(int n_points, double z_min, double z_max) -> vdouble1d_t
    BA_CORE_API_ std::vector<double> GenerateZValues(int n_points, double z_min, double z_max)

    Generate z values (equidistant) for use in MaterialProfile. 

    """
    return _libBornAgainCore.GenerateZValues(n_points, z_min, z_max)
class IntensityDataIOFactory(object):
    r"""


    Provides users with possibility to read and write IntensityData from/to files in different format. Type of the file will be deduced from file name. *.txt - ASCII file with 2D array [nrow][ncol], layout as in numpy. *.int - BornAgain internal ASCII format. *.tif - 32-bits tiff file. If file name ends woth "*.gz" or "*.bz2" the file will be zipped on the fly using appropriate algorithm.

    Usage:

    C++ includes: IntensityDataIOFactory.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def readOutputData(file_name):
        r"""readOutputData(std::string const & file_name) -> IntensityData"""
        return _libBornAgainCore.IntensityDataIOFactory_readOutputData(file_name)

    @staticmethod
    def readReflectometryData(file_name):
        r"""readReflectometryData(std::string const & file_name) -> IntensityData"""
        return _libBornAgainCore.IntensityDataIOFactory_readReflectometryData(file_name)

    @staticmethod
    def readIntensityData(file_name):
        r"""readIntensityData(std::string const & file_name) -> IHistogram"""
        return _libBornAgainCore.IntensityDataIOFactory_readIntensityData(file_name)

    @staticmethod
    def writeOutputData(data, file_name):
        r"""writeOutputData(IntensityData data, std::string const & file_name)"""
        return _libBornAgainCore.IntensityDataIOFactory_writeOutputData(data, file_name)

    @staticmethod
    def writeIntensityData(histogram, file_name):
        r"""writeIntensityData(IHistogram histogram, std::string const & file_name)"""
        return _libBornAgainCore.IntensityDataIOFactory_writeIntensityData(histogram, file_name)

    @staticmethod
    def writeSimulationResult(result, file_name):
        r"""writeSimulationResult(SimulationResult result, std::string const & file_name)"""
        return _libBornAgainCore.IntensityDataIOFactory_writeSimulationResult(result, file_name)

    def __init__(self):
        r"""
        __init__(IntensityDataIOFactory self) -> IntensityDataIOFactory


        Provides users with possibility to read and write IntensityData from/to files in different format. Type of the file will be deduced from file name. *.txt - ASCII file with 2D array [nrow][ncol], layout as in numpy. *.int - BornAgain internal ASCII format. *.tif - 32-bits tiff file. If file name ends woth "*.gz" or "*.bz2" the file will be zipped on the fly using appropriate algorithm.

        Usage:

        C++ includes: IntensityDataIOFactory.h

        """
        _libBornAgainCore.IntensityDataIOFactory_swiginit(self, _libBornAgainCore.new_IntensityDataIOFactory())
    __swig_destroy__ = _libBornAgainCore.delete_IntensityDataIOFactory

# Register IntensityDataIOFactory in _libBornAgainCore:
_libBornAgainCore.IntensityDataIOFactory_swigregister(IntensityDataIOFactory)

def IntensityDataIOFactory_readOutputData(file_name):
    r"""IntensityDataIOFactory_readOutputData(std::string const & file_name) -> IntensityData"""
    return _libBornAgainCore.IntensityDataIOFactory_readOutputData(file_name)

def IntensityDataIOFactory_readReflectometryData(file_name):
    r"""IntensityDataIOFactory_readReflectometryData(std::string const & file_name) -> IntensityData"""
    return _libBornAgainCore.IntensityDataIOFactory_readReflectometryData(file_name)

def IntensityDataIOFactory_readIntensityData(file_name):
    r"""IntensityDataIOFactory_readIntensityData(std::string const & file_name) -> IHistogram"""
    return _libBornAgainCore.IntensityDataIOFactory_readIntensityData(file_name)

def IntensityDataIOFactory_writeOutputData(data, file_name):
    r"""IntensityDataIOFactory_writeOutputData(IntensityData data, std::string const & file_name)"""
    return _libBornAgainCore.IntensityDataIOFactory_writeOutputData(data, file_name)

def IntensityDataIOFactory_writeIntensityData(histogram, file_name):
    r"""IntensityDataIOFactory_writeIntensityData(IHistogram histogram, std::string const & file_name)"""
    return _libBornAgainCore.IntensityDataIOFactory_writeIntensityData(histogram, file_name)

def IntensityDataIOFactory_writeSimulationResult(result, file_name):
    r"""IntensityDataIOFactory_writeSimulationResult(SimulationResult result, std::string const & file_name)"""
    return _libBornAgainCore.IntensityDataIOFactory_writeSimulationResult(result, file_name)

class IDetector(ICloneable, INode):
    r"""


    Abstract detector interface.

    C++ includes: IDetector.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        r"""
        clone(IDetector self) -> IDetector
        IDetector* IDetector::clone() const override=0

        """
        return _libBornAgainCore.IDetector_clone(self)
    __swig_destroy__ = _libBornAgainCore.delete_IDetector

    def init(self, arg2):
        r"""
        init(IDetector self, Beam arg2)
        virtual void IDetector::init(const Beam &)

        Inits detector with the beam settings. 

        """
        return _libBornAgainCore.IDetector_init(self, arg2)

    def clear(self):
        r"""
        clear(IDetector self)
        void IDetector::clear()

        """
        return _libBornAgainCore.IDetector_clear(self)

    def addAxis(self, axis):
        r"""
        addAxis(IDetector self, IAxis axis)
        void IDetector::addAxis(const IAxis &axis)

        """
        return _libBornAgainCore.IDetector_addAxis(self, axis)

    def getAxis(self, index):
        r"""
        getAxis(IDetector self, size_t index) -> IAxis
        const IAxis & IDetector::getAxis(size_t index) const

        """
        return _libBornAgainCore.IDetector_getAxis(self, index)

    def dimension(self):
        r"""
        dimension(IDetector self) -> size_t
        size_t IDetector::dimension() const

        Returns actual dimensionality of the detector (number of defined axes) 

        """
        return _libBornAgainCore.IDetector_dimension(self)

    def axisBinIndex(self, index, selected_axis):
        r"""
        axisBinIndex(IDetector self, size_t index, size_t selected_axis) -> size_t
        size_t IDetector::axisBinIndex(size_t index, size_t selected_axis) const

        Calculate axis index for given global index. 

        """
        return _libBornAgainCore.IDetector_axisBinIndex(self, index, selected_axis)

    def totalSize(self):
        r"""
        totalSize(IDetector self) -> size_t
        size_t IDetector::totalSize() const

        Returns total number of pixels. 

        """
        return _libBornAgainCore.IDetector_totalSize(self)

    def detectorMask(self):
        r"""
        detectorMask(IDetector self) -> DetectorMask
        virtual const DetectorMask* IDetector::detectorMask() const =0

        Returns detector masks container. 

        """
        return _libBornAgainCore.IDetector_detectorMask(self)

    def setAnalyzerProperties(self, direction, efficiency, total_transmission):
        r"""
        setAnalyzerProperties(IDetector self, kvector_t direction, double efficiency, double total_transmission)
        void IDetector::setAnalyzerProperties(const kvector_t direction, double efficiency, double total_transmission)

        Sets the polarization analyzer characteristics of the detector. 

        """
        return _libBornAgainCore.IDetector_setAnalyzerProperties(self, direction, efficiency, total_transmission)

    def setDetectorResolution(self, p_detector_resolution):
        r"""
        setDetectorResolution(IDetector self, IDetectorResolution p_detector_resolution)
        void IDetector::setDetectorResolution(const IDetectorResolution &p_detector_resolution)

        Sets the detector resolution. 

        """
        return _libBornAgainCore.IDetector_setDetectorResolution(self, p_detector_resolution)

    def setResolutionFunction(self, resFunc):
        r"""
        setResolutionFunction(IDetector self, IResolutionFunction2D resFunc)
        void IDetector::setResolutionFunction(const IResolutionFunction2D &resFunc)

        """
        return _libBornAgainCore.IDetector_setResolutionFunction(self, resFunc)

    def applyDetectorResolution(self, p_intensity_map):
        r"""
        applyDetectorResolution(IDetector self, IntensityData p_intensity_map)
        void IDetector::applyDetectorResolution(OutputData< double > *p_intensity_map) const

        Applies the detector resolution to the given intensity maps. 

        """
        return _libBornAgainCore.IDetector_applyDetectorResolution(self, p_intensity_map)

    def removeDetectorResolution(self):
        r"""
        removeDetectorResolution(IDetector self)
        void IDetector::removeDetectorResolution()

        Removes detector resolution function. 

        """
        return _libBornAgainCore.IDetector_removeDetectorResolution(self)

    def detectorResolution(self):
        r"""
        detectorResolution(IDetector self) -> IDetectorResolution
        const IDetectorResolution * IDetector::detectorResolution() const

        Returns a pointer to detector resolution object. 

        """
        return _libBornAgainCore.IDetector_detectorResolution(self)

    def regionOfInterest(self):
        r"""
        regionOfInterest(IDetector self) -> RegionOfInterest const *
        virtual const RegionOfInterest* IDetector::regionOfInterest() const =0

        Returns region of interest if exists. 

        """
        return _libBornAgainCore.IDetector_regionOfInterest(self)

    def resetRegionOfInterest(self):
        r"""
        resetRegionOfInterest(IDetector self)
        virtual void IDetector::resetRegionOfInterest()=0

        Resets region of interest making whole detector plane available for the simulation. 

        """
        return _libBornAgainCore.IDetector_resetRegionOfInterest(self)

    def detectionProperties(self):
        r"""
        detectionProperties(IDetector self) -> DetectionProperties const &
        const DetectionProperties& IDetector::detectionProperties() const

        Returns detection properties. 

        """
        return _libBornAgainCore.IDetector_detectionProperties(self)

    def createDetectorIntensity(self, elements):
        r"""
        createDetectorIntensity(IDetector self, std::vector< SimulationElement,std::allocator< SimulationElement > > const & elements) -> IntensityData
        OutputData< double > * IDetector::createDetectorIntensity(const std::vector< SimulationElement > &elements) const

        Returns new intensity map with detector resolution applied. Map will be cropped to ROI if ROI is present. 

        """
        return _libBornAgainCore.IDetector_createDetectorIntensity(self, elements)

    def defaultAxesUnits(self):
        r"""
        defaultAxesUnits(IDetector self) -> AxesUnits
        virtual AxesUnits IDetector::defaultAxesUnits() const

        Return default axes units. 

        """
        return _libBornAgainCore.IDetector_defaultAxesUnits(self)

    def numberOfSimulationElements(self):
        r"""
        numberOfSimulationElements(IDetector self) -> size_t
        size_t IDetector::numberOfSimulationElements() const

        Returns number of simulation elements. 

        """
        return _libBornAgainCore.IDetector_numberOfSimulationElements(self)

    def getChildren(self):
        r"""
        getChildren(IDetector self) -> swig_dummy_type_const_inode_vector
        std::vector< const INode * > IDetector::getChildren() const override

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.IDetector_getChildren(self)

    def iterate(self, func, visit_masks=False):
        r"""
        iterate(IDetector self, std::function< void (IDetector::const_iterator) > func, bool visit_masks=False)
        void IDetector::iterate(std::function< void(const_iterator)> func, bool visit_masks=false) const

        """
        return _libBornAgainCore.IDetector_iterate(self, func, visit_masks)

# Register IDetector in _libBornAgainCore:
_libBornAgainCore.IDetector_swigregister(IDetector)

class IDetector2D(IDetector):
    r"""


    Abstract 2D detector interface.

    C++ includes: IDetector2D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        r"""
        clone(IDetector2D self) -> IDetector2D
        IDetector2D* IDetector2D::clone() const override=0

        """
        return _libBornAgainCore.IDetector2D_clone(self)
    __swig_destroy__ = _libBornAgainCore.delete_IDetector2D

    def setDetectorParameters(self, n_x, x_min, x_max, n_y, y_min, y_max):
        r"""
        setDetectorParameters(IDetector2D self, size_t n_x, double x_min, double x_max, size_t n_y, double y_min, double y_max)
        void IDetector2D::setDetectorParameters(size_t n_x, double x_min, double x_max, size_t n_y, double y_min, double y_max)

        Sets detector parameters using angle ranges. 

        """
        return _libBornAgainCore.IDetector2D_setDetectorParameters(self, n_x, x_min, x_max, n_y, y_min, y_max)

    def setDetectorAxes(self, axis0, axis1):
        r"""
        setDetectorAxes(IDetector2D self, IAxis axis0, IAxis axis1)
        void IDetector2D::setDetectorAxes(const IAxis &axis0, const IAxis &axis1)

        Sets detector parameters using axes. 

        """
        return _libBornAgainCore.IDetector2D_setDetectorAxes(self, axis0, axis1)

    def removeMasks(self):
        r"""
        removeMasks(IDetector2D self)
        void IDetector2D::removeMasks()

        Removes all masks from the detector. 

        """
        return _libBornAgainCore.IDetector2D_removeMasks(self)

    def detectorMask(self):
        r"""
        detectorMask(IDetector2D self) -> DetectorMask
        const DetectorMask * IDetector2D::detectorMask() const override

        Returns detector masks container. 

        """
        return _libBornAgainCore.IDetector2D_detectorMask(self)

    def addMask(self, shape, mask_value=True):
        r"""
        addMask(IDetector2D self, IShape2D shape, bool mask_value=True)
        void IDetector2D::addMask(const IShape2D &shape, bool mask_value=true)

        Adds mask of given shape to the stack of detector masks. The mask value 'true' means that the channel will be excluded from the simulation. The mask which is added last has priority.

        Parameters:
        -----------

        shape: 
        The shape of mask ( Rectangle,  Polygon,  Line,  Ellipse)

        mask_value: 
        The value of mask 

        """
        return _libBornAgainCore.IDetector2D_addMask(self, shape, mask_value)

    def maskAll(self):
        r"""
        maskAll(IDetector2D self)
        void IDetector2D::maskAll()

        Put the mask for all detector channels (i.e. exclude whole detector from the analysis) 

        """
        return _libBornAgainCore.IDetector2D_maskAll(self)

    def regionOfInterest(self):
        r"""
        regionOfInterest(IDetector2D self) -> RegionOfInterest const *
        const RegionOfInterest * IDetector2D::regionOfInterest() const override

        Returns region of interest if exists. 

        """
        return _libBornAgainCore.IDetector2D_regionOfInterest(self)

    def setRegionOfInterest(self, xlow, ylow, xup, yup):
        r"""
        setRegionOfInterest(IDetector2D self, double xlow, double ylow, double xup, double yup)
        void IDetector2D::setRegionOfInterest(double xlow, double ylow, double xup, double yup)

        Sets rectangular region of interest with lower left and upper right corners defined. 

        """
        return _libBornAgainCore.IDetector2D_setRegionOfInterest(self, xlow, ylow, xup, yup)

    def resetRegionOfInterest(self):
        r"""
        resetRegionOfInterest(IDetector2D self)
        void IDetector2D::resetRegionOfInterest() override

        Resets region of interest making whole detector plane available for the simulation. 

        """
        return _libBornAgainCore.IDetector2D_resetRegionOfInterest(self)

    def active_indices(self):
        r"""
        active_indices(IDetector2D self) -> std::vector< size_t,std::allocator< size_t > >
        std::vector< size_t > IDetector2D::active_indices() const

        Returns vector of unmasked detector indices. 

        """
        return _libBornAgainCore.IDetector2D_active_indices(self)

    def createPixel(self, index):
        r"""
        createPixel(IDetector2D self, size_t index) -> IPixel
        virtual IPixel* IDetector2D::createPixel(size_t index) const =0

        Create an  IPixel for the given  OutputData object and index. 

        """
        return _libBornAgainCore.IDetector2D_createPixel(self, index)

    def getIndexOfSpecular(self, beam):
        r"""
        getIndexOfSpecular(IDetector2D self, Beam beam) -> size_t
        virtual size_t IDetector2D::getIndexOfSpecular(const Beam &beam) const =0

        Returns index of pixel that contains the specular wavevector. If no pixel contains this specular wavevector, the number of pixels is returned. This corresponds to an overflow index. 

        """
        return _libBornAgainCore.IDetector2D_getIndexOfSpecular(self, beam)

# Register IDetector2D in _libBornAgainCore:
_libBornAgainCore.IDetector2D_swigregister(IDetector2D)

class SphericalDetector(IDetector2D):
    r"""


    A spherical detector with axes and resolution function.

    C++ includes: SphericalDetector.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SphericalDetector self) -> SphericalDetector
        __init__(SphericalDetector self, size_t n_phi, double phi_min, double phi_max, size_t n_alpha, double alpha_min, double alpha_max) -> SphericalDetector
        __init__(SphericalDetector self, SphericalDetector other) -> SphericalDetector
        SphericalDetector::SphericalDetector(const SphericalDetector &other)

        """
        _libBornAgainCore.SphericalDetector_swiginit(self, _libBornAgainCore.new_SphericalDetector(*args))

    def clone(self):
        r"""
        clone(SphericalDetector self) -> SphericalDetector
        SphericalDetector * SphericalDetector::clone() const override

        """
        return _libBornAgainCore.SphericalDetector_clone(self)

    def accept(self, visitor):
        r"""
        accept(SphericalDetector self, INodeVisitor visitor)
        void SphericalDetector::accept(INodeVisitor *visitor) const override

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.SphericalDetector_accept(self, visitor)
    __swig_destroy__ = _libBornAgainCore.delete_SphericalDetector

    def defaultAxesUnits(self):
        r"""
        defaultAxesUnits(SphericalDetector self) -> AxesUnits
        AxesUnits SphericalDetector::defaultAxesUnits() const override

        return default axes units 

        """
        return _libBornAgainCore.SphericalDetector_defaultAxesUnits(self)

# Register SphericalDetector in _libBornAgainCore:
_libBornAgainCore.SphericalDetector_swigregister(SphericalDetector)

class DetectorMask(object):
    r"""


    Collection of detector masks.

    C++ includes: DetectorMask.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DetectorMask self) -> DetectorMask
        __init__(DetectorMask self, DetectorMask other) -> DetectorMask
        DetectorMask::DetectorMask(const DetectorMask &other)

        """
        _libBornAgainCore.DetectorMask_swiginit(self, _libBornAgainCore.new_DetectorMask(*args))

    def addMask(self, shape, mask_value):
        r"""
        addMask(DetectorMask self, IShape2D shape, bool mask_value)
        void DetectorMask::addMask(const IShape2D &shape, bool mask_value)

        Add mask to the stack of detector masks. The value "true" means that the area will be excluded from the analysis.

        Parameters:
        -----------

        shape: 
        The shape of mask.

        mask_value: 
        The value of mask 

        """
        return _libBornAgainCore.DetectorMask_addMask(self, shape, mask_value)

    def initMaskData(self, *args):
        r"""
        initMaskData(DetectorMask self, IDetector2D detector)
        initMaskData(DetectorMask self, IntensityData data)
        void DetectorMask::initMaskData(const OutputData< double > &data)

        """
        return _libBornAgainCore.DetectorMask_initMaskData(self, *args)

    def isMasked(self, index):
        r"""
        isMasked(DetectorMask self, size_t index) -> bool
        bool DetectorMask::isMasked(size_t index) const

        """
        return _libBornAgainCore.DetectorMask_isMasked(self, index)

    def getMaskData(self):
        r"""
        getMaskData(DetectorMask self) -> OutputData< bool > const *
        const OutputData<bool>* DetectorMask::getMaskData() const

        """
        return _libBornAgainCore.DetectorMask_getMaskData(self)

    def createHistogram(self):
        r"""
        createHistogram(DetectorMask self) -> Histogram2D
        Histogram2D * DetectorMask::createHistogram() const

        """
        return _libBornAgainCore.DetectorMask_createHistogram(self)

    def removeMasks(self):
        r"""
        removeMasks(DetectorMask self)
        void DetectorMask::removeMasks()

        remove all masks and return object to initial state 

        """
        return _libBornAgainCore.DetectorMask_removeMasks(self)

    def hasMasks(self):
        r"""
        hasMasks(DetectorMask self) -> bool
        bool DetectorMask::hasMasks() const

        returns true if has masks 

        """
        return _libBornAgainCore.DetectorMask_hasMasks(self)

    def numberOfMaskedChannels(self):
        r"""
        numberOfMaskedChannels(DetectorMask self) -> int
        int DetectorMask::numberOfMaskedChannels() const

        """
        return _libBornAgainCore.DetectorMask_numberOfMaskedChannels(self)

    def numberOfMasks(self):
        r"""
        numberOfMasks(DetectorMask self) -> size_t
        size_t DetectorMask::numberOfMasks() const

        """
        return _libBornAgainCore.DetectorMask_numberOfMasks(self)

    def getMaskShape(self, mask_index, mask_value):
        r"""
        getMaskShape(DetectorMask self, size_t mask_index, bool & mask_value) -> IShape2D
        const IShape2D * DetectorMask::getMaskShape(size_t mask_index, bool &mask_value) const

        """
        return _libBornAgainCore.DetectorMask_getMaskShape(self, mask_index, mask_value)
    __swig_destroy__ = _libBornAgainCore.delete_DetectorMask

# Register DetectorMask in _libBornAgainCore:
_libBornAgainCore.DetectorMask_swigregister(DetectorMask)

class IsGISAXSDetector(SphericalDetector):
    r"""


    A spherical detector used for validation with IsGISAXS results.

    C++ includes: IsGISAXSDetector.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(IsGISAXSDetector self) -> IsGISAXSDetector
        __init__(IsGISAXSDetector self, size_t n_phi, double phi_min, double phi_max, size_t n_alpha, double alpha_min, double alpha_max) -> IsGISAXSDetector
        __init__(IsGISAXSDetector self, IsGISAXSDetector other) -> IsGISAXSDetector
        IsGISAXSDetector::IsGISAXSDetector(const IsGISAXSDetector &other)

        """
        _libBornAgainCore.IsGISAXSDetector_swiginit(self, _libBornAgainCore.new_IsGISAXSDetector(*args))

    def clone(self):
        r"""
        clone(IsGISAXSDetector self) -> IsGISAXSDetector
        IsGISAXSDetector * IsGISAXSDetector::clone() const override

        """
        return _libBornAgainCore.IsGISAXSDetector_clone(self)

    def accept(self, visitor):
        r"""
        accept(IsGISAXSDetector self, INodeVisitor visitor)
        void IsGISAXSDetector::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.IsGISAXSDetector_accept(self, visitor)
    __swig_destroy__ = _libBornAgainCore.delete_IsGISAXSDetector

# Register IsGISAXSDetector in _libBornAgainCore:
_libBornAgainCore.IsGISAXSDetector_swigregister(IsGISAXSDetector)

class RectangularDetector(IDetector2D):
    r"""


    A flat rectangular detector with axes and resolution function.

    C++ includes: RectangularDetector.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GENERIC = _libBornAgainCore.RectangularDetector_GENERIC
    
    PERPENDICULAR_TO_SAMPLE = _libBornAgainCore.RectangularDetector_PERPENDICULAR_TO_SAMPLE
    
    PERPENDICULAR_TO_DIRECT_BEAM = _libBornAgainCore.RectangularDetector_PERPENDICULAR_TO_DIRECT_BEAM
    
    PERPENDICULAR_TO_REFLECTED_BEAM = _libBornAgainCore.RectangularDetector_PERPENDICULAR_TO_REFLECTED_BEAM
    
    PERPENDICULAR_TO_REFLECTED_BEAM_DPOS = _libBornAgainCore.RectangularDetector_PERPENDICULAR_TO_REFLECTED_BEAM_DPOS
    

    def __init__(self, *args):
        r"""
        __init__(RectangularDetector self, size_t nxbins, double width, size_t nybins, double height) -> RectangularDetector
        __init__(RectangularDetector self, RectangularDetector other) -> RectangularDetector
        RectangularDetector::RectangularDetector(const RectangularDetector &other)

        """
        _libBornAgainCore.RectangularDetector_swiginit(self, _libBornAgainCore.new_RectangularDetector(*args))

    def clone(self):
        r"""
        clone(RectangularDetector self) -> RectangularDetector
        RectangularDetector * RectangularDetector::clone() const override

        """
        return _libBornAgainCore.RectangularDetector_clone(self)

    def accept(self, visitor):
        r"""
        accept(RectangularDetector self, INodeVisitor visitor)
        void RectangularDetector::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.RectangularDetector_accept(self, visitor)
    __swig_destroy__ = _libBornAgainCore.delete_RectangularDetector

    def init(self, beam):
        r"""
        init(RectangularDetector self, Beam beam)
        void RectangularDetector::init(const Beam &beam) override

        Inits detector with the beam settings. 

        """
        return _libBornAgainCore.RectangularDetector_init(self, beam)

    def setPosition(self, *args):
        r"""
        setPosition(RectangularDetector self, kvector_t normal_to_detector, double u0, double v0, kvector_t direction=kvector_t(0.0, -1.0, 0.0))
        void RectangularDetector::setPosition(const kvector_t normal_to_detector, double u0, double v0, const kvector_t direction=kvector_t(0.0, -1.0, 0.0))

        """
        return _libBornAgainCore.RectangularDetector_setPosition(self, *args)

    def setPerpendicularToSampleX(self, distance, u0, v0):
        r"""
        setPerpendicularToSampleX(RectangularDetector self, double distance, double u0, double v0)
        void RectangularDetector::setPerpendicularToSampleX(double distance, double u0, double v0)

        """
        return _libBornAgainCore.RectangularDetector_setPerpendicularToSampleX(self, distance, u0, v0)

    def setPerpendicularToDirectBeam(self, distance, u0, v0):
        r"""
        setPerpendicularToDirectBeam(RectangularDetector self, double distance, double u0, double v0)
        void RectangularDetector::setPerpendicularToDirectBeam(double distance, double u0, double v0)

        """
        return _libBornAgainCore.RectangularDetector_setPerpendicularToDirectBeam(self, distance, u0, v0)

    def setPerpendicularToReflectedBeam(self, distance, u0=0.0, v0=0.0):
        r"""
        setPerpendicularToReflectedBeam(RectangularDetector self, double distance, double u0=0.0, double v0=0.0)
        void RectangularDetector::setPerpendicularToReflectedBeam(double distance, double u0=0.0, double v0=0.0)

        """
        return _libBornAgainCore.RectangularDetector_setPerpendicularToReflectedBeam(self, distance, u0, v0)

    def setDirectBeamPosition(self, u0, v0):
        r"""
        setDirectBeamPosition(RectangularDetector self, double u0, double v0)
        void RectangularDetector::setDirectBeamPosition(double u0, double v0)

        """
        return _libBornAgainCore.RectangularDetector_setDirectBeamPosition(self, u0, v0)

    def getWidth(self):
        r"""
        getWidth(RectangularDetector self) -> double
        double RectangularDetector::getWidth() const

        """
        return _libBornAgainCore.RectangularDetector_getWidth(self)

    def getHeight(self):
        r"""
        getHeight(RectangularDetector self) -> double
        double RectangularDetector::getHeight() const

        """
        return _libBornAgainCore.RectangularDetector_getHeight(self)

    def getNbinsX(self):
        r"""
        getNbinsX(RectangularDetector self) -> size_t
        size_t RectangularDetector::getNbinsX() const

        """
        return _libBornAgainCore.RectangularDetector_getNbinsX(self)

    def getNbinsY(self):
        r"""
        getNbinsY(RectangularDetector self) -> size_t
        size_t RectangularDetector::getNbinsY() const

        """
        return _libBornAgainCore.RectangularDetector_getNbinsY(self)

    def getNormalVector(self):
        r"""
        getNormalVector(RectangularDetector self) -> kvector_t
        kvector_t RectangularDetector::getNormalVector() const

        """
        return _libBornAgainCore.RectangularDetector_getNormalVector(self)

    def getU0(self):
        r"""
        getU0(RectangularDetector self) -> double
        double RectangularDetector::getU0() const

        """
        return _libBornAgainCore.RectangularDetector_getU0(self)

    def getV0(self):
        r"""
        getV0(RectangularDetector self) -> double
        double RectangularDetector::getV0() const

        """
        return _libBornAgainCore.RectangularDetector_getV0(self)

    def getDirectionVector(self):
        r"""
        getDirectionVector(RectangularDetector self) -> kvector_t
        kvector_t RectangularDetector::getDirectionVector() const

        """
        return _libBornAgainCore.RectangularDetector_getDirectionVector(self)

    def getDistance(self):
        r"""
        getDistance(RectangularDetector self) -> double
        double RectangularDetector::getDistance() const

        """
        return _libBornAgainCore.RectangularDetector_getDistance(self)

    def getDirectBeamU0(self):
        r"""
        getDirectBeamU0(RectangularDetector self) -> double
        double RectangularDetector::getDirectBeamU0() const

        """
        return _libBornAgainCore.RectangularDetector_getDirectBeamU0(self)

    def getDirectBeamV0(self):
        r"""
        getDirectBeamV0(RectangularDetector self) -> double
        double RectangularDetector::getDirectBeamV0() const

        """
        return _libBornAgainCore.RectangularDetector_getDirectBeamV0(self)

    def getDetectorArrangment(self):
        r"""
        getDetectorArrangment(RectangularDetector self) -> RectangularDetector::EDetectorArrangement
        RectangularDetector::EDetectorArrangement RectangularDetector::getDetectorArrangment() const

        """
        return _libBornAgainCore.RectangularDetector_getDetectorArrangment(self)

    def defaultAxesUnits(self):
        r"""
        defaultAxesUnits(RectangularDetector self) -> AxesUnits
        AxesUnits RectangularDetector::defaultAxesUnits() const override

        return default axes units 

        """
        return _libBornAgainCore.RectangularDetector_defaultAxesUnits(self)

    def regionOfInterestPixel(self):
        r"""
        regionOfInterestPixel(RectangularDetector self) -> RectangularPixel *
        RectangularPixel * RectangularDetector::regionOfInterestPixel() const

        """
        return _libBornAgainCore.RectangularDetector_regionOfInterestPixel(self)

# Register RectangularDetector in _libBornAgainCore:
_libBornAgainCore.RectangularDetector_swigregister(RectangularDetector)

class IDetectorResolution(ICloneable, INode):
    r"""


    Interface for detector resolution algorithms

    C++ includes: IDetectorResolution.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IDetectorResolution

    def applyDetectorResolution(self, p_intensity_map):
        r"""
        applyDetectorResolution(IDetectorResolution self, IntensityData p_intensity_map)
        virtual void IDetectorResolution::applyDetectorResolution(OutputData< double > *p_intensity_map) const =0

        Apply the resolution function to the intensity data. 

        """
        return _libBornAgainCore.IDetectorResolution_applyDetectorResolution(self, p_intensity_map)

    def clone(self):
        r"""
        clone(IDetectorResolution self) -> IDetectorResolution
        virtual IDetectorResolution* IDetectorResolution::clone() const =0

        """
        return _libBornAgainCore.IDetectorResolution_clone(self)

# Register IDetectorResolution in _libBornAgainCore:
_libBornAgainCore.IDetectorResolution_swigregister(IDetectorResolution)

class IResolutionFunction2D(ICloneable, INode):
    r"""


    Interface providing two-dimensional resolution function.

    C++ includes: IResolutionFunction2D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IResolutionFunction2D

    def evaluateCDF(self, x, y):
        r"""
        evaluateCDF(IResolutionFunction2D self, double x, double y) -> double
        virtual double IResolutionFunction2D::evaluateCDF(double x, double y) const =0

        """
        return _libBornAgainCore.IResolutionFunction2D_evaluateCDF(self, x, y)

    def clone(self):
        r"""
        clone(IResolutionFunction2D self) -> IResolutionFunction2D
        virtual IResolutionFunction2D* IResolutionFunction2D::clone() const =0

        """
        return _libBornAgainCore.IResolutionFunction2D_clone(self)

# Register IResolutionFunction2D in _libBornAgainCore:
_libBornAgainCore.IResolutionFunction2D_swigregister(IResolutionFunction2D)

class ResolutionFunction2DGaussian(IResolutionFunction2D):
    r"""


    Simple gaussian two-dimensional resolution function.

    C++ includes: ResolutionFunction2DGaussian.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sigma_x, sigma_y):
        r"""
        __init__(ResolutionFunction2DGaussian self, double sigma_x, double sigma_y) -> ResolutionFunction2DGaussian
        ResolutionFunction2DGaussian::ResolutionFunction2DGaussian(double sigma_x, double sigma_y)

        """
        _libBornAgainCore.ResolutionFunction2DGaussian_swiginit(self, _libBornAgainCore.new_ResolutionFunction2DGaussian(sigma_x, sigma_y))

    def evaluateCDF(self, x, y):
        r"""
        evaluateCDF(ResolutionFunction2DGaussian self, double x, double y) -> double
        double ResolutionFunction2DGaussian::evaluateCDF(double x, double y) const

        """
        return _libBornAgainCore.ResolutionFunction2DGaussian_evaluateCDF(self, x, y)

    def clone(self):
        r"""
        clone(ResolutionFunction2DGaussian self) -> ResolutionFunction2DGaussian
        ResolutionFunction2DGaussian* ResolutionFunction2DGaussian::clone() const

        """
        return _libBornAgainCore.ResolutionFunction2DGaussian_clone(self)

    def accept(self, visitor):
        r"""
        accept(ResolutionFunction2DGaussian self, INodeVisitor visitor)
        void ResolutionFunction2DGaussian::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.ResolutionFunction2DGaussian_accept(self, visitor)

    def getSigmaX(self):
        r"""
        getSigmaX(ResolutionFunction2DGaussian self) -> double
        double ResolutionFunction2DGaussian::getSigmaX() const

        """
        return _libBornAgainCore.ResolutionFunction2DGaussian_getSigmaX(self)

    def getSigmaY(self):
        r"""
        getSigmaY(ResolutionFunction2DGaussian self) -> double
        double ResolutionFunction2DGaussian::getSigmaY() const

        """
        return _libBornAgainCore.ResolutionFunction2DGaussian_getSigmaY(self)
    __swig_destroy__ = _libBornAgainCore.delete_ResolutionFunction2DGaussian

# Register ResolutionFunction2DGaussian in _libBornAgainCore:
_libBornAgainCore.ResolutionFunction2DGaussian_swigregister(ResolutionFunction2DGaussian)

class ScanResolution(ICloneable):
    r"""


    Container for reflectivity resolution data.

    C++ includes: ScanResolution.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_ScanResolution

    @staticmethod
    def scanRelativeResolution(*args):
        r"""
        scanRelativeResolution(RangedDistribution const & distr, double stddev) -> ScanResolution
        scanRelativeResolution(RangedDistribution const & distr, vdouble1d_t stddevs) -> ScanResolution
        """
        return _libBornAgainCore.ScanResolution_scanRelativeResolution(*args)

    @staticmethod
    def scanAbsoluteResolution(*args):
        r"""
        scanAbsoluteResolution(RangedDistribution const & distr, double stddev) -> ScanResolution
        scanAbsoluteResolution(RangedDistribution const & distr, vdouble1d_t stddevs) -> ScanResolution
        """
        return _libBornAgainCore.ScanResolution_scanAbsoluteResolution(*args)

# Register ScanResolution in _libBornAgainCore:
_libBornAgainCore.ScanResolution_swigregister(ScanResolution)

def ScanResolution_scanRelativeResolution(*args):
    r"""
    ScanResolution_scanRelativeResolution(RangedDistribution const & distr, double stddev) -> ScanResolution
    ScanResolution_scanRelativeResolution(RangedDistribution const & distr, vdouble1d_t stddevs) -> ScanResolution
    """
    return _libBornAgainCore.ScanResolution_scanRelativeResolution(*args)

def ScanResolution_scanAbsoluteResolution(*args):
    r"""
    ScanResolution_scanAbsoluteResolution(RangedDistribution const & distr, double stddev) -> ScanResolution
    ScanResolution_scanAbsoluteResolution(RangedDistribution const & distr, vdouble1d_t stddevs) -> ScanResolution
    """
    return _libBornAgainCore.ScanResolution_scanAbsoluteResolution(*args)

class IHistogram(object):
    r"""


    Base class for 1D and 2D histograms holding values of double type.

    C++ includes: IHistogram.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    INTEGRAL = _libBornAgainCore.IHistogram_INTEGRAL
    
    AVERAGE = _libBornAgainCore.IHistogram_AVERAGE
    
    STANDARD_ERROR = _libBornAgainCore.IHistogram_STANDARD_ERROR
    
    NENTRIES = _libBornAgainCore.IHistogram_NENTRIES
    
    __swig_destroy__ = _libBornAgainCore.delete_IHistogram

    def clone(self):
        r"""
        clone(IHistogram self) -> IHistogram
        virtual IHistogram* IHistogram::clone() const =0

        """
        return _libBornAgainCore.IHistogram_clone(self)

    def getRank(self):
        r"""
        getRank(IHistogram self) -> size_t
        virtual size_t IHistogram::getRank() const =0

        Returns number of histogram dimensions. 

        """
        return _libBornAgainCore.IHistogram_getRank(self)

    def getTotalNumberOfBins(self):
        r"""
        getTotalNumberOfBins(IHistogram self) -> size_t
        size_t IHistogram::getTotalNumberOfBins() const

        Returns total number of histogram bins. For 2D histograms the result will be the product of bin numbers along X and Y axes. 

        """
        return _libBornAgainCore.IHistogram_getTotalNumberOfBins(self)

    def getXaxis(self):
        r"""
        getXaxis(IHistogram self) -> IAxis
        const IAxis & IHistogram::getXaxis() const

        returns x-axis 

        """
        return _libBornAgainCore.IHistogram_getXaxis(self)

    def getYaxis(self):
        r"""
        getYaxis(IHistogram self) -> IAxis
        const IAxis & IHistogram::getYaxis() const

        returns y-axis for 2D histograms 

        """
        return _libBornAgainCore.IHistogram_getYaxis(self)

    def getXmin(self):
        r"""
        getXmin(IHistogram self) -> double
        double IHistogram::getXmin() const

        Returns x-axis min (lower edge of first bin). 

        """
        return _libBornAgainCore.IHistogram_getXmin(self)

    def getXmax(self):
        r"""
        getXmax(IHistogram self) -> double
        double IHistogram::getXmax() const

        Returns x-axis max (upper edge of last bin). 

        """
        return _libBornAgainCore.IHistogram_getXmax(self)

    def getNbinsX(self):
        r"""
        getNbinsX(IHistogram self) -> size_t
        size_t IHistogram::getNbinsX() const

        Returns number of bins on x-axis. 

        """
        return _libBornAgainCore.IHistogram_getNbinsX(self)

    def getYmin(self):
        r"""
        getYmin(IHistogram self) -> double
        double IHistogram::getYmin() const

        Returns y-axis min (lower edge of first bin) for 2D histograms. 

        """
        return _libBornAgainCore.IHistogram_getYmin(self)

    def getYmax(self):
        r"""
        getYmax(IHistogram self) -> double
        double IHistogram::getYmax() const

        Returns y-axis max (upper edge of last bin) for 2D histograms. 

        """
        return _libBornAgainCore.IHistogram_getYmax(self)

    def getNbinsY(self):
        r"""
        getNbinsY(IHistogram self) -> size_t
        size_t IHistogram::getNbinsY() const

        Returns number of bins on y-axis. 

        """
        return _libBornAgainCore.IHistogram_getNbinsY(self)

    def getGlobalBin(self, binx, biny=0):
        r"""
        getGlobalBin(IHistogram self, size_t binx, size_t biny=0) -> size_t
        size_t IHistogram::getGlobalBin(size_t binx, size_t biny=0) const

        Returns global bin index for given axes indices. For 1D histogram the global bin index coinside with x-axis index.

        Parameters:
        -----------

        binx: 
        x-axis bin index

        biny: 
        y-axis bin index (for 2D histograms)

        The global bin index 

        """
        return _libBornAgainCore.IHistogram_getGlobalBin(self, binx, biny)

    def findGlobalBin(self, x, y):
        r"""
        findGlobalBin(IHistogram self, double x, double y) -> size_t
        size_t IHistogram::findGlobalBin(double x, double y) const

        Returns closest global bin index for given axes coordinates. For 1D.

        Parameters:
        -----------

        x: 
        Value on x-axis

        y: 
        Value on y-axis (for 2D histograms)

        Closest global bin index 

        """
        return _libBornAgainCore.IHistogram_findGlobalBin(self, x, y)

    def getXaxisIndex(self, i):
        r"""
        getXaxisIndex(IHistogram self, size_t i) -> size_t
        size_t IHistogram::getXaxisIndex(size_t i) const

        Returns x-axis bin index for given globalbin. For 1D histograms returned value conicide with globalbin value. 

        """
        return _libBornAgainCore.IHistogram_getXaxisIndex(self, i)

    def getYaxisIndex(self, i):
        r"""
        getYaxisIndex(IHistogram self, size_t i) -> size_t
        size_t IHistogram::getYaxisIndex(size_t i) const

        Returns y-axis bin index for given globalbin (for 2D histograms). 

        """
        return _libBornAgainCore.IHistogram_getYaxisIndex(self, i)

    def getXaxisValue(self, i):
        r"""
        getXaxisValue(IHistogram self, size_t i) -> double
        double IHistogram::getXaxisValue(size_t i)

        Returns the value on x-axis corresponding to the global bin index.

        Parameters:
        -----------

        globalbin: 
        The global bin index

        The center of corresponding bin of the axis 

        """
        return _libBornAgainCore.IHistogram_getXaxisValue(self, i)

    def getYaxisValue(self, i):
        r"""
        getYaxisValue(IHistogram self, size_t i) -> double
        double IHistogram::getYaxisValue(size_t i)

        Returns the value on y-axis corresponding to the 2D histogram global bin index.

        Parameters:
        -----------

        globalbin: 
        The global bin index

        The center of corresponding bin of the axis 

        """
        return _libBornAgainCore.IHistogram_getYaxisValue(self, i)

    def getData(self, *args):
        r"""
        getData(IHistogram self) -> OutputData< CumulativeValue > const
        getData(IHistogram self) -> OutputData< CumulativeValue > &
        OutputData<CumulativeValue>& IHistogram::getData()

        """
        return _libBornAgainCore.IHistogram_getData(self, *args)

    def getBinContent(self, *args):
        r"""
        getBinContent(IHistogram self, size_t i) -> double
        getBinContent(IHistogram self, size_t binx, size_t biny) -> double
        double IHistogram::getBinContent(size_t binx, size_t biny) const

        Returns content (accumulated value) of the 2D histogram bin with given indices.

        Parameters:
        -----------

        binx: 
        x-axis bin index

        biny: 
        y-axis bin index

        The value accumulated by the bin (integral) 

        """
        return _libBornAgainCore.IHistogram_getBinContent(self, *args)

    def setBinContent(self, i, value):
        r"""
        setBinContent(IHistogram self, size_t i, double value)
        void IHistogram::setBinContent(size_t i, double value)

        Sets content of the bin corresponding to the globalbin number. 

        """
        return _libBornAgainCore.IHistogram_setBinContent(self, i, value)

    def addBinContent(self, i, value):
        r"""
        addBinContent(IHistogram self, size_t i, double value)
        void IHistogram::addBinContent(size_t i, double value)

        Add the value to the bin. 

        """
        return _libBornAgainCore.IHistogram_addBinContent(self, i, value)

    def getBinError(self, *args):
        r"""
        getBinError(IHistogram self, size_t i) -> double
        getBinError(IHistogram self, size_t binx, size_t biny) -> double
        double IHistogram::getBinError(size_t binx, size_t biny) const

        Returns error of the bin with given indices (for 2D histograms). 

        """
        return _libBornAgainCore.IHistogram_getBinError(self, *args)

    def getBinAverage(self, *args):
        r"""
        getBinAverage(IHistogram self, size_t i) -> double
        getBinAverage(IHistogram self, size_t binx, size_t biny) -> double
        double IHistogram::getBinAverage(size_t binx, size_t biny) const

        Returns average value of the bin with given indices (for 2D histograms). 

        """
        return _libBornAgainCore.IHistogram_getBinAverage(self, *args)

    def getBinNumberOfEntries(self, *args):
        r"""
        getBinNumberOfEntries(IHistogram self, size_t i) -> int
        getBinNumberOfEntries(IHistogram self, size_t binx, size_t biny) -> int
        int IHistogram::getBinNumberOfEntries(size_t binx, size_t biny) const

        Returns number of entries in the bin with given indices (for 2D histograms). 

        """
        return _libBornAgainCore.IHistogram_getBinNumberOfEntries(self, *args)

    def getMaximum(self):
        r"""
        getMaximum(IHistogram self) -> double
        double IHistogram::getMaximum() const

        Returns histogram maximum value (maximum of  getBinContent() over all bins) 

        """
        return _libBornAgainCore.IHistogram_getMaximum(self)

    def getMaximumBinIndex(self):
        r"""
        getMaximumBinIndex(IHistogram self) -> size_t
        size_t IHistogram::getMaximumBinIndex() const

        Returns globalbin index with maximum content. 

        """
        return _libBornAgainCore.IHistogram_getMaximumBinIndex(self)

    def getMinimum(self):
        r"""
        getMinimum(IHistogram self) -> double
        double IHistogram::getMinimum() const

        Returns histogram minimum value (minimum of  getBinContent() over all bins) 

        """
        return _libBornAgainCore.IHistogram_getMinimum(self)

    def getMinimumBinIndex(self):
        r"""
        getMinimumBinIndex(IHistogram self) -> size_t
        size_t IHistogram::getMinimumBinIndex() const

        Returns globalbin index with minimum content. 

        """
        return _libBornAgainCore.IHistogram_getMinimumBinIndex(self)

    def scale(self, value):
        r"""
        scale(IHistogram self, double value)
        void IHistogram::scale(double value)

        Multiply this histogram (every bin content value) by a constant. 

        """
        return _libBornAgainCore.IHistogram_scale(self, value)

    def integral(self):
        r"""
        integral(IHistogram self) -> double
        double IHistogram::integral() const

        Returns integral of bins content (computed as a sum of all bin content). 

        """
        return _libBornAgainCore.IHistogram_integral(self)

    def array(self, *args):
        r"""
        array(IHistogram self, IHistogram::DataType dataType=DataType::INTEGRAL) -> PyObject
        PyObject * IHistogram::array(DataType dataType=DataType::INTEGRAL) const

        Returns numpy array with bin content (accumulated values). 

        """
        return _libBornAgainCore.IHistogram_array(self, *args)

    def getArrayObsolete(self, *args):
        r"""
        getArrayObsolete(IHistogram self, IHistogram::DataType dataType=DataType::INTEGRAL) -> PyObject
        PyObject * IHistogram::getArray(DataType dataType=DataType::INTEGRAL) const

        Deprecated
        Use  array() instead. 

        """
        return _libBornAgainCore.IHistogram_getArrayObsolete(self, *args)

    def reset(self):
        r"""
        reset(IHistogram self)
        void IHistogram::reset()

        Reset histogram content (axes remains) 

        """
        return _libBornAgainCore.IHistogram_reset(self)

    @staticmethod
    def createHistogram(source):
        r"""createHistogram(IntensityData source) -> IHistogram"""
        return _libBornAgainCore.IHistogram_createHistogram(source)

    @staticmethod
    def createFrom(*args):
        r"""
        createFrom(std::string const & filename) -> IHistogram
        createFrom(vdouble2d_t data) -> IHistogram
        """
        return _libBornAgainCore.IHistogram_createFrom(*args)

    def createOutputData(self, *args):
        r"""
        createOutputData(IHistogram self, IHistogram::DataType dataType=DataType::INTEGRAL) -> IntensityData
        OutputData< double > * IHistogram::createOutputData(DataType dataType=DataType::INTEGRAL) const

        creates new  OutputData with histogram's shape and values corresponding to DataType

        creates new  OutputData with histogram's shape and put there values corresponding to DataType 

        """
        return _libBornAgainCore.IHistogram_createOutputData(self, *args)

    def hasSameShape(self, other):
        r"""
        hasSameShape(IHistogram self, IHistogram other) -> bool
        bool IHistogram::hasSameShape(const IHistogram &other) const

        Returns true if objects a) have same dimensions b) bin boundaries of axes coincide. 

        """
        return _libBornAgainCore.IHistogram_hasSameShape(self, other)

    def hasSameDimensions(self, other):
        r"""
        hasSameDimensions(IHistogram self, IHistogram other) -> bool
        bool IHistogram::hasSameDimensions(const IHistogram &other) const

        Returns true if object have same rank and number of axes bins. 

        """
        return _libBornAgainCore.IHistogram_hasSameDimensions(self, other)

    def __iadd__(self, right):
        r"""__iadd__(IHistogram self, IHistogram right) -> IHistogram"""
        return _libBornAgainCore.IHistogram___iadd__(self, right)

    def relativeDifferenceHistogram(self, rhs):
        r"""
        relativeDifferenceHistogram(IHistogram self, IHistogram rhs) -> IHistogram
        IHistogram * IHistogram::relativeDifferenceHistogram(const IHistogram &rhs)

        returns histogram representing relative difference of two histograms. 

        """
        return _libBornAgainCore.IHistogram_relativeDifferenceHistogram(self, rhs)

    def save(self, filename):
        r"""
        save(IHistogram self, std::string const & filename)
        void IHistogram::save(const std::string &filename)

        Saves histogram in file Following formats are available: *.txt, *.tif, *.int (*.txt.gz, *.tif.gz, *.int.gz) 

        """
        return _libBornAgainCore.IHistogram_save(self, filename)

    def load(self, filename):
        r"""
        load(IHistogram self, std::string const & filename)
        void IHistogram::load(const std::string &filename)

        Loads histogram from file, the shape of array in file should match Following formats are available: *.txt, *.tif, *.int (*.txt.gz, *.tif.gz, *.int.gz) Only bin content will be loaded, histogram axes remain the same. 

        """
        return _libBornAgainCore.IHistogram_load(self, filename)

    @deprecated("Deprecated. Use array() instead.")
    def getArray(self):
        return self.getArrayObsolete()


# Register IHistogram in _libBornAgainCore:
_libBornAgainCore.IHistogram_swigregister(IHistogram)

def IHistogram_createHistogram(source):
    r"""IHistogram_createHistogram(IntensityData source) -> IHistogram"""
    return _libBornAgainCore.IHistogram_createHistogram(source)

def IHistogram_createFrom(*args):
    r"""
    IHistogram_createFrom(std::string const & filename) -> IHistogram
    IHistogram_createFrom(vdouble2d_t data) -> IHistogram
    """
    return _libBornAgainCore.IHistogram_createFrom(*args)

class IIntensityFunction(object):
    r"""


    Interface for applying arbitrary function to the measured intensity.

    C++ includes: IIntensityFunction.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IIntensityFunction

    def clone(self):
        r"""
        clone(IIntensityFunction self) -> IIntensityFunction
        virtual IIntensityFunction* IIntensityFunction::clone() const =0

        """
        return _libBornAgainCore.IIntensityFunction_clone(self)

    def evaluate(self, value):
        r"""
        evaluate(IIntensityFunction self, double value) -> double
        virtual double IIntensityFunction::evaluate(double value) const =0

        """
        return _libBornAgainCore.IIntensityFunction_evaluate(self, value)

# Register IIntensityFunction in _libBornAgainCore:
_libBornAgainCore.IIntensityFunction_swigregister(IIntensityFunction)

class IntensityFunctionLog(IIntensityFunction):
    r"""


    Algorithm for applying log function to the measured intensity.

    C++ includes: IIntensityFunction.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def clone(self):
        r"""
        clone(IntensityFunctionLog self) -> IntensityFunctionLog
        IntensityFunctionLog * IntensityFunctionLog::clone() const

        """
        return _libBornAgainCore.IntensityFunctionLog_clone(self)

    def evaluate(self, value):
        r"""
        evaluate(IntensityFunctionLog self, double value) -> double
        double IntensityFunctionLog::evaluate(double value) const

        """
        return _libBornAgainCore.IntensityFunctionLog_evaluate(self, value)

    def __init__(self):
        r"""
        __init__(IntensityFunctionLog self) -> IntensityFunctionLog


        Algorithm for applying log function to the measured intensity.

        C++ includes: IIntensityFunction.h

        """
        _libBornAgainCore.IntensityFunctionLog_swiginit(self, _libBornAgainCore.new_IntensityFunctionLog())
    __swig_destroy__ = _libBornAgainCore.delete_IntensityFunctionLog

# Register IntensityFunctionLog in _libBornAgainCore:
_libBornAgainCore.IntensityFunctionLog_swigregister(IntensityFunctionLog)

class IntensityFunctionSqrt(IIntensityFunction):
    r"""


    Algorithm for applying sqrt function to the measured intensity.

    C++ includes: IIntensityFunction.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def clone(self):
        r"""
        clone(IntensityFunctionSqrt self) -> IntensityFunctionSqrt
        IntensityFunctionSqrt * IntensityFunctionSqrt::clone() const

        """
        return _libBornAgainCore.IntensityFunctionSqrt_clone(self)

    def evaluate(self, value):
        r"""
        evaluate(IntensityFunctionSqrt self, double value) -> double
        double IntensityFunctionSqrt::evaluate(double value) const

        """
        return _libBornAgainCore.IntensityFunctionSqrt_evaluate(self, value)

    def __init__(self):
        r"""
        __init__(IntensityFunctionSqrt self) -> IntensityFunctionSqrt


        Algorithm for applying sqrt function to the measured intensity.

        C++ includes: IIntensityFunction.h

        """
        _libBornAgainCore.IntensityFunctionSqrt_swiginit(self, _libBornAgainCore.new_IntensityFunctionSqrt())
    __swig_destroy__ = _libBornAgainCore.delete_IntensityFunctionSqrt

# Register IntensityFunctionSqrt in _libBornAgainCore:
_libBornAgainCore.IntensityFunctionSqrt_swigregister(IntensityFunctionSqrt)

class AxesUnits(object):
    r"""


    Wrapper for detector axes units, required for a better representation of detector axes units in python

    C++ includes: IUnitConverter.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    DEFAULT = _libBornAgainCore.AxesUnits_DEFAULT
    
    NBINS = _libBornAgainCore.AxesUnits_NBINS
    
    RADIANS = _libBornAgainCore.AxesUnits_RADIANS
    
    DEGREES = _libBornAgainCore.AxesUnits_DEGREES
    
    MM = _libBornAgainCore.AxesUnits_MM
    
    QSPACE = _libBornAgainCore.AxesUnits_QSPACE
    
    QXQY = _libBornAgainCore.AxesUnits_QXQY
    
    RQ4 = _libBornAgainCore.AxesUnits_RQ4
    
    __swig_destroy__ = _libBornAgainCore.delete_AxesUnits

# Register AxesUnits in _libBornAgainCore:
_libBornAgainCore.AxesUnits_swigregister(AxesUnits)

class IUnitConverter(ICloneable):
    r"""


    Interface to provide axis translations to different units for simulation output

    C++ includes: IUnitConverter.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IUnitConverter

    def clone(self):
        r"""
        clone(IUnitConverter self) -> IUnitConverter
        virtual IUnitConverter* IUnitConverter::clone() const =0

        """
        return _libBornAgainCore.IUnitConverter_clone(self)

    def dimension(self):
        r"""
        dimension(IUnitConverter self) -> size_t
        virtual size_t IUnitConverter::dimension() const =0

        """
        return _libBornAgainCore.IUnitConverter_dimension(self)

    def calculateMin(self, i_axis, units_type):
        r"""
        calculateMin(IUnitConverter self, size_t i_axis, AxesUnits units_type) -> double
        virtual double IUnitConverter::calculateMin(size_t i_axis, AxesUnits units_type) const =0

        """
        return _libBornAgainCore.IUnitConverter_calculateMin(self, i_axis, units_type)

    def calculateMax(self, i_axis, units_type):
        r"""
        calculateMax(IUnitConverter self, size_t i_axis, AxesUnits units_type) -> double
        virtual double IUnitConverter::calculateMax(size_t i_axis, AxesUnits units_type) const =0

        """
        return _libBornAgainCore.IUnitConverter_calculateMax(self, i_axis, units_type)

    def axisSize(self, i_axis):
        r"""
        axisSize(IUnitConverter self, size_t i_axis) -> size_t
        virtual size_t IUnitConverter::axisSize(size_t i_axis) const =0

        """
        return _libBornAgainCore.IUnitConverter_axisSize(self, i_axis)

    def axisName(self, *args):
        r"""
        axisName(IUnitConverter self, size_t i_axis, AxesUnits units_type=AxesUnits::DEFAULT) -> std::string
        std::string IUnitConverter::axisName(size_t i_axis, AxesUnits units_type=AxesUnits::DEFAULT) const

        """
        return _libBornAgainCore.IUnitConverter_axisName(self, *args)

    def availableUnits(self):
        r"""
        availableUnits(IUnitConverter self) -> std::vector< AxesUnits,std::allocator< AxesUnits > >
        virtual std::vector<AxesUnits> IUnitConverter::availableUnits() const =0

        """
        return _libBornAgainCore.IUnitConverter_availableUnits(self)

    def defaultUnits(self):
        r"""
        defaultUnits(IUnitConverter self) -> AxesUnits
        virtual AxesUnits IUnitConverter::defaultUnits() const =0

        """
        return _libBornAgainCore.IUnitConverter_defaultUnits(self)

    def substituteDefaultUnits(self, units):
        r"""
        substituteDefaultUnits(IUnitConverter self, AxesUnits units) -> AxesUnits
        AxesUnits IUnitConverter::substituteDefaultUnits(AxesUnits units) const

        """
        return _libBornAgainCore.IUnitConverter_substituteDefaultUnits(self, units)

# Register IUnitConverter in _libBornAgainCore:
_libBornAgainCore.IUnitConverter_swigregister(IUnitConverter)

class Histogram1D(IHistogram):
    r"""


    One dimensional histogram.

    C++ includes: Histogram1D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Histogram1D self, int nbinsx, double xlow, double xup) -> Histogram1D
        __init__(Histogram1D self, int nbinsx, vdouble1d_t xbins) -> Histogram1D
        __init__(Histogram1D self, IAxis axis) -> Histogram1D
        __init__(Histogram1D self, IntensityData data) -> Histogram1D
        Histogram1D::Histogram1D(const OutputData< double > &data)

        Constructor for 1D histograms from basic  OutputData object. 

        """
        _libBornAgainCore.Histogram1D_swiginit(self, _libBornAgainCore.new_Histogram1D(*args))

    def clone(self):
        r"""
        clone(Histogram1D self) -> Histogram1D
        Histogram1D * Histogram1D::clone() const

        Returns clone of other histogram. 

        """
        return _libBornAgainCore.Histogram1D_clone(self)

    def getRank(self):
        r"""
        getRank(Histogram1D self) -> size_t
        size_t Histogram1D::getRank() const

        Returns the number of histogram dimensions. 

        """
        return _libBornAgainCore.Histogram1D_getRank(self)

    def fill(self, x, weight=1.0):
        r"""
        fill(Histogram1D self, double x, double weight=1.0) -> int
        int Histogram1D::fill(double x, double weight=1.0)

        Increment bin with abscissa x with a weight. 

        """
        return _libBornAgainCore.Histogram1D_fill(self, x, weight)

    def getBinCenters(self):
        r"""
        getBinCenters(Histogram1D self) -> vdouble1d_t
        std::vector< double > Histogram1D::getBinCenters() const

        returns vector of histogram bin centers 

        """
        return self.getBinCentersNumpy()

    def getBinValues(self):
        r"""
        getBinValues(Histogram1D self) -> vdouble1d_t
        std::vector< double > Histogram1D::getBinValues() const

        returns vector of bin content (the value accumulated by bins) 

        """
        return self.getBinValuesNumpy()

    def getBinErrors(self):
        r"""
        getBinErrors(Histogram1D self) -> vdouble1d_t
        std::vector< double > Histogram1D::getBinErrors() const

        returns vector of bin errors 

        """
        return self.getBinErrorsNumpy()

    def getBinCentersNumpy(self):
        r"""
        getBinCentersNumpy(Histogram1D self) -> PyObject *
        PyObject * Histogram1D::getBinCentersNumpy() const

        """
        return _libBornAgainCore.Histogram1D_getBinCentersNumpy(self)

    def getBinValuesNumpy(self):
        r"""
        getBinValuesNumpy(Histogram1D self) -> PyObject *
        PyObject * Histogram1D::getBinValuesNumpy() const

        """
        return _libBornAgainCore.Histogram1D_getBinValuesNumpy(self)

    def getBinErrorsNumpy(self):
        r"""
        getBinErrorsNumpy(Histogram1D self) -> PyObject *
        PyObject * Histogram1D::getBinErrorsNumpy() const

        """
        return _libBornAgainCore.Histogram1D_getBinErrorsNumpy(self)

    def crop(self, xmin, xmax):
        r"""
        crop(Histogram1D self, double xmin, double xmax) -> Histogram1D
        Histogram1D * Histogram1D::crop(double xmin, double xmax)

        Create new histogram by applying crop on axis. 

        """
        return _libBornAgainCore.Histogram1D_crop(self, xmin, xmax)
    __swig_destroy__ = _libBornAgainCore.delete_Histogram1D

# Register Histogram1D in _libBornAgainCore:
_libBornAgainCore.Histogram1D_swigregister(Histogram1D)

class Histogram2D(IHistogram):
    r"""


    Two dimensional histogram.

    C++ includes: Histogram2D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Histogram2D self, int nbinsx, double xlow, double xup, int nbinsy, double ylow, double yup) -> Histogram2D
        __init__(Histogram2D self, int nbinsx, vdouble1d_t xbins, int nbinsy, vdouble1d_t ybins) -> Histogram2D
        __init__(Histogram2D self, IAxis axis_x, IAxis axis_y) -> Histogram2D
        __init__(Histogram2D self, IntensityData data) -> Histogram2D
        __init__(Histogram2D self, vdouble2d_t data) -> Histogram2D
        Histogram2D::Histogram2D(std::vector< std::vector< double >> data)

        Constructor for 2D histograms from numpy array (thanks to swig) 

        """
        _libBornAgainCore.Histogram2D_swiginit(self, _libBornAgainCore.new_Histogram2D(*args))

    def clone(self):
        r"""
        clone(Histogram2D self) -> Histogram2D
        Histogram2D * Histogram2D::clone() const

        Returns clone of other histogram. 

        """
        return _libBornAgainCore.Histogram2D_clone(self)

    def getRank(self):
        r"""
        getRank(Histogram2D self) -> size_t
        size_t Histogram2D::getRank() const

        Returns the number of histogram dimensions. 

        """
        return _libBornAgainCore.Histogram2D_getRank(self)

    def fill(self, x, y, weight=1.0):
        r"""
        fill(Histogram2D self, double x, double y, double weight=1.0) -> int
        int Histogram2D::fill(double x, double y, double weight=1.0)

        Increment bin with abscissa x and ordinate y with a weight. 

        """
        return _libBornAgainCore.Histogram2D_fill(self, x, y, weight)

    def projectionX(self, *args):
        r"""
        projectionX(Histogram2D self) -> Histogram1D
        projectionX(Histogram2D self, double yvalue) -> Histogram1D
        projectionX(Histogram2D self, double ylow, double yup) -> Histogram1D
        Histogram1D * Histogram2D::projectionX(double ylow, double yup)

        Project a 2D histogram into 1D histogram along X. The projection is made from all y-bins corresponding to ordinate between ylow and yup.

        Parameters:
        -----------

        ylow: 
        lower edje on y-axis

        yup: 
        upper edje on y-axis 

        """
        return _libBornAgainCore.Histogram2D_projectionX(self, *args)

    def projectionY(self, *args):
        r"""
        projectionY(Histogram2D self) -> Histogram1D
        projectionY(Histogram2D self, double xvalue) -> Histogram1D
        projectionY(Histogram2D self, double xlow, double xup) -> Histogram1D
        Histogram1D * Histogram2D::projectionY(double xlow, double xup)

        Project a 2D histogram into 1D histogram along Y. The projection is made from all x-bins corresponding to abscissa between xlow and xup.

        Parameters:
        -----------

        xlow: 
        lower edje on x-axis

        xup: 
        upper edje on x-axis 

        """
        return _libBornAgainCore.Histogram2D_projectionY(self, *args)

    def crop(self, xmin, ymin, xmax, ymax):
        r"""
        crop(Histogram2D self, double xmin, double ymin, double xmax, double ymax) -> Histogram2D
        Histogram2D * Histogram2D::crop(double xmin, double ymin, double xmax, double ymax)

        Create new histogram by applying rectangular clip. 

        """
        return _libBornAgainCore.Histogram2D_crop(self, xmin, ymin, xmax, ymax)

    def setContent(self, data):
        r"""
        setContent(Histogram2D self, vdouble2d_t data)
        void Histogram2D::setContent(const std::vector< std::vector< double >> &data)

        Sets the values in histograms channels from numpy array,. 

        """
        return _libBornAgainCore.Histogram2D_setContent(self, data)

    def addContent(self, data):
        r"""
        addContent(Histogram2D self, vdouble2d_t data)
        void Histogram2D::addContent(const std::vector< std::vector< double >> &data)

        Add to values in histograms channels from numpy array,. 

        """
        return _libBornAgainCore.Histogram2D_addContent(self, data)
    __swig_destroy__ = _libBornAgainCore.delete_Histogram2D

# Register Histogram2D in _libBornAgainCore:
_libBornAgainCore.Histogram2D_swigregister(Histogram2D)


def RelativeDifference(dat, ref):
    r"""
    RelativeDifference(SimulationResult dat, SimulationResult ref) -> double
    double IntensityDataFunctions::RelativeDifference(const SimulationResult &dat, const SimulationResult &ref)

    Returns sum of relative differences between each pair of elements: (a, b) -> 2*abs(a - b)/(a + b) ( and zero if a-b=0 )

    Returns sum of relative differences between each pair of elements: (a, b) -> 2*abs(a - b)/(|a| + |b|) ( and zero if a=b=0 within epsilon ) 

    """
    return _libBornAgainCore.RelativeDifference(dat, ref)

def checkRelativeDifference(dat, ref, threshold):
    r"""
    checkRelativeDifference(IntensityData dat, IntensityData ref, double const threshold) -> bool
    bool IntensityDataFunctions::checkRelativeDifference(const OutputData< double > &dat, const OutputData< double > &ref, const double threshold)

    Returns true is relative difference is below threshold; prints informative output. 

    """
    return _libBornAgainCore.checkRelativeDifference(dat, ref, threshold)

def getRelativeDifference(*args):
    r"""
    getRelativeDifference(IntensityData dat, IntensityData ref) -> double
    getRelativeDifference(IHistogram dat, IHistogram ref) -> double
    double IntensityDataFunctions::getRelativeDifference(const IHistogram &dat, const IHistogram &ref)

    """
    return _libBornAgainCore.getRelativeDifference(*args)

def coordinateToBinf(*args):
    r"""
    coordinateToBinf(double coordinate, IAxis axis) -> double
    coordinateToBinf(double & x, double & y, IntensityData data)
    void IntensityDataFunctions::coordinateToBinf(double &x, double &y, const OutputData< double > &data)

    Transforms x,y coordinate from  OutputData axes coordinates to bin-fraction-coordinates. 

    """
    return _libBornAgainCore.coordinateToBinf(*args)

def coordinateFromBinf(*args):
    r"""
    coordinateFromBinf(double value, IAxis axis) -> double
    coordinateFromBinf(double & x, double & y, IntensityData data)
    void IntensityDataFunctions::coordinateFromBinf(double &x, double &y, const OutputData< double > &data)

    Transforms x,y coordinate from bin-fraction-coordinates to  OutputData's axes coordinates. 

    """
    return _libBornAgainCore.coordinateFromBinf(*args)

def create2DArrayfromOutputData(data):
    r"""
    create2DArrayfromOutputData(IntensityData data) -> vdouble2d_t
    std::vector< std::vector< double > > IntensityDataFunctions::create2DArrayfromOutputData(const OutputData< double > &data)

    Creates a vector of vectors of double (2D Array) from  OutputData. 

    """
    return _libBornAgainCore.create2DArrayfromOutputData(data)

def FT2DArray(signal):
    r"""
    FT2DArray(vdouble2d_t signal) -> vdouble2d_t
    std::vector< std::vector< double > > IntensityDataFunctions::FT2DArray(const std::vector< std::vector< double >> &signal)

    Creates a Fourier Transform of a 2D Array (vector of vectors). 

    """
    return _libBornAgainCore.FT2DArray(signal)
class IChiSquaredModule(ICloneable):
    r"""


    Interface residual calculations.

    C++ includes: IChiSquaredModule.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IChiSquaredModule

    def clone(self):
        r"""
        clone(IChiSquaredModule self) -> IChiSquaredModule
        virtual IChiSquaredModule* IChiSquaredModule::clone() const =0

        clone method 

        """
        return _libBornAgainCore.IChiSquaredModule_clone(self)

    def varianceFunction(self):
        r"""
        varianceFunction(IChiSquaredModule self) -> IVarianceFunction
        const IVarianceFunction * IChiSquaredModule::varianceFunction() const

        Returns squared function. 

        """
        return _libBornAgainCore.IChiSquaredModule_varianceFunction(self)

    def setVarianceFunction(self, variance_function):
        r"""
        setVarianceFunction(IChiSquaredModule self, IVarianceFunction variance_function)
        void IChiSquaredModule::setVarianceFunction(const IVarianceFunction &variance_function)

        Sets squared function. 

        """
        return _libBornAgainCore.IChiSquaredModule_setVarianceFunction(self, variance_function)

    def getIntensityFunction(self):
        r"""
        getIntensityFunction(IChiSquaredModule self) -> IIntensityFunction
        const IIntensityFunction * IChiSquaredModule::getIntensityFunction() const

        Returns data rescaler. 

        """
        return _libBornAgainCore.IChiSquaredModule_getIntensityFunction(self)

    def setIntensityFunction(self, intensity_function):
        r"""
        setIntensityFunction(IChiSquaredModule self, IIntensityFunction intensity_function)
        void IChiSquaredModule::setIntensityFunction(const IIntensityFunction &intensity_function)

        Sets data rescaler. 

        """
        return _libBornAgainCore.IChiSquaredModule_setIntensityFunction(self, intensity_function)

    def residual(self, a, b, weight):
        r"""
        residual(IChiSquaredModule self, double a, double b, double weight) -> double
        virtual double IChiSquaredModule::residual(double a, double b, double weight)=0

        """
        return _libBornAgainCore.IChiSquaredModule_residual(self, a, b, weight)

# Register IChiSquaredModule in _libBornAgainCore:
_libBornAgainCore.IChiSquaredModule_swigregister(IChiSquaredModule)

class AngularSpecScan(object):
    r"""


    Scan type with inclination angles as coordinate values and a unique wavelength. Features footprint correction.

    C++ includes: AngularSpecScan.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(AngularSpecScan self, double wl, vdouble1d_t inc_angle) -> AngularSpecScan
        __init__(AngularSpecScan self, double wl, IAxis inc_angle) -> AngularSpecScan
        __init__(AngularSpecScan self, double wl, int nbins, double alpha_i_min, double alpha_i_max) -> AngularSpecScan
        AngularSpecScan::AngularSpecScan(double wl, int nbins, double alpha_i_min, double alpha_i_max)

        Sets angle-defined specular scan. The first parameter is always a wavelength in nm. Second parameter is either a numpy array of incident angles in radians or an  IAxis object with angle values. Alternatively an axis can be defined in-place, then the second passed parameter is the number of bins, third - minimum on-axis angle value, fourth - maximum on-axis angle value. 

        """
        _libBornAgainCore.AngularSpecScan_swiginit(self, _libBornAgainCore.new_AngularSpecScan(*args))
    __swig_destroy__ = _libBornAgainCore.delete_AngularSpecScan

    def clone(self):
        r"""
        clone(AngularSpecScan self) -> AngularSpecScan
        AngularSpecScan * AngularSpecScan::clone() const override

        """
        return _libBornAgainCore.AngularSpecScan_clone(self)

    def setFootprintFactor(self, f_factor):
        r"""
        setFootprintFactor(AngularSpecScan self, IFootprintFactor f_factor)
        void AngularSpecScan::setFootprintFactor(const IFootprintFactor *f_factor)

        Sets footprint correction factor. 

        """
        return _libBornAgainCore.AngularSpecScan_setFootprintFactor(self, f_factor)

    def setWavelengthResolution(self, resolution):
        r"""
        setWavelengthResolution(AngularSpecScan self, ScanResolution resolution)
        void AngularSpecScan::setWavelengthResolution(const ScanResolution &resolution)

        Sets wavelength resolution values via  ScanResolution object. 

        """
        return _libBornAgainCore.AngularSpecScan_setWavelengthResolution(self, resolution)

    def setRelativeWavelengthResolution(self, *args):
        r"""
        setRelativeWavelengthResolution(AngularSpecScan self, RangedDistribution const & distr, double rel_dev)
        setRelativeWavelengthResolution(AngularSpecScan self, RangedDistribution const & distr, vdouble1d_t rel_dev)
        void AngularSpecScan::setRelativeWavelengthResolution(const RangedDistribution &distr, const std::vector< double > &rel_dev)

        Sets wavelength resolution values via  RangedDistribution and values of relative deviations (that is,  rel_dev equals standard deviation divided by the mean value).  rel_dev can be either single-valued or a numpy array. In the latter case the length of the array should coinside with the length of the inclination angle axis. 

        """
        return _libBornAgainCore.AngularSpecScan_setRelativeWavelengthResolution(self, *args)

    def setAbsoluteWavelengthResolution(self, *args):
        r"""
        setAbsoluteWavelengthResolution(AngularSpecScan self, RangedDistribution const & distr, double std_dev)
        setAbsoluteWavelengthResolution(AngularSpecScan self, RangedDistribution const & distr, vdouble1d_t std_dev)
        void AngularSpecScan::setAbsoluteWavelengthResolution(const RangedDistribution &distr, const std::vector< double > &std_dev)

        Sets wavelength resolution values via  RangedDistribution and values of standard deviations.  std_dev can be either single-valued or a numpy array. In the latter case the length of the array should coinside with the length of the inclination angle axis. 

        """
        return _libBornAgainCore.AngularSpecScan_setAbsoluteWavelengthResolution(self, *args)

    def setAngleResolution(self, resolution):
        r"""
        setAngleResolution(AngularSpecScan self, ScanResolution resolution)
        void AngularSpecScan::setAngleResolution(const ScanResolution &resolution)

        Sets angle resolution values via  ScanResolution object. 

        """
        return _libBornAgainCore.AngularSpecScan_setAngleResolution(self, resolution)

    def setRelativeAngularResolution(self, *args):
        r"""
        setRelativeAngularResolution(AngularSpecScan self, RangedDistribution const & distr, double rel_dev)
        setRelativeAngularResolution(AngularSpecScan self, RangedDistribution const & distr, vdouble1d_t rel_dev)
        void AngularSpecScan::setRelativeAngularResolution(const RangedDistribution &distr, const std::vector< double > &rel_dev)

        Sets angular resolution values via  RangedDistribution and values of relative deviations (that is,  rel_dev equals standard deviation divided by the mean value).  rel_dev can be either single-valued or a numpy array. In the latter case the length of the array should coinside with the length of the inclination angle axis. 

        """
        return _libBornAgainCore.AngularSpecScan_setRelativeAngularResolution(self, *args)

    def setAbsoluteAngularResolution(self, *args):
        r"""
        setAbsoluteAngularResolution(AngularSpecScan self, RangedDistribution const & distr, double std_dev)
        setAbsoluteAngularResolution(AngularSpecScan self, RangedDistribution const & distr, vdouble1d_t std_dev)
        void AngularSpecScan::setAbsoluteAngularResolution(const RangedDistribution &distr, const std::vector< double > &std_dev)

        Sets angular resolution values via  RangedDistribution and values of standard deviations.  std_dev can be either single-valued or a numpy array. In the latter case the length of the array should coinside with the length of the inclination angle axis. 

        """
        return _libBornAgainCore.AngularSpecScan_setAbsoluteAngularResolution(self, *args)

# Register AngularSpecScan in _libBornAgainCore:
_libBornAgainCore.AngularSpecScan_swigregister(AngularSpecScan)

class ChiSquaredModule(IChiSquaredModule):
    r"""


    Calculation of chi2 between two data sets.

    C++ includes: ChiSquaredModule.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChiSquaredModule self) -> ChiSquaredModule
        __init__(ChiSquaredModule self, ChiSquaredModule other) -> ChiSquaredModule
        ChiSquaredModule::ChiSquaredModule(const ChiSquaredModule &other)

        """
        _libBornAgainCore.ChiSquaredModule_swiginit(self, _libBornAgainCore.new_ChiSquaredModule(*args))
    __swig_destroy__ = _libBornAgainCore.delete_ChiSquaredModule

    def clone(self):
        r"""
        clone(ChiSquaredModule self) -> ChiSquaredModule
        virtual ChiSquaredModule* ChiSquaredModule::clone() const

        clone method 

        """
        return _libBornAgainCore.ChiSquaredModule_clone(self)

    def residual(self, a, b, weight):
        r"""
        residual(ChiSquaredModule self, double a, double b, double weight) -> double
        double ChiSquaredModule::residual(double a, double b, double weight)

        """
        return _libBornAgainCore.ChiSquaredModule_residual(self, a, b, weight)

# Register ChiSquaredModule in _libBornAgainCore:
_libBornAgainCore.ChiSquaredModule_swigregister(ChiSquaredModule)

class Instrument(INode):
    r"""


    Assembles beam, detector and their relative positions with respect to the sample.

    C++ includes: Instrument.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Instrument self) -> Instrument
        __init__(Instrument self, Instrument other) -> Instrument
        Instrument::Instrument(const Instrument &other)

        """
        _libBornAgainCore.Instrument_swiginit(self, _libBornAgainCore.new_Instrument(*args))
    __swig_destroy__ = _libBornAgainCore.delete_Instrument

    def accept(self, visitor):
        r"""
        accept(Instrument self, INodeVisitor visitor)
        void Instrument::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.Instrument_accept(self, visitor)

    def getBeam(self, *args):
        r"""
        getBeam(Instrument self) -> Beam
        getBeam(Instrument self) -> Beam
        const Beam& Instrument::getBeam() const

        """
        return _libBornAgainCore.Instrument_getBeam(self, *args)

    def setBeam(self, beam):
        r"""
        setBeam(Instrument self, Beam beam)
        void Instrument::setBeam(const Beam &beam)

        """
        return _libBornAgainCore.Instrument_setBeam(self, beam)

    def setBeamParameters(self, wavelength, alpha_i, phi_i):
        r"""
        setBeamParameters(Instrument self, double wavelength, double alpha_i, double phi_i)
        void Instrument::setBeamParameters(double wavelength, double alpha_i, double phi_i)

        Sets the beam wavelength and incoming angles. 

        """
        return _libBornAgainCore.Instrument_setBeamParameters(self, wavelength, alpha_i, phi_i)

    def setBeamIntensity(self, intensity):
        r"""
        setBeamIntensity(Instrument self, double intensity)
        void Instrument::setBeamIntensity(double intensity)

        Sets the beam's intensity. 

        """
        return _libBornAgainCore.Instrument_setBeamIntensity(self, intensity)

    def setBeamPolarization(self, bloch_vector):
        r"""
        setBeamPolarization(Instrument self, kvector_t bloch_vector)
        void Instrument::setBeamPolarization(const kvector_t bloch_vector)

        Sets the beam's polarization according to the given Bloch vector. 

        """
        return _libBornAgainCore.Instrument_setBeamPolarization(self, bloch_vector)

    def getBeamIntensity(self):
        r"""
        getBeamIntensity(Instrument self) -> double
        double Instrument::getBeamIntensity() const

        Returns the beam's intensity. 

        """
        return _libBornAgainCore.Instrument_getBeamIntensity(self)

    def getDetector(self, *args):
        r"""
        getDetector(Instrument self) -> IDetector
        getDetector(Instrument self) -> IDetector
        IDetector * Instrument::getDetector()

        """
        return _libBornAgainCore.Instrument_getDetector(self, *args)

    def getDetectorMask(self):
        r"""
        getDetectorMask(Instrument self) -> DetectorMask
        const DetectorMask * Instrument::getDetectorMask() const

        """
        return _libBornAgainCore.Instrument_getDetectorMask(self)

    def getDetectorAxis(self, index):
        r"""
        getDetectorAxis(Instrument self, size_t index) -> IAxis
        const IAxis & Instrument::getDetectorAxis(size_t index) const

        Returns a detector axis. 

        """
        return _libBornAgainCore.Instrument_getDetectorAxis(self, index)

    def getDetectorDimension(self):
        r"""
        getDetectorDimension(Instrument self) -> size_t
        size_t Instrument::getDetectorDimension() const

        Returns the detector's dimension. 

        """
        return _libBornAgainCore.Instrument_getDetectorDimension(self)

    def setDetector(self, detector):
        r"""
        setDetector(Instrument self, IDetector detector)
        void Instrument::setDetector(const IDetector &detector)

        Sets the detector (axes can be overwritten later) 

        """
        return _libBornAgainCore.Instrument_setDetector(self, detector)

    def setDetectorResolutionFunction(self, p_resolution_function):
        r"""
        setDetectorResolutionFunction(Instrument self, IResolutionFunction2D p_resolution_function)
        void Instrument::setDetectorResolutionFunction(const IResolutionFunction2D &p_resolution_function)

        Sets detector resolution function. 

        """
        return _libBornAgainCore.Instrument_setDetectorResolutionFunction(self, p_resolution_function)

    def removeDetectorResolution(self):
        r"""
        removeDetectorResolution(Instrument self)
        void Instrument::removeDetectorResolution()

        Removes detector resolution function. 

        """
        return _libBornAgainCore.Instrument_removeDetectorResolution(self)

    def setAnalyzerProperties(self, direction, efficiency, total_transmission):
        r"""
        setAnalyzerProperties(Instrument self, kvector_t direction, double efficiency, double total_transmission)
        void Instrument::setAnalyzerProperties(const kvector_t direction, double efficiency, double total_transmission)

        Sets the polarization analyzer characteristics of the detector. 

        """
        return _libBornAgainCore.Instrument_setAnalyzerProperties(self, direction, efficiency, total_transmission)

    def applyDetectorResolution(self, p_intensity_map):
        r"""
        applyDetectorResolution(Instrument self, IntensityData p_intensity_map)
        void Instrument::applyDetectorResolution(OutputData< double > *p_intensity_map) const

        apply the detector resolution to the given intensity map 

        """
        return _libBornAgainCore.Instrument_applyDetectorResolution(self, p_intensity_map)

    def createDetectorIntensity(self, elements):
        r"""
        createDetectorIntensity(Instrument self, std::vector< SimulationElement,std::allocator< SimulationElement > > const & elements) -> IntensityData
        OutputData< double > * Instrument::createDetectorIntensity(const std::vector< SimulationElement > &elements) const

        Returns new intensity map with detector resolution applied and axes in requested units. 

        """
        return _libBornAgainCore.Instrument_createDetectorIntensity(self, elements)

    def initDetector(self):
        r"""
        initDetector(Instrument self)
        void Instrument::initDetector()

        init detector with beam settings 

        """
        return _libBornAgainCore.Instrument_initDetector(self)

    def getChildren(self):
        r"""
        getChildren(Instrument self) -> swig_dummy_type_const_inode_vector
        std::vector< const INode * > Instrument::getChildren() const

        Returns a vector of children (const). 

        """
        return _libBornAgainCore.Instrument_getChildren(self)

# Register Instrument in _libBornAgainCore:
_libBornAgainCore.Instrument_swigregister(Instrument)


def importArrayToOutputData(*args):
    r"""
    importArrayToOutputData(vdouble1d_t vec) -> IntensityData
    importArrayToOutputData(vdouble2d_t vec) -> IntensityData
    OutputData< double > * PyArrayImport::importArrayToOutputData(const std::vector< std::vector< double >> &vec)

    for importing 2D array of doubles from python into  OutputData

    """
    return _libBornAgainCore.importArrayToOutputData(*args)
class QSpecScan(object):
    r"""


    Scan type with z-components of scattering vector as coordinate values. Wavelength and incident angles are not accessible separately.

    C++ includes: QSpecScan.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(QSpecScan self, vdouble1d_t qs_nm) -> QSpecScan
        __init__(QSpecScan self, IAxis qs_nm) -> QSpecScan
        __init__(QSpecScan self, int nbins, double qz_min, double qz_max) -> QSpecScan
        QSpecScan::QSpecScan(int nbins, double qz_min, double qz_max)

        Sets q-defined specular scan. Accepts either numpy array of q-values sorted in ascending order or an  IAxis object with q-values. Alternatively an axis can be defined in-place, then the first passed parameter is the number of bins, second - minimum on-axis q-value, third - maximum on-axis q_value. 

        """
        _libBornAgainCore.QSpecScan_swiginit(self, _libBornAgainCore.new_QSpecScan(*args))
    __swig_destroy__ = _libBornAgainCore.delete_QSpecScan

    def clone(self):
        r"""
        clone(QSpecScan self) -> QSpecScan
        QSpecScan * QSpecScan::clone() const override

        """
        return _libBornAgainCore.QSpecScan_clone(self)

    def setQResolution(self, resolution):
        r"""
        setQResolution(QSpecScan self, ScanResolution resolution)
        void QSpecScan::setQResolution(const ScanResolution &resolution)

        Sets q resolution values via  ScanResolution object. 

        """
        return _libBornAgainCore.QSpecScan_setQResolution(self, resolution)

    def setRelativeQResolution(self, *args):
        r"""
        setRelativeQResolution(QSpecScan self, RangedDistribution const & distr, double rel_dev)
        setRelativeQResolution(QSpecScan self, RangedDistribution const & distr, vdouble1d_t rel_dev)
        void QSpecScan::setRelativeQResolution(const RangedDistribution &distr, const std::vector< double > &rel_dev)

        Sets qz resolution values via  RangedDistribution and values of relative deviations (that is,  rel_dev equals standard deviation divided by the mean value).  rel_dev can be either single-valued or a numpy array. In the latter case the length of the array should coinside with the length of the qz-axis. 

        """
        return _libBornAgainCore.QSpecScan_setRelativeQResolution(self, *args)

    def setAbsoluteQResolution(self, *args):
        r"""
        setAbsoluteQResolution(QSpecScan self, RangedDistribution const & distr, double std_dev)
        setAbsoluteQResolution(QSpecScan self, RangedDistribution const & distr, vdouble1d_t std_dev)
        void QSpecScan::setAbsoluteQResolution(const RangedDistribution &distr, const std::vector< double > &std_dev)

        Sets qz resolution values via  RangedDistribution and values of standard deviations.  std_dev can be either single-valued or a numpy array. In the latter case the length of the array should coinside with the length of the qz-axis. 

        """
        return _libBornAgainCore.QSpecScan_setAbsoluteQResolution(self, *args)

# Register QSpecScan in _libBornAgainCore:
_libBornAgainCore.QSpecScan_swigregister(QSpecScan)

class AxisInfo(object):
    r"""


    Information about an axis in specific units. Can be used for plotting.

    C++ includes: SimulationResult.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_name = property(_libBornAgainCore.AxisInfo_m_name_get, _libBornAgainCore.AxisInfo_m_name_set, doc=r"""m_name : std::string""")
    m_min = property(_libBornAgainCore.AxisInfo_m_min_get, _libBornAgainCore.AxisInfo_m_min_set, doc=r"""m_min : double""")
    m_max = property(_libBornAgainCore.AxisInfo_m_max_get, _libBornAgainCore.AxisInfo_m_max_set, doc=r"""m_max : double""")

    def __init__(self):
        r"""
        __init__(AxisInfo self) -> AxisInfo


        Information about an axis in specific units. Can be used for plotting.

        C++ includes: SimulationResult.h

        """
        _libBornAgainCore.AxisInfo_swiginit(self, _libBornAgainCore.new_AxisInfo())
    __swig_destroy__ = _libBornAgainCore.delete_AxisInfo

# Register AxisInfo in _libBornAgainCore:
_libBornAgainCore.AxisInfo_swigregister(AxisInfo)

class SimulationResult(object):
    r"""


    Wrapper around  OutputData<double> that also provides unit conversions.

    C++ includes: SimulationResult.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SimulationResult self) -> SimulationResult
        __init__(SimulationResult self, IntensityData data, IUnitConverter unit_converter) -> SimulationResult
        __init__(SimulationResult self, SimulationResult other) -> SimulationResult
        __init__(SimulationResult self, SimulationResult other) -> SimulationResult
        SimulationResult::SimulationResult(SimulationResult &&other)

        """
        _libBornAgainCore.SimulationResult_swiginit(self, _libBornAgainCore.new_SimulationResult(*args))

    def histogram2d(self, *args):
        r"""
        histogram2d(SimulationResult self, AxesUnits units=AxesUnits::DEFAULT) -> Histogram2D
        Histogram2D * SimulationResult::histogram2d(AxesUnits units=AxesUnits::DEFAULT) const

        """
        return _libBornAgainCore.SimulationResult_histogram2d(self, *args)

    def axisInfo(self, *args):
        r"""
        axisInfo(SimulationResult self, AxesUnits units=AxesUnits::DEFAULT) -> swig_dummy_type_axisinfo_vector
        std::vector< AxisInfo > SimulationResult::axisInfo(AxesUnits units=AxesUnits::DEFAULT) const

        Provide  AxisInfo for each axis and the given units. 

        """
        return _libBornAgainCore.SimulationResult_axisInfo(self, *args)

    def converter(self):
        r"""
        converter(SimulationResult self) -> IUnitConverter
        const IUnitConverter & SimulationResult::converter() const

        Returns underlying unit converter. 

        """
        return _libBornAgainCore.SimulationResult_converter(self)

    def size(self):
        r"""
        size(SimulationResult self) -> size_t
        size_t SimulationResult::size() const

        """
        return _libBornAgainCore.SimulationResult_size(self)

    def array(self, *args):
        r"""
        array(SimulationResult self, AxesUnits units=AxesUnits::DEFAULT) -> PyObject
        PyObject * SimulationResult::array(AxesUnits units=AxesUnits::DEFAULT) const

        returns intensity data as Python numpy array 

        """
        return _libBornAgainCore.SimulationResult_array(self, *args)

    def axis(self, *args):
        r"""
        axis(SimulationResult self, AxesUnits units=AxesUnits::DEFAULT) -> vdouble1d_t
        axis(SimulationResult self, size_t i_axis, AxesUnits units=AxesUnits::DEFAULT) -> vdouble1d_t
        std::vector< double > SimulationResult::axis(size_t i_axis, AxesUnits units=AxesUnits::DEFAULT) const

        Returns axis coordinates as a numpy array. With no parameters given returns coordinates of x-axis in default units. 

        """
        return _libBornAgainCore.SimulationResult_axis(self, *args)

    def __getitem__(self, i):
        r"""__getitem__(SimulationResult self, unsigned int i) -> double"""
        return _libBornAgainCore.SimulationResult___getitem__(self, i)

    def __setitem__(self, i, value):
        r"""__setitem__(SimulationResult self, unsigned int i, double value) -> double"""
        return _libBornAgainCore.SimulationResult___setitem__(self, i, value)
    __swig_destroy__ = _libBornAgainCore.delete_SimulationResult

# Register SimulationResult in _libBornAgainCore:
_libBornAgainCore.SimulationResult_swigregister(SimulationResult)


def FindPeaks(*args):
    r"""
    FindPeaks(Histogram2D hist, double sigma=2, std::string const & option={}, double threshold=0.05) -> vector_pair_double_t
    std::vector< std::pair< double, double > > SpectrumUtils::FindPeaks(const Histogram2D &hist, double sigma=2, const std::string &option={}, double threshold=0.05)

    """
    return _libBornAgainCore.FindPeaks(*args)
class IVarianceFunction(object):
    r"""


    Variance function interface.

    C++ includes: VarianceFunctions.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IVarianceFunction

    def clone(self):
        r"""
        clone(IVarianceFunction self) -> IVarianceFunction
        virtual IVarianceFunction* IVarianceFunction::clone() const =0

        """
        return _libBornAgainCore.IVarianceFunction_clone(self)

    def variance(self, real_value, simulated_value):
        r"""
        variance(IVarianceFunction self, double real_value, double simulated_value) -> double
        virtual double IVarianceFunction::variance(double real_value, double simulated_value) const =0

        """
        return _libBornAgainCore.IVarianceFunction_variance(self, real_value, simulated_value)

# Register IVarianceFunction in _libBornAgainCore:
_libBornAgainCore.IVarianceFunction_swigregister(IVarianceFunction)

class VarianceConstantFunction(IVarianceFunction):
    r"""


    Returns 1.0 as variance value

    C++ includes: VarianceFunctions.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def clone(self):
        r"""
        clone(VarianceConstantFunction self) -> VarianceConstantFunction
        VarianceConstantFunction * VarianceConstantFunction::clone() const override

        """
        return _libBornAgainCore.VarianceConstantFunction_clone(self)

    def variance(self, arg2, arg3):
        r"""
        variance(VarianceConstantFunction self, double arg2, double arg3) -> double
        double VarianceConstantFunction::variance(double, double) const override

        """
        return _libBornAgainCore.VarianceConstantFunction_variance(self, arg2, arg3)

    def __init__(self):
        r"""
        __init__(VarianceConstantFunction self) -> VarianceConstantFunction


        Returns 1.0 as variance value

        C++ includes: VarianceFunctions.h

        """
        _libBornAgainCore.VarianceConstantFunction_swiginit(self, _libBornAgainCore.new_VarianceConstantFunction())
    __swig_destroy__ = _libBornAgainCore.delete_VarianceConstantFunction

# Register VarianceConstantFunction in _libBornAgainCore:
_libBornAgainCore.VarianceConstantFunction_swigregister(VarianceConstantFunction)

class VarianceSimFunction(IVarianceFunction):
    r"""


    Returns max(sim, epsilon)

    C++ includes: VarianceFunctions.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, epsilon=1.0):
        r"""
        __init__(VarianceSimFunction self, double epsilon=1.0) -> VarianceSimFunction
        VarianceSimFunction::VarianceSimFunction(double epsilon=1.0)

        """
        _libBornAgainCore.VarianceSimFunction_swiginit(self, _libBornAgainCore.new_VarianceSimFunction(epsilon))

    def clone(self):
        r"""
        clone(VarianceSimFunction self) -> VarianceSimFunction
        VarianceSimFunction * VarianceSimFunction::clone() const override

        """
        return _libBornAgainCore.VarianceSimFunction_clone(self)

    def variance(self, exp, sim):
        r"""
        variance(VarianceSimFunction self, double exp, double sim) -> double
        double VarianceSimFunction::variance(double exp, double sim) const override

        """
        return _libBornAgainCore.VarianceSimFunction_variance(self, exp, sim)
    __swig_destroy__ = _libBornAgainCore.delete_VarianceSimFunction

# Register VarianceSimFunction in _libBornAgainCore:
_libBornAgainCore.VarianceSimFunction_swigregister(VarianceSimFunction)

class ILatticeOrientation(object):
    r"""Proxy of C++ ILatticeOrientation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_ILatticeOrientation

    def clone(self):
        r"""
        clone(ILatticeOrientation self) -> ILatticeOrientation
        virtual ILatticeOrientation* ILatticeOrientation::clone() const =0

        """
        return _libBornAgainCore.ILatticeOrientation_clone(self)

    def usePrimitiveLattice(self, lattice):
        r"""
        usePrimitiveLattice(ILatticeOrientation self, Lattice lattice)
        virtual void ILatticeOrientation::usePrimitiveLattice(const Lattice &lattice)=0

        """
        return _libBornAgainCore.ILatticeOrientation_usePrimitiveLattice(self, lattice)

    def transformationMatrix(self):
        r"""
        transformationMatrix(ILatticeOrientation self) -> Transform3D
        virtual Transform3D ILatticeOrientation::transformationMatrix() const =0

        """
        return _libBornAgainCore.ILatticeOrientation_transformationMatrix(self)

# Register ILatticeOrientation in _libBornAgainCore:
_libBornAgainCore.ILatticeOrientation_swigregister(ILatticeOrientation)

class MillerIndex(object):
    r"""


    A direction in reciprocal space, specified by double-valued indices hkl.

    C++ includes: ILatticeOrientation.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, h_, k_, l_):
        r"""
        __init__(MillerIndex self, double h_, double k_, double l_) -> MillerIndex
        MillerIndex::MillerIndex(double h_, double k_, double l_)

        """
        _libBornAgainCore.MillerIndex_swiginit(self, _libBornAgainCore.new_MillerIndex(h_, k_, l_))
    h = property(_libBornAgainCore.MillerIndex_h_get, _libBornAgainCore.MillerIndex_h_set, doc=r"""h : double""")
    k = property(_libBornAgainCore.MillerIndex_k_get, _libBornAgainCore.MillerIndex_k_set, doc=r"""k : double""")
    l = property(_libBornAgainCore.MillerIndex_l_get, _libBornAgainCore.MillerIndex_l_set, doc=r"""l : double""")
    __swig_destroy__ = _libBornAgainCore.delete_MillerIndex

# Register MillerIndex in _libBornAgainCore:
_libBornAgainCore.MillerIndex_swigregister(MillerIndex)

class MillerIndexOrientation(ILatticeOrientation):
    r"""


    Specifies a rotation of a lattice through the Miller indices of two coordinate axes.

    C++ includes: ILatticeOrientation.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    QX = _libBornAgainCore.MillerIndexOrientation_QX
    
    QY = _libBornAgainCore.MillerIndexOrientation_QY
    
    QZ = _libBornAgainCore.MillerIndexOrientation_QZ
    

    def __init__(self, q1, index1, q2, index2):
        r"""
        __init__(MillerIndexOrientation self, MillerIndexOrientation::QComponent q1, MillerIndex index1, MillerIndexOrientation::QComponent q2, MillerIndex index2) -> MillerIndexOrientation
        MillerIndexOrientation::MillerIndexOrientation(QComponent q1, MillerIndex index1, QComponent q2, MillerIndex index2)

        This constructor is best explained by an example. Arguments QX, (1,1,0), QY, (0,2,1) mean: Rotate the lattice such that the axis [110] points into x direction, and the axis [021], projected into the yz plane, points into z direction. 

        """
        _libBornAgainCore.MillerIndexOrientation_swiginit(self, _libBornAgainCore.new_MillerIndexOrientation(q1, index1, q2, index2))
    __swig_destroy__ = _libBornAgainCore.delete_MillerIndexOrientation

    def clone(self):
        r"""
        clone(MillerIndexOrientation self) -> MillerIndexOrientation
        MillerIndexOrientation * MillerIndexOrientation::clone() const override

        """
        return _libBornAgainCore.MillerIndexOrientation_clone(self)

    def usePrimitiveLattice(self, lattice):
        r"""
        usePrimitiveLattice(MillerIndexOrientation self, Lattice lattice)
        void MillerIndexOrientation::usePrimitiveLattice(const Lattice &lattice) override

        """
        return _libBornAgainCore.MillerIndexOrientation_usePrimitiveLattice(self, lattice)

    def transformationMatrix(self):
        r"""
        transformationMatrix(MillerIndexOrientation self) -> Transform3D
        Transform3D MillerIndexOrientation::transformationMatrix() const override

        """
        return _libBornAgainCore.MillerIndexOrientation_transformationMatrix(self)

# Register MillerIndexOrientation in _libBornAgainCore:
_libBornAgainCore.MillerIndexOrientation_swigregister(MillerIndexOrientation)

class ISelectionRule(object):
    r"""


    Pure virtual base class for selection rules.

    C++ includes: ISelectionRule.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_ISelectionRule

    def clone(self):
        r"""
        clone(ISelectionRule self) -> ISelectionRule
        virtual ISelectionRule* ISelectionRule::clone() const =0

        """
        return _libBornAgainCore.ISelectionRule_clone(self)

    def coordinateSelected(self, coordinate):
        r"""
        coordinateSelected(ISelectionRule self, ivector_t const & coordinate) -> bool
        virtual bool ISelectionRule::coordinateSelected(const ivector_t &coordinate) const =0

        """
        return _libBornAgainCore.ISelectionRule_coordinateSelected(self, coordinate)

# Register ISelectionRule in _libBornAgainCore:
_libBornAgainCore.ISelectionRule_swigregister(ISelectionRule)

class SimpleSelectionRule(ISelectionRule):
    r"""


    Selection rule (v*q)modulus!=0, defined by vector v(a,b,c) and modulus.

    C++ includes: ISelectionRule.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, a, b, c, modulus):
        r"""
        __init__(SimpleSelectionRule self, int a, int b, int c, int modulus) -> SimpleSelectionRule
        SimpleSelectionRule::SimpleSelectionRule(int a, int b, int c, int modulus)

        """
        _libBornAgainCore.SimpleSelectionRule_swiginit(self, _libBornAgainCore.new_SimpleSelectionRule(a, b, c, modulus))
    __swig_destroy__ = _libBornAgainCore.delete_SimpleSelectionRule

    def clone(self):
        r"""
        clone(SimpleSelectionRule self) -> SimpleSelectionRule
        SimpleSelectionRule * SimpleSelectionRule::clone() const

        """
        return _libBornAgainCore.SimpleSelectionRule_clone(self)

    def coordinateSelected(self, coordinate):
        r"""
        coordinateSelected(SimpleSelectionRule self, ivector_t const & coordinate) -> bool
        bool SimpleSelectionRule::coordinateSelected(const ivector_t &coordinate) const

        """
        return _libBornAgainCore.SimpleSelectionRule_coordinateSelected(self, coordinate)

# Register SimpleSelectionRule in _libBornAgainCore:
_libBornAgainCore.SimpleSelectionRule_swigregister(SimpleSelectionRule)

class Lattice(INode):
    r"""


    A lattice with three basis vectors.

    C++ includes: Lattice.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Lattice self) -> Lattice
        __init__(Lattice self, kvector_t a1, kvector_t a2, kvector_t a3) -> Lattice
        __init__(Lattice self, Lattice lattice) -> Lattice
        Lattice::Lattice(const Lattice &lattice)

        """
        _libBornAgainCore.Lattice_swiginit(self, _libBornAgainCore.new_Lattice(*args))
    __swig_destroy__ = _libBornAgainCore.delete_Lattice

    def accept(self, visitor):
        r"""
        accept(Lattice self, INodeVisitor visitor)
        void Lattice::accept(INodeVisitor *visitor) const override

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.Lattice_accept(self, visitor)

    def createTransformedLattice(self, transform):
        r"""
        createTransformedLattice(Lattice self, Transform3D const & transform) -> Lattice
        Lattice Lattice::createTransformedLattice(const Transform3D &transform) const

        Create transformed lattice. 

        """
        return _libBornAgainCore.Lattice_createTransformedLattice(self, transform)

    def initialize(self):
        r"""
        initialize(Lattice self)
        void Lattice::initialize() const

        Initializes cached data. 

        """
        return _libBornAgainCore.Lattice_initialize(self)

    def getBasisVectorA(self):
        r"""
        getBasisVectorA(Lattice self) -> kvector_t
        kvector_t Lattice::getBasisVectorA() const

        Returns basis vector a. 

        """
        return _libBornAgainCore.Lattice_getBasisVectorA(self)

    def getBasisVectorB(self):
        r"""
        getBasisVectorB(Lattice self) -> kvector_t
        kvector_t Lattice::getBasisVectorB() const

        Returns basis vector b. 

        """
        return _libBornAgainCore.Lattice_getBasisVectorB(self)

    def getBasisVectorC(self):
        r"""
        getBasisVectorC(Lattice self) -> kvector_t
        kvector_t Lattice::getBasisVectorC() const

        Returns basis vector c. 

        """
        return _libBornAgainCore.Lattice_getBasisVectorC(self)

    def resetBasis(self, a1, a2, a3):
        r"""
        resetBasis(Lattice self, kvector_t a1, kvector_t a2, kvector_t a3)
        void Lattice::resetBasis(const kvector_t a1, const kvector_t a2, const kvector_t a3)

        Resets the basis vectors. 

        """
        return _libBornAgainCore.Lattice_resetBasis(self, a1, a2, a3)

    def getMillerDirection(self, h, k, l):
        r"""
        getMillerDirection(Lattice self, double h, double k, double l) -> kvector_t
        kvector_t Lattice::getMillerDirection(double h, double k, double l) const

        Returns normalized direction corresponding to the given Miller indices. 

        """
        return _libBornAgainCore.Lattice_getMillerDirection(self, h, k, l)

    def volume(self):
        r"""
        volume(Lattice self) -> double
        double Lattice::volume() const

        Returns the volume of the unit cell. 

        """
        return _libBornAgainCore.Lattice_volume(self)

    def getReciprocalLatticeBasis(self, b1, b2, b3):
        r"""
        getReciprocalLatticeBasis(Lattice self, kvector_t b1, kvector_t b2, kvector_t b3)
        void Lattice::getReciprocalLatticeBasis(kvector_t &b1, kvector_t &b2, kvector_t &b3) const

        Returns the reciprocal basis vectors. 

        """
        return _libBornAgainCore.Lattice_getReciprocalLatticeBasis(self, b1, b2, b3)

    def getNearestLatticeVectorCoordinates(self, vector_in):
        r"""
        getNearestLatticeVectorCoordinates(Lattice self, kvector_t vector_in) -> ivector_t
        ivector_t Lattice::getNearestLatticeVectorCoordinates(const kvector_t vector_in) const

        Returns the nearest lattice point from a given vector. 

        """
        return _libBornAgainCore.Lattice_getNearestLatticeVectorCoordinates(self, vector_in)

    def getNearestReciprocalLatticeVectorCoordinates(self, vector_in):
        r"""
        getNearestReciprocalLatticeVectorCoordinates(Lattice self, kvector_t vector_in) -> ivector_t
        ivector_t Lattice::getNearestReciprocalLatticeVectorCoordinates(const kvector_t vector_in) const

        Returns the nearest reciprocal lattice point from a given vector. 

        """
        return _libBornAgainCore.Lattice_getNearestReciprocalLatticeVectorCoordinates(self, vector_in)

    def reciprocalLatticeVectorsWithinRadius(self, input_vector, radius):
        r"""
        reciprocalLatticeVectorsWithinRadius(Lattice self, kvector_t input_vector, double radius) -> vector_kvector_t
        std::vector< kvector_t > Lattice::reciprocalLatticeVectorsWithinRadius(const kvector_t input_vector, double radius) const

        Computes a list of reciprocal lattice vectors within a specified distance of a given vector. 

        """
        return _libBornAgainCore.Lattice_reciprocalLatticeVectorsWithinRadius(self, input_vector, radius)

    def setSelectionRule(self, p_selection_rule):
        r"""
        setSelectionRule(Lattice self, ISelectionRule p_selection_rule)
        void Lattice::setSelectionRule(const ISelectionRule &p_selection_rule)

        Sets a selection rule for the reciprocal vectors. 

        """
        return _libBornAgainCore.Lattice_setSelectionRule(self, p_selection_rule)

    @staticmethod
    def createCubicLattice(a):
        r"""createCubicLattice(double a) -> Lattice"""
        return _libBornAgainCore.Lattice_createCubicLattice(a)

    @staticmethod
    def createFCCLattice(a):
        r"""createFCCLattice(double a) -> Lattice"""
        return _libBornAgainCore.Lattice_createFCCLattice(a)

    @staticmethod
    def createHexagonalLattice(a, c):
        r"""createHexagonalLattice(double a, double c) -> Lattice"""
        return _libBornAgainCore.Lattice_createHexagonalLattice(a, c)

    @staticmethod
    def createHCPLattice(a, c):
        r"""createHCPLattice(double a, double c) -> Lattice"""
        return _libBornAgainCore.Lattice_createHCPLattice(a, c)

    @staticmethod
    def createTetragonalLattice(a, c):
        r"""createTetragonalLattice(double a, double c) -> Lattice"""
        return _libBornAgainCore.Lattice_createTetragonalLattice(a, c)

    @staticmethod
    def createBCTLattice(a, c):
        r"""createBCTLattice(double a, double c) -> Lattice"""
        return _libBornAgainCore.Lattice_createBCTLattice(a, c)

    def onChange(self):
        r"""
        onChange(Lattice self)
        void Lattice::onChange() override

        Action to be taken in inherited class when a parameter has changed. 

        """
        return _libBornAgainCore.Lattice_onChange(self)

# Register Lattice in _libBornAgainCore:
_libBornAgainCore.Lattice_swigregister(Lattice)

def Lattice_createCubicLattice(a):
    r"""Lattice_createCubicLattice(double a) -> Lattice"""
    return _libBornAgainCore.Lattice_createCubicLattice(a)

def Lattice_createFCCLattice(a):
    r"""Lattice_createFCCLattice(double a) -> Lattice"""
    return _libBornAgainCore.Lattice_createFCCLattice(a)

def Lattice_createHexagonalLattice(a, c):
    r"""Lattice_createHexagonalLattice(double a, double c) -> Lattice"""
    return _libBornAgainCore.Lattice_createHexagonalLattice(a, c)

def Lattice_createHCPLattice(a, c):
    r"""Lattice_createHCPLattice(double a, double c) -> Lattice"""
    return _libBornAgainCore.Lattice_createHCPLattice(a, c)

def Lattice_createTetragonalLattice(a, c):
    r"""Lattice_createTetragonalLattice(double a, double c) -> Lattice"""
    return _libBornAgainCore.Lattice_createTetragonalLattice(a, c)

def Lattice_createBCTLattice(a, c):
    r"""Lattice_createBCTLattice(double a, double c) -> Lattice"""
    return _libBornAgainCore.Lattice_createBCTLattice(a, c)

class Lattice2D(ICloneable, INode):
    r"""Proxy of C++ Lattice2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        r"""
        clone(Lattice2D self) -> Lattice2D
        virtual Lattice2D* Lattice2D::clone() const =0

        """
        return _libBornAgainCore.Lattice2D_clone(self)

    def length1(self):
        r"""
        length1(Lattice2D self) -> double
        virtual double Lattice2D::length1() const =0

        """
        return _libBornAgainCore.Lattice2D_length1(self)

    def length2(self):
        r"""
        length2(Lattice2D self) -> double
        virtual double Lattice2D::length2() const =0

        """
        return _libBornAgainCore.Lattice2D_length2(self)

    def latticeAngle(self):
        r"""
        latticeAngle(Lattice2D self) -> double
        virtual double Lattice2D::latticeAngle() const =0

        """
        return _libBornAgainCore.Lattice2D_latticeAngle(self)

    def unitCellArea(self):
        r"""
        unitCellArea(Lattice2D self) -> double
        virtual double Lattice2D::unitCellArea() const =0

        """
        return _libBornAgainCore.Lattice2D_unitCellArea(self)

    def rotationAngle(self):
        r"""
        rotationAngle(Lattice2D self) -> double
        double Lattice2D::rotationAngle() const

        """
        return _libBornAgainCore.Lattice2D_rotationAngle(self)

    def reciprocalBases(self):
        r"""
        reciprocalBases(Lattice2D self) -> Lattice2D::ReciprocalBases
        Lattice2D::ReciprocalBases Lattice2D::reciprocalBases() const

        """
        return _libBornAgainCore.Lattice2D_reciprocalBases(self)

    def setRotationEnabled(self, enabled):
        r"""
        setRotationEnabled(Lattice2D self, bool enabled)
        void Lattice2D::setRotationEnabled(bool enabled)

        """
        return _libBornAgainCore.Lattice2D_setRotationEnabled(self, enabled)
    __swig_destroy__ = _libBornAgainCore.delete_Lattice2D

# Register Lattice2D in _libBornAgainCore:
_libBornAgainCore.Lattice2D_swigregister(Lattice2D)

class BasicLattice(Lattice2D):
    r"""Proxy of C++ BasicLattice class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, length1, length2, angle, xi):
        r"""
        __init__(BasicLattice self, double length1, double length2, double angle, double xi) -> BasicLattice
        BasicLattice::BasicLattice(double length1, double length2, double angle, double xi)

        """
        _libBornAgainCore.BasicLattice_swiginit(self, _libBornAgainCore.new_BasicLattice(length1, length2, angle, xi))

    def clone(self):
        r"""
        clone(BasicLattice self) -> BasicLattice
        BasicLattice * BasicLattice::clone() const

        """
        return _libBornAgainCore.BasicLattice_clone(self)

    def accept(self, visitor):
        r"""
        accept(BasicLattice self, INodeVisitor visitor)
        void BasicLattice::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.BasicLattice_accept(self, visitor)

    def length1(self):
        r"""
        length1(BasicLattice self) -> double
        virtual double BasicLattice::length1() const

        """
        return _libBornAgainCore.BasicLattice_length1(self)

    def length2(self):
        r"""
        length2(BasicLattice self) -> double
        virtual double BasicLattice::length2() const

        """
        return _libBornAgainCore.BasicLattice_length2(self)

    def latticeAngle(self):
        r"""
        latticeAngle(BasicLattice self) -> double
        virtual double BasicLattice::latticeAngle() const

        """
        return _libBornAgainCore.BasicLattice_latticeAngle(self)

    def unitCellArea(self):
        r"""
        unitCellArea(BasicLattice self) -> double
        double BasicLattice::unitCellArea() const

        """
        return _libBornAgainCore.BasicLattice_unitCellArea(self)
    __swig_destroy__ = _libBornAgainCore.delete_BasicLattice

# Register BasicLattice in _libBornAgainCore:
_libBornAgainCore.BasicLattice_swigregister(BasicLattice)

class SquareLattice(Lattice2D):
    r"""Proxy of C++ SquareLattice class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, length, xi=0.0):
        r"""
        __init__(SquareLattice self, double length, double xi=0.0) -> SquareLattice
        SquareLattice::SquareLattice(double length, double xi=0.0)

        """
        _libBornAgainCore.SquareLattice_swiginit(self, _libBornAgainCore.new_SquareLattice(length, xi))

    def clone(self):
        r"""
        clone(SquareLattice self) -> SquareLattice
        SquareLattice * SquareLattice::clone() const

        """
        return _libBornAgainCore.SquareLattice_clone(self)

    def accept(self, visitor):
        r"""
        accept(SquareLattice self, INodeVisitor visitor)
        void SquareLattice::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.SquareLattice_accept(self, visitor)

    def length1(self):
        r"""
        length1(SquareLattice self) -> double
        virtual double SquareLattice::length1() const

        """
        return _libBornAgainCore.SquareLattice_length1(self)

    def length2(self):
        r"""
        length2(SquareLattice self) -> double
        virtual double SquareLattice::length2() const

        """
        return _libBornAgainCore.SquareLattice_length2(self)

    def latticeAngle(self):
        r"""
        latticeAngle(SquareLattice self) -> double
        double SquareLattice::latticeAngle() const

        """
        return _libBornAgainCore.SquareLattice_latticeAngle(self)

    def unitCellArea(self):
        r"""
        unitCellArea(SquareLattice self) -> double
        double SquareLattice::unitCellArea() const

        """
        return _libBornAgainCore.SquareLattice_unitCellArea(self)
    __swig_destroy__ = _libBornAgainCore.delete_SquareLattice

# Register SquareLattice in _libBornAgainCore:
_libBornAgainCore.SquareLattice_swigregister(SquareLattice)

class HexagonalLattice(Lattice2D):
    r"""Proxy of C++ HexagonalLattice class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, length, xi):
        r"""
        __init__(HexagonalLattice self, double length, double xi) -> HexagonalLattice
        HexagonalLattice::HexagonalLattice(double length, double xi)

        """
        _libBornAgainCore.HexagonalLattice_swiginit(self, _libBornAgainCore.new_HexagonalLattice(length, xi))

    def clone(self):
        r"""
        clone(HexagonalLattice self) -> HexagonalLattice
        HexagonalLattice * HexagonalLattice::clone() const

        """
        return _libBornAgainCore.HexagonalLattice_clone(self)

    def accept(self, visitor):
        r"""
        accept(HexagonalLattice self, INodeVisitor visitor)
        void HexagonalLattice::accept(INodeVisitor *visitor) const final

        Calls the  INodeVisitor's visit method. 

        """
        return _libBornAgainCore.HexagonalLattice_accept(self, visitor)

    def length1(self):
        r"""
        length1(HexagonalLattice self) -> double
        virtual double HexagonalLattice::length1() const

        """
        return _libBornAgainCore.HexagonalLattice_length1(self)

    def length2(self):
        r"""
        length2(HexagonalLattice self) -> double
        virtual double HexagonalLattice::length2() const

        """
        return _libBornAgainCore.HexagonalLattice_length2(self)

    def latticeAngle(self):
        r"""
        latticeAngle(HexagonalLattice self) -> double
        double HexagonalLattice::latticeAngle() const

        """
        return _libBornAgainCore.HexagonalLattice_latticeAngle(self)

    def unitCellArea(self):
        r"""
        unitCellArea(HexagonalLattice self) -> double
        double HexagonalLattice::unitCellArea() const

        """
        return _libBornAgainCore.HexagonalLattice_unitCellArea(self)
    __swig_destroy__ = _libBornAgainCore.delete_HexagonalLattice

# Register HexagonalLattice in _libBornAgainCore:
_libBornAgainCore.HexagonalLattice_swigregister(HexagonalLattice)


def CreateFCCLattice(lattice_constant, orientation):
    r"""
    CreateFCCLattice(double lattice_constant, ILatticeOrientation orientation) -> Lattice
    Lattice LatticeUtils::CreateFCCLattice(double lattice_constant, const ILatticeOrientation &orientation)

    """
    return _libBornAgainCore.CreateFCCLattice(lattice_constant, orientation)

def CreateHCPLattice(a, c, orientation):
    r"""
    CreateHCPLattice(double a, double c, ILatticeOrientation orientation) -> Lattice
    Lattice LatticeUtils::CreateHCPLattice(double a, double c, const ILatticeOrientation &orientation)

    """
    return _libBornAgainCore.CreateHCPLattice(a, c, orientation)

def CreateBCTLattice(a, c, orientation):
    r"""
    CreateBCTLattice(double a, double c, ILatticeOrientation orientation) -> Lattice
    Lattice LatticeUtils::CreateBCTLattice(double a, double c, const ILatticeOrientation &orientation)

    """
    return _libBornAgainCore.CreateBCTLattice(a, c, orientation)
class Material(object):
    r"""


    A wrapper for underlying material implementation

    C++ includes: Material.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Material self, Material material) -> Material
        __init__(Material self, Material material) -> Material
        Material::Material(std::unique_ptr< BaseMaterialImpl > material_impl)

        Creates material with particular material implementation. 

        """
        _libBornAgainCore.Material_swiginit(self, _libBornAgainCore.new_Material(*args))

    def inverted(self):
        r"""
        inverted(Material self) -> Material
        Material Material::inverted() const

        Constructs a material with inverted magnetization. 

        """
        return _libBornAgainCore.Material_inverted(self)

    def refractiveIndex(self, wavelength):
        r"""
        refractiveIndex(Material self, double wavelength) -> complex_t
        complex_t Material::refractiveIndex(double wavelength) const

        Returns refractive index. 

        """
        return _libBornAgainCore.Material_refractiveIndex(self, wavelength)

    def refractiveIndex2(self, wavelength):
        r"""
        refractiveIndex2(Material self, double wavelength) -> complex_t
        complex_t Material::refractiveIndex2(double wavelength) const

        Returns squared refractive index. 

        """
        return _libBornAgainCore.Material_refractiveIndex2(self, wavelength)

    def isScalarMaterial(self):
        r"""
        isScalarMaterial(Material self) -> bool
        bool Material::isScalarMaterial() const

        Indicates whether the interaction with the material is scalar. This means that different polarization states will be diffracted equally 

        """
        return _libBornAgainCore.Material_isScalarMaterial(self)

    def isMagneticMaterial(self):
        r"""
        isMagneticMaterial(Material self) -> bool
        bool Material::isMagneticMaterial() const

        """
        return _libBornAgainCore.Material_isMagneticMaterial(self)

    def getName(self):
        r"""
        getName(Material self) -> std::string
        std::string Material::getName() const

        Returns the name of material. 

        """
        return _libBornAgainCore.Material_getName(self)

    def magnetization(self):
        r"""
        magnetization(Material self) -> kvector_t
        kvector_t Material::magnetization() const

        Get the magnetization (in A/m) 

        """
        return _libBornAgainCore.Material_magnetization(self)

    def materialData(self):
        r"""
        materialData(Material self) -> complex_t
        complex_t Material::materialData() const

        Returns underlying material data. The units of returned values are the same as the ones passed to material factory functions 

        """
        return _libBornAgainCore.Material_materialData(self)

    def isEmpty(self):
        r"""
        isEmpty(Material self) -> bool
        bool Material::isEmpty() const

        Returns true if material underlying data is nullptr. 

        """
        return _libBornAgainCore.Material_isEmpty(self)

    def isDefaultMaterial(self):
        r"""
        isDefaultMaterial(Material self) -> bool
        bool Material::isDefaultMaterial() const

        Returns true if material has refractive index of (1.0, 0.0) and zero magnetization. 

        """
        return _libBornAgainCore.Material_isDefaultMaterial(self)

    def scalarSubtrSLD(self, wavevectors):
        r"""
        scalarSubtrSLD(Material self, WavevectorInfo wavevectors) -> complex_t
        complex_t Material::scalarSubtrSLD(const WavevectorInfo &wavevectors) const

        Returns (  $ \\pi/\\lambda^2 $ - sld), sld (in  $nm^{-2}$) being the scattering length density 

        """
        return _libBornAgainCore.Material_scalarSubtrSLD(self, wavevectors)

    def rotatedMaterial(self, transform):
        r"""
        rotatedMaterial(Material self, Transform3D const & transform) -> Material
        Material Material::rotatedMaterial(const Transform3D &transform) const

        """
        return _libBornAgainCore.Material_rotatedMaterial(self, transform)
    __swig_destroy__ = _libBornAgainCore.delete_Material

# Register Material in _libBornAgainCore:
_libBornAgainCore.Material_swigregister(Material)


def HomogeneousMaterial(*args):
    r"""
    HomogeneousMaterial() -> Material
    HomogeneousMaterial(std::string const & name, double delta, double beta, kvector_t magnetization={}) -> Material
    HomogeneousMaterial(std::string const & name, complex_t refractive_index, kvector_t magnetization={}) -> Material
    BA_CORE_API_ Material HomogeneousMaterial(const std::string &name, complex_t refractive_index, kvector_t magnetization={})

    Constructs a material with  name,  refractive_index and  magnetization (in A/m). Alternatively,  $\\delta$ and  $\\beta$ for refractive index  $n = 1 - \\delta + i \\beta$ can be passed directly. With no parameters given, constructs default (vacuum) material with  $n = 1$ and zero magnetization. 

    """
    return _libBornAgainCore.HomogeneousMaterial(*args)

def MaterialBySLD(*args):
    r"""
    MaterialBySLD() -> Material
    MaterialBySLD(std::string const & name, double sld_real, double sld_imag, kvector_t magnetization={}) -> Material
    BA_CORE_API_ Material MaterialBySLD(const std::string &name, double sld_real, double sld_imag, kvector_t magnetization={})

    Constructs a wavelength-independent material with a given complex-valued scattering length density (SLD). SLD values for a wide variety of materials can be found on https://sld-calculator.appspot.com/ and https://www.ncnr.nist.gov/resources/activation/ By convention, SLD imaginary part is treated as negative by default, which corresponds to attenuation of the signal. With no parameters given, MaterialBySLD constructs default (vacuum) material with zero sld and zero magnetization.

    Parameters:
    -----------

    name: 
    material name

    sld_real: 
    real part of the scattering length density, inverse square angstroms

    sld_imag: 
    imaginary part of the scattering length density, inverse square angstroms

    magnetization: 
    magnetization (in A/m) 

    """
    return _libBornAgainCore.MaterialBySLD(*args)
class SampleBuilderFactory(SampleBuilderFactoryTemp):
    r"""


    Factory to create standard pre-defined samples

    C++ includes: SampleBuilderFactory.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(SampleBuilderFactory self) -> SampleBuilderFactory
        SampleBuilderFactory::SampleBuilderFactory()

        """
        _libBornAgainCore.SampleBuilderFactory_swiginit(self, _libBornAgainCore.new_SampleBuilderFactory())

    def createSample(self, name):
        r"""
        createSample(SampleBuilderFactory self, std::string const & name) -> MultiLayer
        MultiLayer * SampleBuilderFactory::createSample(const std::string &name)

        Retrieves a SampleBuilder from the registry, does the build, and returns the result. 

        """
        return _libBornAgainCore.SampleBuilderFactory_createSample(self, name)
    __swig_destroy__ = _libBornAgainCore.delete_SampleBuilderFactory

# Register SampleBuilderFactory in _libBornAgainCore:
_libBornAgainCore.SampleBuilderFactory_swigregister(SampleBuilderFactory)

class SimulationFactory(SimulationFactoryTemp):
    r"""


    Registry to create standard pre-defined simulations. Used in functional tests, performance measurements, etc.

    C++ includes: SimulationFactory.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(SimulationFactory self) -> SimulationFactory
        SimulationFactory::SimulationFactory()

        """
        _libBornAgainCore.SimulationFactory_swiginit(self, _libBornAgainCore.new_SimulationFactory())
    __swig_destroy__ = _libBornAgainCore.delete_SimulationFactory

# Register SimulationFactory in _libBornAgainCore:
_libBornAgainCore.SimulationFactory_swigregister(SimulationFactory)


def ScanRelativeResolution(distribution, rel_dev):
    """
    Creates a scan resolution from the given distribution and
    relative deviation values (that is, the ratios of standard
    deviations and means).
    :param distribution: bornagain.RangedDistribution object
    :param rel_dev: either single-valued or a numpy array.
                    In the latter case should coinside in
                    size with later used mean values array.
    :return: bornagain.ScanResolution object
    """
    return ScanResolution_scanRelativeResolution(distribution, rel_dev)

def ScanAbsoluteResolution(distribution, std_dev):
    """
    Creates a scan resolution from the given distribution and
    standard deviation values.
    :param distribution: bornagain.RangedDistribution object
    :param std_dev: either single-valued or a numpy array.
                    In the latter case should coinside in
                    size with later used mean values array.
    :return: bornagain.ScanResolution object
    """
    return ScanResolution_scanAbsoluteResolution(distribution, std_dev)


class ParameterPoolIterator(object):

    def __init__(self, pool):
        self.pool = pool
        self.index = -1

    def __iter__(self):
        return self

    def next(self):
        self.index += 1
        if self.index < self.pool.size():
            return self.pool[self.index]
        else:
            raise StopIteration

    def __next__(self):
        return self.next()


class SimulationBuilderWrapper(PyBuilderCallback):
    def __init__(self, f):
        super(SimulationBuilderWrapper, self).__init__()
        self.f_ = f

    def create_par_dict(self, pars):
        """
        Convertion of ba.Parameters to Python dictionary
        """
        pars_dict = dict()
        for index, p in enumerate(pars):
            pars_dict[p.name()] = p.value
        return pars_dict

    def build_simulation(self, obj):
        simulation = self.f_(self.create_par_dict(obj))
        simulation.__disown__()
        return simulation




class ObserverCallbackWrapper(PyObserverCallback):
    def __init__(self, callback):
        super(ObserverCallbackWrapper, self).__init__()
        self.callback_ = callback

    def update(self, fit_objective):
        return self.callback_(fit_objective)



def MaterialProfile(multilayer, n_points=400, z_min=None, z_max=None):
    """
    Creates a material profile from the given multilayer. If no limits are given,
    it will provide sensible default values, considering the included particles and
    interface roughnesses.
    :param multilayer: bornagain.MultiLayer object
    :param n_points: number of points to generate
    :param z_min: starting value for z
    :param z_max: ending value for z
    :return: numpy arrays containing z positions and the complex material values in those positions
    """
    def_z_min, def_z_max = DefaultMaterialProfileLimits(multilayer)
    z_min = def_z_min if z_min is None else z_min
    z_max = def_z_max if z_max is None else z_max
    z_points = GenerateZValues(n_points, z_min, z_max)
    material_values = MaterialProfile_cpp(multilayer, n_points, z_min, z_max)
    return (z_points, material_values)


